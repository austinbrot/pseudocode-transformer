let a , b , c , d , e be integers	int a , b , c , d , e ;
read a	cin >> a ;
read b	cin >> b ;
read c	cin >> c ;
read d	cin >> d ;
read e	cin >> e ;
if ( a + b + c + d + e ) modulo 5 is not 0 or ( a + b + c + d + e ) / 5 is 0	if ( ( a + b + c + d + e ) % 5 != 0 || ( a + b + c + d + e ) / 5 == 0 )
print - 1	cout << - 1 << endl ;
else do the following	else
print ( a + b + c + d + e ) / 5	cout << ( a + b + c + d + e ) / 5 << endl ;
declare integer variable sum = 0 and an array of integers arr with size 5	int arr [ 5 ] , sum = 0 ;
for i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
increase sum by arr [ i ]	sum += arr [ i ] ;
float ans = sum / 5	float ans = float ( sum ) / 5 ;
if sum = 0	if ( sum == 0 )
print - 1	cout << - 1 << endl ;
else if ans = int ( ans )	else if ( ans == int ( ans ) )
print int ( ans )	cout << int ( ans ) << endl ;
else	else
print - 1	cout << - 1 << endl ;
cmp is a boolean function with integer arguments a and b	bool cmp ( int a , int b )
return a < b	return a < b ;
declare integer variable sum = 0	int sum = 0 ;
create integer n	int n ;
for integer i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read n	cin >> n ;
increase sum by n	sum += n ;
if sum = 0	if ( sum == 0 )
print - 1	cout << - 1 << endl ;
if sum % 5 = 0	if ( sum % 5 == 0 )
print sum / 5	cout << sum / 5 << endl ;
else	else
print - 1	cout << - 1 << endl ;
x , i = int	int x , i ;
sum = int with sum = 0	int sum = 0 ;
for i = 0 to 5	for ( i = 0 ; i < 5 ; i ++ )
read x	cin >> x ;
add x to sum	sum = sum + x ;
if sum is not a multiple of or if sum equals 0	if ( sum % 5 != 0 || sum == 0 )
print " - 1 "	cout << " -1 " << endl ;
else	else
print sum / 5	cout << sum / 5 << endl ;
create int sum and a , set sum to 0	int sum = 0 , a ;
for i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read a	cin >> a ;
set sum to sum + a	sum += a ;
if sum equal to 0	if ( sum == 0 )
print - 1	cout << - 1 << endl ;
else if sum mod 5 = 0	else if ( sum % 5 == 0 )
print sum / 5 and a newline	cout << sum / 5 << endl ;
otherwise	else
print - 1	cout << - 1 << endl ;
create int a and i	int a , i ;
set sum to 0	int sum = 0 ;
for i = 0 to 5 exclusive	for ( i = 0 ; i < 5 ; i ++ )
read a	cin >> a ;
sum = sum + a	sum = sum + a ;
if sum mod 5 is different from 0 or sum = 0	if ( sum % 5 != 0 || sum == 0 )
print - 1	cout << " -1 " << endl ;
else	else
print sum / 5 and a newline	cout << sum / 5 << endl ;
create int array a of length 1005	int a [ 1005 ] ;
ans = 0	int ans = 0 ;
for i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read a [ i ]	cin >> a [ i ] ;
ans = ans + a [ i ]	ans += a [ i ] ;
if ans equal to 0	if ( ans == 0 )
print - 1	cout << " -1 " << endl ;
else if ans mod 5 = 0	else if ( ans % 5 == 0 )
print ans / 5 and a newline	cout << ans / 5 << endl ;
else	else
print - 1	cout << " -1 " << endl ;
declare integers sum , c1 , c2 , c3 , c4 and c5	int sum , c1 , c2 , c3 , c4 , c5 ;
read c1 , c2 , c3 , c4 and c5	cin >> c1 >> c2 >> c3 >> c4 >> c5 ;
sum = c1 + c2 + c3 + c4 + c5	sum = c1 + c2 + c3 + c4 + c5 ;
if sum ! = 0 & & sum % 5 = 0	if ( sum != 0 && sum % 5 == 0 )
print sum / 5	cout << sum / 5 << endl ;
else	else
print " - 1 "	cout << " -1 " << endl ;
a , b , c , d , e = int	int a , b , c , d , e ;
loop while reading a then b then c then d then e	while ( cin >> a >> b >> c >> d >> e )
ans = int with ans = 0	int ans = 0 ;
set ans to a + b + c + d + e	ans = a + b + c + d + e ;
if ans is a multiple of 5 and not 0	if ( ans % 5 == 0 && ans != 0 )
print ans / 5	cout << ans / 5 << endl ;
else	else
print - 1	cout << - 1 << endl ;
create integers a , b , c , d , e and sum	int a , b , c , d , e , sum ;
read a , b , c , d and e	cin >> a >> b >> c >> d >> e ;
set sum to a + b + c + d + e	sum = a + b + c + d + e ;
if sum > 0 & & sum % 5 = 0	if ( sum > 0 && sum % 5 == 0 )
print sum / 5	cout << sum / 5 << endl ;
else	else
print " - 1 "	cout << " -1 " << endl ;
create int x and sum , sum = 0	int x , sum = 0 ;
for i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read x	cin >> x ;
sum = sum + x	sum = sum + x ;
if sum mod 5 is different from 0 or sum = 0	if ( sum % 5 != 0 || sum == 0 )
print - 1	cout << - 1 << endl ;
else	else
print sum / 5 and a newline	cout << sum / 5 << endl ;
declare integer sum = 0 and an array of integers a with size 5	int a [ 5 ] , sum = 0 ;
for integer i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increase sum by a [ i ]	sum += a [ i ] ;
if sum modulo 5 = 0 & & sum is not 0	if ( sum % 5 == 0 && sum != 0 )
print sum / 5	cout << sum / 5 << endl ;
else	else
print - 1	cout << - 1 << endl ;
create int a , n and total with n = 5 and total = 0	int a , n = 5 , total = 0 ;
while decrement n	while ( n -- )
read a	cin >> a ;
set total to total + a	total += a ;
if total = 0	if ( total == 0 )
print - 1	cout << - 1 ;
else if total mod 5 = 0	else if ( total % 5 == 0 )
print total / 5	cout << ( total / 5 ) ;
otherwise	else
print - 1	cout << - 1 ;
print a newline	cout << endl ;
declare integer variables c1 , c2 , c3 , c4 and c5	int c1 , c2 , c3 , c4 , c5 ;
read c1 , c2 , c3 , c4 and c5	cin >> c1 >> c2 >> c3 >> c4 >> c5 ;
create integer m = c1 + c2 + c3 + c4 + c5	int m = c1 + c2 + c3 + c4 + c5 ;
if m modulo 5 is 0 and m is not 0	if ( m % 5 == 0 && m != 0 )
print m / 5	cout << m / 5 << endl ;
else	else
print - 1	cout << - 1 << endl ;
create long long array arr with 1000000 elements	long long arr [ 1000000 ] ;
create set of long longs s	set < long long > s ;
mm = map from string to string	map < string , string > mm ;
declare string array ss with size 100000	string ss [ 100000 ] ;
declare chara array ch with size 100000	char ch [ 100000 ] ;
create integers a and res where res = 0	int a , res = 0 ;
for integer i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read a	cin >> a ;
increase res by a	res += a ;
if res = 0 | | res % 5 ! = 0	if ( res == 0 || res % 5 != 0 )
print - 1	cout << - 1 << endl ;
print res / 5	cout << res / 5 << endl ;
declare integer variables a and sum	int a , sum ;
for integer i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read a	cin >> a ;
increase sum by a	sum += a ;
if sum = 0	if ( sum == 0 )
print - 1	cout << - 1 << endl ;
if sum % 5 = 0	if ( sum % 5 == 0 )
print sum / 5	cout << sum / 5 << endl ;
print - 1	cout << - 1 << endl ;
create integers a , b , c , d and e	int a , b , c , d , e ;
read a , b , c , d and e	cin >> a >> b >> c >> d >> e ;
declare integer s = sum of a , b , c , d and e	int s = a + b + c + d + e ;
if s modulo 5 is not 0 or s is 0	if ( s % 5 != 0 || s == 0 )
print " - 1 "	cout << " -1 " << endl ;
else	else
print s / 5	cout << s / 5 << endl ;
let s , c be integers with s equal to 0	int s = 0 , c ;
for i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
read c	cin >> c ;
increase s by c	s += c ;
if s is not a multiple of 5 or not s do the following	if ( s % 5 || ! s )
print - 1	cout << - 1 << endl ;
else do the following	else
print s / 5	cout << s / 5 << endl ;
set int s to 0 , c	int s = 0 , c ;
for i = 0 to less than 5 do the following	for ( int i = 0 ; i < 5 ; i ++ )
read c	cin >> c ;
s equals s plus c	s += c ;
if s modulo 5 or not s is true	if ( s % 5 || ! s )
output - 1	cout << - 1 << endl ;
else	else
output s / 5	cout << s / 5 << endl ;
MOD = constant integer with value of 1e9 + 7	const int MOD = 1e9 + 7 ;
in function pow that returns a long long and takes arguments a , b = long long	long long pow ( long long a , long long b )
ans = long long with value of 1	long long ans = 1 ;
while b is not 0	while ( b )
if b bitwise and 1 is true then set ans to ( ans * a ) mod MOD	if ( b & 1 ) ans = ( ans * a ) % MOD ;
set b to b / 2	b /= 2 ;
set a to ( a * a ) mod MOD	a = ( a * a ) % MOD ;
return ans	return ans ;
c1 , c2 , c3 , c4 , c5 = integers	int c1 , c2 , c3 , c4 , c5 ;
read c1 , c2 , c3 , c4 and c5	cin >> c1 >> c2 >> c3 >> c4 >> c5 ;
s = integer with value of c1 + c2 + c3 + c4 + c5	int s = c1 + c2 + c3 + c4 + c5 ;
if s equals 0	if ( s == 0 )
print - 1	cout << " -1 " << endl ;
else	else
if s mod 5 equals 0	if ( s % 5 == 0 )
print s / 5	cout << s / 5 << endl ;
else	else
print - 1	cout << " -1 " << endl ;
x , r = integer with r = 0	int x , r = 0 ;
for i = 0 to 4	for ( int i = 0 ; i < 5 ; ++ i )
read x	cin >> x ;
r = r + x	r += x ;
if ( r modulo 5 is 0 and r > 0 ) , print r / 5 else print - 1	cout << ( ( r % 5 == 0 && r > 0 ) ? r / 5 : - 1 ) << endl ;
integers = a , b , c , d , e	int a , b , c , d , e ;
read a , b , c , d , e	cin >> a >> b >> c >> d >> e ;
set int sum to a + b + c + d + e	int sum = a + b + c + d + e ;
if sum is 0 then do the following	if ( sum == 0 )
output - 1	cout << - 1 << endl ;
else if sum modulo 5 is 0 then	else if ( sum % 5 == 0 )
output sum / 5	cout << sum / 5 << endl ;
else	else
output - 1	cout << - 1 << endl ;
a , b , c , d , e = integers	int a , b , c , d , e ;
Read a	cin >> a ;
Read b	cin >> b ;
Read c	cin >> c ;
Read d	cin >> d ;
Read e	cin >> e ;
if ( a + b + c + d + e ) modulo 5 is not 0 OR ( a + b + c + d + e ) / 5 is 0	if ( ( a + b + c + d + e ) % 5 != 0 || ( a + b + c + d + e ) / 5 == 0 )
print - 1 and a new line	cout << - 1 << endl ;
else do the following	else
print ( a + b + c + d + e ) / 5 and a new line	cout << ( a + b + c + d + e ) / 5 << endl ;
set const int N to 1e6 + 5	const int N = 1e6 + 5 ;
set int s to 0	int s = 0 ;
for i = 0 to i is less than 5 do the following	for ( int i = 0 ; i < 5 ; i ++ )
integers = x	int x ;
read x	cin >> x ;
s equals s plus x	s += x ;
if s is 0 or ( s modulo 5 ) is not 0 , then do the following	if ( s == 0 || ( s % 5 ) )
output - 1	cout << " -1 " << endl ;
else	else
output s / 5	cout << s / 5 << endl ;
c1 , c2 , c3 , c4 , c5 = int	int c1 , c2 , c3 , c4 , c5 ;
loop while reading c1 then c2 then c3 then c4 then c5	while ( cin >> c1 >> c2 >> c3 >> c4 >> c5 )
s = int with s = 0	int s = 0 ;
set s to c1 + c2 + c3 + c4 + c5	s = c1 + c2 + c3 + c4 + c5 ;
if s equals 0	if ( s == 0 )
print " - 1 "	cout << " -1\n " ;
else	else
if s is a multiple of 5	if ( s % 5 == 0 )
print s / 5	cout << s / 5 << " \n " ;
else	else
print " - 1 "	cout << " -1\n " ;
set int a [ 6 ] , i , j , sum to 0	int a [ 6 ] , i , j , sum = 0 ;
for = 0 to less than 5 do the following	for ( i = 0 ; i < 5 ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set sum to sum + a [ i ]	sum = sum + a [ i ] ;
set int res to sum / 5	int res = sum / 5 ;
if sum = 0 or sum modulo 5 is not equal to 0 then do	if ( sum == 0 || sum % 5 != 0 )
output - 1	cout << " -1 " << endl ;
else if sum modulo 5 equals 0	else if ( sum % 5 == 0 )
output res	cout << res << endl ;
create integer array c with size 10	int c [ 10 ] ;
create integers b , sum , i with b = 0 , sum = 0 , i = 0	int b = 0 , sum = 0 , i = 0 ;
for i = 0 to 5 exclusive	for ( i = 0 ; i < 5 ; i ++ )
read c [ i ]	cin >> c [ i ] ;
set sum to sum + c [ i ]	sum = sum + c [ i ] ;
if sum is 0	if ( sum == 0 )
print " - 1 " print newline	cout << " -1 " << endl ;
else if sum % 5 is 0	else if ( sum % 5 == 0 )
print sum / 5 print newline	cout << sum / 5 << endl ;
else	else
print " - 1 " print newline	cout << " -1 " << endl ;
num = integer array of size 5 , sum = integer with sum = 0	int num [ 5 ] , sum = 0 ;
for i = 0 to 4	for ( int i = 0 ; i < 5 ; i ++ )
read num [ i ]	cin >> num [ i ] ;
sum = sum + num [ i ]	sum += num [ i ] ;
if sum modulo 5 is 0 and sum is not 0	if ( sum % 5 == 0 && sum != 0 )
print sum / 5	cout << sum / 5 << endl ;
else	else
print - 1	cout << " -1 " << endl ;
create integers a , b , c , d , e	int a , b , c , d , e ;
read a	cin >> a ;
read b	cin >> b ;
read c	cin >> c ;
read d	cin >> d ;
read e	cin >> e ;
if ( a + b + c + d + e ) % 5 is not 0 or ( a + b + c + d + e ) / 5 is 0	if ( ( a + b + c + d + e ) % 5 != 0 || ( a + b + c + d + e ) / 5 == 0 )
print - 1 print newline	cout << - 1 << endl ;
else	else
print ( a + b + c + d + e ) / 5 print newline	cout << ( a + b + c + d + e ) / 5 << endl ;
declare function fastIo with return type void	void fastIo ( ) { }
call function fastIo	fastIo ( ) ;
create integer sum = 0	int sum = 0 ;
for i = 0 to 5 exclusive	for ( int i = 0 ; i < 5 ; i ++ )
let temp be int	int temp ;
read temp	cin >> temp ;
add temp to sum	sum += temp ;
if ( sum mod 5 equals 0 ) and sum is greater or equal to 5	if ( sum % 5 == 0 && sum >= 5 )
print sum divided by 5	cout << sum / 5 << endl ;
else	else
print " - 1 "	cout << " -1 " << endl ;
declare integers n , m	int n , m ;
declare integer count = 0	int count = 0 ;
read n and m	cin >> n >> m ;
for a = 0 , increment a	for ( int a = 0 ; ; a ++ )
if a * a is greater than n , end loop	if ( a * a > n ) break ;
for b = 0 , incrementing b	for ( int b = 0 ; ; b ++ )
if a + b * b is greater than m , end loop	if ( a + b * b > m ) break ;
if a * a + b is n and a + b * b is m , increment count	if ( a * a + b == n && a + b * b == m ) count ++ ;
print count and ' \ n '	cout << count << ' \n ' ;
declare long long int variables n and m	long long int n , m ;
read standard input to n and m	cin >> n >> m ;
create long long integer c = 0	long long int c = 0 ;
for i = 0 to 1000 inclusive	for ( long long int i = 0 ; i <= 1000 ; i ++ )
in a for loop , change j from 0 to 1000 inclusive	for ( long long int j = 0 ; j <= 1000 ; j ++ )
if i * i + j = n and i + j * j is equal to m , add 1 to the variable c	if ( i * i + j == n && i + j * j == m ) { c ++ ; }
print c and " \ n " to the standard output	cout << c << " \n " ;
n , m = integers	int n , m ;
pair1 , pair2 = integers with both having value of 0	int pair1 = 0 , pair2 = 0 ;
min , max = integers	int min , max ;
count = integer with value of 0	int count = 0 ;
read n and m	cin >> n >> m ;
if n is greater than m	if ( n > m )
set max to n	max = n ;
set min to m	min = m ;
else	else
set max to m	max = m ;
set min to n	min = n ;
for i = 0 to max inclusive	for ( int i = 0 ; i <= max ; i ++ )
for j = max to 0 inclusive decreasing	for ( int j = max ; j >= 0 ; j -- )
if ( i * i ) + j equals n and i + ( j * j ) equals m then add 1 to count	if ( ( ( i * i ) + j == n ) && ( i + ( j * j ) == m ) ) { count ++ ; }
print count	cout << count << endl ;
declare new int variables n and m	int n , m ;
read n and m from the user input	cin >> n >> m ;
create new integer called cnt with value 0	int cnt = 0 ;
for i from 0 to n inclusive incrementing i	for ( int i = 0 ; i * i <= n ; i ++ )
new integer variable k = n - i * i	int k = n - i * i ;
increment cnt by one if k squared + i = m	if ( k * k + i == m ) { cnt ++ ; }
print cnt and ' \ n '	cout << cnt << ' \n ' ;
let l , n , i , j , m , and cnt be ints with cnt = 0	int l , n , i , j , m , cnt = 0 ;
read n and m	cin >> n >> m ;
for i = 0 to 1000 inclusive	for ( i = 0 ; i <= 1000 ; i ++ )
for j = 0 to 1000 inclusive	for ( j = 0 ; j <= 1000 ; j ++ )
if i * i + j is n and i + j * j is m then increment cnt	if ( ( i * i + j == n ) && ( i + j * j == m ) ) cnt ++ ;
print cnt	cout << cnt << endl ;
create ints n and m	int n , m ;
read n and m	cin >> n >> m ;
let p = 0 be an integer	int p = 0 ;
for a = 0 to a = 1000 exclusive	for ( int a = 0 ; a < 1000 ; a ++ )
for b = 0 to b = 1000 exclusive	for ( int b = 0 ; b < 1000 ; b ++ )
if a * a + b equals n and a + b * b equals m then increment p	if ( a * a + b == n && a + b * b == m ) { p ++ ; }
print p	cout << p << endl ;
declare integers n , m , i , x , a , b , c = 0	int n , m , i , x , a , b , c = 0 ;
read n , m	cin >> n >> m ;
let x be square root of n	x = sqrt ( n ) ;
for i = 0 to x inclusive	for ( i = 0 ; i <= x ; i ++ )
let b be n - i * i	b = n - i * i ;
let a be m - b * b	a = m - b * b ;
if a is i , increment c	if ( a == i ) { c ++ ; }
print c and newline	cout << c << endl ;
new integer constant M = 100000 + 5	const int M = 100000 + 5 ;
declare new integers n and m	int n , m ;
read from the input to n and m	cin >> n >> m ;
create variable ans = 0 with type int	int ans = 0 ;
for integer a = 0 to 1000 inclusive	for ( int a = 0 ; a <= 1000 ; a ++ )
for integer b = 0 to 1000 inclusive incrementing b	for ( int b = 0 ; b <= 1000 ; b ++ )
if a * a + b = n and a + b * b is equal to m , increment ans	if ( a * a + b == n && a + b * b == m ) { ans ++ ; }
print ans	cout << ans << endl ;
a , b , count , i , c and y are integers with count = 0	int a , b , count = 0 , i , c , y ;
read user input to a and b	cin >> a >> b ;
assign the square root of a to c	c = sqrt ( a ) ;
start for loop from i = 0 to c inclusive	for ( i = 0 ; i <= c ; i ++ )
change the value of y to a - ( i * i )	y = ( a - ( i * i ) ) ;
if i + y squared is equal to b , increment count	if ( i + ( y * y ) == b ) { count ++ ; }
print count	cout << count << endl ;
a = two dimensional int array of sizes 1001 and 1001	int a [ 1001 ] [ 1001 ] ;
n , m , i , j , cnt = int with cnt = 0	int n , m , i , j , cnt = 0 ;
read n then m	cin >> n >> m ;
for i = 0 to n inclusive	for ( i = 0 ; i <= n ; i ++ )
for j = 0 to m inclusive	for ( j = 0 ; j <= m ; j ++ )
if i * i + j is n and i + j * j is m set a [ i ] [ j ] to 1	if ( i * i + j == n && i + j * j == m ) a [ i ] [ j ] = 1 ;
for i = 0 to 1001	for ( i = 0 ; i < 1001 ; i ++ )
for j = 0 to 1001	for ( j = 0 ; j < 1001 ; j ++ )
if a [ i ] [ j ] increment cnt	if ( a [ i ] [ j ] ) cnt ++ ;
print cnt	cout << cnt << endl ;
n , m = integers	int n , m ;
ans = integer with ans = 0	int ans = 0 ;
read n , m	cin >> n >> m ;
for i = 0 to 1000	for ( int i = 0 ; i <= 1000 ; i ++ )
for j = 0 to 1000	for ( int j = 0 ; j <= 1000 ; j ++ )
if ( ( ( i * i ) + j ) is n and ( i + ( j * j ) ) is m ) , increment ans	if ( ( ( i * i ) + j ) == n && ( i + ( j * j ) ) == m ) { ans ++ ; }
print ans	cout << ans << endl ;
TESTS = 1	int TESTS = 1 ;
while decremented TESTS is not 0	while ( TESTS -- )
count = 0 , n , m , i , j = int	int count = 0 , n , m , i , j ;
read n , m	cin >> n >> m ;
for i = 0 to sqrt ( n ) inclusive	for ( i = 0 ; i <= sqrt ( n ) ; i ++ )
for j = 0 to sqrt ( m ) inclusive	for ( j = 0 ; j <= sqrt ( m ) ; j ++ )
if i * i + j is n and i + j * j is m increment count	if ( i * i + j == n && i + j * j == m ) count ++ ;
print count	cout << count << ' \n ' ;
N , M = integers	int N , M ;
read N , M	cin >> N >> M ;
ans = integer with ans = 0	int ans = 0 ;
for i = 0 to 1000	for ( int i = 0 ; i < 1001 ; ++ i )
for j = 0 to 1000	for ( int j = 0 ; j < 1001 ; ++ j )
if ( ( i * i + j is N ) and ( j * j + i is M ) ) , increment ans	if ( ( i * i + j == N ) && ( j * j + i == M ) ) ++ ans ;
print ans	cout << ans << endl ;
n , m , i , b = int , sum = 0	int n , m , sum = 0 , i , b ;
read n , m	cin >> n >> m ;
for i = 0 to sqrt ( n ) inclusive while i < = m	for ( i = 0 ; i * i <= n && i <= m ; ++ i )
b = n - i * i	b = n - i * i ;
if i + b * b is m increment sum	if ( i + b * b == m ) { sum += 1 ; }
print sum	cout << sum << endl ;
n , m = long long int	long long int n , m ;
read n , m	cin >> n >> m ;
cp = n	long long int cp = n ;
sq = long long int	long long int sq ;
count = 0	long long int count = 0 ;
while n is not - 1	while ( n != - 1 )
sq = int ( sqrt ( n ) )	sq = int ( sqrt ( n ) ) ;
if sq * sq is n	if ( sq * sq == n )
a = sq	long long int a = sq ;
b = cp - n	long long int b = cp - n ;
if a + b * b is m increment count	if ( a + ( b * b ) == m ) count ++ ;
decrement n	n -- ;
print count	cout << count << endl ;
n , m , i , a , b = int , cnt = 0	int n , m , i , a , b , cnt = 0 ;
read n , m	cin >> n >> m ;
i = 0	i = 0 ;
while i < = sqrt ( n )	while ( i <= sqrt ( n ) )
a = i	a = i ;
b = n - ( a * a )	b = n - ( a * a ) ;
if b > = 0	if ( b >= 0 )
if a + b * b is m increment cnt	if ( ( a + ( b * b ) ) == m ) cnt ++ ;
increment i	i ++ ;
print cnt	cout << cnt << endl ;
maxn = const integer with maxn = 105	const int maxn = 105 ;
n , m = integers	int n , m ;
a , b = integers	int a , b ;
ans = integer with ans = 0	int ans = 0 ;
read n , m	cin >> n >> m ;
for i = 0 to 1000	for ( int i = 0 ; i <= 1000 ; i ++ )
for j = 0 to 1000	for ( int j = 0 ; j <= 1000 ; j ++ )
if ( i * i + j is n and i + j * j is m ) , increment ans	if ( i * i + j == n && i + j * j == m ) ans ++ ;
print ans	cout << ans << endl ;
n , m = int	int n , m ;
read n and m	cin >> n >> m ;
c = 0 = int	int c = 0 ;
for a = 0 to 1000 inclusive	for ( int a = 0 ; a <= 1000 ; a ++ )
for b = 0 to 1000 inclusive	for ( int b = 0 ; b <= 1000 ; b ++ )
if a ^ 2 _ b = n and b ^ 2 + a = m then increment c	if ( a * a + b == n && b * b + a == m ) c ++ ;
print c	cout << c << endl ;
declare min taking in ints a and b and returning integer	int min ( int a , int b )
return a if a is less than b or b if not	return ( a < b ) ? a : b ;
create ints m and n	int m , n ;
read m and n	cin >> m >> n ;
create integer c = min ( m , n )	int c = min ( m , n ) ;
make int counter = 0	int counter = 0 ;
for i = 0 to c	for ( int i = 0 ; i <= c ; i ++ )
for j = 0 to c	for ( int j = 0 ; j <= c ; j ++ )
if i * i + j is equal to m and i + j * j is equal to n , increment counter	if ( i * i + j == m && i + j * j == n ) counter ++ ;
print counter	cout << counter << endl ;
a is a new 2d array of integers with size 1001 by 1001	int a [ 1001 ] [ 1001 ] ;
n , m , i , j and cnt are ints with cnt = 0	int n , m , i , j , cnt = 0 ;
read input to n and m	cin >> n >> m ;
in a for loop , change i from 0 to n inclusive incrementing i	for ( i = 0 ; i <= n ; i ++ )
for j = 0 to m inclusive	for ( j = 0 ; j <= m ; j ++ )
set a [ i ] [ j ] to 1 if i * i + j is equal to n and i + j * j is equal to m	if ( i * i + j == n && i + j * j == m ) a [ i ] [ j ] = 1 ;
for i = 0 to 1001 exclusive	for ( i = 0 ; i < 1001 ; i ++ )
start for loop from j = 0 to 1001 exclusive	for ( j = 0 ; j < 1001 ; j ++ )
if a [ i ] [ j ] ! = 0 , increment cnt	if ( a [ i ] [ j ] ) cnt ++ ;
print cnt	cout << cnt << endl ;
create integers n and m	int n , m ;
read n and m	cin >> n >> m ;
let cnt = 0 be an integer	int cnt = 0 ;
for i = 0 while i is less than or equal to n and less than or equal to m	for ( int i = 0 ; i <= n && i <= m ; i ++ )
let b = n - i * i	int b = n - i * i ;
if b is positive or 0 and i + b * b is equal to m then increment cnt	if ( b >= 0 && i + b * b == m ) cnt ++ ;
print cnt	cout << cnt << endl ;
create integers n and m	int n , m ;
read variables n and m from the input	cin >> n >> m ;
declare new integer variable c = 0	int c = 0 ;
in a for loop , change i from 0 to 1000 inclusive	for ( int i = 0 ; i <= 1000 ; i ++ )
start for loop from j = 0 to 1000 inclusive incrementing j	for ( int j = 0 ; j <= 1000 ; j ++ )
p is a new integer variable with value i squared + j	int p = i * i + j ;
new integer q with value i + j squared	int q = i + j * j ;
if p is equal to n and q is equal to m , increment c	if ( p == n && q == m ) { c ++ ; }
print c	cout << c << endl ;
declare integers n , m	int n , m ;
read n and m	cin >> n >> m ;
declare integer res = 0	int res = 0 ;
for i = 0 to 100 exclusive	for ( int i = 0 ; i < 100 ; i ++ )
for j = 0 to 100 exclusive	for ( int j = 0 ; j < 100 ; j ++ )
if ( i * i + j is n and i + j * j is m , increment res	if ( i * i + j == n && i + j * j == m ) res ++ ;
print res and newline	cout << res << endl ;
i , s , j , k , l , n , m = integers with s = 0 , j = 0 , k = 0	long long int i , s = 0 , j = 0 , k = 0 , l , n , m ;
Read m , n	cin >> m >> n ;
for i = 0 to m exclusive	for ( i = 0 ; i <= m ; i ++ )
for j = 0 to n exclusive	for ( j = 0 ; j <= n ; j ++ )
set k to i * i + j	k = i * i + j ;
set l to i + j * j	l = i + j * j ;
if k is n and l is m , then increment s	if ( k == n && l == m ) s ++ ;
print s and a new line	cout << s << endl ;
n , m = integers	int n , m ;
read n , m	cin >> n >> m ;
solu = integer with solu = 0	int solu = 0 ;
for i = 0 to 1000	for ( int i = 0 ; i <= 1000 ; i ++ )
for j = 0 to 1000	for ( int j = 0 ; j <= 1000 ; j ++ )
if ( pow ( i , 2 ) + j is n and i + pow ( j , 2 ) is m ) , increment solu	if ( pow ( i , 2 ) + j == n && i + pow ( j , 2 ) == m ) solu ++ ;
print solu	cout << solu << endl ;
create int n and m	int n , m ;
read n and m	cin >> n >> m ;
counter = 0	int counter = 0 ;
for a = 0 to m inclusive	for ( int a = 0 ; a <= m ; a ++ )
for b = 0 to n inclusive	for ( int b = 0 ; b <= n ; b ++ )
if a * a + b = n and a + b * b = m , increment counter	if ( a * a + b == n && a + b * b == m ) counter ++ ;
print counter	cout << counter << endl ;
create int n and m	int n , m ;
read n and m	cin >> n >> m ;
inte_pair = 0	int inte_pair = 0 ;
for i = 0 to n inclusive and m inclusive	for ( int i = 0 ; i <= n && i <= m ; i ++ )
for j = 0 to n and m inclusive	for ( int j = 0 ; j <= n && j <= m ; j ++ )
if ( i * i ) + j = n and i + ( j * j ) = m , increment inte_pair	if ( ( i * i ) + j == n && i + ( j * j ) == m ) inte_pair ++ ;
print inte_pair	cout << inte_pair << endl ;
n , k , i , m , j = int with k = 0	int n , k = 0 , i , m , j ;
read n then m	cin >> n >> m ;
iterate i while i * i < = n	for ( i = 0 ; i * i <= n ; i ++ )
iterate j while j * j < = m	for ( j = 0 ; j * j <= m ; j ++ )
if i * i + j is n and j * j + i is m increment k	if ( i * i + j == n && j * j + i == m ) k ++ ;
print k	cout << k << endl ;
double integers = EPS = 1e - 9	double EPS = 1e-9 ;
INFF set to 1000000000000000005LL = long long integer	long long INFF = 1000000000000000005LL ;
integers = n , m	int n , m ;
read n , m	cin >> n >> m ;
integer c = 0	int c = 0 ;
for a = 0 to less than or equal to sqrt ( n ) do the following	for ( int a = 0 ; a <= sqrt ( n ) ; ++ a )
for b = 0 to less than or equal to sqrt ( m ) do the following	for ( int b = 0 ; b <= sqrt ( m ) ; ++ b )
if a squared + b is n and a + b squared is m then add one to c	if ( ( a * a + b == n ) && ( a + b * b == m ) ) { c ++ ; }
output c	cout << c << ' \n ' ;
let n , m be integers	int n , m ;
while read n , m	while ( cin >> n >> m )
let ans be a integer with ans = 0	int ans = 0 ;
for a = 0 to 1000 inclusive	for ( int a = 0 ; a <= 1000 ; a ++ )
for b = 0 to 1000 inclusive	for ( int b = 0 ; b <= 1000 ; b ++ )
if a * a + b is equal to n and b * b + a is equal to m , increment ans by 1	if ( a * a + b == n && b * b + a == m ) ans ++ ;
print ans and newline	cout << ans << endl ;
let m , n , a , b be integers	int m , n , a , b ;
let fit be a integer function	int fit ( )
let f1 , f2 be integers with f1 = a * a + b , f2 = a + b * b	int f1 = a * a + b , f2 = a + b * b ;
if f1 is equal to n and f2 is equal to m	if ( f1 == n && f2 == m )
else if f1 is greater than n	else if ( f1 > n )
return 1	return 1 ;
else if f2 is greater than m	else if ( f2 > m )
return 1	return 1 ;
return - 1	return - 1 ;
read n , m	cin >> n >> m ;
let cnt be a integer with cnt = 0	int cnt = 0 ;
for a = 0 to 31 inclusive	for ( a = 0 ; a <= 31 ; a ++ )
for b = 0 to 31 inclusive	for ( b = 0 ; b <= 31 ; b ++ )
if fit ( ) is equal to 0	if ( fit ( ) == 0 )
increment cnt by 1	cnt ++ ;
else if fit ( ) is equal to 1	else if ( fit ( ) == 1 )
stop	break ;
print cnt and newline	cout << cnt << endl ;
define new integer n	int n ;
read n from the user input	cin >> n ;
change n to n - 10	n -= 10 ;
if n is equal to 10 , return cout < < 15 < < endl , 0	if ( n == 10 ) return cout << 15 << endl , 0 ;
if 1 < = n < = 11 , return cout < < 4 < < endl , 0	if ( n <= 11 && n >= 1 ) return cout << 4 << endl , 0 ;
print 0	cout << 0 << endl ;
integer as n	int n ;
read n	cin >> n ;
if n is less than or equal to 10 then do the following	if ( n <= 10 )
output 0	cout << " 0 " << endl ;
else	else
if n > = 11 and n is less than or equal to 19 then do the following	if ( n >= 11 && n <= 19 )
output 4	cout << " 4 " << endl ;
else if n is 20 then do the following	else if ( n == 20 )
output 15	cout << " 15 " << endl ;
else if n is 21 then do the following	else if ( n == 21 )
output 4	cout << " 4 " << endl ;
else if n is greater than 21 then do the following	else if ( n > 21 )
output 0	cout << " 0 " << endl ;
let n be a integer	int n ;
read n	cin >> n ;
if n < = 10 or n is greater than 21	if ( n <= 10 || n > 21 )
print 0 and newline	cout << 0 << endl ;
else if n equals 20	else if ( n == 20 )
print 15 and newline	cout << 15 << endl ;
else do the following	else
print 4 and newline	cout << 4 << endl ;
declare integer n	int n ;
read n	cin >> n ;
if n is less than or equal to 10 or n is greater than or equal to 22	if ( n <= 10 || n >= 22 )
print ' 0 ' , newline	cout << ' 0 ' << endl ;
else if n is 20	else if ( n == 20 )
print " 15 " , newline	cout << " 15 " << endl ;
else	else
print ' 4 ' , newline	cout << ' 4 ' << endl ;
declare integer a	int a ;
read a	cin >> a ;
let a be a - 10	a = a - 10 ;
if a is 10	if ( a == 10 )
print ( 4 * 3 ) + 3 , newline	cout << ( 4 * 3 ) + 3 << endl ;
else if a is greater than 0 and a is less than 12	else if ( a > 0 && a < 12 )
print 4 , newline	cout << 4 << endl ;
else	else
print 0 , newline	cout << 0 << endl ;
n is an integer	int n ;
read n	cin >> n ;
if n is less than 11	if ( n < 11 )
print 0 and endline	cout << 0 << endl ;
else if n equals 11 or 21	else if ( n == 11 || n == 21 )
print 4 and endline	cout << 4 << endl ;
else if n is between 12 and 19 inclusive	else if ( n >= 12 && n <= 19 )
print 4 and endline	cout << 4 << endl ;
else if n equals 20	else if ( n == 20 )
print 15 and endline	cout << 15 << endl ;
else	else
print 0 and endline	cout << 0 << endl ;
create integer N	int N ;
read N	cin >> N ;
if N is greater than 21	if ( N > 21 )
print ' 0 '	cout << ' 0 ' << endl ;
if n is equal to 21	if ( N == 21 )
print ' 4 '	cout << ' 4 ' << endl ;
if n - 10 is equal to 10	if ( N - 10 == 10 )
print " 15 "	cout << " 15 " << endl ;
if N is less than 20 and N is greater than 10	if ( N < 20 && N > 10 )
print " 4 "	cout << " 4 " << endl ;
else do	else
show " 0 "	cout << " 0 " << endl ;
n , cards = integers with cards = 0	int n , cards = 0 ;
Read n	cin >> n ;
set n to n - 10	n -= 10 ;
if n is greater than or equal to 1 and n is less than 10	if ( n >= 1 && n < 10 )
set cards to 4	cards = 4 ;
else if n is equal to 10	else if ( n == 10 )
set cards to 15	cards = 15 ;
else if n is equal to 11	else if ( n == 11 )
set cards to 4	cards = 4 ;
else do the following	else
set cards to 0	cards = 0 ;
print cards and a new line	cout << cards << endl ;
create int n , i , n1	int n , i , n1 ;
read n	cin >> n ;
i = 10	i = 10 ;
if n < = 10	if ( n <= 10 )
set n1 to 0	n1 = 0 ;
else	else
if n < = 19	if ( n <= 19 )
assign 4 to n1	n1 = 4 ;
else if n = 20	else if ( n == 20 )
set n1 to 15	n1 = 15 ;
else if n = 21	else if ( n == 21 )
assign 4 to n1	n1 = 4 ;
else	else
set n1 = 0	n1 = 0 ;
print n1	cout << n1 << endl ;
let n be a integer	int n ;
while read n	while ( cin >> n )
if n is less than or equal to 10 or greater than or equal to 22 ,	if ( n <= 10 || n >= 22 )
print 0 and newline	cout << " 0 " << endl ;
else if n equals 20	else if ( n == 20 )
print 15 and newline	cout << " 15 " << endl ;
else	else
print 4 and newline	cout << " 4 " << endl ;
create new integer n	int n ;
read variable n from the input	cin >> n ;
if n < = 10 or n > 21	if ( n <= 10 || n > 21 )
print 0	cout << 0 << endl ;
else if n is equal to 20	else if ( n == 20 )
print 15 to the standard output	cout << 15 << endl ;
else	else
print 4	cout << 4 << endl ;
let n be a integer	int n ;
read n	cin >> n ;
if n < = 10 or n > = 22 , print 0 and newline	if ( n <= 10 || n >= 22 ) { cout << " 0 " << endl ; }
if n > = 11 and n < = 19 , print 4 and newline	if ( n >= 11 && n <= 19 ) { cout << " 4 " << endl ; }
if n equals 20 , print 15 and newline	if ( n == 20 ) { cout << " 15 " << endl ; }
if n equals 21 , print 4 and newline	if ( n == 21 ) { cout << " 4 " << endl ; }
create integer variable with name n	int n ;
read user input to n	cin >> n ;
if n < = 10 or n > 21	if ( n <= 10 || n > 21 )
print 0	cout << 0 << endl ;
else if n - 10 is less than 10	else if ( n - 10 < 10 )
print 4	cout << 4 << endl ;
else if n - 10 is equal to 10	else if ( n - 10 == 10 )
print 15	cout << 15 << endl ;
else	else
print 4 to the standard output	cout << 4 << endl ;
integer as a	int a ;
read a	cin >> a ;
if a - 10 is less than or equal to 0 or a - 10 > 11 then do the following	if ( a - 10 <= 0 || a - 10 > 11 )
output 0	cout << 0 << endl ;
else if a - 10 is greater than 1 or a - 10 is less than or equal to 9 then do the following	else if ( ( a - 10 >= 1 && a - 10 <= 9 ) || a - 10 == 11 )
output 4	cout << 4 << endl ;
else	else
output 15	cout << 15 << endl ;
declare new integer variables n and m	int n , m ;
loop , reading n from the input	while ( cin >> n )
change m to n - 10	m = n - 10 ;
if m > 0 and m < 10	if ( m > 0 && m < 10 )
print ' 4 '	cout << ' 4 ' << endl ;
else if m = 0	else if ( m == 0 )
print ' 0 '	cout << ' 0 ' << endl ;
else if m is equal to 10	else if ( m == 10 )
print " 15 "	cout << " 15 " << endl ;
else if m = 11	else if ( m == 11 )
print ' 4 '	cout << ' 4 ' << endl ;
else	else
print ' 0 '	cout << ' 0 ' << endl ;
n = int	int n ;
read n	cin >> n ;
if n < = 10	if ( n <= 10 )
print 0	cout << 0 << endl ;
else if n < 20	else if ( n < 20 )
print 4	cout << 4 << endl ;
else if n is 20	else if ( n == 20 )
print 15	cout << 15 << endl ;
else if n is 21	else if ( n == 21 )
print 4	cout << 4 << endl ;
else	else
print 0	cout << 0 << endl ;
create new vector of long longs v	vector < long long > v ;
define new integer called n	int n ;
read standard input to n	cin >> n ;
if n < = 10 or n > 21	if ( n <= 10 || n > 21 )
print 0	cout << 0 << endl ;
decrease n by 10	n -= 10 ;
if n = 10	if ( n == 10 )
print 15 to the output	cout << 15 << endl ;
else	else
print 4	cout << 4 << endl ;
n = int	int n ;
read n	cin >> n ;
if n < = 10	if ( n <= 10 )
print 0	cout << 0 << " \n " ;
else	else
if n is between 11 and 19 both inclusive	if ( n >= 11 && n <= 19 )
print 4	cout << 4 << " \n " ;
else	else
if n = 20	if ( n == 20 )
print 15	cout << 15 << " \n " ;
else if n = 21	else if ( n == 21 )
print 4	cout << 4 << " \n " ;
else	else
print 0	cout << 0 << " \n " ;
integer as n	int n ;
while reading input n	while ( cin >> n )
if n is less than 10 or n > 21 then do the following	if ( n < 10 || n > 21 )
output 0	cout << 0 << endl ;
else if n is 20 then do the following	else if ( n == 20 )
output 15	cout << 15 << endl ;
else if n is 10 then do the following	else if ( n == 10 )
output 0	cout << 0 << endl ;
else	else
output 4	cout << 4 << endl ;
let n be a integer	int n ;
read n	cin >> n ;
decrement n by 10	n -= 10 ;
if n < = 0	if ( n <= 0 )
print 0 and newline	cout << 0 << endl ;
else if n < = 9	else if ( n <= 9 )
print 4 and newline	cout << 4 << endl ;
else if n equals 10	else if ( n == 10 )
print 15 and newline	cout << 15 << endl ;
else if n equals 11	else if ( n == 11 )
print 4 and newline	cout << 4 << endl ;
else do the following	else
print 0 and newline	cout << 0 << endl ;
integer as n	int n ;
read n	cin >> n ;
if n is less than or equal to 10 or n > 21 then do the following	if ( n <= 10 || n > 21 )
output 0	cout << 0 << endl ;
else if n is 20 then do the following	else if ( n == 20 )
output 15	cout << 15 << endl ;
else	else
output 4	cout << 4 << endl ;
n = int	int n ;
read n	cin >> n ;
if n < = 10	if ( n <= 10 )
print 0	cout << " 0\n " ;
else if n = 11	else if ( n == 11 )
print 4	cout << " 4\n " ;
else if n > = 12 AND n < = 19	else if ( n >= 12 and n <= 19 )
print 4	cout << " 4\n " ;
else if n = 20	else if ( n == 20 )
print 15	cout << " 15\n " ;
else if n = 21	else if ( n == 21 )
print 4	cout << " 4\n " ;
else if n > = 22	else if ( n >= 22 )
print 0	cout << " 0\n " ;
n = int	int n ;
read n	cin >> n ;
if n < = 10 or n > 21	if ( n <= 10 || n > 21 )
print 0	cout << 0 << endl ;
else if n is 20	else if ( n == 20 )
print 15	cout << 15 << endl ;
else	else
print 4	cout << 4 << endl ;
n = integer	int n ;
while reading values n	while ( cin >> n )
if n is less than 20 and n is greater than 10 OR n is equal to 21	if ( ( n < 20 && n > 10 ) || n == 21 )
print 4 and a new line	cout << " 4 " << endl ;
else if n is less than or equal to 10 OR n is greater than 21	else if ( n <= 10 || n > 21 )
print 0 and a new line	cout << " 0 " << endl ;
else do the following	else
print 15 and a new line	cout << " 15 " << endl ;
n = integer	int n ;
Read n	cin >> n ;
if n is less than 11	if ( n < 11 )
print 0 and a new line	cout << 0 << endl ;
else if n is less than 20	else if ( n == 20 )
print 15 and a new line	cout << 15 << endl ;
else if n is less than 21	else if ( n > 21 )
print 0 and a new line	cout << 0 << endl ;
else do the following	else
print 4 and a new line	cout << 4 << endl ;
n is a new integer variable	int n ;
read n from the user input	cin >> n ;
declare new integer required with value n - 10	int required = n - 10 ;
if required < = 0	if ( required <= 0 )
print " 0 " to the standard output	cout << " 0 " << endl ;
else if required > = 1 and required < = 9	else if ( required >= 1 && required <= 9 )
print " 4 " to the output	cout << " 4 " << endl ;
else if required = 10	else if ( required == 10 )
print " 15 " to the stdou	cout << " 15 " << endl ;
else if required = 11	else if ( required == 11 )
print " 4 "	cout << " 4 " << endl ;
else if required > = 12	else if ( required >= 12 )
print " 0 "	cout << " 0 " << endl ;
create integer n	int n ;
read n and while it ' s truthy , print ( n > 10 & & n < 22 ) * 4 + ( n = = 20 ) * 11	while ( cin >> n ) { cout << ( n > 10 && n < 22 ) * 4 + ( n == 20 ) * 11 << endl ; }
n is an integer	int n ;
read n	cin >> n ;
if n is less than or equals 10	if ( n <= 10 )
print 0 and endline	cout << 0 << endl ;
else if n is between 11 and 19 exclusive	else if ( n > 10 && n <= 19 )
print 4 and endline	cout << 4 << endl ;
else if n equals 20	else if ( n == 20 )
print 15 and endline	cout << 15 << endl ;
else if n equals 21	else if ( n == 21 )
print 4 and endline	cout << 4 << endl ;
else	else
print 0 and endline	cout << 0 << endl ;
make int n	int n ;
read n	cin >> n ;
if n is less than or equal to 10 or n - 10 is greater than or equal to 12	if ( n <= 10 || n - 10 >= 12 )
display " 0 "	cout << " 0 " << endl ;
if n - 10 is equal to 1 or n - 10 is equal to 11	if ( n - 10 == 1 || n - 10 == 11 )
show 4	cout << 4 << endl ;
else if n - 10 is 10	else if ( n - 10 == 10 )
display 15	cout << 15 << endl ;
else	else
show 4	cout << 4 << endl ;
n , i , j , temp , result and imin are integers with imin = 10000000	int n , i , j , temp , result , imin = 10000000 ;
create new vector of integers a	vector < int > a ;
read n from the input	cin >> n ;
add 1 as a new element to a	a . push_back ( 1 ) ;
in a for loop , change i from 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read variable temp from the input	cin >> temp ;
push temp into a	a . push_back ( temp ) ;
in a for loop , change i from 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
assign 0 to result	result = 0 ;
for j from 1 to n inclusive , increase result by 2 * a [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( i - 1 ) )	for ( j = 1 ; j <= n ; j ++ ) { result += 2 * a [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( i - 1 ) ) ; }
change the value of imin to min of imin and result	imin = min ( imin , result ) ;
print imin	cout << imin << endl ;
create new integer variable n	int n ;
read n and keep looping	while ( cin >> n )
create new array of integers a with 105 elements	int a [ 105 ] ;
start for loop from i = 1 to n inclusive , read standard input to a [ i ] on each loop	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
Min is a new integer variable = 0x3f3f3f3f	int Min = 0x3f3f3f3f ;
loop through i from i to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
ans is a new integer = 0	int ans = 0 ;
change j in a loop from 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
if j is greater than i	if ( j > i )
increase ans by ( j - 1 ) * 4 * a [ j ]	ans += ( j - 1 ) * 4 * a [ j ] ;
else	else
change ans to ans + ( i - 1 ) * 4 * a [ j ]	ans += ( i - 1 ) * 4 * a [ j ] ;
change Min to min of Min and ans	Min = min ( Min , ans ) ;
print Min	cout << Min << endl ;
n = int	int n ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
read n values into a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
mini = int with mini = 100000000	int mini = 100000000 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
temp = int with temp = 0	int temp = 0 ;
for j = 0 to n increment temp by ( absolute of ( i - j ) + j + i ) * a [ j ] * 2	for ( int j = 0 ; j < n ; j ++ ) { temp += ( abs ( i - j ) + j + i ) * a [ j ] * 2 ; }
set mini to min of mini , temp	mini = min ( mini , temp ) ;
print mini	cout << mini << endl ;
n = integer	int n ;
arr = integer array of size 10010	int arr [ 10010 ] ;
ans = integer with ans = 1000000000	int ans = 1000000000 ;
read n	cin >> n ;
for i = 1 to n , read arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
x = intege with x = i	int x = i ;
cost = integer with cost = 0	int cost = 0 ;
for j = 1 to n	for ( int j = 1 ; j <= n ; j ++ )
cost = cost + abs ( x - j ) * arr [ j ]	cost += abs ( x - j ) * arr [ j ] ;
cost = cost + ( ( j - 1 ) * arr [ j ] )	cost += ( ( j - 1 ) * arr [ j ] ) ;
cost = cost + ( x - 1 ) * arr [ j ]	cost += ( x - 1 ) * arr [ j ] ;
cost = cost + ( x - 1 ) * arr [ j ]	cost += ( x - 1 ) * arr [ j ] ;
cost = cost + ( ( j - 1 ) * arr [ j ] )	cost += ( ( j - 1 ) * arr [ j ] ) ;
cost = cost + abs ( x - j ) * arr [ j ]	cost += abs ( x - j ) * arr [ j ] ;
if ( cost < ans ) , ans = cost	if ( cost < ans ) { ans = cost ; }
print ans	cout << ans << endl ;
declare gcd with long long integers a , b as arguments , returning long long integer	long long int gcd ( long long int a , long long int b )
if a is 0 , return b	if ( a == 0 ) return b ;
return result of run gcd with b % a , a as arguments from function	return gcd ( b % a , a ) ;
declare factorial with unsigned long long integer n as argument , returning unsigned long long integer	unsigned long long int factorial ( unsigned long long int n )
if n is 0 , return 1	if ( n == 0 ) return 1 ;
return n * result of run factorial ( n - 1 )	return n * factorial ( n - 1 ) ;
declare long long integer array nCr size 1001 by 1001	long long int nCr [ 1001 ] [ 1001 ] ;
declare combi with no arguments , returning void	void combi ( )
for i = 1 to 1000 inclusive	for ( int i = 1 ; i <= 1000 ; i ++ )
let nCr [ 0 ] [ i ] be 0	nCr [ 0 ] [ i ] = 0 ;
let nCr [ i ] [ 0 ] be 1	nCr [ i ] [ 0 ] = 1 ;
for i = 1 to 1000 inclusive	for ( int i = 1 ; i <= 1000 ; i ++ )
for j = 1 to 1000 inclusive	for ( int j = 1 ; j <= 1000 ; j ++ )
if i is less than j	if ( i < j )
end loop iteration	continue ;
else if i is j	else if ( i == j )
let nCr [ i ] [ j ] be 1	nCr [ i ] [ j ] = 1 ;
else	else
let nCr [ i ] [ j ] be nCr [ i - 1 ] [ j ] + nCr [ i - 1 ] [ j - 1 ]	nCr [ i ] [ j ] = nCr [ i - 1 ] [ j ] + nCr [ i - 1 ] [ j - 1 ] ;
declare long long integer n	long long int n ;
read n	cin >> n ;
declare long long integer array arr size n	long long int arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( long long int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
declare long long integer min = LONG_MAX	long long int min = LONG_MAX ;
for i = 0 to n exclusive	for ( long long int i = 0 ; i < n ; i ++ )
declare long long integer cost = 0	long long int cost = 0 ;
for j = 0 to n exclusive , increment cost by arr [ j ] * ( absolute value of ( i - j ) + j + i + i + j + absolute value of ( j - 1 ) )	for ( long long int j = 0 ; j < n ; j ++ ) { cost += ( arr [ j ] * ( abs ( i - j ) + j + i + i + j + abs ( j - i ) ) ) ; }
if cost is less than min , let min be cost	if ( cost < min ) min = cost ;
print min and newline	cout << min << endl ;
s , n and m are ints with s = 0	int s = 0 , n , m ;
read input to n	cin >> n ;
in a for loop , change i from 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read variable m from the input	cin >> m ;
assign the new value = s + i * 4 * m to s	s = s + i * 4 * m ;
print s	cout << s << endl ;
function init	void init ( ) { } ;
a = integer array of size 1000	int a [ 1000 ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sum = long long with sum = 0	long long sum = 0 ;
for i = 1 to n , sum = sum + 4 * ( i - 1 ) * a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) sum += 4 * ( i - 1 ) * a [ i ] ;
print sum	cout << sum << endl ;
create long long ints i , j and t	long long int i , j , t ;
n is a new long long	long long int n ;
read input to n	cin >> n ;
a is a new array of long long integers with size n	long long int a [ n ] ;
in a for loop , change i from 0 to n exclusive , read user input to a [ i ] on each loop	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
x is a new array of long long integers with size n filled with 0	long long int x [ n ] = { 0 } ;
in a for loop , change i from 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
start for loop from j = 0 to n exclusive , changing x [ i ] to x [ i ] + a [ j ] * ( ( abs ( i - j ) + abs ( j ) + abs ( i ) + abs ( i ) + abs ( j ) + abs ( j - i ) ) ) on each loop	for ( j = 0 ; j < n ; j ++ ) { x [ i ] += a [ j ] * ( ( abs ( i - j ) + abs ( j ) + abs ( i ) + abs ( i ) + abs ( j ) + abs ( j - i ) ) ) ; }
sort x from index 0 to n	sort ( x , x + n ) ;
print x [ 0 ]	cout << x [ 0 ] << endl ;
declare integer variables n and ans	int n , ans ;
a is a new array of integers with 10010 elements	int a [ 10010 ] ;
read variable n from the input	cin >> n ;
in a for loop , change i from 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
read a [ i ] from the user input	cin >> a [ i ] ;
increase ans by a [ i ] * ( i - 1 ) * 4	ans += a [ i ] * ( i - 1 ) * 4 ;
print ans	cout << ans << endl ;
pi is a new constant integer = acos of - 1	const int pi = acos ( - 1 ) ;
declare integer variable n	int n ;
read from the input to n	cin >> n ;
declare new integers ele , flag = 0 and k = 1 ; create an integer array a with 200 elements	int a [ 200 ] , k = 1 , ele = 0 , flag = 0 ;
for i from 1 to n inclusive , read a [ i ] from the input	for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ] ; }
for integer i = 1 to n inclusive , add ( 4 * i - 4 ) * a [ i ] to ele	for ( int i = 1 ; i <= n ; ++ i ) { ele += ( 4 * i - 4 ) * a [ i ] ; }
print ele to the standard output	cout << ele << endl ;
create const long long int M = 998244353	const long long M = 998244353 ;
make constant long long oo = 1e13	const long long oo = 1e13 ;
create int array a of size 1010	int a [ 1010 ] ;
make int n	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ] ; }
make int ans = 1e9	int ans = 1e9 ;
for x = 1 to n	for ( int x = 1 ; x <= n ; ++ x )
let int sum = 0	int sum = 0 ;
for j = 1 to n , add ( ( abs ( j - x ) + j - 1 + x - 1 ) * 2 ) * a [ j ] to sum	for ( int j = 1 ; j <= n ; ++ j ) { sum += ( ( abs ( j - x ) + j - 1 + x - 1 ) * 2 ) * a [ j ] ; }
set ans to min of ans and sum	ans = min ( ans , sum ) ;
print ans	cout << ans << endl ;
create ints n and max1 and int array a of size 1000	int n , a [ 1000 ] , max1 ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
make integer sum = 0	int sum = 0 ;
for j = 1 to n , add ( fabs ( i * 1 . 0 - j * 1 . 0 ) + j - 1 + i - 1 ) * 2 * a [ j ] to sum	for ( int j = 1 ; j <= n ; j ++ ) { sum += ( fabs ( i * 1.0 - j * 1.0 ) + j - 1 + i - 1 ) * 2 * a [ j ] ; }
if i is equal to 1	if ( i == 1 )
set max1 to sum	max1 = sum ;
else do	else
set max1 to min of max1 and sum	max1 = min ( max1 , sum ) ;
print max1	cout << max1 << endl ;
declare integer variable n	int n ;
read input to n	cin >> n ;
declare integer variable with name value	int value ;
create integer ans = 0	int ans = 0 ;
repeat the loop n times , incrementing i by 1 , starting from 0	for ( int i = 0 ; i < n ; i ++ )
read value	cin >> value ;
add i * 4 * value to ans	ans += i * 4 * value ;
print ans	cout << ans << endl ;
n , i , j , m , t , x , y = integers	int n , i , j , m , t , x , y ;
a = integer array of size 110	int a [ 110 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
m = - 1	m = - 1 ;
for i = 1 to n	for ( i = 1 ; i <= n ; i ++ )
x = 0	x = 0 ;
for j = 0 to n exclusive	for ( j = 0 ; j < n ; j ++ )
y = i - ( j + 1 )	y = i - ( j + 1 ) ;
if ( y < 0 ) , y = - y	if ( y < 0 ) y = - y ;
y = y + j + i - 1	y += j + i - 1 ;
x = x + y * a [ j ] * 2	x += y * a [ j ] * 2 ;
if ( x < m or m is - 1 ) , m = x	if ( x < m || m == - 1 ) { m = x ; }
print m	cout << m << endl ;
let N , A , sum ints	int N , A , sum ;
read N	cin >> N ;
for i from 0 to N exclusive	for ( int i = 0 ; i < N ; i ++ )
read A	cin >> A ;
add 4 * A * i to sum	sum += 4 * A * i ;
print sum	cout << sum << ' \n ' ;
make ints n , sum = 0 , i , m , and j	int n , sum = 0 , i , m , j ;
read n	cin >> n ;
create int pointer p = new int [ n ]	int * p = new int [ n ] ;
for i = 0 to n exclusive , read p [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> p [ i ] ;
create integer pointer h = new int [ n ]	int * h = new int [ n ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
for j = i + 1 to n exclusive , set sum to sum + 4 * j * p [ j ]	for ( j = i + 1 ; j < n ; j ++ ) sum = sum + 4 * j * p [ j ] ;
for m = i - 1 to 0 exclusive by decreasing by 1 , set sum to sum + 4 * i * p [ m ] * 4	for ( m = i - 1 ; m > 0 ; m -- ) sum = sum + 4 * i * p [ m ] * 4 ;
set sum to i * 4 * p [ i ] + sum	sum = i * 4 * p [ i ] + sum ;
set h [ i ] to sum	h [ i ] = sum ;
set sum to 0	sum = 0 ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
if h [ 0 ] is greater than h [ i ]	if ( h [ 0 ] > h [ i ] )
create integer t	int t ;
set t to h [ 0 ]	t = h [ 0 ] ;
set h [ 0 ] to h [ i ]	h [ 0 ] = h [ i ] ;
set h [ i ] to t	h [ i ] = t ;
display h [ 0 ]	cout << h [ 0 ] << endl ;
declare constant integer M = 105	const int M = 105 ;
declare integer array a size M	int a [ M ] ;
declare integer n	int n ;
read n	cin >> n ;
declare integer Min = 0x3f3f3f3f	int Min = 0x3f3f3f3f ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare integer sum = 0	int sum = 0 ;
for j = 1 to n inclusive , increment sum by ( absolute value of ( i - j ) - 2 + j + i ) * a [ j ] * 2	for ( int j = 1 ; j <= n ; j ++ ) { sum += ( abs ( i - j ) - 2 + j + i ) * a [ j ] * 2 ; }
let min be minimum of sum and Min	Min = min ( sum , Min ) ;
print Min and newline	cout << Min << endl ;
maxn = 1e4 + 5 = int const	const int maxn = 1e4 + 5 ;
let num be an int array of size maxn with num [ 0 ] = 0	int num [ maxn ] = { 0 } ;
let n , ans be ints with ans = 10000000	int n , ans = 10000000 ;
read n	cin >> n ;
read the first n + 1 elements of num	for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
cnt = 0 = int	int cnt = 0 ;
for j = 1 to n inclusve , increment cnt by 2 * num [ j ] * ( abs of ( i - j ) + abs of ( j - 1 ) + abs of ( 1 - i )	for ( int j = 1 ; j <= n ; j ++ ) cnt += 2 * num [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( 1 - i ) ) ;
set ans to the min of cnt and ans	ans = min ( cnt , ans ) ;
print ans	cout << ans << endl ;
n = int	int n ;
while reading n	while ( cin >> n )
a = int array of length 105	int a [ 105 ] ;
read a from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
Min = 0x3f3f3f3f = int	int Min = 0x3f3f3f3f ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
ans = 0 = int	int ans = 0 ;
for j = 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
if j > i	if ( j > i )
increment ans by ( j - 1 ) * 4 * a at j	ans += ( j - 1 ) * 4 * a [ j ] ;
else	else
increment ans by ( i - 1 ) * 4 * a at j	ans += ( i - 1 ) * 4 * a [ j ] ;
set Min to the minimum between Min and ans	Min = min ( Min , ans ) ;
print Min	cout << Min << endl ;
declare init	void init ( ) { } ;
create integer a of size 1000	int a [ 1000 ] ;
make integer n	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
create long long sum = 0	long long sum = 0 ;
for i = 1 to n , add 4 * ( i - 1 ) * a [ i ] to sum	for ( int i = 1 ; i <= n ; i ++ ) sum += 4 * ( i - 1 ) * a [ i ] ;
print sum	cout << sum << endl ;
declare new constant integer maxn with value 1e5 + 5	const int maxn = 1e5 + 5 ;
num is a new array of integers with size maxn	int num [ maxn ] = { 0 } ;
let n and ans be ints with ans = 1000000000	int n , ans = 1000000000 ;
read standard input to n	cin >> n ;
read n elements from the input to array num	for ( int i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ;
for integer i = 1 to n inclusive incrementing i	for ( int i = 1 ; i <= n ; i ++ )
declare integer cnt with value 0	int cnt = 0 ;
in a for loop , change j from 1 to n inclusive , increasing cnt by 2 * num [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( 1 - i ) ) on each loop	for ( int j = 1 ; j <= n ; j ++ ) cnt += 2 * num [ j ] * ( abs ( i - j ) + abs ( j - 1 ) + abs ( 1 - i ) ) ;
change the value of ans to min of cnt and ans	ans = min ( cnt , ans ) ;
print ans	cout << ans << endl ;
n = int	int n ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
read n values into a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
ans = int with ans = 2e6	int ans = 2e6 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
cur = int with cur = 0	int cur = 0 ;
for j = 0 to n	for ( int j = 0 ; j < n ; j ++ )
d1 = int with d1 = i - j	int d1 = i - j ;
if d1 < 0 set d1 to - d1	if ( d1 < 0 ) { d1 = - d1 ; }
increment cur by 2 * ( d1 + i + j ) * a [ j ]	cur += 2 * ( d1 + i + j ) * a [ j ] ;
if cur < ans set ans to cur	if ( cur < ans ) { ans = cur ; }
print ans	cout << ans << endl ;
n , i , sum , minm , x = long long int	long long int n , i , sum , minm , x ;
minm = 100000000	minm = 100000000 ;
read n	cin >> n ;
a = int array of size n + 1	int a [ n + 1 ] ;
for i = 1 to n inclusive read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for x = 1 to n inclusive	for ( x = 1 ; x <= n ; x ++ )
set sum to 0	sum = 0 ;
for i = 1 to n inclusive set sum to sum + ( absolute of ( i - x ) + i - 1 + ( x - 1 ) ) * a [ i ] * 2	for ( i = 1 ; i <= n ; i ++ ) { sum = sum + ( abs ( i - x ) + i - 1 + ( x - 1 ) ) * a [ i ] * 2 ; }
if sum < minm set minm to sum	if ( sum < minm ) minm = sum ;
print minm	cout << minm << endl ;
let n be a integer	int n ;
read n	cin >> n ;
let ans be a integer with ans = ( int ) 10e9	int ans = ( int ) 10e9 ;
arr = array of integers of length n	int arr [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let a be a integer	int a ;
read a	cin >> a ;
arr [ i ] is equal to a	arr [ i ] = a ;
let x be a integer with x = 1	int x = 1 ;
while x < = n	while ( x <= n )
let cost be a integer with cost = 0	int cost = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let l be a integer with l = i + 1	int l = i + 1 ;
cost = cost + absolute value of ( x - l ) + absolute value of ( l - 1 ) + absolute value of ( x - 1 ) ) * 2 * arr [ i ]	cost += ( abs ( x - l ) + abs ( l - 1 ) + abs ( x - 1 ) ) * 2 * arr [ i ] ;
ans = minimum of ans , cost	ans = min ( ans , cost ) ;
increment x by 1	x ++ ;
print ans and newline	cout << ans << endl ;
maxn = const integer with maxn = 200005	const int maxn = 200005 ;
maxm = const integer with maxm = maxn * 2	const int maxm = maxn * 2 ;
inf = const integer with inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
mod = const long long with mod = 998244353	const long long mod = 998244353 ;
function init	void init ( ) { }
n = integer	int n ;
a = long long array of size 105	long long a [ 105 ] ;
call init	init ( ) ;
read n	cin >> n ;
ans = long long with ans = 1e18	long long ans = 1e18 ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
tmp = long long with tmp = 0	long long tmp = 0 ;
for j = 1 to n , tmp = tmp + a [ j ] * 4 * ( ( i - 1 ) * 2 + ( j - 1 ) )	for ( int j = 1 ; j <= n ; j ++ ) { tmp += a [ j ] * 4 * ( ( i - 1 ) * 2 + ( j - 1 ) ) ; }
ans = min of ans and tmp	ans = min ( ans , tmp ) ;
print ans	cout << ans << endl ;
declare string s	string s ;
read s	cin >> s ;
let s be ' # ' + s	s = ' # ' + s ;
declare integer n = length of s - 1	int n = s . length ( ) - 1 ;
declare integer cnt = 0	int cnt = 0 ;
for i = 1 to i + i is less than or equal to n , incrementing i	for ( int i = 1 ; i + i <= n ; ++ i )
if s [ i ] is not s [ n - i + 1 ] , increment cnt	if ( s [ i ] != s [ n - i + 1 ] ) ++ cnt ;
if ( cnt is less than or equal to 1 and ( n bitwise and 1 ) ) or cnt is 1	if ( ( cnt <= 1 && ( n & 1 ) ) || cnt == 1 )
print " YES "	puts ( " YES " ) ;
else	else
print " NO "	puts ( " NO " ) ;
create string x	string x ;
read x	cin >> x ;
c = 0	int c = 0 ;
for i = 0 to length of x - exclusive and for j = length of x - 1 exclusive	for ( int i = 0 , j = x . length ( ) - 1 ; i < x . length ( ) ; i ++ , j -- )
if x [ i ] different from x [ j ] , increment c	if ( x [ i ] != x [ j ] ) c ++ ;
if c = 2 or c = 0 and length of x is odd	if ( c == 2 || ( c == 0 && x . length ( ) % 2 != 0 ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
s = string	string s ;
while read s	while ( cin >> s )
c = 0	int c = 0 ;
n = s	string n = s ;
for i = 0 to length of s / 2 exclusive	for ( int i = 0 ; i < ( s . length ( ) ) / 2 ; i ++ )
reverse s	reverse ( s . begin ( ) , s . end ( ) ) ;
if s [ i ] is not s [ length of s - i - 1 ] increment c	if ( s [ i ] != s [ s . length ( ) - i - 1 ] ) { c ++ ; }
if length of s is even and c is 1	if ( ( s . length ( ) ) % 2 == 0 && c == 1 )
print YES	cout << " YES " << endl ;
else if length of s is odd and c < = 1	else if ( ( s . length ( ) ) % 2 == 1 && c <= 1 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create constant int MOD = 998244353	const int MOD = 998244353 ;
make const int MAX = 200001	const int MAX = 200001 ;
create int array An of size MAX	int An [ MAX ] ;
make integer array book of size MAX	int book [ MAX ] ;
let string str	string str ;
read str	cin >> str ;
create int sum = 0	int sum = 0 ;
make integer n = str . length ( )	int n = str . length ( ) ;
for i = 0 to n / 2 exclusive	for ( int i = 0 ; i < n / 2 ; i ++ )
if str [ i ] is not equal to str [ n - 1 - i ] , increment sum	if ( str [ i ] != str [ n - 1 - i ] ) sum ++ ;
if sum is 1	if ( sum == 1 )
print " YES "	cout << " YES " << endl ;
otherwise	else
if sum is 0 and n % 2	if ( sum == 0 && n % 2 )
display " YES "	cout << " YES " << endl ;
otherwise do	else
show " NO "	cout << " NO " << endl ;
declare new string variables s and t	string s , t ;
read s from the input	cin >> s ;
assign s to t	t = s ;
reverse s	reverse ( s . begin ( ) , s . end ( ) ) ;
create integer d = 0	int d = 0 ;
for integer i = 0 to length of s / 2 exclusive incrementing i	for ( int i = 0 ; i < s . length ( ) / 2 ; i ++ )
increment d if s [ i ] ! = t [ i ]	if ( s [ i ] != t [ i ] ) d ++ ;
print " YES " if d = 0 or 2 and s is odd , otherwise print " NO "	puts ( ( d == 1 or d == 0 and s . length ( ) % 2 != 0 ) ? " YES " : " NO " ) ;
declare string str	string str ;
read str	cin >> str ;
declare integer diff = 0	int diff = 0 ;
for i = 0 to size of str exclusive , increment diff by ( str [ i ] is not str [ size of str - 1 - i ] )	for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += str [ i ] != str [ str . size ( ) - 1 - i ] ; }
if diff is 2 or diff is 0 and size of str % 2 is 1	if ( diff == 2 || diff == 0 && str . size ( ) % 2 == 1 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
create string s	string s ;
read s	cin >> s ;
set d to 0	int d = 0 ;
for i = 0 to size of s exclusive , d = d + s [ i ] different from s [ s . size ( ) - 1 - i ]	for ( int i = 0 ; i < s . size ( ) ; ++ i ) { d += s [ i ] != s [ s . size ( ) - 1 - i ] ; }
if d = 2 or d = 0 and size of s mod 2 = 1	if ( d == 2 || ( d == 0 && s . size ( ) % 2 == 1 ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
declare string s	string s ;
declare inline check with string s as argument , returning integer	inline int check ( string s )
declare string ss = s	string ss = s ;
reverse sort from beginning of s to end of s	reverse ( s . begin ( ) , s . end ( ) ) ;
return s is ss	return s == ss ;
read s	cin >> s ;
if result of run check ( s ) is true	if ( check ( s ) )
if size of s % 2 is 0	if ( s . size ( ) % 2 == 0 )
print " NO "	puts ( " NO " ) ;
else	else
print " YES "	puts ( " YES " ) ;
declare integer len = size of s	int len = s . size ( ) ;
if len % 2 is 0	if ( len % 2 == 0 )
let len be len / 2 - 1	len = len / 2 - 1 ;
else	else
let len be len / 2	len = len / 2 ;
for i = 0 to len inclusive	for ( int i = 0 ; i <= len ; ++ i )
if s [ i ] is not s [ size of s - 1 - i ]	if ( s [ i ] != s [ s . size ( ) - 1 - i ] )
let s [ i ] be s [ size of s - 1 - i ]	s [ i ] = s [ s . size ( ) - 1 - i ] ;
if result of run check ( s ) is true	if ( check ( s ) )
print " YES "	puts ( " YES " ) ;
else	else
print " NO "	puts ( " NO " ) ;
declare string s	string s ;
read s	cin >> s ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
declare character c = s [ i ]	char c = s [ i ] ;
for j = 0 to 26 exclusive	for ( int j = 0 ; j < 26 ; j ++ )
if ' a ' + j is c , end current loop	if ( ' a ' + j == c ) { continue ; }
let s [ i ] be ' a ' + j	s [ i ] = ' a ' + j ;
declare integer k	int k ;
for k = 0 to size of k exclusive	for ( k = 0 ; k < s . size ( ) ; k ++ )
if s [ k ] is not s [ size of s - 1 - k ] end current loop	if ( s [ k ] != s [ s . size ( ) - 1 - k ] ) { break ; }
if k is size of s	if ( k == s . size ( ) )
print " YES " and newline	cout << " YES " << endl ;
let s [ i ] be c	s [ i ] = c ;
print " NO " and newline	cout << " NO " << endl ;
declare ispalindrome taking in string s and returning bool	bool ispalindrome ( string s )
make string t = s	string t = s ;
reverse s	reverse ( s . begin ( ) , s . end ( ) ) ;
return the result of s = = t	return s == t ;
make string s	string s ;
read s	cin >> s ;
if ispalindrome ( s ) returns true	if ( ispalindrome ( s ) )
if s . size ( ) % 2 is truthy	if ( s . size ( ) % 2 )
display " YES "	puts ( " YES " ) ;
else do	else
print " NO "	puts ( " NO " ) ;
for i = 0 to s . size ( ) / 2 exclusive	for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )
make string t = s	string t = s ;
set t [ i ] to t [ t . size ( ) - i - 1 ]	t [ i ] = t [ t . size ( ) - i - 1 ] ;
if ispalindrome ( t ) is true	if ( ispalindrome ( t ) )
show " YES "	puts ( " YES " ) ;
display " NO "	puts ( " NO " ) ;
A is a new array of long longs with size 26 filled with 0	long long A [ 26 ] = { 0 } ;
declare new string s	string s ;
read s from the user input	cin >> s ;
declare new long long called n	long long n = ( int ) s . length ( ) ;
new long long c = 0	long long c = 0 ;
in a for loop , change i from 0 to n / 2 exclusive with step = 1	for ( long long i = 0 ; i < n / 2 ; i ++ )
if s [ i ] ! = s [ n - 1 - i ] , increment c	if ( s [ i ] != s [ n - 1 - i ] ) c ++ ;
if c is equal to 1	if ( c == 1 )
print " YES "	cout << " YES "
print " \ n "	<< " \n " ;
else if c = 0 and n is odd	else if ( c == 0 && n % 2 == 1 )
print " YES " to the standard output	cout << " YES "
print " \ n "	<< " \n " ;
else	else
print " NO "	cout << " NO "
print " \ n " to the stdout	<< " \n " ;
function ispalindrome with string argument s that returns bool	bool ispalindrome ( string s )
create string variable t = s	string t = s ;
reverse s	reverse ( s . begin ( ) , s . end ( ) ) ;
return s = t	return s == t ;
create new string variable s	string s ;
read s from the input	cin >> s ;
if length of s is odd and ispalindrome ( s ) is true	if ( s . size ( ) % 2 && ispalindrome ( s ) )
print " YES " to standard output	puts ( " YES " ) ;
if length of s is even and ispalindrome ( s ) returns true	if ( s . size ( ) % 2 == 0 && ispalindrome ( s ) )
print " NO "	puts ( " NO " ) ;
declare integer err with value 0	int err = 0 ;
for integer i = 0 to length of s / 2 exclusive incrementing i	for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )
if s [ i ] ! = s [ length of s - i - 1 ] , increment err by one	if ( s [ i ] != s [ s . size ( ) - i - 1 ] ) err ++ ;
if err is equal to 1	if ( err == 1 )
print " YES " to standard output	puts ( " YES " ) ;
print " NO " to stdout	puts ( " NO " ) ;
s is a new array of characters with 16 elements	char s [ 16 ] ;
declare integer variables i , count and n where count = 0	int i , count = 0 , n ;
read s	cin >> s ;
change the value of n to length of s	n = strlen ( s ) ;
start for loop from i = 0 to n / 2 exclusive incrementing i	for ( i = 0 ; i < n / 2 ; i ++ )
increment count if s [ i ] ! = s [ n - 1 - i ]	if ( s [ i ] != s [ n - 1 - i ] ) count ++ ;
if n is odd	if ( n % 2 )
if count < = 1	if ( count <= 1 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
else	else
if count is equal to 1	if ( count == 1 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
s is a new string	string s ;
read standard input to s	cin >> s ;
create new integers count = 0 and l = length of s - 1	int count = 0 , l = s . size ( ) - 1 ;
start for loop from i = 0 to length of s / 2 exclusive	for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )
if s [ i ] ! = s [ l - i ] , increment count	if ( s [ i ] != s [ l - i ] ) { count ++ ; }
if length of s is even and count is 1	if ( s . size ( ) % 2 == 0 && count == 1 )
print " YES "	cout << " YES " << endl ;
else if length of s is odd and ( count is 1 or 0 )	else if ( s . size ( ) % 2 == 1 && ( count == 1 || count == 0 ) )
print " YES " to the standard output	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
declare string s	string s ;
declare integer ans = 0	int ans = 0 ;
declare integer i = 0	int i = 0 ;
read s	cin >> s ;
if size of s is 1	if ( s . size ( ) == 1 )
print " YES " and newline	cout << " YES " << endl ;
for j = size of s - 1 to size of s / 2 , decrementing j	for ( int j = s . size ( ) - 1 ; j >= s . size ( ) / 2 ; j -- )
if s [ i ] is not s [ j ]	if ( s [ i ] != s [ j ] )
for c = ' a ' to ' z ' inclusive	for ( char c = ' a ' ; c <= ' z ' ; c ++ )
if c is s [ i ] or c is s [ j ]	if ( c == s [ i ] || c == s [ j ] )
increment ans	ans ++ ;
end loop	break ;
let i be i + 1	i = i + 1 ;
if size of s % 2 is 0	if ( s . size ( ) % 2 == 0 )
if ans is 0 or ans is greater than 1	if ( ans == 0 || ans > 1 )
print " NO " and newline	cout << " NO " << endl ;
if ans is greater than 1	if ( ans > 1 )
print " NO " and newline	cout << " NO " << endl ;
print " YES " and newline	cout << " YES " << endl ;
s = string	string s ;
read s	cin >> s ;
count = integer = 1 , l = integer = size of s - 1	int count = 0 , l = s . size ( ) - 1 ;
for i = 0 to size of s / 2 exclusive	for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )
if s [ i ] is not s [ i - 1 ] , then increase count by 1	if ( s [ i ] != s [ l - i ] ) { count ++ ; }
if count is 1	if ( count == 1 )
print YES	cout << " YES " << endl ;
else if size of s is odd and count is 0	else if ( s . size ( ) % 2 == 1 && count == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create string s	string s ;
read s	cin >> s ;
create int l , i , j and k , set l to size of s exclusive	int l = s . size ( ) , i , j , k ;
for i = 0 to l exclusive	for ( i = 0 ; i < l ; i ++ )
set c to s [ i ]	char c = s [ i ] ;
for j = 0 to 26 exclusive	for ( j = 0 ; j < 26 ; j ++ )
if j = c - a , continue	if ( j == c - ' a ' ) continue ;
set s [ i ] to j + a	s [ i ] = j + ' a ' ;
for k = 0 to l exclusive	for ( k = 0 ; k < l ; k ++ )
if s [ k ] different from s [ l - k - 1 ]	if ( s [ k ] != s [ l - k - 1 ] ) break ;
if k > = l	if ( k >= l )
print YES	cout << " YES " << endl ;
set s [ i ] = c	s [ i ] = c ;
print NO	cout << " NO " << endl ;
make constant long long integer INF = 2000000000000000000LL	const long long int INF = 2000000000000000000LL ;
let const int MOD = 10000007	const int MOD = 10000007 ;
make int array a of size 1000006	int a [ 1000006 ] ;
let string r	string r ;
delcare ispal taking in string s and returning bool	bool ispal ( string s )
set r to s	r = s ;
reverse contents of r	reverse ( r . begin ( ) , r . end ( ) ) ;
if s is equal to r	if ( s == r )
return true	return true ;
else do	else
return false	return false ;
make string s	string s ;
read s	cin >> s ;
make ints n = s . size ( ) and cnt = 0	int n = s . size ( ) , cnt = 0 ;
for i = 0 to n / 2 exclusive	for ( int i = 0 ; i < n / 2 ; i ++ )
make char samne = s [ i ]	char samne = s [ i ] ;
let char pichone = s [ n - ( i + 1 ) ]	char pichone = s [ n - ( i + 1 ) ] ;
if samne is not pichone , increment cnt	if ( samne != pichone ) cnt ++ ;
if cnt is equal to 0 and ispal ( s ) returns truthy and n modulo 2 is 0	if ( cnt == 0 && ispal ( s ) && n % 2 == 0 )
print " NO "	cout << " NO "
print " \ n "	<< " \n " ;
end statement	;
else if cnt is more than 1	else if ( cnt > 1 )
print " NO "	cout << " NO "
print " \ n "	<< " \n " ;
end statement	;
else do	else
print " YES "	cout << " YES "
print " \ n "	<< " \n " ;
;	;
declare string s	string s ;
read s	cin >> s ;
declare integer y = size of s - 1	int y = s . size ( ) - 1 ;
declare integer sum = 0	int sum = 0 ;
for i = 0 to size of s / 2 exclusive	for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )
if s [ i ] is not s [ y ] , increment sum	if ( s [ i ] != s [ y ] ) { sum ++ ; }
if sum is 2	if ( sum == 2 )
print " NO " and newline	cout << " NO " << endl ;
decrement y	y -- ;
if sum is 1	if ( sum == 1 )
print " YES " and newline	cout << " YES " << endl ;
else if sum is 0 and size of s % 2 is not 0	else if ( sum == 0 && s . size ( ) % 2 != 0 )
print " YES " and newline	cout << " YES " << endl ;
else	else
print " NO " and newline	cout << " NO " << endl ;
make string str	string str ;
read str	cin >> str ;
let integer d = 0	int d = 0 ;
for i = 0 to str . size ( ) exclusive , set d to d + str [ i ] ! = str [ str . size ( ) - 1 - i ]	for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] != str [ str . size ( ) - 1 - i ] ;
if d is 2 or if d is 0 and size of str % 2 is truthy	if ( d == 2 || ( d == 0 && str . size ( ) % 2 ) )
print " YES "	cout << " YES " << endl ;
else do	else
print " NO "	cout << " NO " << endl ;
create integers y , b , r	int y , b , r ;
read y read b read r	while ( cin >> y >> b >> r )
for i = r to 3 inclusive , decrementing i	for ( int i = r ; i >= 3 ; i -- )
if b is greater than or equal to ( i - 1 ) and y is greater than or equal to ( i - 2 )	if ( b >= ( i - 1 ) && y >= ( i - 2 ) )
print i + i - 1 + i - 2 print newline	cout << i + i - 1 + i - 2 << endl ;
break loop	break ;
create integers b , y , r	int b , y , r ;
read r read y read b	cin >> r >> y >> b ;
create integer array arr with size 3 , with arr = { r , y - 1 , b - 2 }	int arr [ 3 ] = { r , y - 1 , b - 2 } ;
create integermin with min = 200	int min = 200 ;
for i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
if min is greater than or equal to arr [ i ] , set min to arr [ i ]	if ( min > arr [ i ] ) { min = arr [ i ] ; }
print 3 * min + 3 print newline	cout << 3 * min + 3 << endl ;
declare integer variables y , b , r and m	int y , b , r , m ;
read y , b and r	cin >> y >> b >> r ;
if b < = r - 1 and y > = b - 1	if ( b <= r - 1 && y >= b - 1 )
m = 3 * b	m = 3 * b ;
else if b < = r - 1 and y is less than b - 1	else if ( b <= r - 1 && y < b - 1 )
m = 3 * ( y + 1 )	m = 3 * ( y + 1 ) ;
else if b > r - 1 and y > = r - 2	else if ( b > r - 1 && y >= r - 2 )
m = 3 * ( r - 1 )	m = 3 * ( r - 1 ) ;
else if b > r - 1 and y is less than r - 2	else if ( b > r - 1 && y < r - 2 )
m = 3 * ( y + 1 )	m = 3 * ( y + 1 ) ;
print m	cout << m << endl ;
create integers a , b , c , d , e , f , g	int a , b , c , d , e , f , g ;
read a read b read c	cin >> a >> b >> c ;
set e to a , set f to b , set g to c	e = a , f = b , g = c ;
set d to minimum of a and b	d = min ( a , b ) ;
set d to minimum of d and c	d = min ( d , c ) ;
set d to minimum of d and a	d = min ( d , a ) ;
if d is a	if ( d == a )
set b to a + 1	b = a + 1 ;
set c to a + 2	c = a + 2 ;
else if d is b	else if ( d == b )
set a to b - 1	a = b - 1 ;
set c to b + 1	c = b + 1 ;
else if d is c	else if ( d == c )
set a to c - 2	a = c - 2 ;
set b to c - 1	b = c - 1 ;
while a is greater than e or b is greater than f or c is greater than g	while ( a > e || b > f || c > g )
decrement a	a -- ;
decrement b	b -- ;
decrement c	c -- ;
print a + b + c print newline	cout << a + b + c << endl ;
create integers a , b and c	int a , b , c ;
read a , b and c	cin >> a >> b >> c ;
create integer a with a = 0	int ans = 0 ;
subtract 2 from c	c -= 2 ;
decrement b by 1	b -= 1 ;
print ( the minimum of a ( and the minimum of b and c ) ) * 3 + 3	cout << min ( a , min ( b , c ) ) * 3 + 3 << endl ;
create integers y , b , r	int y , b , r ;
read y read b read r	cin >> y >> b >> r ;
create integers mx with minimum of ( y + 2 and minimum of ( b + 1 and r ) )	int mx = min ( y + 2 , min ( b + 1 , r ) ) ;
print mx * 3 - 3 print " \ n "	cout << mx * 3 - 3 << " \n " ;
color = integer array of length 3	int color [ 3 ] ;
for i = 0 to 3 exclusive read color [ i ]	for ( int i = 0 ; i < 3 ; i ++ ) { cin >> color [ i ] ; }
min , no = integers	int min , no ;
if color [ 0 ] is less than color [ 1 ] - 1	if ( color [ 0 ] < color [ 1 ] - 1 )
set min to color [ 0 ] + 2	min = color [ 0 ] + 2 ;
set no to 0	no = 0 ;
else	else
set min to color [ 1 ] + 1	min = color [ 1 ] + 1 ;
set no to 1	no = 1 ;
if color [ 2 ] is less than min then set no to 2	if ( color [ 2 ] < min ) { no = 2 ; }
print color [ no ] * 3 - ( no - 1 ) * 3	cout << color [ no ] * 3 - ( no - 1 ) * 3 << endl ;
function min with integer arguments x , y and z that returns integer	int min ( int x , int y , int z )
create integer t = 0	int t = 0 ;
if x is less than y	if ( x < y )
if x is less than z	if ( x < z )
set t to 1	t = 1 ;
else	else
t = - 1	t = - 1 ;
else	else
if y is less than z	if ( y < z )
set t to 0	t = 0 ;
else	else
t = - 1	t = - 1 ;
return t	return t ;
declare integer variables y , b and r	int y , b , r ;
create integer sum = 0	int sum = 0 ;
read y , b and r	cin >> y >> b >> r ;
if y = b & & b = r & & r = y , set sum = 3 * ( y - 1 )	if ( y == b && b == r && r == y ) { sum = 3 * ( y - 1 ) ; }
assign min of y , b and r to new integer x	int x = min ( y , b , r ) ;
if x = 1	if ( x == 1 )
if ( b - y ) > = 1 & & ( r - y ) > = 2	if ( ( b - y ) >= 1 && ( r - y ) >= 2 )
sum = ( y + 1 ) * 3	sum = ( y + 1 ) * 3 ;
else	else
decrement y while ! ( ( b - y ) > = 1 & & ( r - y ) > = 2 )	while ( ! ( ( b - y ) >= 1 && ( r - y ) >= 2 ) ) { y -- ; }
sum = ( y + 1 ) * 3	sum = ( y + 1 ) * 3 ;
else if x = 0	else if ( x == 0 )
if b = r	if ( b == r )
sum = 3 * ( b - 1 )	sum = 3 * ( b - 1 ) ;
else	else
sum = 3 * b	sum = 3 * b ;
else	else
sum = ( r - 1 ) * 3	sum = ( r - 1 ) * 3 ;
print sum	cout << sum << endl ;
create integers a , b , c , s with s = 0	int a , b , c , s = 0 ;
read a read b read c	cin >> a >> b >> c ;
while 1 is true	while ( 1 )
if b is greater than or equal to a + 1	if ( b >= a + 1 )
if c is greater than or equal to a + 2	if ( c >= a + 2 )
set s to a + a + 1 + a + 2	s = a + a + 1 + a + 2 ;
break loop	break ;
decrement a	a -- ;
print s print newline	cout << s << endl ;
y , b , r are integers	int y , b , r ;
read y , b , r	cin >> y >> b >> r ;
If y < 1 or y > 100 or b < 2 or b > 100 or r < 3 or r > 100 , return 0	if ( y < 1 || y > 100 || b < 2 || b > 100 || r < 3 || r > 100 ) { return 0 ; }
y1 , y2 , b1 , b2 , r1 , r2 are integers	int y1 , y2 , b1 , b2 , r1 , r2 ;
assign y1 to y + 1	y1 = y + 1 ;
assign y2 to y + 2	y2 = y + 2 ;
assign b1 to b - 1	b1 = b - 1 ;
assign b2 to b + 1	b2 = b + 1 ;
assign r1 to r - 2	r1 = r - 2 ;
assign r2 to r - 1	r2 = r - 1 ;
if y1 < = b and y2 < = r , do the following	if ( y1 <= b && y2 <= r )
print y + y1 + y2 and a new line	cout << y + y1 + y2 << endl ;
else if b1 < = y and b2 < = r , , do the following	else if ( b1 <= y && b2 <= r )
print b + b1 + b2 and a new line	cout << b + b1 + b2 << endl ;
else if r1 < = y and r2 < = b , , do the following	else if ( r1 <= y && r2 <= b )
print r1 + r2 + r and a new line	cout << r1 + r2 + r << endl ;
y , b , r , ans = integers	int y , b , r , ans ;
read y and b and r	cin >> y >> b >> r ;
if r - 2 ! = 0 and r - 2 < = y and r - 1 < = b	if ( r - 2 != 0 && r - 2 <= y && r - 1 <= b )
set ans = 3 * r - 3	ans = 3 * r - 3 ;
else if b + 1 < = r and b - 1 ! = 0 and b - 1 < increment y	else if ( b + 1 <= r && b - 1 != 0 && b - 1 < + y )
set ans = 3 * b	ans = 3 * b ;
else	else
set ans = 3 * y + 3	ans = 3 * y + 3 ;
print ans	cout << ans << endl ;
create integers y , b , r	int y , b , r ;
read y read b read r	cin >> y >> b >> r ;
while y is greater than r - 2 or y is greater than b - 1 , decrement y	while ( y > r - 2 || y > b - 1 ) y -- ;
while b is greater than y + 1 , decrement b	while ( b > y + 1 ) b -- ;
while r is greater than b + 1 , decrement r	while ( r > b + 1 ) r -- ;
print y + r + b print ' \ n '	cout << y + r + b << ' \n ' ;
create integers y , b , r	int y , b , r ;
read y read b read r	cin >> y >> b >> r ;
print 3 * minimum of ( minimum of ( b + 1 and r ) and y + 2 ) - 3 print newline	cout << 3 * min ( min ( b + 1 , r ) , y + 2 ) - 3 << endl ;
let y , b , r be integers	int y , b , r ;
read y , b and r	cin >> y >> b >> r ;
for ( int i is equal to r , i greater than or equal to 3 , i - - )	for ( int i = r ; i >= 3 ; i -- )
if ( i less than or equal to r and i - 1 less than or equal to b and i - 2 less than or equal to y )	if ( i <= r && i - 1 <= b && i - 2 <= y )
print 3 * i - 3 and newline	cout << 3 * i - 3 << endl ;
stop	break ;
y , b , r = integers	int y , b , r ;
Read y , b , r	cin >> y >> b >> r ;
for i = y to 1 exclusive	for ( int i = y ; i >= 1 ; i -- )
ty = integers and set to i	int ty = i ;
tb = integers and set to i + 1	int tb = i + 1 ;
tc = integers and set to i + 2	int tc = i + 2 ;
if tb is less than or equal to b and tc is less than or equal to r	if ( tb <= b && tc <= r )
print ty + tb + tc and a new line	cout << ty + tb + tc << endl ;
create integers y , b , r	int y , b , r ;
read y read b read r	cin >> y >> b >> r ;
print minimum of ( y and minimum of b - 1 and r - 2 ) * 3 + 3 print newline	cout << min ( y , min ( b - 1 , r - 2 ) ) * 3 + 3 << endl ;
a , b , c = int	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
d = min ( a + 1 , min ( b , c - 1 ) )	int d = min ( a + 1 , min ( b , c - 1 ) ) ;
print 3 * d	cout << 3 * d << endl ;
create 64 bit integers a , b , c	int64_t a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print 3 * minimum of ( a + 1 and minimum of ( b and c - 1 ) ) print newline	cout << 3 * min ( a + 1 , min ( b , c - 1 ) ) << endl ;
create integers a , b , c	int a , b , c ;
read a read b read c	cin >> a >> b >> c ;
if b is greater than or equal to c - 1 and a is greater than or equal to c - 2	if ( b >= c - 1 && a >= c - 2 )
print 3 * c - 3 print newline	cout << 3 * c - 3 << endl ;
else if b is less than c - 1 and a is greater than or equal to c - 2	else if ( b < c - 1 && a >= c - 2 )
print 3 * b print newline	cout << 3 * b << endl ;
else if b is greater than or equal to c - 1 and a is less than c - 2	else if ( b >= c - 1 && a < c - 2 )
print 3 * a + 3 print newline	cout << 3 * a + 3 << endl ;
else	else
if a is less than b - 1	if ( a <= b - 1 )
print 3 * a + 3 print newline	cout << 3 * a + 3 << endl ;
else	else
print 3 * b print newline	cout << 3 * b << endl ;
declare integer variables y , b and r	int y , b , r ;
read y , b and r	cin >> y >> b >> r ;
for integer i = r to 3 inclusive counting down by 1	for ( int i = r ; i >= 3 ; i -- )
if i < = b + 1 and i < = y + 2	if ( i <= b + 1 && i <= y + 2 )
let ans be integer = i	int ans = i ;
print 3 * ans - 3 and a new line	cout << 3 * ans - 3 << endl ;
y , b , r = integers	int y , b , r ;
read y and b and r	cin >> y >> b >> r ;
for i = y to 0 inclusive	for ( int i = y ; i >= 0 ; i -- )
if i + 1 < = b and i + 2 < = r	if ( i + 1 <= b && i + 2 <= r )
print 3 * i + 3	cout << 3 * i + 3 << endl ;
in function min	int min ( int a , int b )
if a is less than b return a	if ( a < b ) return a ;
return b	return b ;
create integers a , b and c	int a , b , c ;
read a , b and c	cin >> a >> b >> c ;
set x to min of a and min of b - 1 and c - 2	int x = min ( a , min ( b - 1 , c - 2 ) ) ;
print x + x + 1 + x + 2 and new line	cout << x + x + 1 + x + 2 << endl ;
create integers y , r , b , ans	int y , r , b , ans ;
while read y read b read r is true	while ( cin >> y >> b >> r )
create integer ans with ans = minimum of ( y + 2 and minimum of ( b + 1 and r ) ) * 3	int ans = min ( y + 2 , min ( b + 1 , r ) ) * 3 ;
print ans - 3 print newline	cout << ans - 3 << endl ;
a , b , c = integers	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
set ans = 0	int ans = 0 ;
set c = c - 2	c -= 2 ;
set b = b - 1	b -= 1 ;
print min between a and ( min between b and c ) * 3 + 3	cout << min ( a , min ( b , c ) ) * 3 + 3 << endl ;
Variable M is set to 1000000007	int M = 1000000007 ;
declare three integer variables named y , b , and r	int y , b , r ;
Let the user input values for y , b , and r	cin >> y >> b >> r ;
decrease the value of b by 1	b -- ;
decrease the value of r by 2	r -= 2 ;
take the minimum number between b and r , then take the minimum number between that and the value of y , then multiply that by 3 and then add 3 and display the output to the screen	cout << 3 * min ( y , min ( b , r ) ) + 3 << endl ;
y , b , r = integers	int y , b , r ;
read y , b , r	cin >> y >> b >> r ;
if y > = r set y = r - 2	if ( y >= r ) y = r - 2 ;
if r - y = 1 decrement y	if ( r - y == 1 ) y -- ;
if y > = b set y = b - 1	if ( y >= b ) y = b - 1 ;
print y + ( y + 1 ) + ( y + 2 )	cout << y + ( y + 1 ) + ( y + 2 ) << endl ;
declare solve with no arguments , returning void	void solve ( ) ;
create long long t	long long t ;
set t to 1	t = 1 ;
while decrement t is true , run solve	while ( t -- ) solve ( ) ;
declare solve with no arguments , returning void	void solve ( )
create long longs y , b , r	long long y , b , r ;
read y read b read r	cin >> y >> b >> r ;
create long long tt with tt = minimum of ( y and minimum of ( b - 1 and r - 2 ) )	long long tt = min ( y , min ( b - 1 , r - 2 ) ) ;
print tt * 3 + 3 print ' \ n '	cout << tt * 3 + 3 << ' \n ' ;
y , b , r = integers	int y , b , r ;
while read y , b , and r	while ( cin >> y >> b >> r )
for i = r to greater or equal than 3	for ( int i = r ; i >= 3 ; i -- )
if b is greater or equal than i - 1 and y is greater or equal than i - 2	if ( b >= ( i - 1 ) && y >= ( i - 2 ) )
print i + i - 1 + i - 2 and new line	cout << i + i - 1 + i - 2 << endl ;
stop loop	break ;
let a , b and c be integers	int a , b , c ;
read a , b and c	cin >> a >> b >> c ;
increment a	a ++ ;
decrement c	c -- ;
print min of ( min of a and c ) and b * 3 , and a new line	cout << min ( min ( a , c ) , b ) * 3 << endl ;
create 64 bit integers a , b , c	int64_t a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print 3 * minimum of a + 1 and minimum of b and c - 1 , print newline	cout << 3 * min ( a + 1 , min ( b , c - 1 ) ) << endl ;
create integers y , b , r	int y , b , r ;
read y read b read r	cin >> y >> b >> r ;
if y is less than 1 or y is greater than 100 or b is less than 2 or b is greater than 100 or r is less than 3 or r is greater than 100 , return 0 from function	if ( y < 1 || y > 100 || b < 2 || b > 100 || r < 3 || r > 100 ) { return 0 ; }
if y + 1 is less than or equal to b and y + 2 is less than or equal to r	if ( y + 1 <= b && y + 2 <= r )
print 3 * y + 3 print newline	cout << 3 * y + 3 << endl ;
else if b - 1 is less than or equal to y and b + 1 is less than or equal to r	else if ( b - 1 <= y && b + 1 <= r )
print 3 * b print newline	cout << 3 * b << endl ;
else if r - 2 is less than or equal to y and r - 1 is less than or equal to b	else if ( r - 2 <= y && r - 1 <= b )
print 3 * r - 3 print newline	cout << 3 * r - 3 << endl ;
create integers x , y , z	int x , y , z ;
get x , y , z	cin >> x >> y >> z ;
if x + 1 is equal to y and y + 1 equal to z then	if ( x + 1 == y && y + 1 == z )
print x + y + z	cout << x + y + z << endl ;
else do the following	else
do the following indefinitely till break statement	while ( 1 )
create integer a with a = z	int a = z ;
create integer b with b = z - 1	int b = z - 1 ;
create integer c with c = z - 2	int c = z - 2 ;
if a , b , c less than or equal to z , y , x respectively and c + 1 equal to b and b + 1 equal to a then	if ( ( a <= z && b <= y && c <= x ) && ( c + 1 == b && b + 1 == a ) )
print a + b + c	cout << a + b + c << endl ;
break out of loop	break ;
decrement z	z = z - 1 ;
declare integer variables a , b and c	int a , b , c ;
read from the input to a , b and c	cin >> a >> b >> c ;
declare integer variable ans = 0	int ans = 0 ;
decrease c by 2	c -= 2 ;
subtract 1 from b	b -= 1 ;
print ( min of a and ( min of b and c ) ) * 3 + 3	cout << min ( a , min ( b , c ) ) * 3 + 3 << endl ;
t = int	int t ;
read t	cin >> t ;
for i = 0 to t	for ( int i = 0 ; i < t ; ++ i )
L , v , l , r = int	int L , v , l , r ;
read L then v then l then r	cin >> L >> v >> l >> r ;
print L / v - r / v + ( l - 1 ) / v	cout << L / v - r / v + ( l - 1 ) / v << endl ;
t = long long int	long long int t ;
read t	cin >> t ;
while decremented value of t is not zero	while ( t -- )
n , l , v , r = long long int	long long int n , l , v , r ;
read n , v , l , r	cin >> n >> v >> l >> r ;
a = n / v	long long int a = ( n / v ) ;
b = ( l - 1 ) / v	long long int b = ( l - 1 ) / v ;
c = r / v	long long int c = ( r / v ) ;
print a + b - c	cout << a + b - c << " \n " ;
N is a new constant integer = 2e6 + 123	const int N = 2e6 + 123 ;
INF is a new integer constant = 1e9 + 123	const int INF = 1e9 + 123 ;
create constant integer variable called MOD = 1e9 + 7	const int MOD = 1e9 + 7 ;
declare constant double variable EPS with value 1e - 9	const double EPS = 1e-9 ;
define function solve	void solve ( )
declare integer variables L , v , l , r and x	int L , v , l , r , x ;
read user input to L , v , l and r	cin >> L >> v >> l >> r ;
print ( L / v ) - ( ( r / v ) - ( ( l - 1 ) / v ) ) and ' \ n ' to the standard output	cout << ( L / v ) - ( ( r / v ) - ( ( l - 1 ) / v ) ) << ' \n ' ;
create integer variable t	int t ;
read variable t from the input	cin >> t ;
while t is not 0	while ( t )
call method solve ( )	solve ( ) ;
decrement t	-- t ;
n = int	int n ;
read n	cin >> n ;
x , y , z , w = int	int x , y , z , w ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
ans = long long	long long ans ;
read x , y , z , w	cin >> x >> y >> z >> w ;
if z modulo y is 0 decrement z	if ( z % y == 0 ) z -- ;
ans = x / y + z / y - w / y	ans = x / y + z / y - w / y ;
if y , z and w are the same increment ans	if ( y == z == w ) ans -- ;
print ans	cout << ans << endl ;
t = integer	int t ;
read t	cin >> t ;
while t	while ( t -- )
L , v , l , r = integers	int L , v , l , r ;
read L , v , l , r	cin >> L >> v >> l >> r ;
a = integer with a = r / v - l / v	int a = r / v - l / v ;
if l modulo v is 0 , increment a	if ( l % v == 0 ) a ++ ;
print L / v - a	cout << L / v - a << endl ;
create long long ints n , m , p , q , r , s , t , u , v , w , x , y , z , L , l , i and j with p = 0	long long int n , m , p = 0 , q , r , s , t , u , v , w , x , y , z , L , l , i , j ;
read input to n	cin >> n ;
start for loop from i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read L , v , l and r from the input	cin >> L >> v >> l >> r ;
set x to L / v - r / v	x = L / v - r / v ;
set y to ( l - 1 ) / v	y = ( l - 1 ) / v ;
print x + y and ' \ n '	cout << x + y << ' \n ' ;
let t be a integer	int t ;
read t	cin >> t ;
while t is decremented by 1	while ( t -- )
let d , v , l , r be long integers	long long int d , v , l , r ;
read d , v , l , r	cin >> d >> v >> l >> r ;
let count be a integer with count = d / v	int count = d / v ;
r is equal to v * ( r / v )	r = v * ( r / v ) ;
if l modulo v is not equal to 0 , l is equal to v * ( ( l / v ) + 1 )	if ( l % v != 0 ) l = v * ( ( l / v ) + 1 ) ;
print count - ( ( r - l ) / v ) - 1 and newline	cout << count - ( ( r - l ) / v ) - 1 << endl ;
t , L , v , l , r , r1 , ans = integers	int t , L , v , l , r , r1 , ans ;
read t	cin >> t ;
for i = 0 to t exclusive	for ( int i = 0 ; i < t ; i ++ )
read L , v , l , r	cin >> L >> v >> l >> r ;
ans = ( l - 1 ) / v	ans = ( l - 1 ) / v ;
r1 = ( ( r / v ) + 1 ) * v	r1 = ( ( r / v ) + 1 ) * v ;
if L > = r1 , then ans = ans + ( L - r1 ) / v + 1	if ( L >= r1 ) ans += ( L - r1 ) / v + 1 ;
print ans	cout << ans << endl ;
declare integer t	int t ;
read t	cin >> t ;
while decrement t is ture	while ( t -- )
declare long integers L , v , l , r	long int L , v , l , r ;
read L and v and l and r	cin >> L >> v >> l >> r ;
declare long integers tot = L / v	long int tot = L / v ;
declare long integers unseen = r / v - ( l - 1 ) / v	long int unseen = r / v - ( l - 1 ) / v ;
print tot - unseen and newline	cout << tot - unseen << endl ;
declare integers t , L , v , l , r	int t , L , v , l , r ;
read t	cin >> t ;
while decrement t	while ( t -- )
read L , v , l , r	cin >> L >> v >> l >> r ;
print L / v - r / v + l / v - ( 1 if l % v is 0 , else 0 ) , " \ n "	cout << L / v - r / v + l / v - ( l % v == 0 ? 1 : 0 ) << " \n " ;
n , k , v , l , r = integer	int n , k , v , l , r ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read k , v , l , r	cin >> k >> v >> l >> r ;
print the result of k / v + ( l - 1 ) / v - r / v	cout << k / v + ( l - 1 ) / v - r / v << " \n " ;
create long long T , L , v , l , r , ans1 , ans2	long long T , L , v , l , r , ans1 , ans2 ;
read T	cin >> T ;
while decrement T	while ( T -- )
read L , v , l and r	cin >> L >> v >> l >> r ;
set ans1 to L / v	ans1 = L / v ;
assign r / v - l / v to ans2	ans2 = r / v - l / v ;
if l mod v = 0 , assign ans2 + 1 to ans2	if ( l % v == 0 ) ans2 += 1 ;
print ans1 - ans2	cout << ans1 - ans2 << endl ;
i , j , k , n , m = long long integers , sum = long long integer = 0 , ans = long long integer = 0	long long int i , j , k , sum = 0 , ans = 0 , n , m ;
in function fastio that returns nothing	void fastio ( ) { }
in function solve that returns nothing	void solve ( )
L , v , l , r = long long integer	long long int L , v , l , r ;
read L , v , l , r	cin >> L >> v >> l >> r ;
n = L / v	n = L / v ;
m = r / v - ( l - 1 ) / v	m = r / v - ( l - 1 ) / v ;
print the result of n - m	cout << n - m << " \n " ;
call fastio	fastio ( ) ;
t = integer = 1	int t = 1 ;
read t	cin >> t ;
while looping decrease t by 1 , while in the loop call solve	while ( t -- ) solve ( ) ;
create new integer variable tc	int tc ;
read variable tc from the input	cin >> tc ;
loop , decrementing tc , while it is not 0	while ( tc -- )
declare int variables n , v , l and r	int n , v , l , r ;
read n , v , l and r from the user input	cin >> n >> v >> l >> r ;
create new integer variable t = n / v	int t = n / v ;
declare integer variable with name t1 with value ( r / v ) - ( ( l - 1 ) / v )	int t1 = ( ( r / v ) - ( ( l - 1 ) / v ) ) ;
print t - t1 to the standard output	cout << t - t1 << endl ;
declare long long variable called t	long long t ;
read t from the input	cin >> t ;
while t ! = 0 , decrement it and continue the loop	while ( t -- )
declare long long ints L , v , l and r	long long int L , v , l , r ;
read user input to L , v , l and r	cin >> L >> v >> l >> r ;
print L / v - ( r / v - ( l - 1 ) / v ) to the standard output	cout << L / v - ( r / v - ( l - 1 ) / v ) << endl ;
create int int t , L , v , l , r	int t , L , v , l , r ;
read t	cin >> t ;
for i = 0 to t exclusive	for ( int i = 0 ; i < t ; i ++ )
read L , v , l , r	cin >> L >> v >> l >> r ;
print L / v - r / v + ( l - 1 ) / v	cout << L / v - r / v + ( l - 1 ) / v << endl ;
t = long	long t ;
read t	cin >> t ;
loop t times	while ( t -- )
x , v , l , r = long	long x , v , l , r ;
read x then v then l then r	cin >> x >> v >> l >> r ;
ans = long with ans = x / v	long ans = x / v ;
temp = long with temp = r / v - ( l - 1 ) / v	long temp = r / v - ( l - 1 ) / v ;
decrement ans by temp	ans -= temp ;
print ans	cout << ans << " \n " ;
declare integers t , L , v , l , r	int t , L , v , l , r ;
read t	cin >> t ;
while decrement t is true	while ( t -- )
declare integers a = 0 , b = 0 , c = 0 , d = 0	int a = 0 , b = 0 , c = 0 , d = 0 ;
read L and v and l and r	cin >> L >> v >> l >> r ;
let a be ( l - 1 ) / v	a = ( l - 1 ) / v ;
let b be r / v	b = r / v ;
let d be d - a	d = b - a ;
let c be L / v	c = L / v ;
print c - d , newline	cout << c - d << endl ;
t = int	int t ;
L , v , l , r = long long	long long L , v , l , r ;
read t	cin >> t ;
loop t times	while ( t -- )
ans = long long with ans = 0	long long ans = 0 ;
read L then v then l then r	cin >> L >> v >> l >> r ;
set ans to ( l - 1 ) / v + L / v - r / v	ans = ( l - 1 ) / v + L / v - r / v ;
print ans	cout << ans << endl ;
declare constant integer variable INF with value 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
let t , v , l , r , L and cnt be ints with the value of cnt = 0	int t , v , l , r , L , cnt = 0 ;
read variable t from the input	cin >> t ;
loop , decrementing t , while it is not 0	while ( t -- )
read variables L , v , l and r from the input	cin >> L >> v >> l >> r ;
declare new integer ans = L / v - ( r / v - ( l - 1 ) / v )	int ans = L / v - ( r / v - ( l - 1 ) / v ) ;
print ans to the standard output	cout << ans << endl ;
let int t	int t ;
read t	cin >> t ;
while t - - is truthy	while ( t -- )
create long long ints l , v , a , and b	long long int l , v , a , b ;
read l , v , a , and b	cin >> l >> v >> a >> b ;
create long long int numOfLight = ( l / v ) - ( ( b / v ) - ( a - 1 ) / v )	long long int numOfLight = ( l / v ) - ( ( b / v ) - ( a - 1 ) / v ) ;
print numOfLight	cout << numOfLight << endl ;
make integer t	int t ;
read t	cin >> t ;
while t - - is truthy	while ( t -- )
create long long ints l , v , li , ri , val1 , val2 , val3	long long l , v , li , ri , val1 , val2 , val3 ;
read l , v , li , and ri	cin >> l >> v >> li >> ri ;
set val1 to l / v	val1 = l / v ;
set val2 to li / v	val2 = li / v ;
set val3 to ri / v	val3 = ri / v ;
if li modulo v is 0 , increment val3	if ( li % v == 0 ) val3 ++ ;
set val3 to val3 - val2	val3 -= val2 ;
set val1 to val1 - val3	val1 -= val3 ;
print val1	cout << val1 << endl ;
declare long long array mz size 100005 = { }	long long mz [ 100005 ] = { } ;
declare long long array ts size 100005 = { }	long long ts [ 100005 ] = { } ;
declare long long T	long long T ;
read T	cin >> T ;
while decrement T is true	while ( T -- )
declare long longs L , v , l , r , ans = 0	long long L , v , l , r , ans = 0 ;
read L , v , l , r	cin >> L >> v >> l >> r ;
increment ans by L / v	ans += L / v ;
if r % v is not 0 , let r be r - r % v	if ( r % v != 0 ) r = r - r % v ;
if l % v is not 0 , let l be l + ( v - l % v )	if ( l % v != 0 ) l = l + ( v - l % v ) ;
decrement ans by ( ( r - l ) / v + 1 )	ans -= ( ( r - l ) / v + 1 ) ;
print ans , newline	cout << ans << endl ;
t = int	int t ;
read t	cin >> t ;
L , u , l , r = int	int L , u , l , r ;
res = vector of int	vector < int > res ;
for i = 0 to t exclusive	for ( int i = 0 ; i < t ; i ++ )
read L , u , l , r	cin >> L >> u >> l >> r ;
curr = L / u	int curr = L / u ;
subtract ( r / u - l / u + ( 1 if l modulo u is 0 ) ) from curr	curr -= ( r / u - l / u + ( l % u == 0 ? 1 : 0 ) ) ;
put curr at end of res	res . push_back ( curr ) ;
for i = 0 to t exclusive print res [ i ]	for ( int i = 0 ; i < t ; i ++ ) { cout << res [ i ] << endl ; }
n , l1 , v1 , l2 , r , count = integers	int n , l1 , v1 , l2 , r , count ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read l1 , v1 , l2 , r	cin >> l1 >> v1 >> l2 >> r ;
print the result of ( l1 / v1 - ( r / v1 - ( l2 - 1 ) / v1 ) )	cout << ( l1 / v1 - ( r / v1 - ( l2 - 1 ) / v1 ) ) << endl ;
in function gcd with arguments long long x and long long y that returns a long long	long long gcd ( long long x , long long y )
if y is 0	if ( y == 0 )
return x	return x ;
else	else
return the result of calling gcd with arguments y and x modulo y	return gcd ( y , x % y ) ;
in function long long expo with arguments of long long n , long long m , and long long p that returns a long long	long long expo ( long long n , long long m , long long p )
r = long long = 1	long long r = 1 ;
n = n modulo p	n = n % p ;
while m > 0	while ( m > 0 )
if m modulo 2 is possible then r = ( r * n ) modulo p	if ( m % 2 ) r = ( r * n ) % p ;
n = n squared modulo p	n = ( n * n ) % p ;
m - m / 2	m = m / 2 ;
return r modulo p	return r % p ;
in function isPrime with an argument of a long long n that returns a boolean	bool isPrime ( long long n )
if n < = 1 then return false	if ( n <= 1 ) return false ;
if n < = 3 then return true	if ( n <= 3 ) return true ;
if n is even or n modulo 3 is 0 then return false	if ( n % 2 == 0 || n % 3 == 0 ) return false ;
for i = 5 , where i is square to n inclusive and i = i + 6	for ( long long i = 5 ; i * i <= n ; i = i + 6 )
if n modulo i is 0 or n modulo ( i + 2 ) is 0 , then return false	if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;
return true	return true ;
t = long long	long long t ;
read t	cin >> t ;
while looping decrease t by 1	while ( t -- )
a , b , c , d = long long	long long a , b , c , d ;
read a , b , c , d	cin >> a >> b >> c >> d ;
print the result of ( a / b ) - ( ( d / b ) - ( c - 1 ) / b )	cout << ( a / b ) - ( ( d / b ) - ( c - 1 ) / b ) << " \n " ;
t = integer	int t ;
read t	cin >> t ;
l , v , x , y = long long integer	long long int l , v , x , y ;
while decrement t	while ( t -- )
read l , v , x , y	cin >> l >> v >> x >> y ;
count = long long integer with count = 0	long long int count = 0 ;
total = long long integer with total = l / v ;	long long int total = l / v ;
sub1 = long long integer with sub1 = y / v	long long int sub1 = y / v ;
sub2 = long long integer with sub2 = x / v	long long int sub2 = x / v ;
count = total - sub1 + sub2	count = total - sub1 + sub2 ;
if x modulo v is 0 , decrement count	if ( x % v == 0 ) count -- ;
print count	cout << count << endl ;
create integer t	int t ;
read t	cin >> t ;
iterate t times	while ( t -- )
create integers l , r , v , p	int l , r , v , p ;
read p , v , l and r	cin >> p >> v >> l >> r ;
declare integer ans and set it to p / v	int ans = p / v ;
assign ans - ( r / v - ( l - 1 ) / v ) to ans	ans -= r / v - ( l - 1 ) / v ;
print ans	cout << ans << endl ;
declare new int variables n and d	int n , d ;
read n	cin >> n ;
declare new 2d array of long longs a with size n by 4	long long a [ n ] [ 4 ] ;
start for loop from i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
in a for loop , change j from 0 to 4 exclusive , reading a [ i ] [ j ] from the user input on each loop	for ( int j = 0 ; j < 4 ; j ++ ) { cin >> a [ i ] [ j ] ; }
in a for loop , change i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
change the value of d to ( a [ i ] [ 0 ] / a [ i ] [ 1 ] ) + ( ( a [ i ] [ 2 ] - 1 ) / a [ i ] [ 1 ] ) - ( a [ i ] [ 3 ] / a [ i ] [ 1 ] )	d = ( a [ i ] [ 0 ] / a [ i ] [ 1 ] ) + ( ( a [ i ] [ 2 ] - 1 ) / a [ i ] [ 1 ] ) - ( a [ i ] [ 3 ] / a [ i ] [ 1 ] ) ;
print d and " \ n "	cout << d << " \n " ;
declare integer T	int T ;
read T	cin >> T ;
declare L , v , l , r as long integers	long int L , v , l , r ;
while decrement T is true	while ( T -- )
read L , v , l , r	cin >> L >> v >> l >> r ;
declare nbr_lat = L / v as long integer	long int nbr_lat = L / v ;
declare long integer hidden = r / v - l / v	long int hidden = r / v - l / v ;
if l % v is 0 , increment hidden	if ( l % v == 0 ) hidden ++ ;
print nbr_lat - hidden and newline	cout << nbr_lat - hidden << endl ;
create long long int t	long long int t ;
read t	cin >> t ;
create long long int dest , v , l and r	long long int dest , v , l , r ;
while decrement t	while ( t -- )
read dest , v , l and r	cin >> dest >> v >> l >> r ;
set fin to dest / v	long long int fin = dest / v ;
fin1 = r / v	long long int fin1 = r / v ;
fin2 = ( l - 1 ) / v	long long int fin2 = ( l - 1 ) / v ;
print fin - fin1 + fin2	cout << ( fin - fin1 + fin2 ) << endl ;
n , i = integers	int n , i ;
Read n	cin >> n ;
a = array of n integers	int a [ n ] ;
Read n values into array a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort array elements of a in ascending order	sort ( a , a + n ) ;
if n is equal to 1	if ( n == 1 )
print a [ 0 ] and a new line	cout << a [ 0 ] << endl ;
else if n is 3	else if ( n == 3 )
print a [ 1 ] and a new line	cout << a [ 1 ] << endl ;
else do the following	else
print a [ 2 ] and a new line	cout << a [ 2 ] << endl ;
b , c , d , i , n = integers and a = array of 10001 integers	long long b , c , d , i , n , a [ 10001 ] ;
Read n	cin >> n ;
Read n values into array a	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort array elements of a in ascending order	sort ( a , a + n ) ;
print a [ n / 2 ] and a new line	cout << a [ n / 2 ] << endl ;
do nothing	;
eps = 1e - 8 = const double	const double eps = 1e-8 ;
maxn = 1e6 + 7 = const int	const int maxn = 1e6 + 7 ;
pi = const double = acos ( - 1 )	const double pi = acos ( - 1 ) ;
inf = 0x3f3f3f3f = const int	const int inf = 0x3f3f3f3f ;
n = int	int n ;
a = int array length 10	int a [ 10 ] ;
read n	cin >> n ;
read a from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
sort a from 1 to n inclusive	sort ( a + 1 , a + n + 1 ) ;
x = int = half of a [ n ] - a [ 1 ] )	int x = ( a [ n ] - a [ 1 ] ) / 2 ;
print a at 1 + x	cout << a [ 1 ] + x << endl ;
n = integer	int n ;
Read n	cin >> n ;
sum = integer with 0	int sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
a = integer	int a ;
Read a	cin >> a ;
set sum to sum + a	sum += a ;
print sum / n and a new line	cout << ( sum / n ) << endl ;
declare new unsigned variable n	unsigned n ;
read input to n	cin >> n ;
vect is a new vector of integers with n elements	vector < int > vect ( n ) ;
define new long sum = 0	long sum = 0 ;
in a for loop , change i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read vect [ i ]	cin >> vect [ i ] ;
change sum to the sum of sum and vect [ i ]	sum += vect [ i ] ;
sort elements of vect from the index 0 to n	sort ( vect . begin ( ) , vect . begin ( ) + n ) ;
new long avg = sum / n	long avg = sum / n ;
print avg	cout << avg << endl ;
n = integer , a = integer array of size 5	int n , a [ 5 ] ;
read n	cin >> n ;
for 0 to n exclusive read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort ( a , a + n )	sort ( a , a + n ) ;
print a [ n / 2 ]	cout << a [ n / 2 ] << endl ;
nu = array of 100100 long long	long long nu [ 100100 ] ;
n = integer	int n ;
read n	cin >> n ;
sum = integer with sum = 0	int sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
b = integer	int b ;
read b	cin >> b ;
sum = sum + b	sum += b ;
print sum / n	cout << sum / n << endl ;
a is an array of integers with size 100	int a [ 100 ] ;
create integer variable with name n	int n ;
read n from the user input	cin >> n ;
read n elements from the input to a in a for loop	for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }
sort a from index 0 to n	sort ( a , a + n ) ;
print a [ n / 2 ]	cout << a [ n / 2 ] << endl ;
in void function solve	void solve ( )
n = int	int n ;
read n	cin >> n ;
a = int vector	vector < int > a ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
buff = int	int buff ;
read buff	cin >> buff ;
push back buff into a	a . push_back ( buff ) ;
sort a	sort ( ( a ) . begin ( ) , ( a ) . end ( ) ) ;
m = half of size of a = int	int m = a . size ( ) / 2 ;
print a at m	cout << a [ m ] << endl ;
call solve	solve ( ) ;
n , m , i , q , ii = long long and a , b = long long array of size 100001 each	long long n , m , i , a [ 100001 ] , b [ 100001 ] , q , ii ;
read n	cin >> n ;
read n values int a	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort a from index 0 to n	sort ( a , a + n ) ;
print a [ n / 2 ]	cout << a [ n / 2 ] << endl ;
V = vector of integer	vector < int > V ;
n = integer	int n ;
read n	cin >> n ;
while decrement n	while ( n -- )
x = integer	int x ;
read x	cin >> x ;
append x on V	V . push_back ( x ) ;
sort V . begin ( ) and V . end ( )	sort ( V . begin ( ) , V . end ( ) ) ;
print V [ ( V . size ( ) / 2 ) ]	cout << V [ ( V . size ( ) / 2 ) ] << endl ;
n , i = integers and a = array of 10 integers	int n , i , a [ 10 ] ;
Read n	cin >> n ;
Read n values into array a	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort array elements of a in ascending order	sort ( a + 1 , a + n + 1 ) ;
print a [ n / 2 + 1 ] and a new line	cout << a [ n / 2 + 1 ] << endl ;
n = integer	int n ;
Read n	cin >> n ;
year = array of n integers	int year [ n ] ;
Read n values into array year	for ( int i = 0 ; i < n ; i ++ ) cin >> year [ i ] ;
sort array elements of year in ascending order	sort ( year , year + n ) ;
print year [ n / 2 ] and a new line	cout << year [ n / 2 ] << endl ;
create constant double eps with value 1e - 8	const double eps = 1e-8 ;
create constant integer cakked maxn = 1e6 + 7	const int maxn = 1e6 + 7 ;
create constant double with name pi and value = acos of - 1	const double pi = acos ( - 1 ) ;
create new constant integer inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
declare integer variable n	int n ;
a is a new array of integers with 10 elements	int a [ 10 ] ;
read variable n from the input	cin >> n ;
read input into sequential items of a n times , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
sort a from element 1 to n + 1	sort ( a + 1 , a + n + 1 ) ;
x is a new integer = ( a [ n ] - a [ 1 ] ) / 2	int x = ( a [ n ] - a [ 1 ] ) / 2 ;
print a [ 1 ] + x	cout << a [ 1 ] + x << endl ;
MOD = const integer with MOD = 1000000007	const int MOD = 1000000007 ;
INF = const long long with INF = 1e18	const long long INF = 1e18 ;
t , m , n = long long	long long t , m , n ;
A = vector of integer	vector < int > A ;
in the function solve that returns long long	long long solve ( )
sort A . begin ( ) and A . end ( )	sort ( A . begin ( ) , A . end ( ) ) ;
n = integer with n = A . size ( )	int n = A . size ( ) ;
return A [ n / 2 ]	return A [ n / 2 ] ;
read n	cin >> n ;
resize n of A	A . resize ( n ) ;
for i = 0 to n exclusive , read A [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;
print solve	cout << solve ( ) << endl ;
create float n	float n ;
read n	cin >> n ;
create integers tmp and sum = 0	int tmp , sum = 0 ;
for i = 0 to i = n - 1	for ( int i = 0 ; i < n ; ++ i )
read tmp	cin >> tmp ;
set sum to sum + tmp	sum += tmp ;
print the result of ceil of sum / n	cout << ceil ( sum / n ) << endl ;
n = integer	int n ;
Read n	cin >> n ;
sum = integer with 0	int sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
a = integer	int a ;
Read a	cin >> a ;
set sum to sum + a	sum += a ;
print sum / n and a new line	cout << sum / n << endl ;
n = int	int n ;
read n	cin >> n ;
V = vector of n int	vector < int > V ( n ) ;
for i = 0 to n exclusive read V [ i ]	for ( int i = 0 ; i < n ; ++ i ) cin >> V [ i ] ;
sort V	sort ( V . begin ( ) , V . end ( ) ) ;
print ( V [ 0 ] + V [ n - 1 ] ) / 2	cout << ( V [ 0 ] + V [ n - 1 ] ) / 2 << " \n " ;
let n , a , sum = 0 be integer	int n , a , sum = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a	cin >> a ;
sum + = a	sum += a ;
print sum and a new line	cout << sum / n << endl ;
create integer n	int n ;
read input to n	cin >> n ;
create new vector of integers a with n elements	vector < int > a ( n ) ;
for i = 0 to n exclusive , read a [ i ] from the user input	for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }
sort vector a	sort ( a . begin ( ) , a . end ( ) ) ;
print a [ n / 2 ]	cout << a [ n / 2 ] << endl ;
create long long ints k , l , m , o , n , max = 0 and min = 0	long long int k , l , m , o , n , max ( 0 ) , min ( 0 ) ;
read input to o	cin >> o ;
for i from 0 to o exclusive incrementing i	for ( int i = 0 ; i < o ; i ++ )
read user input to n	cin >> n ;
if max is less than n , assign the new value = n to max	if ( max < n ) { max = n ; }
if i = 0 , change min to n	if ( i == 0 ) { min = n ; }
if min is greater than n , assign change min to n	if ( min > n ) { min = n ; }
change the value of k to ( max - min ) / 2	k = ( max - min ) / 2 ;
print max - k to the standard output	cout << max - k << endl ;
let maxn be a constant integer with maxn = 6	const int maxn = 6 ;
A = array of integers of length maxn	int A [ maxn ] ;
let N be a integer	int N ;
read N	cin >> N ;
for i = 1 to N inclusive , read A [ i ]	for ( int i = ( 1 ) ; i <= ( N ) ; i += ( 1 ) ) { cin >> A [ i ] ; }
sort the values A + 1 and A + N + 1	sort ( A + 1 , A + N + 1 ) ;
let p be a integer with p = N / 2	int p = N / 2 ;
if N modulo 2 is equal to 1 , increment p by 1	if ( N % 2 == 1 ) { p ++ ; }
print A [ p ] and newline	cout << A [ p ] << " \n " ;
declare new integer variables n and i	int n , i ;
read n from the input stream	cin >> n ;
a is an array of integers with n elements	int a [ n ] ;
read n elements from the input into a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
print a [ n / 2 ] to the stdout	cout << a [ n / 2 ] << endl ;
n = integer	int n ;
a = vector integer	vector < int > a ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
k = integer	int k ;
read k	cin >> k ;
push back the element of a by 1 and insert a new element of k at the end of a	a . push_back ( k ) ;
min = max = integer = a [ 0 ]	int min = a [ 0 ] , max = a [ 0 ] ;
for i = 0 to size of a exclusive	for ( int i = 0 ; i < a . size ( ) ; i ++ )
if a [ i ] > max , then max = a [ i ]	if ( a [ i ] > max ) max = a [ i ] ;
if a [ i ] < min , then min = a [ i ]	if ( a [ i ] < min ) min = a [ i ] ;
print min + ( max - min ) / 2	cout << min + ( max - min ) / 2 << endl ;
inf is a new constant integer with value 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
declare new constant integer MX = 1e5 + 5	const int MX = 1e5 + 5 ;
create new int n and int array a with size 10	int n , a [ 10 ] ;
read n	cin >> n ;
read n elements into a , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort a	sort ( a + 1 , a + n + 1 ) ;
print a [ n / 2 + 1 ] to the standard output	cout << a [ n / 2 + 1 ] << endl ;
MAX = constant integer of value 1e10	const int MAX = 1e10 ;
dict = set of integers	set < int > dict ;
n , j = integers	int n , j ;
read n	cin >> n ;
arr = array of length 6 initialized to 0	int arr [ 6 ] = { 0 } ;
for i = 0 to n exclusive read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if arr [ i ] is greater than 0 then insert arr [ i ] into dict	if ( arr [ i ] > 0 ) { dict . insert ( arr [ i ] ) ; }
set the first n elements of arr to 0	memset ( arr , 0 , n ) ;
set j to 0	j = 0 ;
for it = the first element of dict until the last element of dict exclusive set arr [ j ] to be the value of it then add 1 to j	for ( set < int > :: iterator it = dict . begin ( ) ; it != dict . end ( ) ; ++ it ) arr [ j ++ ] = * it ;
print arr [ n / 2 ]	cout << arr [ n / 2 ] << endl ;
a = array of 10 integers	int a [ 10 ] ;
n = integer	int n ;
Read n	cin >> n ;
Read n values into array a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort array elements of a in ascending order	sort ( a , a + n ) ;
print a [ n / 2 ] and a new line	cout << a [ n / 2 ] << endl ;
n = integer	int n ;
Read n	cin >> n ;
a = array of n + 2 integers	int a [ n + 2 ] ;
set a [ 0 ] to 0	a [ 0 ] = 0 ;
Read n values into array a	for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;
sort array elements of a in ascending order	sort ( a , a + n + 1 ) ;
k = integer , set to n / 2	int k = n / 2 ;
if n modulo 2 , then increment k	if ( n % 2 ) k ++ ;
print a [ k ] and a new line	cout << a [ k ] << endl ;
y = array of integers of length 10	int y [ 10 ] ;
let n be a integer	int n ;
read n	cin >> n ;
for i = 1 to n inclusive , read y [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> y [ i ] ;
sort the values y + 1 and y + n + 1	sort ( y + 1 , y + n + 1 ) ;
print y [ n / 2 + 1 ] and newline	cout << y [ n / 2 + 1 ] << endl ;
create int n	int n ;
read n	cin >> n ;
create int ara [ n ]	int ara [ n ] ;
for i = 0 to n exclusive , read ara [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> ara [ i ] ;
sort elements between ara and ara + n	sort ( ara , ara + n ) ;
if n = 1	if ( n == 1 )
print ara [ 0 ]	cout << ara [ 0 ] ;
else if n = 3	else if ( n == 3 )
print ara [ 1 ]	cout << ara [ 1 ] ;
else	else
print ara [ 2 ]	cout << ara [ 2 ] ;
print a new line	cout << endl ;
declare new constant integer M with value 2e5 + 5	const int M = 2e5 + 5 ;
create new constant integer inf with value 1e9 + 5	const int inf = 1e9 + 5 ;
n is a new integer variable	int n ;
create new vector of integers v	vector < int > v ;
read variable n from the input	cin >> n ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create new integer variable t	int t ;
read variable t from the input	cin >> t ;
add new element = t after the last element of v	v . push_back ( t ) ;
sort v from start to end	sort ( v . begin ( ) , v . end ( ) ) ;
print v [ n / 2 ]	cout << v [ n / 2 ] << endl ;
n = integer and y = array of 10 integers	int n , y [ 10 ] ;
Read n	cin >> n ;
Read n values into array y	for ( int i = 0 ; i < n ; i ++ ) cin >> y [ i ] ;
sort array elements of y in ascending order	sort ( y , y + n ) ;
print y [ n / 2 ] and a new line	cout << y [ n / 2 ] << endl ;
create variable n with type size_t	size_t n ;
read input to n	cin >> n ;
create new vector year with n elements of type of size_t	vector < size_t > year ( n ) ;
read n elements into year in a loop	for ( size_t i = 0 ; i < n ; ++ i ) { cin >> year [ i ] ; }
sort year	sort ( year . begin ( ) , year . end ( ) ) ;
print year [ ( n - 1 ) / 2 ]	cout << year [ ( n - 1 ) / 2 ] << endl ;
n = int	int n ;
read n	cin >> n ;
arr = array of 10 int	int arr [ 10 ] ;
for i = 1 to n exclusive read arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] ;
sort arr from position 1 to n + 1	sort ( arr + 1 , arr + n + 1 ) ;
if n is 1	if ( n == 1 )
print arr [ 1 ]	cout << arr [ 1 ] << endl ;
else if n is 3	else if ( n == 3 )
print arr [ 2 ]	cout << arr [ 2 ] << endl ;
else	else
print arr [ 3 ]	cout << arr [ 3 ] << endl ;
declare long long unsigned variables n and k	long long unsigned n , k ;
read n and k	cin >> n >> k ;
declare long long unsigned variable mid = n / 2	long long unsigned mid = n / 2 ;
if n modulo 2 is 1 , increment mid	if ( n % 2 == 1 ) mid ++ ;
if k < = mid	if ( k <= mid )
print ( k * 2 ) - 1	cout << ( k * 2 ) - 1 << endl ;
else	else
print ( ( k - ( mid + 1 ) ) * 2 ) + 2	cout << ( ( k - ( mid + 1 ) ) * 2 ) + 2 << endl ;
n , k , p , o = integers	long long n , k , p , o ;
Read n and k	cin >> n >> k ;
if n is even	if ( n % 2 == 0 )
set p to n / 2	p = n / 2 ;
else do the following	else
set p to n / 2 + 1	p = n / 2 + 1 ;
if k is less than or equal to p	if ( k <= p )
set o to ( k * 2 ) - 1	o = ( k * 2 ) - 1 ;
else do the following	else
set o to ( k - p ) * 2	o = ( k - p ) * 2 ;
print o and a new line	cout << o << endl ;
n , k , half = long long int	long long int n , k , half ;
read n and k	cin >> n >> k ;
if n modulo 2 is 0	if ( n % 2 == 0 )
half = n / 2	half = n / 2 ;
else if n modulo 2 is 1	else if ( n % 2 == 1 )
half = ( n + 1 ) / 2	half = ( n + 1 ) / 2 ;
if k < = half	if ( k <= half )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else if k > half	else if ( k > half )
print ( k - half ) * 2	cout << ( k - half ) * 2 << endl ;
declare long longs n , k , c , l and d	long long n , k , c , l , d ;
read n and k	cin >> n >> k ;
if n is even	if ( n % 2 == 0 )
l = n / 2	l = n / 2 ;
else	else
l = n / 2 + 1	l = n / 2 + 1 ;
if k < = l	if ( k <= l )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
if n is odd	if ( n % 2 != 0 )
print 2 * k - n - 1	cout << 2 * k - n - 1 << endl ;
else	else
print 2 * k - n	cout << 2 * k - n << endl ;
create long long n , k	long long n , k ;
read n , k	cin >> n >> k ;
if n is even	if ( n % 2 == 0 )
if k is greater than n / 2	if ( k > n / 2 )
print ( k - ( n / 2 ) ) * 2	cout << ( ( k ) - ( ( n / 2 ) ) ) * 2 << endl ;
else do the following	else
print k * 2 - 1	cout << k * 2 - 1 << endl ;
else do the following	else
if k is greater than ( n ) / 2 + 1	if ( k > ( n ) / 2 + 1 )
print ( k - ( n / 2 + 1 ) ) * 2	cout << ( ( k ) - ( ( n / 2 + 1 ) ) ) * 2 << endl ;
else do the following	else
print k * 2 - 1	cout << k * 2 - 1 << endl ;
create long long integers n and k	long long int n , k ;
read n and k	cin >> n >> k ;
if k < = ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print 2 * ( k - ( n + 1 ) / 2 )	cout << 2 * ( k - ( n + 1 ) / 2 ) << endl ;
create long long integer number	long long int number ;
declare long long integer variable position	long long int position ;
read number	cin >> number ;
read position	cin >> position ;
declare long long integer x	long long int x ;
if number is even	if ( number % 2 == 0 )
if position < = number / 2	if ( position <= number / 2 )
x = ( position * 2 ) - 1	x = ( position * 2 ) - 1 ;
else if position is greater than number / 2	else if ( position > number / 2 )
x = ( position - ( number / 2 ) ) * 2	x = ( position - ( number / 2 ) ) * 2 ;
else if number is odd	else if ( number % 2 == 1 )
if position < = ( number + 1 ) / 2	if ( position <= ( number + 1 ) / 2 )
x = ( position * 2 ) - 1	x = ( position * 2 ) - 1 ;
else if position is greater than ( number + 1 ) / 2	else if ( position > ( number + 1 ) / 2 )
x = ( position - ( ( number + 1 ) / 2 ) ) * 2	x = ( position - ( ( number + 1 ) / 2 ) ) * 2 ;
print x	cout << x << endl ;
declare long long integer variables n and k = 0	long long int n = 0 , k = 0 ;
loop reading n and k from the input	while ( cin >> n >> k )
declare long long integer a = 0	long long int a = 0 ;
if n is odd	if ( n % 2 )
if k is greater than ( n + 1 ) / 2	if ( k > ( n + 1 ) / 2 )
a = ( k - ( n + 1 ) / 2 ) * 2	a = ( k - ( n + 1 ) / 2 ) * 2 ;
else	else
a = 2 * k - 1	a = 2 * k - 1 ;
else	else
if k is greater than n / 2	if ( k > n / 2 )
a = ( k - n / 2 ) * 2	a = ( k - n / 2 ) * 2 ;
else	else
a = 2 * k - 1	a = 2 * k - 1 ;
print a	cout << a << endl ;
n , k , p , o = long long int	long long int n , k , p , o ;
read n and k	cin >> n >> k ;
if n modulo 2 is 0	if ( n % 2 == 0 )
p = n / 2	p = n / 2 ;
else	else
p = ( n / 2 ) + 1	p = ( n / 2 ) + 1 ;
if k < = p	if ( k <= p )
o = ( 2 * k ) - 1	o = ( 2 * k ) - 1 ;
else	else
o = ( k - p ) * 2	o = ( k - p ) * 2 ;
print o	cout << o << endl ;
n , k = long long	long long n , k ;
read n then k	cin >> n >> k ;
if n is uneven	if ( n % 2 != 0 )
if k is less or equal to n / 2 + 1	if ( k <= n / 2 + 1 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print ( k - n / 2 - 1 ) * 2	cout << ( k - n / 2 - 1 ) * 2 << endl ;
else	else
if k is less or equal to n / 2	if ( k <= n / 2 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print ( k - n / 2 ) * 2	cout << ( k - n / 2 ) * 2 << endl ;
n , k = long long	long long n , k ;
read n , k	cin >> n >> k ;
if k < = ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print k * 2 - 1	cout << k * 2 - 1 << endl ;
else	else
print ( k - ( n + 1 ) / 2 ) * 2	cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;
create long long int n , k and mid	long long int n , k , mid ;
read n and k	cin >> n >> k ;
assign ceil of n / 2 . 0 to mid	mid = ceil ( n / 2.0 ) ;
if k is less than or equal to mid	if ( k <= mid )
print ( k * 2 ) - 1	cout << ( k * 2 ) - 1 << endl ;
else do the following	else
print ( k - mid ) * 2	cout << ( k - mid ) * 2 << endl ;
declare unsigned long longs a , b and c	unsigned long long a , b , c ;
read a and b	cin >> a >> b ;
if a is even	if ( a % 2 == 0 )
c = a / 2	c = a / 2 ;
else	else
c = a / 2 + 1	c = a / 2 + 1 ;
if b is greater than c	if ( b > c )
b = ( b - c ) * 2	b = ( b - c ) * 2 ;
else if b < = c	else if ( b <= c )
b = 2 * b - 1	b = 2 * b - 1 ;
print b	cout << b << endl ;
a , b = long long int , sum = 0	long long int a , b , sum = 0 ;
read a , b	cin >> a >> b ;
sum = ( a + 1 ) / 2	sum = ( a + 1 ) / 2 ;
if sum > = b	if ( sum >= b )
print b * 2 - 1	cout << ( b * 2 ) - 1 << endl ;
else	else
print ( b - sum ) * 2	cout << ( b - sum ) * 2 << endl ;
declare long long variables n and k	long long n , k ;
read n and k	cin >> n >> k ;
if k < = ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print k * 2 - 1	cout << k * 2 - 1 << endl ;
else	else
print ( k - ( n + 1 ) / 2 ) * 2	cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;
create long long n and k	long long n , k ;
let j be long long	long long j ;
read n and k	cin >> n >> k ;
if k < = ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
assign ( k - ( n + 1 ) / 2 ) * 2 to j	j = ( k - ( n + 1 ) / 2 ) * 2 ;
print j	cout << j << endl ;
create long long n , k , i , num	long long n , k , i , num ;
read n and k	cin >> n >> k ;
set i = ( n + 1 ) / 2	i = ( n + 1 ) / 2 ;
id k < = i	if ( k <= i )
assign 2 * k - 1 to num	num = 2 * k - 1 ;
else	else
k = k - i	k = k - i ;
set num to 2 * k	num = 2 * k ;
print num	cout << num << endl ;
n , k = integers	long long n , k ;
Read n and k	cin >> n >> k ;
if k is less than or equal to ( n + 1 ) / 2	if ( k <= ( ( n + 1 ) / 2 ) )
print ( k * 2 ) - 1 and a new line	cout << ( ( k * 2 ) - 1 ) << endl ;
else do the following	else
print ( k - ( n + 1 ) / 2 ) * 2 and a new line	cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;
declare long longs n and k	long long n , k ;
read n and k	cin >> n >> k ;
if n is even	if ( n % 2 == 0 )
if k < = n / 2	if ( k <= n / 2 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print 2 * ( k - n / 2 )	cout << 2 * ( k - n / 2 ) << endl ;
else	else
if k < = ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print 2 * ( k - ( ( n + 1 ) / 2 ) )	cout << 2 * ( k - ( ( n + 1 ) / 2 ) ) << endl ;
create variables n and k with type long long	long long int n , k ;
input n and k	cin >> n >> k ;
if k > ( n / 2 + n mod 2 )	if ( k > n / 2 + n % 2 )
print ( k - n / 2 - n % 2 ) * 2	cout << ( k - n / 2 - n % 2 ) * 2 << endl ;
otherwise	else
print k * 2 - 1	cout << k * 2 - 1 << endl ;
create long long n and k	long long n , k ;
read n , k	cin >> n >> k ;
if k < = ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print k * 2 - 1	cout << k * 2 - 1 << endl ;
else	else
print ( k - ( n + 1 ) / 2 ) * 2 and a newline	cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;
n , k = integers	long long int n , k ;
Read n and k	cin >> n >> k ;
if n is even	if ( n % 2 == 0 )
if k is less than or equal to n / 2	if ( k <= n / 2 )
print 2 * k - 1 and a new line	cout << 2 * k - 1 << endl ;
else do the following	else
print 2 * ( k - n / 2 ) and a new line	cout << 2 * ( k - n / 2 ) << endl ;
else do the following	else
if k is less than or equal to ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print 2 * k - 1 and a new line	cout << 2 * k - 1 << endl ;
else do the following	else
print 2 * ( k - ( n + 1 ) / 2 ) and a new line	cout << 2 * ( k - ( n + 1 ) / 2 ) << endl ;
declare long long n	long long n ;
create long long k	long long k ;
read n and k and keep looping	while ( cin >> n >> k )
if n is odd	if ( n % 2 != 0 )
if k < = n / 2 + 1	if ( k <= ( n / 2 + 1 ) )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print 2 * k - n - 1	cout << 2 * k - n - 1 << endl ;
else	else
if k < = n / 2	if ( k <= n / 2 )
print 2 * k - 1	cout << 2 * k - 1 << endl ;
else	else
print 2 * k - n	cout << 2 * k - n << endl ;
declare long long variables n and k	long long n , k ;
loop , reading n and k from the input	while ( cin >> n >> k )
if k < = ( n + 1 ) > > 1	if ( k <= ( ( n + 1 ) >> 1 ) )
assign k < < 1 - 1 to k	k = ( k << 1 ) - 1 ;
else {	else
decrease k by n + 1 > > 1	k -= ( n + 1 ) >> 1 ;
k = k < < 1	k <<= 1 ;
print k	cout << k << endl ;
create long long n and k	long long n , k ;
read n , k	cin >> n >> k ;
if n is odd	if ( n % 2 )
if k greater than ( ( n - 1 ) / 2 ) + 1 )	if ( k > ( ( n - 1 ) / 2 ) + 1 )
k = k - ( ( n - 1 ) / 2 ) - 1	k = k - ( ( n - 1 ) / 2 ) - 1 ;
assign 2 * k to k	k = 2 * k ;
esle	else
set k to 2 * k - 1	k = 2 * k - 1 ;
else	else
k greater than n / 2	if ( k > n / 2 )
k = k - ( n / 2 )	k = k - ( n / 2 ) ;
set k to 2 * k	k = 2 * k ;
else	else
set k = 2 * k - 1	k = 2 * k - 1 ;
print k	cout << k << endl ;
declare long long variables n and k	long long n , k ;
read n and k	cin >> n >> k ;
set n to ( n + 1 ) / 2	n = ( n + 1 ) / 2 ;
print 2 * ( k - n ) if k > n , else 2 * k - 1	cout << ( k > n ? 2 * ( k - n ) : 2 * k - 1 ) << endl ;
create long longs n , k	long long n , k ;
read n read k	cin >> n >> k ;
if k is less than or equal to ( n + 1 ) / 2	if ( k <= ( n + 1 ) / 2 )
print k * 2 - 1 print newline	cout << k * 2 - 1 << endl ;
else	else
print ( k - ( n + 1 ) / 2 * 2 print newline	cout << ( k - ( n + 1 ) / 2 ) * 2 << endl ;
n , k = long long	long long n , k ;
read n and k	cin >> n >> k ;
part = long long with part = 0	long long part = 0 ;
if n modulo 2 is 0	if ( n % 2 == 0 )
part = n / 2	part = n / 2 ;
else	else
part = ( n / 2 ) + 1	part = ( n / 2 ) + 1 ;
if k < = part	if ( k <= part )
print ( k * 2 ) - 1	cout << ( k * 2 ) - 1 << endl ;
else	else
print ( k - part ) * 2	cout << ( k - part ) * 2 << endl ;
let n , k , odd , ans be long long ints	long long n , k , odd , ans ;
read n and k	cin >> n >> k ;
if n is even	if ( n % 2 == 0 )
set odd to n / 2	odd = n / 2 ;
else	else
set odd to n / 2 + 1	odd = ( n / 2 ) + 1 ;
if k < = odd	if ( k <= odd )
set ans to k * 2 - 1	ans = ( k * 2 ) - 1 ;
else	else
set ans to ( k - odd ) * 2	ans = ( k - odd ) * 2 ;
print empty string , then print ans	cout << "  " << ans << endl ;
create unsigned int n	unsigned int n ;
k = integer	int k ;
read n	cin >> n ;
for i = 1 to 4 inclusive	for ( int i = 1 ; i <= 4 ; i ++ )
if n mod i = 1 or n mod i = 2 , set k to 1	if ( n % i == 1 || n % i == 2 ) k = 1 ;
if n mod 1 = 0 or n mod i = 3 , k = 0	if ( n % i == 0 || n % i == 3 ) k = 0 ;
print k	cout << k << endl ;
n = integer	int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
if n / 2 is even	if ( ( n / 2 ) % 2 == 0 )
print 0	cout << 0 << endl ;
otherwise	else
print 1	cout << 1 << endl ;
else	else
set n = n - 1	n = n - 1 ;
if n / 2 is even	if ( ( n / 2 ) % 2 == 0 )
print 1	cout << 1 << endl ;
else	else
print 0 and a newline	cout << 0 << endl ;
set maxn to 2e5 + 5	const int maxn = 2e5 + 5 ;
create long long a [ maxn ]	long long a [ maxn ] ;
create long long b [ maxn ]	long long b [ maxn ] ;
create int n	int n ;
read n	cin >> n ;
print ( ( n + 1 ) / 2 ) % 2	cout << ( ( n + 1 ) / 2 ) % 2 << endl ;
declare integer variable m	int m ;
read m	cin >> m ;
print m + 1 > > 1 & 1 if m & 1 , else print m > > 1 & 1 ; then print ' \ n '	cout << ( m & 1 ? m + 1 >> 1 & 1 : m >> 1 & 1 ) << ' \n ' ;
n = long long int	long long int n ;
read n	cin >> n ;
if ( n * ( n + 1 ) / 2 ) modulo 2 is 0	if ( ( n * ( n + 1 ) / 2 ) % 2 == 0 )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
create constant long long N = 1e8 + 3	const long long N = 1e8 + 3 ;
create constant long long MN = 1e9 + 7	const long long MN = 1e9 + 7 ;
create constant long long MX = - 1e9 - 7	const long long MX = - 1e9 - 7 ;
create long longs n , l , a , t , l1 , cnt , c and q	long long n , l , a , t , l1 , cnt , c , q ;
create string variables s1 and s	string s1 , s ;
create array of pairs of long longs called pr , with 1001 element	pair < long long , long long > pr [ 1001 ] ;
create vector of long longs called v	vector < long long > v ;
create a map from characters to long longs with name mp	map < char , long long > mp ;
create set of long longs st	set < long long > st ;
create set iterator it for a set of long longs	set < long long > :: iterator it ;
read n	cin >> n ;
n % = 4	n %= 4 ;
if n = 0 or n = 3	if ( n == 0 or n == 3 )
print 0	cout << 0 ;
else if n = 1 or n = 2	else if ( n == 1 or n == 2 )
print 1	cout << 1 ;
print " \ n "	cout << " \n " ;
create int n	int n ;
read n	cin >> n ;
set ( n * ( n + 1 ) ) / 2 to y	int y = ( n * ( n + 1 ) ) / 2 ;
if y mod 2	if ( y % 2 )
print 1	cout << " 1 " << endl ;
otherwise	else
print 0 and a new line	cout << " 0 " << endl ;
set constant integer N = 5005	const int N = 5005 ;
n = integer	int n ;
read n	cin >> n ;
if n modulo 4 equal to 0 or n modulo 4 = 3	if ( n % 4 == 0 || n % 4 == 3 )
print 0	cout << 0 << endl ;
otherwise	else
print 1	cout << 1 << endl ;
create long long n , set sum = 0	long long n , sum = 0 ;
read n	cin >> n ;
assign n * ( n + 1 ) / 2 to sum	sum = n * ( n + 1 ) / 2 ;
if sum is even	if ( sum % 2 == 0 )
print 0	cout << 0 << endl ;
otherwise	else
print 1 and a newline	cout << 1 << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n modulo 4 equal to 0 or n modulo 4 = 3	if ( n % 4 == 0 || n % 4 == 3 )
print 0	cout << " 0 " << endl ;
otherwise	else
print 1 and a new line	cout << " 1 " << endl ;
declare power with long longs x , y , m as arguments , returning long long	long long power ( long long x , long long y , long long m )
if y is 1 , return x % m from function	if ( y == 1 ) return x % m ;
if y is 0 , return 1 from function	if ( y == 0 ) return 1 ;
if y bitwise and 1 , return ( x * result of run power with ( ( x * x ) % m , ( y - 1 ) / 2 , m ) as arguments ) % m from function	if ( y & 1 ) return ( x * power ( ( x * x ) % m , ( y - 1 ) / 2 , m ) ) % m ;
return result of run power with ( ( x * x ) % m , y / 2 , m ) as arguments % m from function	return power ( ( x * x ) % m , y / 2 , m ) % m ;
declare modinv with long longs x , mod with mod = 1000000007	long long modinv ( long long x , long long mod = 1000000007 )
return result of run power with x , mod - 2 , mod as arguments	return power ( x , mod - 2 , mod ) ;
declare solve	void solve ( )
create long long n	long long n ;
read n	cin >> n ;
if ( n * ( n + 1 ) / 2 ) & 1	if ( ( n * ( n + 1 ) / 2 ) & 1 )
print 1 print newline	cout << 1 << endl ;
else	else
print 0 print newline	cout << 0 << endl ;
run solve	solve ( ) ;
declare integer variables n , x and y	int n , x , y ;
read n	cin >> n ;
n = ( n * ( n + 1 ) ) / 2	n = ( n * ( n + 1 ) ) / 2 ;
x = n / 2	x = n / 2 ;
y = n - x	y = n - x ;
print absolute value of x - y	cout << abs ( x - y ) << endl ;
create long long n	long long n ;
set ans = 0	long long ans = 0 ;
read n	cin >> n ;
set ans = n * ( 1 + n ) / 2	ans = n * ( 1 + n ) / 2 ;
if ans is even	if ( ans % 2 == 0 )
print 0	cout << 0 << endl ;
otherwise	else
print 1 and a newline	cout << 1 << endl ;
create long long int T and n	long long int T , n ;
create int array a of length 100010 + 5	int a [ 100010 + 5 ] ;
set M = 1e9 + 7	long long int M = 1e9 + 7 ;
read n	cin >> n ;
n = n % 4	n %= 4 ;
if n is equal to 0 or n is equal to 3	if ( n == 0 || n == 3 )
print 0	cout << " 0 " << endl ;
otherwise	else
print 1 and a newline	cout << " 1 " << endl ;
n = integer	int n ;
Read n	cin >> n ;
tmp = integer with n modulo 4	int tmp = n % 4 ;
if tmp is equal to 1 OR tmp is equal to 2	if ( tmp == 1 || tmp == 2 )
print 1 and a new line	cout << 1 << endl ;
else do the following	else
print 0 and a new line	cout << 0 << endl ;
create int n	int n ;
read n	cin >> n ;
if n mod 4 = 0	if ( n % 4 == 0 )
print 0	cout << 0 << endl ;
else if n mod 4 is equal to 1	else if ( n % 4 == 1 )
print 1 and a new line	cout << 1 << endl ;
otherwise if n modulo 4 = 2	else if ( n % 4 == 2 )
print 1	cout << 1 << endl ;
else	else
print 0 and a new line	cout << 0 << endl ;
let n be a long integer	long long int n ;
read n	cin >> n ;
if ( n is equal to 3 or n % 4 is equal to 0 or n % 4 is equal to 3 )	if ( n == 3 || n % 4 == 0 || n % 4 == 3 )
print 0 and newline	cout << " 0 " << endl ;
else do the following	else
print 1 and newline	cout << " 1 " << endl ;
n , s = long longs	long long n , s ;
read n	cin >> n ;
set s to ( ( n + 1 ) * n ) / 2	s = ( ( n + 1 ) * n ) / 2 ;
if s % 2 is equal to 0	if ( s % 2 == 0 )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
if n modulo 4 = 3 | | n modulo 4 = 0	if ( n % 4 == 3 || n % 4 == 0 )
print 0	cout << 0 ;
else	else
print 1	cout << 1 ;
print ' \ n '	cout << ' \n ' ;
n = integer	int n ;
read n	cin >> n ;
print ( ( n + 1 ) / 2 ) modulo 2	cout << ( ( n + 1 ) / 2 ) % 2 << endl ;
n = integer	int n ;
read n	cin >> n ;
print ( ( n + 1 ) / 2 ) modulo 2	cout << ( ( n + 1 ) / 2 ) % 2 << endl ;
create integer n	int n ;
create long longs a and b	long long a , b ;
read n	cin >> n ;
if n is even and n % 4 = 0	if ( n % 2 == 0 && n % 4 == 0 )
print 0 and ' \ n '	cout << 0 << ' \n ' ;
else if n is even and n % 4 ! = 0	else if ( n % 2 == 0 && n % 4 != 0 )
print 1 and ' \ n '	cout << 1 << ' \n ' ;
else if n is odd and ( n - 1 ) % 4 = 0	else if ( n % 2 != 0 && ( n - 1 ) % 4 == 0 )
print 1 and ' \ n '	cout << 1 << ' \n ' ;
else if n is odd and ( n - 1 ) % 4 ! = 0	else if ( n % 2 != 0 && ( n - 1 ) % 4 != 0 )
print 0 and ' \ n '	cout << 0 << ' \n ' ;
create long long n	long long n ;
read n	cin >> n ;
create long long sum with sum = n * ( n + 1 )	long long sum = n * ( n + 1 ) ;
set sum to sum / 2	sum = sum / 2 ;
create long long p with p = sum / n	long long p = sum / n ;
print p % 2 print newline	cout << p % 2 << endl ;
declare long long n	long long n ;
read n	cin >> n ;
print n * ( n + 1 ) / 2 modulo 2	cout << n * ( n + 1 ) / 2 % 2 << endl ;
create long long integer n	long long int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
if n % 4 = 0	if ( n % 4 == 0 )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
else	else
if ( n - 1 ) % 4 = 0	if ( ( n - 1 ) % 4 == 0 )
print 1	cout << 1 << endl ;
else	else
print 0	cout << 0 << endl ;
A = integer array of length 10000	int A [ 10000 ] ;
B = integer array of length 10000	int B [ 10000 ] ;
n , ans = integers with ans value of 0	int n , ans = 0 ;
read n	cin >> n ;
if n mod 4 equals 1 or n mod 4 equals 2	if ( n % 4 == 1 || n % 4 == 2 )
print 1	cout << ' 1 ' << endl ;
else	else
print 0	cout << ' 0 ' << endl ;
n = integer	int n ;
read n	cin >> n ;
if n modulo 4 equal to 0	if ( n % 4 == 0 )
print 0	cout << 0 ;
otherwise if n modulo 4 = 1	else if ( n % 4 == 1 )
print 1	cout << 1 ;
otherwise if n modulo 4 equal to 2	else if ( n % 4 == 2 )
print 1	cout << 1 ;
otherwise	else
print 0	cout << 0 ;
print a new line	cout << " \n " ;
INF = const int with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
MAXN = const int with MAXN = 2e5 + 5	const int MAXN = 2e5 + 5 ;
n = long long	long long n ;
read n	cin >> n ;
print n * ( n + 1 ) / 2 modulo 2	cout << n * ( n + 1 ) / 2 % 2 << endl ;
create long long i , n and sum	long long i , n , sum ;
read n	cin >> n ;
if n is even , set sum to n / 2 * ( n + 1 )	if ( n % 2 == 0 ) sum = n / 2 * ( n + 1 ) ;
if n mod 2 is different from 0 , assign n / 2 * ( n + 1 ) + ( n / 2 + 1 ) to sum	if ( n % 2 != 0 ) sum = n / 2 * ( n + 1 ) + ( n / 2 + 1 ) ;
if sum modulo 2 is different from 0	if ( sum % 2 != 0 )
print 1	cout << 1 << endl ;
otherwise	else
print 0 and a new line	cout << 0 << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n modulo 2 is = 0	if ( n % 2 == 0 )
set m = n / 2	long long m = n / 2 ;
if m modulo 2 equal to 0	if ( m % 2 == 0 )
print 0	cout << " 0 " << endl ;
otherwise	else
print 1	cout << " 1 " << endl ;
otherwise	else
set m = ( n - 1 ) / 2	long long m = ( n - 1 ) / 2 ;
if m mod 2 = 0	if ( m % 2 == 0 )
print 1	cout << " 1 " << endl ;
other	else
print 0 and a new line	cout << " 0 " << endl ;
arr = long long array of size 200001	long long arr [ 200001 ] ;
n , i , sum = long long with sum = 0	long long n , i , sum = 0 ;
read n	cin >> n ;
set sum to ( n * ( n + 1 ) ) / 2	sum = ( n * ( n + 1 ) ) / 2 ;
if sum is even	if ( sum % 2 == 0 )
print 0	cout << 0 << endl ;
else if sum is uneven	else if ( sum % 2 != 0 )
print 1	cout << 1 << endl ;
x = long long int	long long int x ;
read x	cin >> x ;
print ( ( x * ( x + 1 ) / 2 ) modulo 2 )	cout << ( ( x * ( x + 1 ) / 2 ) % 2 ) << endl ;
mxaN = const int with maxN = 2012345678	const int maxN = 2012345678 ;
n = int	int n ;
read n	cin >> n ;
sum = long long int with sum = ( n * ( n + 1 ) ) / 2	long long int sum = ( n * ( n + 1 ) ) / 2 ;
if sum is even	if ( sum % 2 == 0 )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
create integer a	int a ;
read a	cin >> a ;
print ( ( a + 1 ) / 2 ) % 2 print " \ n "	cout << ( ( a + 1 ) / 2 ) % 2 << " \n " ;
create int n	int n ;
read n	cin >> n ;
n = n mod 4	n %= 4 ;
if n = 0 or n = 3	if ( n == 0 || n == 3 )
print 0	cout << 0 << endl ;
otherwise	else
print 1 and a newline	cout << 1 << endl ;
n , m = int	int n , m ;
read n , m	cin >> n >> m ;
mn = n if n < m else m	int mn = ( ( ( n ) < ( m ) ) ? ( n ) : ( m ) ) ;
fact = 1	int fact = 1 ;
for i = 2 to mn inclusive multiply fact by i	for ( int i = 2 ; i <= mn ; i ++ ) fact *= i ;
print fact	cout << fact << endl ;
declare new integer variables a and b	int a , b ;
read input to a and b	cin >> a >> b ;
new integer ans with value 1	int ans = 1 ;
for i from 1 to ( min of a and b ) inclusive , multiply ans by i	for ( int i = 1 ; i <= min ( a , b ) ; i ++ ) { ans *= i ; }
print ans	cout << ans << endl ;
declare integer variables a , b and ans with ans = 1	int a , b , ans = 1 ;
read a and b	cin >> a >> b ;
if a is greater than b , change a to b	if ( a > b ) a = b ;
in a for loop , change i from 1 to a inclusive , multiplying ans by i on every loop	for ( int i = 1 ; i <= a ; i ++ ) ans = ans * i ;
print ans to the standard output	cout << ans << endl ;
in function fact which accepts integer n and returns long long integer	long long int fact ( int n )
if n < = 0	if ( n <= 0 )
return 1	return 1 ;
else	else
return n * fact ( n - 1 )	return n * fact ( n - 1 ) ;
a , b = long long integers	long long int a , b ;
read a and b	cin >> a >> b ;
x = long long integer set to min ( a , b )	long long int x = min ( a , b ) ;
print fact ( x )	cout << fact ( x ) << endl ;
let a , b , c be long integers	long long a , b , c ;
read a , b	cin >> a >> b ;
if a is greater than b	if ( a > b )
c is equal to a	c = a ;
a is equal to b	a = b ;
b is equal to c	b = c ;
c is equal to 1	c = 1 ;
while a is true	while ( a )
c is equal to c * a	c *= a ;
decrement a by 1	a -- ;
print c and newline	cout << c << endl ;
a , b = integer	int a , b ;
sum = long long = 1	long long sum = 1 ;
read a , b	cin >> a >> b ;
min = integer = a if a < b else min = b	int min = a < b ? a : b ;
for i = 2 to min inclusive , then sum = sum * i	for ( int i = 2 ; i <= min ; i ++ ) sum *= i ;
print sum	cout << sum << endl ;
new array of integers dx with values 0 , 0 , - 1 , 1	int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;
new array of integers dy with values 1 , - 1 , 0 , 0	int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;
create new ints x and y	int x , y ;
read x and y from the input	cin >> x >> y ;
g is a new integer with value min of x and y	int g = min ( x , y ) ;
create new integer called ans = 1	int ans = 1 ;
loop through i from 1 while i < g + 1 , multiplying ans by i on each iteration	for ( int i = 1 ; i < g + 1 ; i += 1 ) ans = ans * i ;
print ans and ' \ n '	cout << ans << ' \n ' ;
function factorial with long argument A that returns long	long factorial ( long A )
declare long variable with name ans = 1	long ans = 1 ;
for i from 1 to A inclusive , multiply ans by i	for ( int i = 1 ; i <= A ; i ++ ) ans *= i ;
return ans	return ans ;
declare longs A and B	long A , B ;
read A and B from the user input	cin >> A >> B ;
print factorial ( min of A and B ) and " \ n " to the standard output	cout << factorial ( min ( A , B ) ) << " \n " ;
function fact ( get long long n , return long long )	long long fact ( long long n )
if n is 0 or 1	if ( ( n == 0 ) || ( n == 1 ) )
return 1	return 1 ;
else	else
return n * fact ( n - 1 )	return n * fact ( n - 1 ) ;
function gcd ( get long long a and b , return long long )	long long gcd ( long long a , long long b )
if b is 0	if ( b == 0 )
return a	return a ;
else	else
return gcd ( b , a modulo b )	return gcd ( b , a % b ) ;
a , b = long long	long long a , b ;
read a , b	cin >> a >> b ;
c = min ( a , b )	long long c = min ( a , b ) ;
print fact ( c )	cout << fact ( c ) << endl ;
declare long longs t , i , j , n , m , k , ans , ck , cnt = 0 , sum = 0 , c = 0	long long t , i , j , n , m , k , ans , ck , cnt = 0 , sum = 0 , c = 0 ;
declare strings s , s1 , s2 , tmp	string s , s1 , s2 , tmp ;
read n and m	cin >> n >> m ;
let ck be minimum of n and m	ck = min ( n , m ) ;
declare long long face = 1	long long fact = 1 ;
for i = 1 to ck inclusive , let fact be fact * i	for ( i = 1 ; i <= ck ; i ++ ) { fact *= i ; }
print face and newline	cout << fact << endl ;
declare function factorial which takes integer a	int factorial ( int a )
if a is equal to 1 then return 1	if ( a == 1 ) return 1 ;
return a * factorial ( a - 1 )	return a * factorial ( a - 1 ) ;
create integers a and b	int a , b ;
read a and b	cin >> a >> b ;
if a is greater than b	if ( a > b )
print factorial of b	cout << factorial ( b ) << endl ;
else	else
print factorial of a	cout << factorial ( a ) << endl ;
a , b , x , i , k = long long int with k = 1	long long int a , b , x , i , k = 1 ;
read a then b	cin >> a >> b ;
set x to min of a , b	x = min ( a , b ) ;
for i = 1 to x inclusive set k to k * i	for ( i = 1 ; i <= x ; i ++ ) { k = k * i ; }
print k	cout << k << endl ;
create new vector of integers called divisor with 1000000 + 1 elements filled with 0	vector < int > divisor ( 1000000 + 1 , 0 ) ;
integer function bigmod with long long arguments a , b and c	int bigmod ( long long a , long long b , long long c )
create long long variable with name x	long long x ;
if b is equal to 0 , return 1 modulo c	if ( b == 0 ) return 1 % c ;
change x to bigmod ( a , b / 2 , c )	x = bigmod ( a , b / 2 , c ) ;
set x to x squared % c	x = ( x * x ) % c ;
if b & 1 is true , assign the new value = ( x * a ) % c to x	if ( b & 1 ) x = ( x * a ) % c ;
return x	return x ;
ulong long function factorial with long long argument n	ulong long factorial ( long long n )
new ulong long fact = 1	ulong long fact = 1 ;
in a for loop , change i from 2 to n inclusive , multiplying fact by i	for ( int i = 2 ; i <= n ; i ++ ) { fact *= i ; }
return fact	return fact ;
declare int variables x and y	int x , y ;
loop , reading x and y from the input	while ( cin >> x >> y )
new integer variable mn with value min of x and y	int mn = min ( x , y ) ;
new ulong long A = result of factorial ( mn )	ulong long A = factorial ( mn ) ;
print the result of __gcd ( A , A )	cout << ( __gcd ( A , A ) ) << endl ;
in the function fac that takes long long n and returns long long	long long fac ( long long n )
ans = long long with ans = 1	long long ans = 1 ;
for i = 1 to n , ans = ans * i	for ( long long i = 1 ; i <= n ; i ++ ) ans *= i ;
return ans	return ans ;
a , b = long long	long long a , b ;
read a , b	cin >> a >> b ;
print fac ( min ( a , b ) )	cout << fac ( min ( a , b ) ) << endl ;
long long function gcd with long long arguments a and b	long long gcd ( long long a , long long b )
if b ! = 0 , return a	if ( ! b ) return a ;
return gcd ( b , ( a % b ) )	return gcd ( b , ( a % b ) ) ;
declare long long variables n , m , a and b with a and b = 1	long long n , m , a = 1 , b = 1 ;
read input to n and m	cin >> n >> m ;
if n is greater than m , swap n and m	if ( n > m ) swap ( n , m ) ;
in a for loop , change i from 1 to n inclusive , multiplying a by i on each iteration	for ( long long i = 1 ; i <= n ; i ++ ) a *= i ;
start for loop from i = 1 to n + 1 inclusive , multiply b by i on each loop	for ( long long i = 1 ; i <= ( n + 1 ) ; i ++ ) b *= i ;
print gcd ( a , b ) and " \ n " to the standard output	cout << gcd ( a , b ) << " \n " ;
a , b , i , ans , x = int with ans = 1	int a , b , i , ans = 1 , x ;
read a then b	cin >> a >> b ;
set x to min of a , b	x = min ( a , b ) ;
for i = 1 to x inclusive set ans to ans * i	for ( i = 1 ; i <= x ; i ++ ) { ans = ans * i ; }
print ans	cout << ans << endl ;
declare ints a and b	int a , b ;
create long long variable sum = 1	long long sum = 1 ;
read a and b and keep looping	while ( cin >> a >> b )
create new integer variable cnt with value min of a and b	int cnt = min ( a , b ) ;
loop through i from 1 to cnt inclusive , multiplying sum byi on each iteration	for ( int i = 1 ; i <= cnt ; i ++ ) sum *= i ;
print sum	cout << sum << endl ;
a , b = integers	int a , b ;
read a and b	cin >> a >> b ;
mn , ans = integers with mn having value of the minimum of a and b , and ans having value of 1	int mn = min ( a , b ) , ans = 1 ;
for i = 2 to mn inclusive set ans to ans * i	for ( int i = 2 ; i <= mn ; i ++ ) ans *= i ;
print ans	cout << ans << endl ;
declare long longs a , b , c , v and e	long long a , b , c , v , e ;
read input to a and b	cin >> a >> b ;
if a < = b	if ( a <= b )
assign the new value = a to v	v = a ;
else	else
set v to b	v = b ;
change the values of a and b to 1	a = b = 1 ;
while v > 0	while ( v > 0 )
change the value of b to b multiplied by a	b *= a ;
increment a by one	a ++ ;
decrement v by one	v -- ;
print b	cout << b << endl ;
create long long int fact ( long int x )	long long int fact ( long int x )
if x = 0 or 1 , return 1	if ( x == 0 || x == 1 ) return 1 ;
return x * fact ( x - 1 )	return x * fact ( x - 1 ) ;
create long int a , b	long int a , b ;
read a	cin >> a ;
read b	cin >> b ;
if a > b	if ( a > b )
print fact ( b ) and a newline	cout << fact ( b ) << " \n " ;
else	else
print fact ( a ) and a newline	cout << fact ( a ) << " \n " ;
function fact ( get int n , return int )	int fact ( int n )
if n is 1 return 1	if ( n == 1 ) return 1 ;
return n * fact ( n - 1 )	return n * fact ( n - 1 ) ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
output = fact ( int ( min ( a , b ) ) )	int output = fact ( int ( min ( a , b ) ) ) ;
print output	cout << output << endl ;
maxn = 1e5 + 7	const int maxn = 1e5 + 7 ;
create int a and b	int a , b ;
read a , b	cin >> a >> b ;
set c to min of a and b	int c = min ( a , b ) ;
ans = 1	long long ans = 1 ;
for i = 1 to c inclusive , set ans to ans * i	for ( int i = 1 ; i <= c ; i ++ ) ans *= i ;
print ans	cout << ans << endl ;
define function fact with long long as argument and returns a long long	long long fact ( long long x )
if x less than or equal to 1 then	if ( x <= 1 )
return 1 to the calling statement	return 1 ;
else do the following	else
return x * return value of fact ( x - 1 ) to the calling statement	return x * fact ( x - 1 ) ;
create long long a , b	long long a , b ;
read a , b	cin >> a >> b ;
if a greater than b then	if ( a > b )
call fact ( b ) and print the return value	cout << fact ( b ) << endl ;
else do the following	else
call fact ( a ) and print the return value	cout << fact ( a ) << endl ;
in function fact with argument integer n that returns an unsigned long long	unsigned long long fact ( int n )
ans = unsigned long long = 1	unsigned long long ans = 1 ;
while . > = 1	while ( n >= 1 )
ans = ans * n	ans *= n ;
decrease n by 1	n -- ;
return ans	return ans ;
a , b = integer	int a , b ;
read a , b	cin >> a >> b ;
print call fact with argument of the lower value between a and b	cout << fact ( min ( a , b ) ) << endl ;
ll = long long with value of 1	long long ll = 1 ;
a , b = integers	int a , b ;
read a and b	cin >> a >> b ;
if a is greater than b then set a to b	if ( a > b ) a = b ;
for i = 2 to a inclusive set ll to ll * i	for ( int i = 2 ; i <= a ; i ++ ) ll *= i ;
print ll	cout << ll << endl ;
let a , b , x , i , k be long integers with k = 1	long long int a , b , x , i , k = 1 ;
read a , b	cin >> a >> b ;
x is equal to minimum of a and b	x = min ( a , b ) ;
for i = 1 to x inclusive , k is equal to k * i	for ( i = 1 ; i <= x ; i ++ ) { k = k * i ; }
print k and newline	cout << k << endl ;
a , b = long long	long long a , b ;
read a , b	cin >> a >> b ;
c = min ( a , b )	long long c = min ( a , b ) ;
ans = 1	long long ans = 1 ;
for i = 1 to c inclusive multiply ans by i	for ( int i = 1 ; i <= c ; i ++ ) ans *= i ;
print ans	cout << ans << endl ;
a , b , c , d = integers with c = 1	long long a , b , c = 1 , d ;
Read a , b	cin >> a >> b ;
set d to minimum value of a and b	d = min ( a , b ) ;
for i = 1 to d exclusive , then set c to c * i	for ( int i = 1 ; i <= d ; i ++ ) c *= i ;
print c and a new line	cout << c << endl ;
a , b = long long	long long a , b ;
read a and b	cin >> a >> b ;
if a is less than b then set a to a otherwise set a to b	a = a < b ? a : b ;
set b to 1	b = 1 ;
for i = 2 to a inclusive set b to b * i	for ( int i = 2 ; i <= a ; ++ i ) { b *= i ; }
print b	cout << b << endl ;
declare integers a , b	int a , b ;
while read a , b	while ( cin >> a >> b )
declare integer t	int t ;
let t be a	t = a ;
if b is less than a , let t be b	if ( b < a ) { t = b ; }
declare integer i	int i ;
declare integer k = 1	int k = 1 ;
for i = 1 to t inclusive , let k be k * i	for ( i = 1 ; i <= t ; i ++ ) { k *= i ; }
print k and newline	cout << k << endl ;
create long long ints a and b	long long int a , b ;
read a and b	cin >> a >> b ;
let i and f = 1 be long long integers	long long int i , f = 1 ;
loop until break	for ( i = 1 ; ; i ++ )
f = f * i	f *= i ;
if i is equal to a or i is equal to b	if ( i == a || i == b )
print f	cout << f << endl ;
break	break ;
in long long function factorial taking n = long long	long long factorial ( long long n )
if n > 1	if ( n > 1 )
return n * factorial of n - 1	return n * factorial ( n - 1 ) ;
else	else
return 1	return 1 ;
a , b , ans = long long	long long a , b , ans ;
read a and b	cin >> a >> b ;
set ans to min of a and b	ans = min ( a , b ) ;
print factorial of ans	cout << factorial ( ans ) << endl ;
declare facto with long long n as argument , returning long long	long long facto ( long long n )
if n is 0 or n is 1 , return 1 from function	if ( n == 0 or n == 1 ) return 1 ;
declare long long array fact size 18 = { 0 }	long long fact [ 18 ] = { 0 } ;
let fact [ 0 ] be 1	fact [ 0 ] = 1 ;
for i = 1 to n inclusive , let fact [ i ] be fact [ i - 1 ] * i	for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ;
return fact [ n ] from function	return fact [ n ] ;
declare long longs a , b	long long a , b ;
read a and b	cin >> a >> b ;
print result of run facto with minimum of a and b as argument , " \ n "	cout << facto ( min ( a , b ) ) << " \n " ;
t , a , b , c , i , d , k = integers with i = 0 , d = 1 , k = 1	int t , a , b , c , i = 0 , d = 1 , k = 1 ;
Read a , c	cin >> a >> c ;
set i to minimum value of a and c	i = min ( a , c ) ;
for t = 1 to i exclusive	for ( t = 1 ; t <= i ; t ++ ) { d *= t ; }
print d and a new line	cout << d << endl ;
create integer n	int n ;
while read n is true	while ( cin >> n )
create long long answ with answ = n	long long answ = n ;
for i = 1 , a to n inclusive , incrementing i	for ( int i = 1 , a ; i <= n ; ++ i )
read a	cin >> a ;
increment answ by long long casted i * ( a - 1 )	answ += ( long long ) i * ( a - 1 ) ;
print answ print newline	cout << answ << endl ;
function Fast_Read_Out	void Fast_Read_Out ( ) { }
define function Random	void Random ( )
define unsigned long long seed	unsigned long long seed ;
call asm with arguments " rdtsc " : " = A " ( seed )	asm ( " rdtsc " : " =A " ( seed ) ) ;
initialze random number generator with seed	srand ( seed ) ;
unsigned long long function Time	unsigned long long Time ( )
unsigned long long time = clock ( ) / 1000 . 00	unsigned long long time = clock ( ) / 1000.00 ;
return time	return time ;
create constant long long inf with value ( 1e9 ) + 123	const long long inf = ( 1e9 ) + 123 ;
a is an array of long longs with size 101	long long a [ 101 ] ;
dp is an long long array with size 101	long long dp [ 101 ] ;
invoke function Random	Random ( ) ;
invoke function Fast_Read_Out	Fast_Read_Out ( ) ;
create long long n	long long n ;
read n	cin >> n ;
for i = 1 to n inclusive read a [ i ]	for ( long long i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n inclusive set dp [ i ] = to ( a [ i ] - 1 ) * i + 1	for ( long long i = 1 ; i <= n ; i ++ ) dp [ i ] = ( a [ i ] - 1 ) * i + 1 ;
create long long sum = 0	long long sum = 0 ;
for i = 1 to n inclusive increase sum by dp [ i ]	for ( long long i = 1 ; i <= n ; i ++ ) sum += dp [ i ] ;
print sum and a new line	cout << sum << endl ;
create integer n	int n ;
read n	cin >> n ;
create long long array arr with size n	long long arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
create long long ans with ans = 0	long long ans = 0 ;
for i = 0 to n exclusive , set ans to ans + ( i + 1 ) * arr [ i ] - i	for ( int i = 0 ; i < n ; i ++ ) { ans = ans + ( i + 1 ) * arr [ i ] - i ; }
print ans print newline	cout << ans << endl ;
n is long long	long long n ;
read n	cin >> n ;
declare long long called tot = 0	long long tot = 0 ;
declare long long called input	long long input ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read input	cin >> input ;
increase tot by i * ( input - 1 )	tot += i * ( input - 1 ) ;
increase tot by n	tot += n ;
print tot and a new line	cout << tot << endl ;
create long long integers n , s , m with s = 0	long long int n , s = 0 , m ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read m	cin >> m ;
increment s by m + i * ( m - 1 )	s += m + i * ( m - 1 ) ;
print s print newline	cout << s << endl ;
n and ans are long longs with ans = 0	long long n , ans = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
declare long long a	long long a ;
read a	cin >> a ;
increase ans by ( a - 1 ) * ( i - 1 ) + a	ans += ( a - 1 ) * ( i - 1 ) + a ;
print ans and a new line	cout << ans << endl ;
declare integer n	int n ;
create long longs a and Ans and long long array ara with size 101	long long a , ara [ 101 ] , Ans ;
read n	cin >> n ;
read a	cin >> a ;
assign value of a to Ans	Ans = a ;
for integer i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
read ara [ i ]	cin >> ara [ i ] ;
increase Ans by ( ara [ i ] - 1 ) * ( i + 1 ) + 1	Ans += ( ara [ i ] - 1 ) * ( i + 1 ) + 1 ;
print Ans	cout << Ans << endl ;
n = long long , a = array of 101 long long filled with 0 , ans = 0	long long n , a [ 101 ] = { 0 } , ans = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n inclusive sum ( a [ i ] - 1 ] ) * i + 1 to ans	for ( int i = 1 ; i <= n ; i ++ ) ans += ( a [ i ] - 1 ) * i + 1 ;
print ans	cout << ans << endl ;
desperate_optimization is a void function with integer argument precision	void desperate_optimization ( int precision )
cout . setf ( ios : : fixed )	cout . setf ( ios :: fixed ) ;
cout . setf ( ios : : showpoint )	cout . setf ( ios :: showpoint ) ;
cout . precision ( precision )	cout . precision ( precision ) ;
in the function hora with integer argument tc	void hora ( int tc )
create integer n	int n ;
read n	cin >> n ;
declare long long variable tot = 0	long long tot = 0 ;
for long long i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
create long long x	long long x ;
read x	cin >> x ;
increase tot by ( i ) * ( x - 1 ) + 1	tot += ( i ) * ( x - 1 ) + 1 ;
print tot and ' \ n '	cout << tot << ' \n ' ;
call desperate_optimization with 10 as an argument	desperate_optimization ( 10 ) ;
declare integer variable ntc = 1	int ntc = 1 ;
for integer tc = 1 to ntc inclusive , call hora of tc	for ( int tc = 1 ; tc <= ntc ; tc ++ ) hora ( tc ) ;
create long long n	long long n ;
read n	cin >> n ;
declare long long ans = 0	long long ans = 0 ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
declare long long variable a	long long a ;
read a	cin >> a ;
increase ans by ( i + 1 ) * ( a - 1 ) + 1	ans += ( i + 1 ) * ( a - 1 ) + 1 ;
print ans and a new line	cout << ans << endl ;
create constant integer M with M = 100 + 10	const int M = 100 + 10 ;
create long long integer a with size M	long long int a [ M ] ;
create integer n	int n ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
create long long integer ans with ans = 0	long long int ans = 0 ;
for i = 1 to n inclusive , set ans to ans + ( i - 1 ) * ( a [ i ] - 1 ) + a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + ( i - 1 ) * ( a [ i ] - 1 ) + a [ i ] ; }
print ans print newline	cout << ans << endl ;
declare long long variables a , b , i and k where b = 0	long long a , b = 0 , i , k ;
read a	cin >> a ;
for i = 1 to a inclusive	for ( i = 1 ; i <= a ; i ++ )
read k	cin >> k ;
if i = 1 | | k = 1	if ( i == 1 || k == 1 )
increase b by k	b += k ;
else	else
multiply k by i	k *= i ;
decrease k by i - 1	k -= i - 1 ;
increase b by k	b += k ;
print b and a new line	cout << b << endl ;
create long longs ans , n create long long array a with size 101	long long ans , n , a [ 101 ] ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n inclusive , set ans to ans + a [ i ] * i + 1 - i	for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + a [ i ] * i + 1 - i ; }
print ans print newline	cout << ans << endl ;
create integer n	int n ;
create long long array arr with size 102	long long arr [ 102 ] ;
read n	cin >> n ;
for i = 1 to n inclusive , read arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }
create long long sum with sum = 0	long long sum = 0 ;
for i = 1 to n inclusive , increment sum by ( arr [ i ] - 1 ) * i	for ( int i = 1 ; i <= n ; i ++ ) { sum += ( arr [ i ] - 1 ) * i ; }
increment sum by n	sum += n ;
print sum print newline	cout << sum << endl ;
create long longs , n , ans , cnt , create long long array a with size 105	long long n , a [ 105 ] , ans , cnt ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
set ans to a [ n - 1 ]	ans = a [ n - 1 ] ;
for i = n - 2 to 0 inclusive , decrementing i , increment a [ i ] by a [ i + 1 ] - 1 , increment ans by a [ i ]	for ( int i = n - 2 ; i >= 0 ; i -- ) a [ i ] += a [ i + 1 ] - 1 , ans += a [ i ] ;
print ans print newline	cout << ans << endl ;
create long longs n and a	long long n , a ;
read n	cin >> n ;
create long long ans = 0	long long ans = 0 ;
for long long i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
increase ans by ( a - 1 ) * i + 1	ans += ( a - 1 ) * i + 1 ;
print ans	cout << ans << endl ;
create long longs a , b , i , k , with b = 0	long long a , b = 0 , i , k ;
read a	cin >> a ;
for i = 1 to a inclusive	for ( i = 1 ; i <= a ; i ++ )
read k	cin >> k ;
if i is 1 or k is 1	if ( i == 1 || k == 1 )
increment b by k	b += k ;
else	else
set k to k * i	k *= i ;
decrement k by i - 1	k -= i - 1 ;
increment b by k	b += k ;
print b print newline	cout << b << endl ;
let a , i , k , n be unsigned long integers	unsigned long long a , i , k , n ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
k is equal to k + ( a - 1 ) * i	k += ( a - 1 ) * i ;
increase k by 1	k ++ ;
print k and endline	cout << k << endl ;
declare long longs n , a and ans	long long n , a , ans ;
read n and a	cin >> n >> a ;
set ans to a	ans = a ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
read a	cin >> a ;
increase ans by 1 + ( a - 1 ) * i	ans += 1 + ( a - 1 ) * i ;
print ans and a new line	cout << ans << endl ;
create interger t	int t ;
create long integer a	long long int a ;
create long integer sum	long long int sum ;
while ( t value is entered )	while ( cin >> t )
set sum to 0	sum = 0 ;
for ( int i = 0 to t ( exclusive ) )	for ( int i = 0 ; i < t ; i ++ )
read a	cin >> a ;
add ( a - 1 ) * i + a to sum	sum = sum + ( a - 1 ) * i + a ;
print out sum	cout << sum << endl ;
let n be a long integer	long long n ;
read n	cin >> n ;
let total ( 0 ) be a long type integer	long long total ( 0 ) ;
for ( long integer p = 0 to n exclusive )	for ( long p = 0 ; p < n ; p ++ )
let m be a long integer	long long m ;
read m	cin >> m ;
let the value of total is equal to total + ( m - 1 ) * ( p + 1 ) + 1	total += ( m - 1 ) * ( p + 1 ) + 1 ;
print total and newline	cout << total << endl ;
create long longs ans , n , create long long array a with size 105	long long ans , n , a [ 105 ] ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( register long long i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n inclusive , set ans to ans + a [ i ] * i + 1 - i	for ( register long long i = 1 ; i <= n ; i ++ ) ans = ans + a [ i ] * i + 1 - i ;
print ans print ' \ n '	cout << ans << ' \n ' ;
declare long long variable n	long long n ;
read n	cin >> n ;
long long total = 0	long long total ( 0 ) ;
for long = 0 to n exclusive	for ( long p = 0 ; p < n ; p ++ )
create long long m	long long m ;
read m	cin >> m ;
increase total by ( m - 1 ) * ( p + 1 ) + 1	total += ( m - 1 ) * ( p + 1 ) + 1 ;
print total	cout << total << endl ;
create long long n	long long n ;
create long long sum	long long sum ;
while reading n	while ( cin >> n )
set sum to 0	sum = 0 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare long long m	long long m ;
read m	cin >> m ;
increase sum by i * ( m - 1 ) + 1	sum += i * ( m - 1 ) + 1 ;
print sum	cout << sum << endl ;
declare abs with long long , long long as arguments , returning long long	long long abs ( long long , long long ) ;
declare solve with no arguments , returning void	void solve ( )
create long longs n , a , t , with t = 0	long long n , a , t = 0 ;
read n	cin >> n ;
for i = 1 to n + 1 exclusive	for ( long long i = 1 ; i < n + 1 ; i ++ )
read a	cin >> a ;
increment t by ( ( a - 1 ) * i + 1 )	t += ( ( a - 1 ) * i + 1 ) ;
print t print " \ n "	cout << t << " \n " ;
create long long TESTS with TESTS = 1	long long TESTS = 1 ;
while decrement TESTS is true , run solve	while ( TESTS -- ) { solve ( ) ; }
declare abs with long longs a , b as arguments , returning long long	long long abs ( long long a , long long b )
if a is greater than b	if ( a > b )
return a - b from function	return a - b ;
else	else
return b - a from function	return b - a ;
create constant integer INF with value 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create integer array a with 105 elements	int a [ 105 ] ;
declare long long variables i , j , k and l where l = 0	long long i , j , k , l = 0 ;
create long longs n and m	long long n , m ;
read n	cin >> n ;
for i = 0 to n exclusive read a [ i ] and decrement it	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] , a [ i ] -- ;
create long long s = n	long long s = n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] , increment s by a [ i ] + a [ i ] * i	if ( a [ i ] ) s += a [ i ] + a [ i ] * i ;
print s	cout << s << endl ;
create integer n	int n ;
declare long long integer array a with size 150	long long int a [ 150 ] ;
declare long long integer variable sum = 0	long long int sum = 0 ;
while reading n	while ( cin >> n )
assign value of 0 to sum	sum = 0 ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if i = 1	if ( i == 1 )
increase sum by a [ 1 ]	sum += a [ 1 ] ;
else	else
increase sum by ( a [ i ] - 1 ) * i + 1	sum = sum + ( a [ i ] - 1 ) * i + 1 ;
print sum	cout << sum << endl ;
declare integer n	int n ;
read n	cin >> n ;
declare long long array a with size n	long long a [ n ] ;
read a [ i ] n times	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
declare long long variable sum = 0	long long sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
increase sum by a [ i ]	sum += a [ i ] ;
increase sum by ( a [ i ] - 1 ) * i	sum += ( a [ i ] - 1 ) * i ;
print sum	cout << sum << endl ;
declare integer n and integer array a with size 101	int n , a [ 101 ] ;
read n	cin >> n ;
declare long long ans = 0	long long ans = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increase ans by 1LL * ( a [ i ] - 1 ) * ( i - 1 ) + a [ i ]	ans += 1LL * ( a [ i ] - 1 ) * ( i - 1 ) + a [ i ] ;
print ans	cout << ans << endl ;
assign value 0x3f3f3f3f to constant integer inf	const int inf = 0x3f3f3f3f ;
assign value 10005 to constant integer MAXN	const int MAXN = 10005 ;
assign value 19260817 to constant integer mod	const int mod = 19260817 ;
assign value 0x7fffffff to constant integer INF	const int INF = 0x7fffffff ;
ans is an long long array with size 101	long long ans [ 101 ] ;
create integers n and x	int n , x ;
read n	cin >> n ;
for i = 1 to n inclusive write input to ans [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> ans [ i ] ;
declare long long variable sum = 0	long long sum = 0 ;
for i = 1 to n inclusive , increase sum by ans [ i ] * i - i + 1	for ( int i = 1 ; i <= n ; i ++ ) sum += ans [ i ] * i - i + 1 ;
print sum and a new line	cout << sum << endl ;
arr is a new array of integers with size 3 by 1005	int arr [ 3 ] [ 1005 ] ;
define integers n and s	int n , s ;
read standard input to n and s	cin >> n >> s ;
in a for loop , change i from 0 to 2 exclusive incrementing i	for ( int i = 0 ; i < 2 ; i ++ )
change j from 1 to n inclusive in a loop and read input to arr [ i ] [ j ] on each iteration	for ( int j = 1 ; j <= n ; j ++ ) { cin >> arr [ i ] [ j ] ; }
create integer variable with name cek	int cek ;
if arr [ 0 ] [ 1 ] ! = 0 and ( arr [ 0 ] [ s ] ! = 0 or arr [ 1 ] [ s ] ! = 0 )	if ( arr [ 0 ] [ 1 ] && ( arr [ 0 ] [ s ] || arr [ 1 ] [ s ] ) )
change the value of cek to 1	cek = 1 ;
if arr [ 0 ] [ s ] is equal to 0	if ( arr [ 0 ] [ s ] == 0 )
assign 0 to cek	cek = 0 ;
for i from s + 1 to n inclusive incrementing i	for ( int i = s + 1 ; i <= n ; i ++ )
if arr [ 0 ] [ i ] and arr [ 1 ] [ i ] are both not 0 , change the value of cek to 1	if ( arr [ 0 ] [ i ] && arr [ 1 ] [ i ] ) cek = 1 ;
else	else
change the value of cek to 0	cek = 0 ;
print " YES " if cek is not 0 , otherwise print " NO "	cout << ( cek ? " YES " : " NO " ) << endl ;
define new integers n and m , and arrays a and b with 1111 element	int n , m , a [ 1111 ] , b [ 1111 ] ;
read from the input to n and m	cin >> n >> m ;
read standard input to n elements of a , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
read from the input to n items of b , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }
if a [ 1 ] is equal to 0	if ( a [ 1 ] == 0 )
print " NO " to the standard output	cout << " NO " << endl ;
flag is a new integer variable with value 0	int flag = 0 ;
if a [ m ] is not 0	if ( a [ m ] )
print " YES "	cout << " YES " << endl ;
else	else
if b [ m ] is 0	if ( ! b [ m ] )
print " NO "	cout << " NO " << endl ;
else	else
for integer i = m + 1 to n inclusive	for ( int i = m + 1 ; i <= n ; i ++ )
if both a [ i ] and b [ i ] are not 0	if ( a [ i ] && b [ i ] )
assign 1 to flag	flag = 1 ;
print " YES "	cout << " YES " << endl ;
if flag is false , print " NO "	if ( ! flag ) { cout << " NO " << endl ; }
let n , s be integers	int n , s ;
read n , s	cin >> n >> s ;
a = array of integers of length n , b = array of integers of length n	int a [ n ] , b [ n ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n exclusive , read b [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
if a [ 0 ] equals 0	if ( a [ 0 ] == 0 )
print NO and newline	cout << " NO " << endl ;
else if a [ s - 1 ] equals 0 and b [ s - 1 ] equals 0	else if ( a [ s - 1 ] == 0 && b [ s - 1 ] == 0 )
print NO and newline	cout << " NO " << endl ;
else if a [ s - 1 ] equals 1	else if ( a [ s - 1 ] == 1 )
print YES and newline	cout << " YES " << endl ;
else if a [ s - 1 ] equals 0 and b [ s - 1 ] equals 1	else if ( a [ s - 1 ] == 0 && b [ s - 1 ] == 1 )
the integer value of k = 0	int k = 0 ;
for i = s to n exclusive	for ( int i = s ; i < n ; i ++ )
if a [ i ] equals 1 and b [ i ] equals 1	if ( a [ i ] == 1 && b [ i ] == 1 )
k is equal to 1	k = 1 ;
print YES and newline	cout << " YES " << endl ;
if k equals 0	if ( k == 0 )
print NO and newline	cout << " NO " << endl ;
n , s = int	int n , s ;
a , b = bool array of size 1111 ach	bool a [ 1111 ] , b [ 1111 ] ;
read n then s	cin >> n >> s ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n inclusive read b [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }
if not a [ 1 ]	if ( ! a [ 1 ] )
print " NO "	cout << " NO " << endl ;
else if a [ 1 ] and a [ s ]	else if ( a [ 1 ] && a [ s ] )
print " YES "	cout << " YES " << endl ;
else	else
flag = int with flag = =	int flag = 0 ;
for i = s + 1 to n inclusive	for ( int i = s + 1 ; i <= n ; i ++ )
if a [ i ]	if ( a [ i ] )
if b [ i ] and b [ s ]	if ( b [ i ] && b [ s ] )
set flag to 1	flag = 1 ;
break	break ;
if flag	if ( flag )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
let N and S be integers	int N , S ;
read in N and S	cin >> N >> S ;
decrement S	-- S ;
let a and b be arrays of integers of size N	int a [ N ] , b [ N ] ;
read in N values into a	for ( int i = 0 ; i < N ; ++ i ) cin >> a [ i ] ;
read in N values into b	for ( int i = 0 ; i < N ; ++ i ) cin >> b [ i ] ;
if a [ 0 ] and a [ S ] are true	if ( a [ 0 ] && a [ S ] )
print YES	cout << " YES " << endl ;
for k = S + 1 to k < N	for ( int k = S + 1 ; k < N ; ++ k )
if a [ 0 ] and a [ k ] and b [ k ] and b [ S ] are true	if ( a [ 0 ] && a [ k ] && b [ k ] && b [ S ] )
print YES	cout << " YES " << endl ;
print NO	cout << " NO " << endl ;
declare an arrays of ints a and b with 1005 elements	int a [ 1005 ] , b [ 1005 ] ;
declare new int variables n and m	int n , m ;
read n and m from the input	cin >> n >> m ;
read n elements into array a from the input , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
read n elements into b , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }
if a [ 1 ] is equal to 0	if ( a [ 1 ] == 0 )
print " NO "	cout << " NO " << endl ;
else if a [ 1 ] and a [ m ] are both equal to 1	else if ( a [ 1 ] == 1 && a [ m ] == 1 )
print " YES "	cout << " YES " << endl ;
else	else
if b [ m ] = 0	if ( b [ m ] == 0 )
print " NO " to the output stream	cout << " NO " << endl ;
else	else
declare new integer variable bj with value 0	int bj = 0 ;
in a for loop , change i from m + 1 to n inclusive	for ( int i = m + 1 ; i <= n ; i ++ )
set the value of bj to 1 if a [ i ] and b [ i ] are both = 1	if ( a [ i ] == 1 && b [ i ] == 1 ) { bj = 1 ; }
if bj is not 0	if ( bj )
print " YES " to the standard output	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create constant integer mx = 1000	const int mx = 1000 ;
define new integers n and s	int n , s ;
create bool arrays a and b with size mx	bool a [ mx ] , b [ mx ] ;
in the function solve	void solve ( )
read input to n and s	cin >> n >> s ;
declare new int variables t1 and t2 = 0	int t1 = 0 , t2 = 0 ;
read n elements to the a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
read n elements into items of b	for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
if a [ 0 ] = 1 , change the value of t1 to 1	if ( a [ 0 ] == 1 ) t1 = 1 ;
if a [ s - 1 ] = 1 or b [ s - 1 ] = 1	if ( a [ s - 1 ] == 1 || b [ s - 1 ] == 1 )
in a for loop , change i from s - 1 to n exclusive incrementing i	for ( int i = s - 1 ; i < n ; i ++ )
if values of a [ i ] and b [ i ] are both = 1	if ( a [ i ] == 1 && b [ i ] == 1 )
set the value of t2 to 1	t2 = 1 ;
break	break ;
if t1 = 1 and ( t2 = 1 or a [ s - 1 ] = 1 )	if ( t1 == 1 && ( t2 == 1 || a [ s - 1 ] == 1 ) )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
call method solve ( )	solve ( ) ;
let maxn be a constant integer 1e5 + 5	const int maxn = 1e5 + 5 ;
let a , b be integer arrays of size maxn	int a [ maxn ] , b [ maxn ] ;
n , m be integers	int n , m ;
read n , m	cin >> n >> m ;
for integer i = 0 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for integer j = 0 to n inclusive , read b [ j ]	for ( int j = 1 ; j <= n ; j ++ ) cin >> b [ j ] ;
if a [ 1 ] equal 0	if ( a [ 1 ] == 0 )
print NO and newline	cout << " NO " << endl ;
if a [ m ] equal 1	if ( a [ m ] == 1 )
print YES and endline	cout << " YES " << endl ;
for integer i = m to n inclusive	for ( int i = m ; i <= n ; i ++ )
if a [ i ] , b [ i ] , b [ m ] all equal 1	if ( a [ i ] == 1 && b [ i ] == 1 && b [ m ] == 1 )
print YES and endline	cout << " YES " << endl ;
print NO and newline	cout << " NO " << endl ;
create function solve	void solve ( )
long long integer as n , s	long long n , s ;
read n , s	cin >> n >> s ;
long long integer as a [ n ] , b [ n ]	long long a [ n ] , b [ n ] ;
input a [ i ]	for ( long long i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
input b [ i ]	for ( long long i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
if a [ 0 ] is 1 then do the following	if ( a [ 0 ] == 1 )
if a [ s - 1 ] is 1 then do the following	if ( a [ s - 1 ] == 1 )
output YES \ n	cout << " YES\n " ;
else	else
long long integer as ng long h = 0	long long h = 0 ;
for s to less than n do the following	for ( long long i = s ; i < n ; i ++ )
if a [ i ] and b [ i ] is 1 then do the following	if ( a [ i ] == 1 && b [ i ] == 1 )
set h to 2	h = 2 ;
break	break ;
if h is 2 and b [ s - 1 ] is 1 then do the following	if ( h == 2 && b [ s - 1 ] == 1 )
output YES \ n	cout << " YES\n " ;
else	else
output NO \ n	cout << " NO\n " ;
else	else
output NO \ n	cout << " NO\n " ;
long long integer as t = 1	long long t = 1 ;
if t is true then run solve function	while ( t -- ) { solve ( ) ; }
let n , s be long integers , a = array of integers of length 1001 , b = array of integers of length 1001	long long int n , s , a [ 1001 ] , b [ 1001 ] ;
read n , s	cin >> n >> s ;
for long integer i = 1 to n inclusive , read a [ i ]	for ( long long int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for long integer i = 1 to n inclusive , read b [ i ]	for ( long long int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;
if a [ 1 ] equals 0	if ( a [ 1 ] == 0 )
print NO and newline	cout << " NO " << endl ;
if a [ s ] equals 1	if ( a [ s ] == 1 )
print YES and newline	cout << " YES " << endl ;
the boolean value of flag = false	bool flag = false ;
for long integer i = s + 1 to n inclusive	for ( long long int i = s + 1 ; i <= n ; i ++ )
if a [ i ] equals 1 and b [ i ] equals 1	if ( a [ i ] == 1 && b [ i ] == 1 )
flag is equal to true	flag = true ;
stop	break ;
if flag is equal to false	if ( flag == false )
print NO and newline	cout << " NO " << endl ;
if b [ s ] equals 1	if ( b [ s ] == 1 )
print YES and newline	cout << " YES " << endl ;
print NO and newline	cout << " NO " << endl ;
make ints n and s	int n , s ;
read n and s	cin >> n >> s ;
create integer array a of size n + 1 with { 0 }	int a [ n + 1 ] = { 0 } ;
make int array b of size n + 1 with { 0 }	int b [ n + 1 ] = { 0 } ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n , read b [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;
if a [ 1 ] is equal to 0	if ( a [ 1 ] == 0 )
print " NO \ n "	cout << " NO\n " ;
if a [ s ] is equal to 1	if ( a [ s ] == 1 )
show " YES \ n "	cout << " YES\n " ;
for i = s + 1 to n	for ( int i = s + 1 ; i <= n ; i ++ )
if a [ i ] is equal to 1 and b [ i ] is equal to 1 and b [ s ] is equal to 1	if ( a [ i ] == 1 && b [ i ] == 1 && b [ s ] == 1 )
show " YES \ n "	cout << " YES\n " ;
display " NO \ n "	cout << " NO\n " ;
define new integers n and s	int n , s ;
read n and s from the input	cin >> n >> s ;
new vector of integers forward with size = n + 1 , filled with 0	vector < int > forward ( n + 1 , 0 ) ;
declare vector of integers called backward with n + 1 element filled with 0	vector < int > backward ( n + 1 , 0 ) ;
for integer i = 1 to n inclusive , read input to forward [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> forward [ i ] ; }
read n elements to backward , starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> backward [ i ] ; }
if forward [ 1 ] = 0	if ( forward [ 1 ] == 0 )
print " NO "	cout << " NO " << endl ;
else	else
if forward [ s ] = 1	if ( forward [ s ] == 1 )
print " YES "	cout << " YES " << endl ;
else	else
if backward [ s ] is equal to 1	if ( backward [ s ] == 1 )
declare boolean variable with name availabe and value false	bool availabe = false ;
for i from s + 1 to n inclusive incrementing i	for ( int i = s + 1 ; i <= n ; i ++ )
if forward [ i ] and backward [ i ] = 1	if ( forward [ i ] == 1 && backward [ i ] == 1 )
assign true to availabe	availabe = true ;
break the loop	break ;
print " YES " if availabe is true , print " NO " otherwise	cout << ( ( availabe ) ? " YES " : " NO " ) << endl ;
else	else
print " NO "	cout << " NO " << endl ;
make integer arrays a of size 10000 and b of size 10000	int a [ 10000 ] , b [ 10000 ] ;
create bool ab = 0	bool ab = 0 ;
make ints n , s , i , z = 1 , x , and c	int n , s , i , z = 1 , x , c ;
read n and s	cin >> n >> s ;
set x to n + 1	x = n + 1 ;
for i = 1 to n , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n , read b [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;
if a [ s ] is equal to 1 and a [ 1 ] is equal to 1	if ( a [ s ] == 1 && a [ 1 ] == 1 )
set ab to 1	ab = 1 ;
else do	else
for i = n to 1 by decreasing by 1	for ( i = n ; i >= 1 ; i -- )
if a [ i ] is equal to 1 and b [ i ] is equal to 1	if ( a [ i ] == 1 && b [ i ] == 1 )
if i is greater than s and b [ s ] is equal to 1 , set ab to 1	if ( i >= s && b [ s ] == 1 ) ab = 1 ;
if a [ 1 ] is 0 , set ab to 0	if ( a [ 1 ] == 0 ) ab = 0 ;
if ab is equal to 1	if ( ab == 1 )
display " YES "	cout << " YES " << endl ;
otherwise	else
output " NO "	cout << " NO " << endl ;
n , s = integers	int n , s ;
t1 , t2 = array of 100000 integers each	int t1 [ 100000 ] , t2 [ 100000 ] ;
Read n , s	cin >> n >> s ;
Read n values into array t1	for ( int i = 0 ; i < n ; ++ i ) { cin >> t1 [ i ] ; }
Read n values into array t2	for ( int i = 0 ; i < n ; ++ i ) { cin >> t2 [ i ] ; }
if t1 [ 0 ] is equal to 1	if ( t1 [ 0 ] == 1 )
if t1 [ s - 1 ] is equal to 1	if ( t1 [ s - 1 ] == 1 )
print YES and a new line	cout << " YES " << endl ;
if t2t [ s - 1 ] is equal to 1	if ( t2 [ s - 1 ] == 1 )
for i = s to n exclusive	for ( int i = s ; i < n ; i ++ )
if t1 [ i ] is 1 and t2 [ i ] is 1	if ( t1 [ i ] == 1 && t2 [ i ] == 1 )
print YES and a new line	cout << " YES " << endl ;
print NO and a new line	cout << " NO " << endl ;
let n and s be integers	int n , s ;
read in n and s	cin >> n >> s ;
let a be an array of integers of size n + 1 , let b be an array of integers of size n + 1	int a [ n + 1 ] , b [ n + 1 ] ;
read in n values into array a	for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;
read in n values into array b	for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ] ;
if a [ 1 ] is equal to 1	if ( a [ 1 ] == 1 )
if a [ s ] is equal to 1	if ( a [ s ] == 1 )
print YES	cout << " YES " << endl ;
else if b [ s ] is equal to 1	else if ( b [ s ] == 1 )
for i = s + 1 to i < = n	for ( int i = s + 1 ; i <= n ; ++ i )
if a [ i ] is equal to 1 and b [ i ] is equal to 1	if ( a [ i ] == 1 && b [ i ] == 1 )
print YES	cout << " YES " << endl ;
print NO	cout << " NO " << endl ;
or else	else
print NO	cout << " NO " << endl ;
or else	else
print NO	cout << " NO " << endl ;
let n be a integer	int n ;
the integer value of ans = - 1	int ans = - 1 ;
the integer value of res = 0	int res = 0 ;
read n	cin >> n ;
a = array of integers of length n	int a [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is equal to 1 , increment res by 1	if ( a [ i ] == 1 ) res ++ ;
if res is equal to n	if ( res == n )
print n - 1 and newline	cout << n - 1 << endl ;
if n is equal to 1 and a [ 0 ] is equal to 1	if ( n == 1 && a [ 0 ] == 1 )
print 0 and newline	cout << " 0 " << endl ;
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
for k = 0 to n exclusive	for ( int k = 0 ; k < n ; k ++ )
the integer value of cnt = 0	int cnt = 0 ;
for l = 0 to n exclusive	for ( int l = 0 ; l < n ; l ++ )
if l > = k and l < = j	if ( l >= k && l <= j )
increment cnt by ( 1 - a [ l ] )	cnt = cnt + ( 1 - a [ l ] ) ;
else do the following	else
increment cnt by a [ l ]	cnt = cnt + a [ l ] ;
ans is equal to maximum of ans and cnt	ans = max ( ans , cnt ) ;
print ans and newline	cout << ans << endl ;
create n	int n ;
ans = - 1	int ans = - 1 ;
res = 0	int res = 0 ;
read n	cin >> n ;
create int a [ n ]	int a [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] = 1 , increment res	if ( a [ i ] == 1 ) res ++ ;
if res = n	if ( res == n )
print n - 1	cout << n - 1 << endl ;
if n = 1 and a [ 0 ] = 1	if ( n == 1 && a [ 0 ] == 1 )
print 0	cout << " 0 " << endl ;
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
for k = 0 to n inclusive	for ( int k = 0 ; k <= n ; k ++ )
cnt = 0	int cnt = 0 ;
for l = 0 to n exclusive	for ( int l = 0 ; l < n ; l ++ )
if l > = k and l < = j	if ( l >= k && l <= j )
cnt = cnt + ! a [ l ]	cnt = cnt + ! a [ l ] ;
else	else
set cnt = cnt + a [ l ]	cnt = cnt + a [ l ] ;
set ans to max of ans and cnt	ans = max ( ans , cnt ) ;
print ans	cout << ans << endl ;
let max = 0 , n , i , sum = 0 , a [ 105 ] , p be ints	int max = 0 , n , i , sum = 0 , a [ 105 ] , p ;
read n	cin >> n ;
set p to 0	p = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a at i	cin >> a [ i ] ;
increment sum by a at i	sum += a [ i ] ;
if sum = n	if ( sum == n )
print sum - 1	cout << sum - 1 << endl ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] = 0	if ( a [ i ] == 0 )
increment p	p ++ ;
else if a [ i ] = 1 and p < 0	else if ( a [ i ] == 1 && p < 0 )
reset p to 0	p = 0 ;
else if a [ i ] = 1 and p > 0	else if ( a [ i ] == 1 && p > 0 )
decrement p	p -- ;
if max < p then set max to p	if ( max < p ) max = p ;
increment sum by max	sum += max ;
print sum	cout << sum << endl ;
make ints n , a , cnt_1 = 0 , cnt_0 = 0 , and cnt_max0 = - 1	int n , a , cnt_1 = 0 , cnt_0 = 0 , cnt_max0 = - 1 ;
read n	cin >> n ;
while n - - is truthy	while ( n -- )
read a	cin >> a ;
if a is equal to 1	if ( a == 1 )
add 1 to cnt_1	cnt_1 ++ ;
if cnt_0 is greater than 0 , subtract 1 from cnt_0	if ( cnt_0 > 0 ) { cnt_0 -- ; }
if a is equal to 0	if ( a == 0 )
add 1 to cnt_0	cnt_0 ++ ;
if cnt_0 is greater than cnt_max0 , set cnt_max0 is equal to cnt_0	if ( cnt_0 > cnt_max0 ) cnt_max0 = cnt_0 ;
make integer ans = cnt_1 + cnt_max0	int ans = cnt_1 + cnt_max0 ;
display ans	cout << ans << endl ;
cnt1 , cnt0 = int array of size 105 each	int cnt1 [ 105 ] , cnt0 [ 105 ] ;
n = int	int n ;
read n	cin >> n ;
a = int array of size n + 1	int a [ n + 1 ] ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
set cnt1 [ 0 ] to 0	cnt1 [ 0 ] = 0 ;
set cnt0 [ 0 ] to 0	cnt0 [ 0 ] = 0 ;
maxv = int with maxv = - 100	int maxv = - 100 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
set cnt1 [ i ] to cnt1 [ i - 1 ] + a [ i ]	cnt1 [ i ] = cnt1 [ i - 1 ] + a [ i ] ;
set cnt0 [ i ] to i - cnt1 [ i ]	cnt0 [ i ] = i - cnt1 [ i ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = i to n inclusive	for ( int j = i ; j <= n ; j ++ )
if ( cnt0 [ j ] - cnt0 [ i - 1 ] ) - ( cnt1 [ j ] - cnt1 [ i - 1 ] ) + cnt1 [ n ] > maxv set maxv to ( cnt0 [ j ] - cnt0 [ i - 1 ] ) - ( cnt1 [ j ] - cnt1 [ i - 1 ] ) + cnt1 [ n ]	if ( ( cnt0 [ j ] - cnt0 [ i - 1 ] ) - ( cnt1 [ j ] - cnt1 [ i - 1 ] ) + cnt1 [ n ] > maxv ) maxv = ( cnt0 [ j ] - cnt0 [ i - 1 ] ) - ( cnt1 [ j ] - cnt1 [ i - 1 ] ) + cnt1 [ n ] ;
print maxv	cout << maxv << endl ;
n = integer	int n ;
read n	cin >> n ;
arr = array of integers of size n	int arr [ n ] ;
set cnt = 0	int cnt = 0 ;
set def = - 1	int def = - 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
a , b = integers set a and b = 0	int a = 0 , b = 0 ;
for j = i to 0 inclusive	for ( int j = i ; j >= 0 ; j -- )
if arr [ j ] = 0	if ( arr [ j ] == 0 )
increment a	a ++ ;
else	else
increment b	b ++ ;
set d = max of def and a - b	def = max ( def , a - b ) ;
if arr [ i ] = 1 increment cnt	if ( arr [ i ] == 1 ) cnt ++ ;
print cnt + def	cout << cnt + def << endl ;
the 1001th element of array a is equal to 0	int a [ 1001 ] = { 0 } ;
let n , c be integers with c = 0	int n , c = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is equal to 1	if ( a [ i ] == 1 )
a [ i ] = - 1	a [ i ] = - 1 ;
increment c by 1	c ++ ;
else do the following	else
a [ i ] is equal to 1	a [ i ] = 1 ;
let ans , maxx be integers with ans = a [ 0 ] , maxx = a [ 0 ]	int ans = a [ 0 ] , maxx = a [ 0 ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i < n ; i ++ )
maxx = maximum of a [ i ] and maxx + a [ i ]	maxx = max ( a [ i ] , maxx + a [ i ] ) ;
ans = maximum of ans and maxx	ans = max ( ans , maxx ) ;
print c + ans and newline	cout << c + ans << endl ;
let n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) be integers	int n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) ;
read n	cin >> n ;
while n is decremented by 1	while ( n -- )
read a	cin >> a ;
if a is equal to 1	if ( a == 1 )
increment count1 by 1	count1 += 1 ;
if extra0 is greater than 0 , decrement extra0 by 1	if ( extra0 > 0 ) { extra0 -= 1 ; }
else do the following	else
increment extra0 by 1	extra0 += 1 ;
if extra0 is greater than extra0max , extra0max is equal to extra0	if ( extra0 > extra0max ) { extra0max = extra0 ; }
print count1 + extra0max and newline	cout << count1 + extra0max << endl ;
create int a [ 105 ] , n , ans , set ans = 0	int a [ 105 ] , n , ans = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
for j = 0 to i inclusive	for ( int j = 0 ; j <= i ; j ++ )
v = 0	int v = 0 ;
for k = 0 to n exclusive	for ( int k = 0 ; k < n ; k ++ )
if k > = j and k < = i	if ( k >= j && k <= i )
set v = v + a [ k ] = 0	v += ! a [ k ] ;
else	else
v = v + a [ k ]	v += a [ k ] ;
set ans to max of ans and v	ans = max ( ans , v ) ;
print ans and a newline	cout << ans << " \n " ;
a = int array of size 105	int a [ 105 ] ;
n , ans = int with ans = 0	int n , ans = 0 ;
read n	cin >> n ;
read n values into a	for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; ++ i )
for j = 0 to i inclusive	for ( int j = 0 ; j <= i ; j ++ )
v = int with v = 0	int v = 0 ;
for k = 0 to n	for ( int k = 0 ; k < n ; k ++ )
if k > = j and k < = i	if ( k >= j && k <= i )
increment v by not a [ k ]	v += ! a [ k ] ;
else	else
increment v by a [ k ]	v += a [ k ] ;
set ans to max of ans , v	ans = max ( ans , v ) ;
print ans	cout << ans << endl ;
create int n	int n ;
read n	cin >> n ;
create vector int a ( n )	vector < int > a ( n ) ;
cnt = 0	int cnt = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] = 1	if ( a [ i ] == 1 )
a [ i ] = - 1	a [ i ] = - 1 ;
increment cnt	cnt ++ ;
if a [ i ] = 0 , a [ i ] = 1	if ( a [ i ] == 0 ) { a [ i ] = 1 ; }
set gmax = INT_MIN , lmax = 0	int gmax = INT_MIN , lmax = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
set lmax to lmax + a [ i ]	lmax += a [ i ] ;
set gmax = max ( gmax , lmax )	gmax = max ( gmax , lmax ) ;
if lmax < 0 , lmax = 0	if ( lmax < 0 ) { lmax = 0 ; }
print cnt + gmax	cout << cnt + gmax << endl ;
create ints n , a , count1 ( 0 ) , extra0 ( 0 ) , and extra0max ( - 1 )	int n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) ;
read n	cin >> n ;
while n - - is truthy	while ( n -- )
read a	cin >> a ;
if a is equal to 1	if ( a == 1 )
add 1 to count1	count1 += 1 ;
if extra0 is greater than 0 , subtract 1 from extra0	if ( extra0 > 0 ) { extra0 -= 1 ; }
else do	else
add 1 to extra0	extra0 += 1 ;
if extra0 is greater than extra0max , set extra0max to extra0	if ( extra0 > extra0max ) { extra0max = extra0 ; }
show result of count1 + extra0max	cout << count1 + extra0max << endl ;
declare constant integer N = 1e6 + 7	const int N = 1e6 + 7 ;
declare integer n	int n ;
declare integer cnt = 0	int cnt = 0 ;
declare integer ans = 0	int ans = 0 ;
read n	cin >> n ;
declare integer array a size n	int a [ n ] ;
for i = 0 to integer casted ( n - 1 ) inclusive	for ( int i = ( int ) ( 0 ) ; i <= ( int ) ( n - 1 ) ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is true	if ( a [ i ] )
let a [ i ] be - 1 , increment cnt	a [ i ] = - 1 , cnt ++ ;
else	else
let a [ i ] be 1	a [ i ] = 1 ;
declare integer mx = INT_MIN	int mx = INT_MIN ;
for i = 0 to integer casted ( n - 1 ) inclusive	for ( int i = ( int ) ( 0 ) ; i <= ( int ) ( n - 1 ) ; i ++ )
increment ans by a [ i ]	ans += a [ i ] ;
if ans is greater than mx , let mx be ans	if ( ans > mx ) mx = ans ;
if ans less than 0 , let ans be 0	if ( ans < 0 ) ans = 0 ;
print mx + cnt and ' \ n '	cout << mx + cnt << ' \n ' ;
create ints n , a , count1 ( 0 ) , extra0 ( 0 ) , and extra0max ( - 1 )	int n , a , count1 ( 0 ) , extra0 ( 0 ) , extra0max ( - 1 ) ;
read n	cin >> n ;
while n - - is truthy	while ( n -- )
read a	cin >> a ;
if a is equal to 1	if ( a == 1 )
add 1 to count1	count1 += 1 ;
if extra0 is greater than 0 , set extra0 to extra0 - 1	if ( extra0 > 0 ) { extra0 -= 1 ; }
else do	else
set extra0 to extra0 + 1	extra0 += 1 ;
if extra0 is greater than extra0max , set extra0max to extra0	if ( extra0 > extra0max ) { extra0max = extra0 ; }
display the result of count1 + extra0max	cout << count1 + extra0max << endl ;
let a be an integer of arrays of size 1000	int a [ 1000 ] ;
define function flip with takes in integers n , i , and j as arguments	int flip ( int n , int i , int j )
let b be an integer of arrays of size 1000	int b [ 1000 ] ;
iterate for n times , set b [ i ] to a [ i ] n times	for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] ;
let count be an integer and set its value to 0	int count = 0 ;
for k = i iterate until k is less than or equal to j	for ( int k = i ; k <= j ; k ++ )
if b [ k ] is equal to 0	if ( b [ k ] == 0 )
set b [ k ] to 1	b [ k ] = 1 ;
or else	else
set b [ k ] to 0	b [ k ] = 0 ;
iterate for n times	for ( int k = 0 ; k < n ; k ++ )
if b [ k ] is equal to 1 , increment count	if ( b [ k ] == 1 ) count ++ ;
return the value of count from the function	return count ;
let n be an integer	int n ;
read in n	cin >> n ;
read in a [ i ] n times	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
let max be an integer and set its value to - 1	int max = - 1 ;
iterate for n times	for ( int i = 0 ; i < n ; i ++ )
for j = i iterate while j is less than n	for ( int j = i ; j < n ; j ++ )
let count be an integer and set its value to flip ( n , i , j )	int count = flip ( n , i , j ) ;
if count is greater than max , set max to count	if ( count > max ) max = count ;
print max	cout << max << endl ;
create ints n , x , one_cnt = 0 , len_max = 0 , and len_cur = 0	int n , x , one_cnt = 0 , len_max = 0 , len_cur = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read x	cin >> x ;
if x is equal to 0	if ( x == 0 )
if + + len_cur is greater than len_max , set len_max is equal to len_cur	if ( ++ len_cur > len_max ) len_max = len_cur ;
else do	else
if - - len_cur is less than 0 , set len_cur to 0	if ( -- len_cur < 0 ) len_cur = 0 ;
add 1 to one_cnt	one_cnt ++ ;
display ( one_cnt + ( len_max = = 0 ? - 1 : len_max ) )	cout << ( one_cnt + ( len_max == 0 ? - 1 : len_max ) ) << endl ;
declare new ints n , x and mx where mx = 0 , and an int array a with size 101	int n , a [ 101 ] , x , mx = 0 ;
change a [ 0 ] to 0	a [ 0 ] = 0 ;
read n	cin >> n ;
change i from 1 to n inclusive in a for loop	for ( int i = 1 ; i <= n ; i ++ )
read input to x	cin >> x ;
assign a [ i - 1 ] + x to a [ i ]	a [ i ] = a [ i - 1 ] + x ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
in a for loop , change j from i to n inclusive , assigning the new value = max of a [ n ] + j - i + 1 - 2 * ( a [ j ] - a [ i - 1 ] ) and mx to mx on each iteration	for ( int j = i ; j <= n ; j ++ ) mx = max ( a [ n ] + j - i + 1 - 2 * ( a [ j ] - a [ i - 1 ] ) , mx ) ;
print mx	cout << mx << endl ;
declare integer n	int n ;
declare integer array num size 100	int num [ 100 ] ;
declare integer array a size 100	int a [ 100 ] ;
read n	cin >> n ;
declare integer count = 0	int count = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read num [ i ]	cin >> num [ i ] ;
if num [ i ] is 1	if ( num [ i ] == 1 )
let a [ i ] be - 1	a [ i ] = - 1 ;
increment count	++ count ;
else	else
let a [ i ] be 1	a [ i ] = 1 ;
declare integer max = - 2	int max = - 2 ;
declare integer sum = 0	int sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
increment sum by a [ i ]	sum += a [ i ] ;
if sum is greater than max , let max be sum	if ( sum > max ) { max = sum ; }
if sum is less than 0 , let sum be 0	if ( sum < 0 ) { sum = 0 ; }
print max + count and newline	cout << max + count << endl ;
let n , k be long integers	long long n , k ;
read n , k	cin >> n >> k ;
let t be a long integer with t = n / k	long long t = n / k ;
if t modulo 2 is true	if ( t % 2 )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
declare long longs n and m	long long n , m ;
read n and m	cin >> n >> m ;
if n / m % 2 ! = 0	if ( n / m % 2 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
create long long n , k	long long int n , k ;
print n , k	cin >> n >> k ;
if n / k is even	if ( ( n / k ) % 2 == 0 )
print NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
n , k , x = long long	long long n , k , x ;
read n then k	cin >> n >> k ;
set x to n / k	x = n / k ;
if x is even	if ( x % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
n , k = long long	long long n , k ;
read n , k	cin >> n >> k ;
if n / k is odd	if ( ( n / k ) % 2 != 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
declare long long int variable n	long long int n ;
create long long int k	long long int k ;
read n	cin >> n ;
read input to k	cin >> k ;
if ( n / k ) is odd	if ( ( ( n / k ) % 2 ) == 1 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create long longs n and k	long long n , k ;
read n and k	cin >> n >> k ;
if ( n / k ) is even	if ( ( n / k ) % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
n , k = long long	long long n , k ;
read n , k	cin >> n >> k ;
if the result of n / k ends in a 1 in binary	if ( n / k & 1 )
print YES	cout << " YES " << ' \n ' ;
else	else
print NO	cout << " NO " << ' \n ' ;
n , k = long long	long long n , k ;
read n , k	cin >> n >> k ;
print YES if the last bit of n / k ends in 1 else print NO	cout << ( ( n / k ) & 1 ? " YES " : " NO " ) << ' \n ' ;
n , x = integers	long long n , x ;
Read n and x	cin >> n >> x ;
if ( n / x ) modulo 2 is 0	if ( ( n / x ) % 2 == 0 )
print NO and a new line	cout << " NO " << endl ;
else do the following	else
print YES and a new line	cout << " YES " << endl ;
create long longs n and k	long long n , k ;
read input to n and k	cin >> n >> k ;
if n / k is odd	if ( n / k % 2 != 0 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
n , k = integers	long long int n , k ;
Read n and k	cin >> n >> k ;
if ( n / k ) modulo 2 is 0	if ( ( n / k ) % 2 == 0 )
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
n , k = integers	long long int n , k ;
Read n and k	cin >> n >> k ;
th = integer , set to n / k	long long th = n / k ;
if th is odd	if ( th % 2 == 1 )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
let st , cross , t_turn be long integers	long long int st , cross , t_turn ;
read st , cross	cin >> st >> cross ;
the value of t_turn is equal to st / cross	t_turn = st / cross ;
if not t_turn & 1	if ( ! ( t_turn & 1 ) )
print NO and newline	cout << " NO " << endl ;
else do the following	else
print YES and newline	cout << " YES " << endl ;
declare long long variables n and k	long long n , k ;
read n and k	cin >> n >> k ;
declare long long variable count = n / k	long long count = n / k ;
if count is even	if ( count % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
declare unsigned long long int variables k and n	unsigned long long int k , n ;
read n and k	cin >> n >> k ;
if ( n / k ) & 1 is not 0	if ( ( n / k ) & 1 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create long long variables n and k	long long n , k ;
read n and k	cin >> n >> k ;
print the result of ( ( n / k ) & 1 ? " YES " : " NO " )	cout << ( ( n / k ) & 1 ? " YES " : " NO " ) << ' \n ' ;
n , k , x = long long	long long n , k , x ;
read n then k	cin >> n >> k ;
set x to n / k	x = n / k ;
if x is even	if ( x % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
n , k , s = long long int	long long int n , k , s ;
while read n , k	while ( cin >> n >> k )
s = n / k	s = n / k ;
if s is even	if ( s % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
create long longs n , k and x	long long n , k , x ;
read input to n and k	cin >> n >> k ;
assign n / k to x	x = n / k ;
if x is even	if ( x % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
create long longs n , k	long long n , k ;
read n read k	cin >> n >> k ;
if ( n / k ) % 2 is 0	if ( ( n / k ) % 2 == 0 )
print " NO " print newline	cout << " NO " << endl ;
else	else
print " YES " print newline	cout << " YES " << endl ;
n , k , x = integers	long long n , k , x ;
Read n and k	cin >> n >> k ;
set x to n / k	x = n / k ;
if x is even	if ( x % 2 == 0 )
print NO and a new line	cout << " NO " << endl ;
else do the following	else
print YES and a new line	cout << " YES " << endl ;
declare long longs n and m	long long n , m ;
read n and m	cin >> n >> m ;
if n / m is odd	if ( ( n / m ) % 2 == 1 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
declare READ with strings INPUT , OUTPUT with INPUT default " NO " , OUTPUT default " NO " as arguments , returning void	void READ ( string INPUT = " NO " , string OUTPUT = " NO " )
if INPUT is not " NO " , resuse stream stdin to open c string of INPUT in read mode	if ( INPUT != " NO " ) freopen ( INPUT . c_str ( ) , " r " , stdin ) ;
if OUTPUT is not " NO " , reuse stream stdout to open c string of OUTPUT in write mode	if ( OUTPUT != " NO " ) freopen ( OUTPUT . c_str ( ) , " w " , stdout ) ;
create long longs n , k	long long n , k ;
read n read k	cin >> n >> k ;
print " YES " if ( n / k ) % 2 is true , else " NO " , print " \ n "	cout << ( ( n / k ) % 2 ? " YES " : " NO " ) << " \n " ;
n , k = integers	long long int n , k ;
Read n and k	cin >> n >> k ;
if ( n / k ) modulo 2 is 0	if ( ( n / k ) % 2 == 0 )
print NO and a new line	cout << " NO " << endl ;
else do the following	else
print YES and a new line	cout << " YES " << endl ;
create long long integers n , k , m	long long int n , k , m ;
read n read m	cin >> n >> k ;
set m to 2 * k	m = 2 * k ;
if n % m is greater than or equal to k	if ( n % m >= k )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
n , k = integers	long long n , k ;
Read n and k	cin >> n >> k ;
if ( n / k ) modulo 2 is 0	if ( ( n / k ) % 2 == 0 )
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
declare long longs n and k	long long n , k ;
read n and k	cin >> n >> k ;
print " NO \ n " if ( ( ( n / k ) & 1LL ) = = 0 or " YES \ n " otherwise	cout << ( ( ( n / k ) & 1LL ) == 0 ? " NO\n " : " YES\n " ) ;
define integers n , k	long long int n , k ;
read n , k	cin >> n >> k ;
define integer h	long long int h ;
set h to quotient of n , k	h = n / k ;
if h is even	if ( h % 2 == 0 )
print " NO " and a newline	cout << " NO " << endl ;
else	else
print " YES " and newline	cout << " YES " << endl ;
in function solve	void solve ( )
n , k = long long int	long long int n , k ;
read n then k	cin >> n >> k ;
pre = long long int with pre = n / k	long long int pre = n / k ;
if pre is not even	if ( pre % 2 != 0 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
t = long long int with t = 1	long long int t = 1 ;
loop t times call solve	while ( t -- ) { solve ( ) ; }
create long long n and k	long long n , k ;
read n , k	cin >> n >> k ;
if n / k is even	if ( ( n / k ) % 2 == 0 )
print NO	cout << " NO " << endl ;
else	else
print YES and a newline	cout << " YES " << endl ;
create constant integer N = 1e5 + 10 and INF = 1e9 + 7	const int N = 1e5 + 10 , INF = 1e9 + 7 ;
create long long integers n and k	long long n , k ;
read n and k	cin >> n >> k ;
print " YES " if ( n / k ) % 2 is true or " NO " if not	cout << ( ( n / k ) % 2 ? " YES " : " NO " ) << ' \n ' ;
create unsigned long longs n , k and res	unsigned long long n , k , res ;
read n and k	cin >> n >> k ;
assign n / k to res	res = n / k ;
if res & 1 = 1	if ( res & 1 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
declare long long variables n , k and x	long long n , k , x ;
read n and k	cin >> n >> k ;
set x to n / k	x = n / k ;
if x is even	if ( x % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
n , k = integers	long long n , k ;
Read n and k	cin >> n >> k ;
print YES if n / k bitwise and 1 is true , if ok is false print NO and a new line	puts ( ( n / k ) & 1 ? " YES " : " NO " ) ;
declare long long int variables x , a and b	long long int x , a , b ;
read input to a and b	cin >> a >> b ;
change x to a / b	x = a / b ;
if x is even	if ( x % 2 == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
create long longs n and m	long long n , m ;
read n and m	cin >> n >> m ;
if n / m % 2 is true	if ( n / m % 2 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
create long long n , k	long long n , k ;
print n , k	cin >> n >> k ;
set turnsDone = n / k	long long turnsDone = n / k ;
assign n mod k to remaining	int remaining = n % k ;
if turnsDone mod 2 = 1	if ( turnsDone % 2 == 1 )
print YES and a newline	cout << " YES\n " ;
else	else
print NO and a newline +	cout << " NO\n " ;
create long longs n , k	long long n , k ;
read n read k	cin >> n >> k ;
if ( n / k ) % 2 is not 0	if ( ( n / k ) % 2 != 0 )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
let long long ints n and k	long long n , k ;
read n and k	cin >> n >> k ;
if n / k modulo 2 is not equal to 0	if ( n / k % 2 != 0 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
create long longs n , m , green , blue , yellow , foo , foobar	long long n , m , green , blue , yellow , foo , foobar ;
read n read m read yellow read green read blue	cin >> n >> m >> yellow >> green >> blue ;
set foobar to ( blue * 3 ) + green	foobar = ( blue * 3 ) + ( green ) ;
set foo to ( yellow * 2 ) + green	foo = ( yellow * 2 ) + ( green ) ;
print maximum of ( 0LL and foobar - m ) + maximum of ( 0LL and foo - n ) print newline	cout << max ( 0LL , foobar - m ) + max ( 0LL , foo - n ) << endl ;
create long longs yc , bc , yb , gb , bb	long long yc , bc , yb , gb , bb ;
read yc read bc	cin >> yc >> bc ;
read yb read gb read bb	cin >> yb >> gb >> bb ;
create long long yelo , blu	long long yelo , blu ;
set yelo to yb * 2 + gb	yelo = yb * 2 + gb ;
set blu to 3 * bb + gb	blu = 3 * bb + gb ;
set yelo to yelo - yc	yelo = yelo - yc ;
set blu to blu - bc	blu = blu - bc ;
if yelo is greater than or equal to 0 and blu is greater than or equal to 0	if ( yelo >= 0 && blu >= 0 )
print yelo + blu print newline	cout << yelo + blu << endl ;
else if yelo is less than 0 and blu is greater than or equal to 0	else if ( yelo < 0 && blu >= 0 )
print blu print newline	cout << blu << endl ;
else if yelo is greater than or equal to 0 and blu is less than 0	else if ( yelo >= 0 && blu < 0 )
print yelo print newline	cout << yelo << endl ;
else	else
print 0 print newline	cout << 0 << endl ;
create long long integers y , b , ye , gr , bl , a , c , ans with ans = 0	long long int y , b , ye , gr , bl , a , c , ans = 0 ;
read y read b read ye read gr read bl	cin >> y >> b >> ye >> gr >> bl ;
set a to ( 2 * ye ) + gr	a = ( 2 * ye ) + gr ;
set c to ( 3 * bl ) + gr	c = ( 3 * bl ) + gr ;
if y - a is less than 0 , increment ans by a - y	if ( y - a < 0 ) { ans += a - y ; }
if b - c is less than 0 , increment ans by c - b	if ( b - c < 0 ) { ans += c - b ; }
print ans print newline	cout << ans << endl ;
set a , b = 0 as large integer	long long int a = 0 , b = 0 ;
read a and b	cin >> a >> b ;
set x , y , z = 0 as large integer	long long int x = 0 , y = 0 , z = 0 ;
read x y x	cin >> x >> y >> z ;
set Y , B , t = 0 as large integer	long long int Y = 0 , B = 0 , t = 0 ;
set Y = ( 2 * x ) + ( 1 * y )	Y = ( 2 * x ) + ( 1 * y ) ;
set B = ( 1 * Y ) + ( 3 * z )	B = ( 1 * y ) + ( 3 * z ) ;
if Y > a	if ( Y > a )
Y = Y - a	Y = Y - a ;
else	else
Y = 0	Y = 0 ;
if B > b	if ( B > b )
B = B - b	B = B - b ;
else	else
B = 0	B = 0 ;
t = Y + B	t = Y + B ;
print t	cout << t << endl ;
let a , b , x , y , z = long long	long long a , b , x , y , z ;
read a , b , x , y , z	cin >> a >> b >> x >> y >> z ;
let yellow = long long = 2 * x + y	long long yellow = 2 * x + y ;
let blue = long long = y + 3 * z	long long blue = y + 3 * z ;
res = long long = 0	long long res = 0 ;
if a is less than yellow , res = res + yellow - a	if ( a < yellow ) res += ( yellow - a ) ;
if b is less than blue , res = res + blue - b	if ( b < blue ) res += ( blue - b ) ;
print res	cout << res << " \n " ;
declare long long integer variables n , t , m and k	long long int n , t , m , k ;
declare long long integer variables x , y and z	long long int x , y , z ;
declare long long integer variables a and b	long long int a , b ;
read a and b	cin >> a >> b ;
read x , y and z	cin >> x >> y >> z ;
declare long long integer variables yn and bn	long long int yn , bn ;
yn = ( x * 2 + y )	yn = ( x * 2 + y ) ;
declare long long integer variable dif = yn - a	long long int dif = yn - a ;
declare long long integer need = 0	long long int need = 0 ;
if dif > = 0 , add dif to need	if ( dif >= 0 ) need += dif ;
bn = ( y + z * 3 )	bn = ( y + z * 3 ) ;
assign value of ( bn - b ) to dif	dif = ( bn - b ) ;
if dif > = 0 , add dif to need	if ( dif >= 0 ) need += dif ;
print need	cout << need << endl ;
let N be a constant integer set to 1e6 + 10	const int N = 1e6 + 10 ;
let mod be a constant integer set to 998244353	const int mod = 998244353 ;
a , b , x , y , z , q , p , r = long longs	long long a , b , x , y , z , q , p , r ;
read a , b , x , y and z	cin >> a >> b >> x >> y >> z ;
increment q by 2 * x	q += 2 * x ;
increment q by y	q += y ;
increment p by y	p += y ;
increment p by 3 * z	p += 3 * z ;
print max ( r , q - a ) + max ( r , p - b )	cout << max ( r , q - a ) + max ( r , p - b ) << endl ;
let n , m , a , b , c be long integers	long long n , m , a , b , c ;
let Yellow , Blue , ans be long integers	long long Yellow , Blue , ans ;
read n , m , a , b , c	cin >> n >> m >> a >> b >> c ;
Yellow is equal to a * 2 + b	Yellow = a * 2 + b ;
Blue is equal to b + c * 3	Blue = b + c * 3 ;
if ( Yellow is greater than n ) , ans = ans + Yellow - n	if ( Yellow > n ) ans += Yellow - n ;
if ( Blue is greater than m ) , ans = ans + Blue - m	if ( Blue > m ) ans += Blue - m ;
print ans and newline	cout << ans << endl ;
create long long integers a , b , x , y , z , c , d , sum	long long int a , b , x , y , z , c , d , sum ;
read a read b	cin >> a >> b ;
read x read y read z	cin >> x >> y >> z ;
set x to x * 2 + y	x = x * 2 + y ;
set z to z * 3 + y	z = z * 3 + y ;
if a is greater than x	if ( a > x )
set c to 0	c = 0 ;
else	else
set c to x - a	c = x - a ;
if b is greater than z	if ( b > z )
set d to 0	d = 0 ;
else	else
set d to z - b	d = z - b ;
print c + d print newline	cout << c + d << endl ;
create long long a , b , x , y , z , na , nb , zer with zer = 0	long long a , b , x , y , z , na , nb , zer = 0 ;
read a read b read x read y read z	cin >> a >> b >> x >> y >> z ;
set na to x * 2 + y	na = x * 2 + y ;
set nb to z * 3 + y	nb = z * 3 + y ;
print maximum of ( maximum of ( na - a and zer ) + maximum of ( nb - b and zer ) and zer ) print ' \ n '	cout << max ( max ( na - a , zer ) + max ( nb - b , zer ) , zer ) << ' \n ' ;
declare long longs n and m	long long n , m ;
read n and m	cin >> n >> m ;
let a , b and c be long longs	long long a , b , c ;
read a , b and c	cin >> a >> b >> c ;
create long long ans with value = max of 0 and b + ( 2 * a ) - n	long long ans = max ( ( long long ) 0 , b + ( 2 * a ) - n ) ;
increase ans by max of 0 and b + ( 3 * c ) - m	ans += max ( ( long long ) 0 , b + ( 3 * c ) - m ) ;
print ans and a new line	cout << ans << endl ;
create long longs a , b	long long a , b ;
read a read b	cin >> a >> b ;
create long longs x , y , z	long long x , y , z ;
read x read y read z	cin >> x >> y >> z ;
create long long ans with ans = 0	long long ans = 0 ;
if y is greater than a	if ( y > a )
increment ans by y - a	ans += y - a ;
set a to 0	a = 0 ;
else	else
decrement a by y	a -= y ;
if y is greater than b	if ( y > b )
increment ans by y - b	ans += y - b ;
set b to 0	b = 0 ;
else	else
decrement b by y	b -= y ;
if x * 2 is greater than a , increment ans by x * 2 - a	if ( x * 2 > a ) ans += x * 2 - a ;
if x * 3 is greater than b , increment ans by z * 3 - b	if ( z * 3 > b ) ans += z * 3 - b ;
print ans print newline	cout << ans << endl ;
create long longs a , b	long long a , b ;
read a read b	cin >> a >> b ;
create long longs x , y , z	long long x , y , z ;
read x read y read z	cin >> x >> y >> z ;
create long longs reala , realb with reala = 2 * x + y , realb = y + 3 * z	long long reala = 2 * x + y , realb = y + 3 * z ;
print maximum of ( reala - a and 0ll ) + maximum of ( realb - b and 0ll ) print newline	cout << max ( reala - a , 0ll ) + max ( realb - b , 0ll ) << endl ;
create long longs a , b and ans , with ans = 0	long long a , b , ans = 0 ;
read a and b	cin >> a >> b ;
let a1 , a2 and a3 be long longs	long long a1 , a2 , a3 ;
read a1 , a2 and a3	cin >> a1 >> a2 >> a3 ;
decrease a by a1 * 2	a -= a1 * 2 ;
decrease a by a2	a -= a2 ;
decrease b by a2	b -= a2 ;
decrease b by 3 * a3	b -= 3 * a3 ;
if a is less than 0 , increase ans by a	if ( a < 0 ) ans += a ;
if b is less than 0 , increase ans by b	if ( b < 0 ) ans += b ;
print negative ans and a new line	cout << - ans << endl ;
;	;
n , m , a , b and c are long longs	long long n , m , a , b , c ;
declare long longs Yellow , Blue and ans	long long Yellow , Blue , ans ;
read n , m , a , b and c	cin >> n >> m >> a >> b >> c ;
Yellow = a * 2 + b	Yellow = a * 2 + b ;
Blue = b + c * 3	Blue = b + c * 3 ;
if Yellow > = n and Blue > = m	if ( Yellow >= n && Blue >= m )
increase ans by Yellow + Blue - n - m	ans += Yellow + Blue - n - m ;
else if Yellow < n and Blue is greater than m	else if ( Yellow < n && Blue > m )
increase ans by Blue - m	ans += Blue - m ;
else if Yellow > n and Blue is less than m	else if ( Yellow > n && Blue < m )
increase ans by Yellow - n	ans += Yellow - n ;
print ans and a new line	cout << ans << endl ;
create long longs i , c , a , b , x , y , z , with c = 0	long long i , c = 0 , a , b , x , y , z ;
read a read b read x read y read z	cin >> a >> b >> x >> y >> z ;
decrement a by x * 2	a -= x * 2 ;
decrement a by y	a -= y ;
decrement b by y	b -= y ;
decrement b by 3 * z	b -= 3 * z ;
if a is less than 0 , increment c by absolute value of a	if ( a < 0 ) c += abs ( a ) ;
if b is less than 0 , increment c by absolute value of b	if ( b < 0 ) c += abs ( b ) ;
print c print newline	cout << c << endl ;
a , b , x , y and z are long longs	long long a , b , x , y , z ;
read a , b , x , y and z	cin >> a >> b >> x >> y >> z ;
create long long ans = 0	long long ans = 0 ;
if y < = a	if ( y <= a )
decrease a by y	a -= y ;
else	else
increase ans by y - a	ans += ( y - a ) ;
assign value of 0 to a	a = 0 ;
if y < = b	if ( y <= b )
decrease b by y	b -= y ;
else	else
increase ans by y - b	ans += ( y - b ) ;
set value of b to 0	b = 0 ;
if x * 2 < = a	if ( x * 2 <= a )
decrease a by x * 2	a -= x * 2 ;
else	else
increase ans by 2 * x - a	ans += ( 2 * x - a ) ;
a = 0	a = 0 ;
if z * 3 < = b	if ( z * 3 <= b )
decrease b by z * 3	b -= z * 3 ;
else	else
increase ans by z * 3 - b	ans += ( z * 3 - b ) ;
set value of b to 0	b = 0 ;
print ans and a new line	cout << ans << endl ;
create long long integers n , m	long long int n , m ;
read n read m	cin >> n >> m ;
create long long integers x , y , z	long long int x , y , z ;
read x read y read z	cin >> x >> y >> z ;
create long long integer ans with ans = 0	long long int ans = 0 ;
if n is greater than or equal to 2 * x	if ( n >= 2 * x )
set n to n - 2 * x	n = n - 2 * x ;
else	else
increment ans by 2 * x - n	ans += 2 * x - n ;
set n to 0	n = 0 ;
if m is greater than or equal to 3 * z	if ( m >= 3 * z )
set m to m - 3 * z	m = m - 3 * z ;
else	else
increment ans by 3 * z - m	ans += 3 * z - m ;
set m to 0	m = 0 ;
if n is less than y , increment ans by y - n	if ( n < y ) { ans += y - n ; }
if m is less than y , increment ans by y - m	if ( m < y ) { ans += y - m ; }
print ans print newline	cout << ans << endl ;
create long longs a , b , x , y , z	long long a , b , x , y , z ;
read a read b read x read y read z	cin >> a >> b >> x >> y >> z ;
create long long ans with ans = 0	long long ans = 0 ;
create long longs sy , sb	long long sy , sb ;
set sy to 2 * x + y - a	sy = 2 * x + y - a ;
if sy is less than 0 , set sy to 0	if ( sy < 0 ) { sy = 0 ; }
set sb to 3 * z + y - b	sb = 3 * z + y - b ;
if sb is less than 0 , set sb to 0	if ( sb < 0 ) { sb = 0 ; }
increment ans by sy + sb	ans += sy + sb ;
print ans print ' \ n '	cout << ans << ' \n ' ;
let i , c , a , v , x , y , z be long long with c = 0	long long i , c = 0 , a , b , x , y , z ;
read a , b , x , y and z	cin >> a >> b >> x >> y >> z ;
let a = a - x * 2	a -= x * 2 ;
let a = a - y	a -= y ;
let b = b - y	b -= y ;
let b = b - 3 * z	b -= 3 * z ;
if a is less than 0 set c = c + absolute value of a	if ( a < 0 ) c += abs ( a ) ;
if b is less than 0 set c = c + absolute value of b	if ( b < 0 ) c += abs ( b ) ;
print c and new line	cout << c << endl ;
a , b , ans = long longs	long long int a , b , ans ;
read a and b	cin >> a >> b ;
x , y , z = long longs	long long int x , y , z ;
read x , y and z	cin >> x >> y >> z ;
ye = long long integer set to ( 2 * x ) + y	long long int ye = ( 2 * x ) + y ;
bl = long long integer set to y + ( 3 * z )	long long int bl = y + ( 3 * z ) ;
n = long long integer set to ye - a	long long int n = ye - a ;
m = long long integer set to ( bl - b	long long int m = bl - b ;
if n is less than 0 set n to 0	if ( n < 0 ) { n = 0 ; }
if m is less than 0 set m to 0	if ( m < 0 ) { m = 0 ; }
set ans to n + m	ans = n + m ;
print ans	cout << ans << endl ;
declare long long variables a , b , c , d , e and ans , with ans = 0	long long a , b , c , d , e , ans = 0 ;
read a , b , c , d and e	cin >> a >> b >> c >> d >> e ;
if c * 2 + d - a is greater than 0 , add ( c * 2 + d ) - a to ans	if ( c * 2 + d - a > 0 ) ans += ( c * 2 + d ) - a ;
if d + e * 3 - b is greater than 0 , add ( d + e * 3 ) - b to ans	if ( d + e * 3 - b > 0 ) ans += ( d + e * 3 ) - b ;
print ans and a new line	cout << ans << endl ;
A , B = integers	long long A , B ;
x , y , z = integers	long long x , y , z ;
Read A and B	cin >> A >> B ;
Read x , y , z	cin >> x >> y >> z ;
yello , green , bule = integers and all set to 0	long long yello = 0 , green = 0 , bule = 0 ;
set yello to x * 2 + y	yello = x * 2 + y ;
set bule to z * 3 + y	bule = z * 3 + y ;
set sum1 to yello - A	long long sum1 = yello - A ;
set sum2 to bule - B	long long sum2 = bule - B ;
if sum1 is less than 0 , then set sum1 to 0	if ( sum1 < 0 ) sum1 = 0 ;
if sum2 is less than 0 , then set sum2 to 0	if ( sum2 < 0 ) sum2 = 0 ;
print sum1 + sum2 and a new line	cout << sum1 + sum2 << endl ;
declar longs A , B , x , y , z , and e to be zero	long long A , B , x , y , z , a = 0 ;
input A , B , x , y , and z	cin >> A >> B >> x >> y >> z ;
if A is less than double x plus y , increment a by x * 2 + y - A	if ( A < ( x * 2 + y ) ) { a += ( ( x * 2 ) + y - A ) ; }
if B is less than y plus z times 3 , increment a by y + 3 * z - B	if ( B < ( y + z * 3 ) ) { a += ( y + ( z * 3 ) - B ) ; }
print a and endline	cout << a << endl ;
create long longs n , m , a , b , c , ans1 , ans2 and sum , with ans1 , ans2 and sum = 0	long long n , m , a , b , c , ans1 = 0 , ans2 = 0 , sum = 0 ;
read n and m	cin >> n >> m ;
read a , b and c	cin >> a >> b >> c ;
ans1 = a * 2 + b * 1	ans1 = a * 2 + b * 1 ;
ans2 = b * 1 + c * 3	ans2 = b * 1 + c * 3 ;
sum = ans1 - n if ans1 > n , or 0 if it is not	sum = ans1 > n ? ans1 - n : 0 ;
increase sum by ans2 - m if ans2 > m	sum += ans2 > m ? ans2 - m : 0 ;
print sum and a new line	cout << sum << endl ;
create constant integer N with N = 1 bitshift left 20	const int N = 1 << 20 ;
create long longs a , b	long long a , b ;
read a read b	cin >> a >> b ;
create long longs ye , bl , g	long long ye , bl , g ;
read ye read g read bl	cin >> ye >> g >> bl ;
create long long y1 with y1 = 2 * ye	long long y1 = 2 * ye ;
create long long y2 with y2 = g	long long y2 = g ;
create long long b1 with b1 = g	long long b1 = g ;
create long long b2 with b2 = 3 * bl	long long b2 = 3 * bl ;
create long longs ans1 , ans2	long long ans1 , ans2 ;
if a is greater than or equal to y1 + y2	if ( a >= y1 + y2 )
set ans1 to 0	ans1 = 0 ;
else	else
set ans1 to absolute value of ( a - ( y1 + y2 ) )	ans1 = abs ( a - ( y1 + y2 ) ) ;
if b is greater than b1 + b2	if ( b > b1 + b2 )
set ans2 to 0	ans2 = 0 ;
else	else
set ans2 to absolute value of ( b - ( b1 + b2 ) )	ans2 = abs ( b - ( b1 + b2 ) ) ;
print ans1 + ans2 print newline	cout << ans1 + ans2 << endl ;
create long longs a , b , x , y , z , q , w , with q = 0 , w = 0	long long a , b , x , y , z , q = 0 , w = 0 ;
read a read b	cin >> a >> b ;
read x read y read z	cin >> x >> y >> z ;
set q to 2 * x + y	q = 2 * x + y ;
set w to y + 3 * z	w = y + 3 * z ;
create long long ans with ans = 0	long long ans = 0 ;
if q - a is greater than 0 , set ans to q - a	if ( ( q - a ) > 0 ) ans = q - a ;
if w - b is greater than 0 , increment ans by w - b	if ( ( w - b ) > 0 ) ans += ( w - b ) ;
print ans print ' \ n '	cout << ans << ' \n ' ;
let const int maxn = 1e5 + 10	const int maxn = 1e5 + 10 ;
create ints a , b , c , and n	int a , b , c , n ;
while cin > > a > > b > > c > > n is truthy	while ( cin >> a >> b >> c >> n )
if a is less than c or b is less than c	if ( a < c || b < c )
print - 1	cout << - 1 << endl ;
else	else
let int num = ( a - c ) + ( b - c ) + c	int num = ( a - c ) + ( b - c ) + c ;
if num is greater than or equal to n	if ( num >= n )
print - 1	cout << - 1 << endl ;
else	else
print n - num	cout << n - num << endl ;
a , b , c , n = integers	int a , b , c , n ;
read a , b , c , n	cin >> a >> b >> c >> n ;
d = integer with d = a - c	int d = a - c ;
e = integer with e = b - c	int e = b - c ;
f = integer with f = n - d - e - c	int f = n - d - e - c ;
if d > = 0 and e > = 0 and c > = 0 and f > 0	if ( d >= 0 && e >= 0 && c >= 0 && f > 0 )
print f	cout << f << endl ;
else	else
print - 1	cout << - 1 << endl ;
declare long long ints a , b , c and n	long long int a , b , c , n ;
read a , b , c and n	cin >> a >> b >> c >> n ;
create integer temp = min of a and b	int temp = min ( a , b ) ;
if c is greater than temp	if ( c > temp )
print " - 1 \ n "	cout << " -1\n " ;
if ( a + b ) - c is less than n	if ( ( a + b ) - c < n )
print n - ( ( a + b ) - c )	cout << n - ( ( a + b ) - c ) << endl ;
else	else
print " - 1 \ n "	cout << " -1\n " ;
a , b , c , n = integers	int a , b , c , n ;
while read a , b , c , n	while ( cin >> a >> b >> c >> n )
res = integer with res = - 1	int res = - 1 ;
if ( a < = n ) and ( b < = n ) and ( c < = n )	if ( ( a <= n ) && ( b <= n ) && ( c <= n ) )
onlyA = integer with onlyA = a - c	int onlyA = a - c ;
onlyB = integer with onlyB = b - c	int onlyB = b - c ;
if ( onlyA > = 0 and onlyB > = 0 ) and ( onlyA + onlyB < n ) , res = n - onlyA - onlyB - c	if ( ( onlyA >= 0 && onlyB >= 0 ) && ( onlyA + onlyB < n ) ) { res = n - onlyA - onlyB - c ; }
if res is 0 , res = - 1	if ( res == 0 ) { res = - 1 ; }
print res	cout << res << endl ;
let a , b , c , d be ints	int a , b , c , d ;
read a , b , c , d	cin >> a >> b >> c >> d ;
if a + b - c > = d or c > a or c > b	if ( a + b - c >= d || c > a || c > b )
print - 1	cout << " -1 " << endl ;
else	else
print d - ( a + b - c )	cout << d - ( a + b - c ) << endl ;
create integers a , b , c , n , i	int a , b , c , n , i ;
read a read b read c read n	cin >> a >> b >> c >> n ;
if a + b - c + 1 is greater than n or c is greater than a or c is greater than b or c is greater than a + b or c is greater than n	if ( a + b - c + 1 > n || c > a || c > b || c > a + b || c > n )
print - 1 print newline	cout << - 1 << endl ;
else	else
print n + c - a - b print newline	cout << n + c - a - b << endl ;
let A , B , C , N be ints	int A , B , C , N ;
read A , B , C , N	cin >> A >> B >> C >> N ;
let con be a false bool	bool con = false ;
if A > N or B > N or C > N then change con to true	if ( A > N || B > N || C > N ) con = true ;
if C > A or C > B then set con to true	if ( C > A || C > B ) con = true ;
let T = A + B - C = int	int T = A + B - C ;
if T > = N , change con to true	if ( T >= N ) con = true ;
if con is true print - 1 else print N - T	cout << ( ( con ) ? - 1 : N - T ) << ' \n ' ;
create integers a , b , c , n and sum	int a , b , c , n , sum ;
read a , b , c and n and loop further	while ( cin >> a >> b >> c >> n )
set sum to a + b - c	sum = a + b - c ;
if sum > = n or a < c or b < c	if ( sum >= n || a < c || b < c )
print " - 1 "	cout << " -1 " << endl ;
skip the rest of the loop	continue ;
else	else
print n - sum	cout << n - sum << endl ;
declare integers a , b , c and n	int a , b , c , n ;
read input to a , b , c and n	cin >> a >> b >> c >> n ;
declare integer x = n - ( a - c + b )	int x = n - ( a - c + b ) ;
if x < 1 or a < c or b < c or a > n or b > n or c > n	if ( x < 1 || a < c || b < c || a > n || b > n || c > n )
print " - 1 \ n "	cout << " -1\n " ;
else	else
print x	cout << x << endl ;
flag = 0	int flag = 0 ;
create long long ans	long long ans ;
res = long long	long long res ;
create int a , b , c and n	int a , b , c , n ;
read a , b , c and n	cin >> a >> b >> c >> n ;
if c > a or c > b	if ( c > a || c > b )
set flag to 1	flag = 1 ;
else	else
assign a + b - c to res	res = a + b - c ;
set ans to n - res	ans = n - res ;
if flag equal to 1	if ( flag == 1 )
print - 1	cout << " -1 " << endl ;
else	else
if ans < = 0	if ( ans <= 0 )
print - 1	cout << " -1 " << endl ;
else	else
print ans and a newline	cout << ans << endl ;
create integer a , b , c , n	int a , b , c , n ;
get a , b , c , n	cin >> a >> b >> c >> n ;
if a + b - c less than n and c less than or equal to a and b then	if ( a + b - c < n && c <= a && c <= b )
print n + c - a - b	cout << n + c - a - b << endl ;
else do the following	else
print " - 1 \ n "	cout << " -1\n " ;
create integers n , a , b , c	int n , a , b , c ;
read a , b , c and n	cin >> a >> b >> c >> n ;
if a < c or b < c	if ( a < c || b < c )
print - 1	cout << - 1 << endl ;
set ans to n - ( a + b - c )	int ans = n - ( a + b - c ) ;
if ans > = 1	if ( ans >= 1 )
print ans	cout << ans << endl ;
else	else
print - 1	cout << - 1 << endl ;
declare int variables A , B , C and N	int A , B , C , N ;
read input to A , B , C and N	cin >> A >> B >> C >> N ;
if ( ( A + B - C ) < N ) and ( A > = C ) and ( B > = C )	if ( ( ( A + B - C ) < N ) && ( A >= C ) && ( B >= C ) )
print N - ( A + B - C )	cout << ( N - ( A + B - C ) ) << endl ;
else	else
print " - 1 "	cout << " -1 " << endl ;
set INF to 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create int i , j , k	int i , j , k ;
let n , m , t be int	int n , m , t ;
create integers a , b , c , d	int a , b , c , d ;
read a , b , c , d	cin >> a >> b >> c >> d ;
if c > b or c > a	if ( c > b || c > a )
print - 1	cout << - 1 << endl ;
set a to a + b - c	a = a + b - c ;
set d = d - a	d -= a ;
if d < 1 or a < 0	if ( d < 1 || a < 0 )
print - 1	cout << - 1 << endl ;
otherwise	else
print d and a newline	cout << d << endl ;
a , b , c , n = integers	int a , b , c , n ;
read a , b , c , n	cin >> a >> b >> c >> n ;
num = integer with num = a + b - c	int num = a + b - c ;
t = integer with t = n - 1	int t = n - 1 ;
if t > = num and num > = 0 and a > = c and b > = c	if ( t >= num && num >= 0 && a >= c && b >= c )
print t - num + 1	cout << t - num + 1 << endl ;
else	else
print - 1	cout << " -1 " << endl ;
create integers a , b , c , n	int a , b , c , n ;
read a read b read c read n	cin >> a >> b >> c >> n ;
if a is greater than n or c is greater than b or c is greater than a or ( a + b - c is greater than or equal to n )	if ( a > n || c > b || c > a || ( a + b - c >= n ) )
print - 1 print newline	cout << - 1 << endl ;
if n - a - b + c is greater than or equal to 1	if ( n - a - b + c >= 1 )
print n - a - b + c print newline	cout << n - a - b + c << endl ;
else	else
print - 1 print newline	cout << - 1 << endl ;
create ints a , b , c and n	int a , b , c , n ;
function solve that returns integer	int solve ( )
declare int variable k = a + b - c	int k = a + b - c ;
if c is greater than min of a and b , return - 1	if ( c > min ( a , b ) ) { return - 1 ; }
if k is less than 0 , return - 1	if ( k < 0 ) return - 1 ;
if n - k is less than 1 , return - 1	if ( n - k < 1 ) { return - 1 ; }
return n - k	return n - k ;
read a , b , c and n	cin >> a >> b >> c >> n ;
print the result of solve ( ) and " \ n "	cout << solve ( ) << " \n " ;
a , b , c , d = int	int a , b , c , d ;
read a then b then c then d	cin >> a >> b >> c >> d ;
temp = int with temp = d - ( a + b - c )	int temp = d - ( a + b - c ) ;
if c is greater than a or c is greater than b or a + b - c is greater or equal to d	if ( c > a || c > b || a + b - c >= d )
print - 1	cout << - 1 << endl ;
else	else
print temp	cout << temp << endl ;
create integers A , B , C and N	int A , B , C , N ;
read A , B , C and N	cin >> A >> B >> C >> N ;
if ( A + B - C < = N - 1 ) and ( A < N and B < N and C < = A and C < = B )	if ( ( A + B - C <= N - 1 ) && ( A < N && B < N && C <= A && C <= B ) )
print N - ( A + B - C )	cout << N - ( A + B - C ) << endl ;
else	else
print - 1	cout << - 1 << endl ;
create constant integer MAX with MAX = 2e5 + 5	const int MAX = 2e5 + 5 ;
create constant integer INF with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create map mp from character to integer	map < char , int > mp ;
create map iterator it from character to integer	map < char , int > :: iterator it ;
create integers i , j , k , n , m , a , b , c	int i , j , k , n , m , a , b , c ;
read a read b read c read n	cin >> a >> b >> c >> n ;
if a + b - c is greater than or equal to n or c is greater than a or c is greater than b	if ( a + b - c >= n || c > a || c > b )
print " - 1 "	puts ( " -1 " ) ;
print n - ( a + b - c ) print newline	cout << n - ( a + b - c ) << endl ;
create long longs a , b , c and d	long long a , b , c , d ;
read a , b , c and d and loop further	while ( cin >> a >> b >> c >> d )
declare long long ans = d - a - b + c	long long ans = d - a - b + c ;
if ans > 0 and a > = c and b > = c	if ( ans > 0 && a >= c && b >= c )
print ans	cout << ans << endl ;
else	else
print - 1	cout << - 1 << endl ;
create integers a , b , c , n , output	int a , b , c , n , output ;
read a read b read c read n	cin >> a >> b >> c >> n ;
set output to n - ( a + b - c )	output = n - ( a + b - c ) ;
if ( a + b - c ) is greater than or equal to n or c is greater than a or c is greater than b	if ( ( a + b - c ) >= n || c > a || c > b )
print - 1 print newline	cout << - 1 << endl ;
else	else
print output print newline	cout << output << endl ;
a , b , c , n = integers	int a , b , c , n ;
read a , b , c , n	cin >> a >> b >> c >> n ;
if a < c or b < c	if ( a < c || b < c )
print - 1	cout << - 1 << endl ;
all = integer with all = a + b - c	int all = a + b - c ;
if all < = n - 1	if ( all <= n - 1 )
print n - all	cout << n - all << endl ;
else	else
print - 1	cout << - 1 << endl ;
a , b , c , n = int	int a , b , c , n ;
read a then b then c then n	cin >> a >> b >> c >> n ;
if ( a + b - c ) > = n or a < c or b < c	if ( ( a + b - c ) >= n || a < c || b < c )
print " - 1 "	cout << " -1 " << endl ;
else	else
print n - a - b + c	cout << n - a - b + c << endl ;
create constant int N = 400000 + 10	const int N = 400000 + 10 ;
let ints x , y , z , and n	int x , y , z , n ;
read x , y , z , and n and while x , y , z , and n are truthy	while ( cin >> x >> y >> z >> n )
set x to x - z	x -= z ;
set y to y - z	y -= z ;
let int ans = n - x - y - z	int ans = n - x - y - z ;
if x is less than 0 or y is less than 0 or ans is less than or equal to 0	if ( x < 0 || y < 0 || ans <= 0 )
print - 1	cout << - 1 << endl ;
else	else
print ans	cout << ans << endl ;
declare integer variables a , b , c and n	int a , b , c , n ;
declare integers x , y and z	int x , y , z ;
read a , b , c and n and loop further	while ( cin >> a >> b >> c >> n )
assign a - c to x	x = a - c ;
assign b - c to y	y = b - c ;
change z to x + y + c	z = x + y + c ;
if z > = n or a < c or b < c	if ( z >= n || a < c || b < c )
print " - 1 "	cout << " -1 " << endl ;
else	else
print n - z	cout << n - z << endl ;
create integers a , b , c and n	int a , b , c , n ;
loop , reading a , b , c and n from the input	while ( cin >> a >> b >> c >> n )
create int ans = a + b - c	int ans = a + b - c ;
change ans to n - ans	ans = n - ans ;
if ans < = 0 or a < c or b < c	if ( ans <= 0 || a < c || b < c )
print - 1	cout << - 1 << endl ;
else	else
print ans	cout << ans << endl ;
create integers a , b , c and n	int a , b , c , n ;
read input to a , b , c and n	cin >> a >> b >> c >> n ;
declare integer sum = a + b - c	int sum = a + b - c ;
if sum > = n or a > n or b > n or c > n or n = 0 or c > a or c > b	if ( sum >= n || a > n || b > n || c > n || n == 0 || c > a || c > b )
print - 1	cout << - 1 << endl ;
else	else
print n - sum	cout << n - sum << endl ;
create int a , b , c , n	int a , b , c , n ;
read a , b , c , n	cin >> a >> b >> c >> n ;
if a less than c or b < c	if ( a < c || b < c )
print - 1 and a newline	cout << " -1\n " ;
set ans to n - ( a + b - c )	int ans = n - ( a + b - c ) ;
if ans less than 1	if ( ans < 1 )
print - 1 and a newline	cout << " -1\n " ;
else	else
print ans	cout << ans << endl ;
create long long ints a , b , c , n , k	long long a , b , c , n , k ;
read a , b , c , and n	cin >> a >> b >> c >> n ;
set k to a + b - c	k = a + b - c ;
set k to n - k	k = n - k ;
if k is greater than or equal to 1 and c is less than or equal to a and c is less than or equal to b	if ( ( ( k >= 1 ) ) && ( c <= a ) && ( c <= b ) )
print k	cout << k << endl ;
else	else
print - 1	cout << - 1 << endl ;
declare ints a , b , c and d	int a , b , c , d ;
read a , b , c and d	cin >> a >> b >> c >> d ;
if a + b - c > = d or c > a or c > b	if ( a + b - c >= d || c > a || c > b )
print " - 1 "	cout << " -1 " << endl ;
else	else
print d - ( a + b - c )	cout << d - ( a + b - c ) << endl ;
create int n	int n ;
read n	cin >> n ;
create vector in a ( n )	vector < int > a ( n ) ;
mx = 0	int mx = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
mx = max of mx and a [ i ]	mx = max ( mx , a [ i ] ) ;
ans = 1e9	int ans = 1e9 ;
for k = mx to 1e5 inclusive	for ( int k = mx ; k <= 1e5 ; k ++ )
create int x and y	int x , y ;
set x and y to 0	x = y = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
assign x + a [ i ] to x	x += a [ i ] ;
set y = t + k - a [ i ]	y += k - a [ i ] ;
if y greater than x	if ( y > x )
print k and a newline	cout << k << ' \n ' ;
declare int n	int n ;
read n	cin >> n ;
sum , x and mx are integers with sum and mx = 0	int sum = 0 , x , mx = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
add x to sum	sum += x ;
assign max of mx and x to mx	mx = max ( mx , x ) ;
multiply sum by 2	sum *= 2 ;
increment sum	sum ++ ;
print max of sum / n rounded up and mx	cout << max ( ( int ) ceil ( ( double ) sum / n ) , mx ) << endl ;
create integers n , ans , ma and sum , and integer array a with 105 elements	int n , ans , a [ 105 ] , ma , sum ;
define function gets	int gets ( )
create integer v with value 0	int v = 0 ;
assign value 0 to boolean f	bool f = 0 ;
ch = character	char ch ;
read ch from the input and continue the loop if ch is not a digit	while ( ! isdigit ( ch = getchar ( ) ) )
if ch = ' - ' , set f to 1	if ( ch == ' - ' ) f = 1 ;
assign value of ch - 48 to v	v = ch - 48 ;
read ch from the input and continue the loop if ch is a digit , changing v to v * 10 + ch - 48	while ( isdigit ( ch = getchar ( ) ) ) v = v * 10 + ch - 48 ;
return - v if f is true , or v otherwise	return f ? - v : v ;
assign result of gets ( ) to n	n = gets ( ) ;
for i = 1 to n inclusive , set a [ i ] to the result of gets ( ) , ma to max of ma and a [ i ] , and increase sum by a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = gets ( ) , ma = max ( ma , a [ i ] ) , sum += a [ i ] ;
ans = sum * 2 / n + 1	ans = sum * 2 / n + 1 ;
ans = max of ans and ma	ans = max ( ans , ma ) ;
print ans	cout << ans << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
create integer pointer a pointed to new array of integers with n elements	int * a = new int [ n ] ;
declare int sum = 0	int sum = 0 ;
declare int max	int max ;
loop i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read input to a [ i ]	cin >> a [ i ] ;
set sum to sum + a [ i ]	sum = sum + a [ i ] ;
if i is equal to 0	if ( i == 0 )
set max to a [ i ]	max = a [ i ] ;
else	else
if a [ i ] is greater than max , change max to a [ i ]	if ( a [ i ] > max ) { max = a [ i ] ; }
create integer f = ( 2 * sum / n ) + 1	int f = ( 2 * sum / n ) + 1 ;
if f is greater than max	if ( f > max )
print f	cout << f << endl ;
else	else
print max	cout << max << endl ;
create int n	int n ;
set mx to 0	int mx = 0 ;
assign 0 to sum	int sum = 0 ;
read n	cin >> n ;
create int a	int a ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
read a	cin >> a ;
set mx to max of mx and a	mx = max ( mx , a ) ;
assign sum + a to sum	sum += a ;
set sum to sum * 2	sum *= 2 ;
set sum = sum + n	sum += n ;
sum = sum / n	sum /= n ;
print max of sum and mx	cout << max ( sum , mx ) << endl ;
declare int variables n , i and j and int array a with 100002 elements	int n , i , j , a [ 100002 ] ;
read n	cin >> n ;
declare int sum = 0	int sum = 0 ;
declare integer variable mx = - 1	int mx = - 1 ;
for i from 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increase sum by a [ i ]	sum += a [ i ] ;
assign max of mx and a [ i ] to mx	mx = max ( mx , a [ i ] ) ;
looping infinitely	while ( 1 )
if mx * n - sum is greater than sum	if ( mx * n - sum > sum )
print mx	cout << mx << endl ;
else	else
increment mx	mx ++ ;
create integer n	int n ;
read n	cin >> n ;
create integers sum , temp , Max with sum = 0 , Max = 0	int sum = 0 , temp , Max = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read temp	cin >> temp ;
if temp is greater than Max , set Max to temp	if ( temp > Max ) Max = temp ;
increment sum by temp	sum += temp ;
print maximum of ( Max and sum * 2 / n + 1 ) print newline	cout << max ( Max , sum * 2 / n + 1 ) << endl ;
create int n	int n ;
read input to n	cin >> n ;
create integers ans , mayor and a with ans and mayor = 0	int ans = 0 , mayor = 0 , a ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a	cin >> a ;
set ans to ans + a	ans = ans + a ;
set mayor to max of mayor and a	mayor = max ( mayor , a ) ;
change ans to max of ( ans * 2 ) / n + 1 and mayor	ans = max ( ( ans * 2 ) / n + 1 , mayor ) ;
print ans	cout << ans << endl ;
declare long long variable n	long long n ;
read n	cin >> n ;
let a be long long array with size n	long long a [ n ] ;
declare long long variable maxi = 0	long long maxi = 0 ;
declare long long sum = 0	long long sum = 0 ;
for i = 0 and _n = n while i < _n , incrementing i	for ( long long i = 0 , _n = ( n ) ; i < _n ; i ++ )
read input to a [ i ]	cin >> a [ i ] ;
assign max of maxi and a [ i ] to maxi	maxi = max ( maxi , a [ i ] ) ;
set sum to sum + a [ i ]	sum = sum + a [ i ] ;
declare long long variable k = 0	long long k = 0 ;
increment k while n * k < = 2 * sum	while ( n * k <= 2 * sum ) k ++ ;
if k is less than maxi , set k to maxi	if ( k < maxi ) k = maxi ;
print k	cout << k << endl ;
let n , sum , sum1 and ans be integers with sum and sum1 = 0	int n , sum = 0 , sum1 = 0 , ans ;
read n	cin >> n ;
let ar be an array of integers of size n	int ar [ n ] ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read ar [ i ]	cin >> ar [ i ] ;
increase sum by ar [ i ]	sum += ar [ i ] ;
sort ar	sort ( ar , ar + n ) ;
for i = ar [ n - 1 ] , incrementing i	for ( int i = ar [ n - 1 ] ; ; i ++ )
assign value of 0 to sum1	sum1 = 0 ;
for j = 0 to n exclusive , increase sum1 by i - ar [ j ]	for ( int j = 0 ; j < n ; j ++ ) sum1 += ( i - ar [ j ] ) ;
if sum1 is greater than sum	if ( sum1 > sum )
set value of ans to i	ans = i ;
stop the loop	break ;
print ans	cout << ans << endl ;
declare int variable n	int n ;
read n	cin >> n ;
declare int array a with size n	int a [ n ] ;
create integer sum = 0	int sum = 0 ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read input to a [ i ]	cin >> a [ i ] ;
add a [ i ] to sum	sum += a [ i ] ;
create int k = ( 2 * sum ) / n + 1	int k = ( 2 * sum ) / n + 1 ;
sort a	sort ( a , a + n ) ;
if k > = a [ n - 1 ]	if ( k >= a [ n - 1 ] )
print k	cout << k << endl ;
else	else
print a [ n - 1 ]	cout << a [ n - 1 ] << endl ;
n = integer	int n ;
read n	cin >> n ;
arr = integer vector of size n	vector < int > arr ( n ) ;
max = maximum integer value , sum = integer = 0	int max = INT_MIN , sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
sum = sum + arr [ i ]	sum += arr [ i ] ;
if max < arr [ i ] , then max = arr [ i ]	if ( max < arr [ i ] ) max = arr [ i ] ;
if n * max > 2 * sum	if ( n * max > 2 * sum )
print max	cout << max << endl ;
else	else
if ( 2 * sum ) modulo n is 0	if ( ( 2 * sum ) % n == 0 )
print the result of ( 2 * n ) / n + 1	cout << ( 2 * sum ) / n + 1 << endl ;
else	else
print the result of ( 2 * sum ) / n rounded up to the next whole number	cout << ceil ( ( 2. * sum ) / n ) << endl ;
n = integer	int n ;
read n	cin >> n ;
pointer location of d = integer array of size n	int * d = new int [ n ] ;
k = integer = 0 , s = integer = 0	int k = 0 , s = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read d [ i ]	cin >> d [ i ] ;
s = s + d [ i ]	s += d [ i ] ;
k = the highest value betweek k and d [ i ]	k = max ( k , d [ i ] ) ;
sum = integer = 0	int sum = 0 ;
do	do
sum = 0	sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ ) sum += k - d [ i ] ;
increase k by 1	k ++ ;
while sum < = s	while ( sum <= s ) ;
print the result of k - 1	cout << k - 1 << endl ;
create integers n , s , k with s = 0 , k = 0	int n , s = 0 , k = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
create integer a	int a ;
read a	cin >> a ;
set k to maximum of k and a	k = max ( k , a ) ;
increment s by a	s += a ;
for n * k is less than or equal to 2 * s , incrementing k	for ( ; n * k <= 2 * s ; ++ k )
end statement	;
print k print ' \ n '	cout << k << ' \n ' ;
n , sum , ans = int with sum = 0 and ans = 0	int n , sum = 0 , ans = 0 ;
read n	cin >> n ;
arr = int array of size n	int arr [ n ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
increment sum by arr [ i ]	sum += arr [ i ] ;
sort arr	sort ( arr , arr + n ) ;
for i = 0 to n - 1 increment ans by - arr [ i ] + arr [ n - 1 ]	for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += - arr [ i ] + arr [ n - 1 ] ; }
loop infinitely	while ( 1 )
if ans is greater than sum then break	if ( ans > sum ) { break ; }
increment ans by n	ans += n ;
increment arr [ n - 1 ]	arr [ n - 1 ] ++ ;
print arr [ n - 1 ]	cout << arr [ n - 1 ] << endl ;
create integer n	int n ;
read n	cin >> n ;
create integer vector arr initialized with ( n + 5 )	vector < int > arr ( n + 5 ) ;
create integer max_val with max_val = 0	int max_val = 0 ;
create long long sum with sum = 0	long long sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
set max_val to maximum of ( max_val and arr [ i ] )	max_val = max ( max_val , arr [ i ] ) ;
increment sum by arr [ i ]	sum += arr [ i ] ;
create integer i with i = max_val	int i = max_val ;
for i is less than 10000 , incrementing i	for ( ; i < 10000 ; i ++ )
create long long val with val = i * n - sum	long long val = i * n - sum ;
if val is greater than sum , break loop	if ( val > sum ) break ;
print i print newline	cout << i << endl ;
define integers n , i , sum , max1 , ans , sum1 , i1 , and j , setting sum and max1 to 0	long long int n , i , sum = 0 , max1 = 0 , ans , sum1 , i1 , j ;
read into n	cin >> n ;
define integer array a to be of n + 2 elements	long long int a [ n + 2 ] ;
for i from 0 to n ( exclusive ) by 1	for ( i = 0 ; i < n ; i ++ )
read into a [ i ]	cin >> a [ i ] ;
increment sum by a [ i ]	sum = sum + a [ i ] ;
set max1 to max . of max1 , a [ i ]	max1 = max ( max1 , a [ i ] ) ;
for j from max1 to max1 * 2 + 2 by 1	for ( j = max1 ; j <= ( max1 * 2 ) + 2 ; j ++ )
zero sum1	sum1 = 0 ;
for i1 from 0 to n ( exclusive ) by 1 , increment sum1 by j - a [ i1 ]	for ( i1 = 0 ; i1 < n ; i1 ++ ) { sum1 = sum1 + ( j - a [ i1 ] ) ; }
if sum1 > sum	if ( sum1 > sum )
assign j to ans	ans = j ;
break out	break ;
print ans and newline	cout << ans << endl ;
n , i , j , k1 , k , suma , sumb = int with k = 0 and suma = 0 and sumb = 0	int n , i , j , k1 , k = 0 , suma = 0 , sumb = 0 ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is greater than k then set k to a [ i ]	if ( a [ i ] > k ) { k = a [ i ] ; }
increment suma by a [ i ]	suma += a [ i ] ;
for i = 0 to n increment sumb by k - a [ i ]	for ( i = 0 ; i < n ; i ++ ) { sumb += k - a [ i ] ; }
for i = 0	for ( i = 0 ; ; i ++ )
if sumb is less or equal to suma	if ( sumb <= suma )
set sumb to 0	sumb = 0 ;
increment k	k ++ ;
for j = 0 to n increment sumb by k - a [ j ]	for ( j = 0 ; j < n ; j ++ ) { sumb += k - a [ j ] ; }
else	else
break	break ;
print k	cout << k << endl ;
declare an array of integers value with size 101	int value [ 101 ] ;
declare integers n , k and sum where sum = 0 and k = - 1	int n , k = - 1 , sum = 0 ;
read input to n	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read value [ i ]	cin >> value [ i ] ;
add value [ i ] to sum	sum += value [ i ] ;
if value [ i ] is greater than k , set k to value [ i ]	if ( value [ i ] > k ) k = value [ i ] ;
while k * n - sum < = sum , increment k	while ( k * n - sum <= sum ) { k ++ ; }
print k	cout << k << endl ;
create integer n	int n ;
read n	cin >> n ;
create integer array a with size n , create integer sum with sum = 0	int a [ n ] , sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integer k	int k ;
read k	cin >> k ;
set a [ i ] to k	a [ i ] = k ;
set sum to sum + a [ i ]	sum = sum + a [ i ] ;
create integer lar with lar = a [ 0 ]	int lar = a [ 0 ] ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if lar is less than a [ i ] , set lar to a [ i ]	if ( lar < a [ i ] ) lar = a [ i ] ;
for j = lar , incrementing j	for ( int j = lar ; ; j ++ )
if j * n is greater than ( 2 * sum )	if ( j * n > ( 2 * sum ) )
print j print newline	cout << j << endl ;
break loop	break ;
create integer n , create integer array a with size 200	int n , a [ 200 ] ;
read n	cin >> n ;
create integers sum1 , k , with sum1 = 0 , k = 0	int sum1 = 0 , k = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment sum1 by a [ i ]	sum1 += a [ i ] ;
set k to maximum of k and a [ i ]	k = max ( k , a [ i ] ) ;
create integer flag with flag = 0	int flag = 0 ;
while not flag	while ( ! flag )
create integer sum2 with sum2 = 0	int sum2 = 0 ;
for i = 0 to n exclusive , increment sum2 by k - a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { sum2 += k - a [ i ] ; }
if sum2 is greater than sum1	if ( sum2 > sum1 )
set flag to 1	flag = 1 ;
else	else
increment k	k ++ ;
print k print newline	cout << k << endl ;
declare long long const mod = 1e9 + 7	long long const mod = 1e9 + 7 ;
power is a long long function with long long arguments x , y and mod	long long power ( long long x , long long y , long long mod = 2e18 )
declare long long variable ans = 1	long long ans = 1 ;
x = x modulo mod	x %= mod ;
while y	while ( y )
if y & 1 ! = 0 , assign ( x * ans ) % mod to ans	if ( y & 1 ) ans = ( x * ans ) % mod ;
set x to ( x * x ) % mod	x = ( x * x ) % mod ;
y = y > > 1	y >>= 1 ;
return ans	return ans ;
gcd is a long long function with long long arguments a and b	long long gcd ( long long a , long long b )
if a = 0 , return b	if ( a == 0 ) return b ;
return gcd ( b % a , a )	return gcd ( b % a , a ) ;
declare long long variables n , id1 and id2	long long n , id1 , id2 ;
read n , id1 and id2	cin >> n >> id1 >> id2 ;
create string second	string second ;
read input to second	cin >> second ;
if second [ id1 - 1 ] is equal to second [ id2 - 1 ]	if ( second [ id1 - 1 ] == second [ id2 - 1 ] )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
create integers n , a , b	int n , a , b ;
create string s	string s ;
create integer ans	int ans ;
read n read a read b read s	cin >> n >> a >> b >> s ;
if s [ a - 1 ] is s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
set ans to 0	ans = 0 ;
else	else
set ans to 1	ans = 1 ;
print ans print ' \ n '	cout << ans << ' \n ' ;
create const int inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
let ints n , a , and b	int n , a , b ;
read n , a , and b	cin >> n >> a >> b ;
create string s	string s ;
read s	cin >> s ;
if s [ a - 1 ] is equal to s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
print 0	cout << 0 << endl ;
create int set st	set < int > st ;
let char ch = ' '	char ch = '   ' ;
create int pos = 0	int pos = 0 ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if ch is equal to ' '	if ( ch == '   ' )
set ch to s [ i ]	ch = s [ i ] ;
continue to next loop iteration	continue ;
if s [ i ] is equal to ch	if ( s [ i ] == ch )
set pos to i	pos = i ;
else	else
insert i - pos into set st	st . insert ( i - pos ) ;
set pos to i	pos = i ;
set char to s [ i ]	ch = s [ i ] ;
print * st . end ( )	cout << * st . end ( ) << endl ;
declare an array of booleans vis with size 200005	bool vis [ 200005 ] ;
declare int arrays cnt and freq with 200005 elements	int cnt [ 200005 ] , freq [ 200005 ] ;
declare integers n , a and b	int n , a , b ;
read input to n , a and b	cin >> n >> a >> b ;
declare string s	string s ;
read s	cin >> s ;
if s [ a - 1 ] = s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
print " 0 "	puts ( " 0 " ) ;
else	else
print " 1 "	puts ( " 1 " ) ;
declare integers n , a and b	int n , a , b ;
create string s	string s ;
read n , a , b and s	cin >> n >> a >> b >> s ;
decrement a	a -- ;
decrement b	b -- ;
if s [ a ] ! = s [ b ]	if ( s [ a ] != s [ b ] )
print 1	cout << 1 << endl ;
else	else
print 0	cout << 0 << endl ;
create integers n , a and b	int n , a , b ;
read n , a and b	cin >> n >> a >> b ;
declare an array of chars arr with size n + 2	char arr [ n + 2 ] ;
read n elements into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
if arr [ a - 1 ] = arr [ b - 1 ]	if ( arr [ a - 1 ] == arr [ b - 1 ] )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
create string s	string s ;
create int n , a and b	int n , a , b ;
read n , a , b and s	cin >> n >> a >> b >> s ;
if a equal to b or s [ a - 1 ] = s [ b - 1 ]	if ( ( a == b ) || ( s [ a - 1 ] == s [ b - 1 ] ) )
print 0	cout << " 0 " << endl ;
else	else
print 1 and a newline	cout << " 1 " << endl ;
n , a , b = integers	int n , a , b ;
s = string	string s ;
read n , a , b	cin >> n >> a >> b ;
decrement a , decrement b	-- a , -- b ;
read s	cin >> s ;
if s [ a ] is s [ b ]	if ( s [ a ] == s [ b ] )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
declare ints n , ans , a and b ; create arrays of ints be and af with 100001 elements	int n , be [ 100001 ] , af [ 100001 ] , ans , a , b ;
declare string s with value	string s ;
read variables n , a , b and s from the input	cin >> n >> a >> b >> s ;
if s [ a - 1 ] is equal to s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
declare integers n , a and b	int n , a , b ;
read input to n , a and b	cin >> n >> a >> b ;
declare character array aN with size 100000	char aN [ 100000 ] ;
read aN	cin >> aN ;
if aN [ a - 1 ] ! = aN [ b - 1 ]	if ( aN [ a - 1 ] != aN [ b - 1 ] )
print 1	cout << 1 << endl ;
else	else
print 0	cout << 0 << endl ;
create integer array num with size 1000000 with num = { 0 }	int num [ 1000000 ] = { 0 } ;
declare fx with character array a as argument , returning void	void fx ( char a [ ] ) ;
create integers n , a , b	int n , a , b ;
create character array z with size 1000000	char z [ 1000000 ] ;
read n read a read b	cin >> n >> a >> b ;
read z	cin >> z ;
if z [ a - 1 ] is z [ b - 1 ]	if ( z [ a - 1 ] == z [ b - 1 ] )
print " 0 " print newline	cout << " 0 " << endl ;
else	else
print " 1 " print newline	cout << " 1 " << endl ;
create integers n , a and b	int n , a , b ;
create string s	string s ;
declare int variable ans	int ans ;
read n , a , b and s	cin >> n >> a >> b >> s ;
if s [ a - 1 ] = s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
set ans to 0	ans = 0 ;
else	else
set ans to 1	ans = 1 ;
print ans and ' \ n '	cout << ans << ' \n ' ;
declare const int maxn = 1e6 + 6	const int maxn = 1e6 + 6 ;
create ints n , a and b	int n , a , b ;
declare an array of integers arr with size maxn	int arr [ maxn ] ;
declare int variable len = 0	int len = 0 ;
declare string variable str	string str ;
read input to n , a and b	cin >> n >> a >> b ;
read input to str	cin >> str ;
loop i from 1 to n inclusive , assign str [ i - 1 ] to arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] ;
if arr [ a ] is equal to arr [ b ]	if ( arr [ a ] == arr [ b ] )
print " 0 "	cout << " 0 " << endl ;
else	else
print " 1 "	cout << " 1 " << endl ;
define vector VI , VI2 , VI3 , VI4	vector < int > VI , VI2 , VI3 , VI4 ;
define n , m , f , t , a , b as integers	int n , m , f , t , a , b ;
define s as string	string s ;
read n , a , b , s	cin >> n >> a >> b >> s ;
print abs ( s [ - - a ] - s [ - - b ] )	cout << abs ( s [ -- a ] - s [ -- b ] ) << endl ;
create integers n , a , b	int n , a , b ;
create string s	string s ;
read n read a read b read s	cin >> n >> a >> b >> s ;
if s [ a - 1 ] is s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
print 0 print " \ n "	cout << 0 << " \n " ;
else	else
print 1 print " \ n "	cout << 1 << " \n " ;
s = string	string s ;
n , m , k = int	int n , m , k ;
read n then m then k	cin >> n >> m >> k ;
read s	cin >> s ;
prepend ' # ' to s	s = ' # ' + s ;
print 1 if s [ m ] is not s [ k ] else print 0	cout << 1 - ( s [ m ] == s [ k ] ) << endl ;
define integral constant maxn to be 1e6 + 6	const int maxn = 1e6 + 6 ;
define integers n , a , b	int n , a , b ;
define maxn - element int array arr	int arr [ maxn ] ;
define int len , set to zero	int len = 0 ;
define string str	string str ;
read n , a , and then b	cin >> n >> a >> b ;
read str	cin >> str ;
for int i from i to n by 1 , assign str [ i - 1 ] to arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] ;
if arr [ a ] is arr [ b ]	if ( arr [ a ] == arr [ b ] )
print " 0 " and newline	cout << " 0 " << endl ;
otherwise	else
print " 1 " and a newline	cout << " 1 " << endl ;
create string s	string s ;
create integers n , a , b	int n , a , b ;
read n read a read b read s	cin >> n >> a >> b >> s ;
if a is b or s [ a - 1 ] is s [ b - 1 ]	if ( ( a == b ) || ( s [ a - 1 ] == s [ b - 1 ] ) )
print " 0 " print newline	cout << " 0 " << endl ;
else	else
pirnt " 1 " print newline	cout << " 1 " << endl ;
create integers a , b , n	int a , b , n ;
create string s	string s ;
read n read a read b read s	cin >> n >> a >> b >> s ;
decrement a	a -- ;
decrement b	b -- ;
print ( ( s [ a ] - ' 0 ' ) ^ ( s [ b ] - ' 0 ' ) ) print newline	cout << ( ( s [ a ] - ' 0 ' ) ^ ( s [ b ] - ' 0 ' ) ) << endl ;
create constant long long int mod = 998244353	const long long mod = 998244353 ;
create const long long int inf = 2e18	const long long inf = 2e18 ;
let const int maxn = 200005	const int maxn = 200005 ;
let const int maxa = 300005	const int maxa = 300005 ;
declare gcd taking in long long ints a and b and returning long long	long long gcd ( long long a , long long b )
return gcd ( b , a % b ) if b is truthy or a if not	return b ? gcd ( b , a % b ) : a ;
declare powmod taking in long long ints a and b and returning long long	long long powmod ( long long a , long long b )
let long long in res = 1	long long res = 1 ;
set a to a % mod	a %= mod ;
if b is less than 0 , return - 1	if ( b < 0 ) return - 1 ;
loop until b is falsy	for ( ; b ; b >>= 1 )
if b & 1 is truthy , set res to res * a % mod	if ( b & 1 ) res = res * a % mod ;
set a to a * a % mod	a = a * a % mod ;
return res	return res ;
let int INF = 10000000	int INF = 10000000 ;
let int T	int T ;
create ints n , m , l , r	int n , m , l , r ;
create int ans = 0	int ans = 0 ;
create string str	string str ;
read n , l , and r	cin >> n >> l >> r ;
create str	cin >> str ;
let int array a of size maxn	int a [ maxn ] ;
for i = 0 to n exclusive , set a [ i + 1 ] to str [ i ] - ' 0 '	for ( int i = 0 ; i < n ; i ++ ) a [ i + 1 ] = str [ i ] - ' 0 ' ;
if a [ l ] is equal to a [ r ] , return the result of 0 * puts ( " 0 " )	if ( a [ l ] == a [ r ] ) return 0 * puts ( " 0 " ) ;
print " 1 "	puts ( " 1 " ) ;
let n , a , b be integers	int n , a , b ;
let str be a string	string str ;
read n , a and b	cin >> n >> a >> b ;
read str	cin >> str ;
print the absolute value of str [ a - ] - ' 0 ' - str [ b - 1 ] + ' 0 '	cout << abs ( ( str [ a - 1 ] - ' 0 ' ) - ( str [ b - 1 ] - ' 0 ' ) ) << endl ;
locale loc	locale loc ;
declare int variables n , s and e	int n , s , e ;
read input to n , s and e	cin >> n >> s >> e ;
declare string variable str	string str ;
read str	cin >> str ;
if str [ s - 1 ] = str [ e - 1 ]	if ( str [ s - 1 ] == str [ e - 1 ] )
print 0 and " \ n "	cout << 0 << " \n " ;
else	else
print 1 and " \ n "	cout << 1 << " \n " ;
declare ints n , a and b	int n , a , b ;
read n , a and b	cin >> n >> a >> b ;
declare integer variables i and val	int i , val ;
declare vector of integers called v with size n + 1	vector < int > v ( n + 1 ) ;
declare string variable s	string s ;
read input to s	cin >> s ;
for i from 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if s [ i ] is equal to ' 1 '	if ( s [ i ] == ' 1 ' )
set v [ i + 1 ] to 1	v [ i + 1 ] = 1 ;
else	else
assign 0 to v [ i + 1 ]	v [ i + 1 ] = 0 ;
declare int variable aa = min of a and b	int aa = min ( a , b ) ;
declare int variable bb = max of a and b	int bb = max ( a , b ) ;
declare int j	int j ;
create int count = 0	int count = 0 ;
loop i from aa while i < = bb	for ( i = aa ; i <= bb ; )
if v [ i ] = 0	if ( v [ i ] == 0 )
declare integer variable index = i	int index = i ;
for j = i to bb inclusive	for ( j = i ; j <= bb ; j ++ )
if v [ j ] = 0 , set index to j	if ( v [ j ] == 0 ) index = j ;
if index = bb , break the loop	if ( index == bb ) break ;
if index ! = bb	if ( index != bb )
change i to index + 1	i = index + 1 ;
increment count by one	count ++ ;
else	else
create integer index = i	int index = i ;
for j from i to bb inclusive	for ( j = i ; j <= bb ; j ++ )
if v [ j ] is equal to 1 , assign j to index	if ( v [ j ] == 1 ) index = j ;
if index is equal to bb , break	if ( index == bb ) break ;
if index ! = bb	if ( index != bb )
set i to index + 1	i = index + 1 ;
increment count by one	count ++ ;
print count	cout << count << endl ;
declare ints n , a and b	int n , a , b ;
read input to n , a and b	cin >> n >> a >> b ;
declare string s	string s ;
read input to s	cin >> s ;
if s [ a - 1 ] is equal to s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
print 0	cout << ( 0 ) << endl ;
else	else
print 1	cout << ( 1 ) << endl ;
let n , a , b be integers	int n , a , b ;
let s be a string	string s ;
read n , a , b	cin >> n >> a >> b ;
read s	cin >> s ;
if s [ a - 1 ] is equal to s [ b - 1 ]	if ( s [ a - 1 ] == s [ b - 1 ] )
print 0 and newline	cout << 0 << endl ;
else do the following	else
print 1 and newline	cout << 1 << endl ;
let a be a string	string a ;
let n be a integer	int n ;
read a	cin >> a ;
read n	cin >> n ;
the 26th element of integer array kiek is equal to 0	int kiek [ 26 ] = { 0 } ;
if length of a is less than n	if ( a . size ( ) < n )
print impossible and newline	cout << " impossible " << endl ;
for i = 0 to length of a exclusive , increment kiek [ a [ i ] - a ] by 1	for ( int i = 0 ; i < a . size ( ) ; i ++ ) { kiek [ a [ i ] - ' a ' ] ++ ; }
let k be a integer with k = 0	int k = 0 ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if kiek [ i ] > = 1 , increment k by 1	if ( kiek [ i ] >= 1 ) k ++ ;
if k is less than n	if ( k < n )
print n - k and newline	cout << n - k << endl ;
else do the following	else
print 0 and newline	cout << " 0 " << endl ;
semicolumn	;
declare new string s	string s ;
read input to s	cin >> s ;
k is a new integer	int k ;
read input to k	cin >> k ;
create new integer called cnt with value 0	int cnt = 0 ;
if k is greater than length of s	if ( k > s . size ( ) )
print " impossible "	cout << " impossible " << endl ;
else	else
create new integer exrt	int exrt ;
create new array of integers freq with size 30 filled with 0	int freq [ 30 ] = { 0 } ;
for i from 0 to length of s exclusive incrementing i	for ( int i = 0 ; i < s . size ( ) ; i ++ )
assign the new value = ( s [ i ] ) - 96 to exrt	exrt = int ( s [ i ] ) - 96 ;
increment freq [ exrt ] by one	freq [ exrt ] ++ ;
in a for loop , change i from 0 to 30 exclusive	for ( int i = 0 ; i < 30 ; i ++ )
increment cnt if freq [ i ] ! = 0	if ( freq [ i ] != 0 ) cnt ++ ;
if k < = cnt	if ( k <= cnt )
print " 0 " to the standard output	cout << " 0 " << endl ;
else	else
print k - cnt	cout << k - cnt << endl ;
create constant long long integer INF = ( 1LL < < 60 ) - 1	const long long int INF = ( 1LL << 60 ) - 1 ;
new const long long integer MAX = 998244353	const long long int MAX = 998244353 ;
fast_exp is a long long int function with long long int arguments base , exp and m	long long int fast_exp ( long long int base , long long int exp , long long int m )
declare long long integer variable res = 1	long long int res = 1 ;
while exp > 0	while ( exp > 0 )
if exp is odd , assign ( res * base ) % m to res	if ( exp % 2 == 1 ) { res = ( res * base ) % m ; }
change the value of base to base squared % m	base = ( base * base ) % m ;
divide exp by 2	exp /= 2 ;
return res modulo m	return res % m ;
s is a new string	string s ;
declare integers k and cnt with cnt = 0	int k , cnt = 0 ;
read variables s and k from the input	cin >> s >> k ;
freq is a new array of integers with 26 elements filled with 0	int freq [ 26 ] = { 0 } ;
declare integer n with value length of s	int n = s . length ( ) ;
start for loop from i = 0 to n exclusive , incrementing freq [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] - ' a ' ] ++ ; }
in a for loop , change i from 0 to 26 exclusive incrementing i	for ( int i = 0 ; i < 26 ; i ++ )
if freq [ i ] is not 0 , increment cnt by one	if ( freq [ i ] ) { cnt ++ ; }
if cnt > = k	if ( cnt >= k )
print 0	cout << 0 << endl ;
if n is less than k	if ( n < k )
print " impossible "	cout << " impossible " << endl ;
print k - cnt	cout << k - cnt << endl ;
declare string s	string s ;
read s	cin >> s ;
declare integer n	int n ;
read n	cin >> n ;
if n is greater than integer casted size of s	if ( n > ( int ) s . size ( ) )
print " impossible \ n "	cout << " impossible\n " ;
else	else
print maximum of ( o and n - size of integer casted character set initialized with ( beginning of s to end of s ) ) , ' \ n '	cout << max ( 0 , n - ( int ) set < char > ( s . begin ( ) , s . end ( ) ) . size ( ) ) << ' \n ' ;
create string a	string a ;
create int s , num , p [ 1001 ]	int s , num , p [ 1001 ] ;
read a and s	cin >> a >> s ;
if size of a < s	if ( a . size ( ) < s )
print impossible	cout << " impossible " << endl ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < a . size ( ) ; i ++ )
if p [ a [ i ] ] = 0 , increment ans	if ( ! p [ a [ i ] ] ) num ++ ;
set p [ a [ i ] ] = 1	p [ a [ i ] ] = 1 ;
print max of 0 and s - m	cout << max ( 0 , s - num ) << endl ;
str = string	string str ;
read str	cin >> str ;
k = long long integer	long long int k ;
read k	cin >> k ;
freq = long long integer array of size 27 , freq [ 0 ] = 0	long long int freq [ 27 ] = { 0 } ;
if k > size of str	if ( k > str . size ( ) )
print impossible	cout << " impossible " ;
else	else
for i = 0 to size of str exclusive , then increase by 1 freq [ str [ i ] - a + 1 ]	for ( long long int i = 0 ; i < str . size ( ) ; i ++ ) { freq [ str [ i ] - ' a ' + 1 ] ++ ; }
count = long long integer = 0	long long int count = 0 ;
for i = 1 to 26 inclusive	for ( long long int i = 1 ; i <= 26 ; i ++ )
if freq [ i ] is not 0 , then increase count by 1	if ( freq [ i ] != 0 ) count ++ ;
if count > = k	if ( count >= k )
print 0	cout << " 0 " ;
else	else
print k - count	cout << ( k - count ) ;
print endline	cout << endl ;
declare constant integer maxn = 3e5 + 5	const int maxn = 3e5 + 5 ;
declare integer array a size 50 = { }	int a [ 50 ] = { } ;
declare string s	string s ;
declare integer k	int k ;
read s and k	cin >> s >> k ;
for i = 0 to length of s exclusive , increment a [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < s . length ( ) ; i ++ ) a [ s [ i ] - ' a ' ] ++ ;
declare integers sum = 0 , cnt = 0	int sum = 0 , cnt = 0 ;
for i = 0 to 30 exclusive	for ( int i = 0 ; i < 30 ; i ++ )
if a [ i ] is greater than 0 , increment cnt	if ( a [ i ] > 0 ) cnt ++ ;
increment sum by a [ i ]	sum += a [ i ] ;
if sum is less than k , return print " impossible " , 0	if ( sum < k ) return puts ( " impossible " ) , 0 ;
if cnt is greater than or equal to k , return print " 0 " , 0	if ( cnt >= k ) return puts ( " 0 " ) , 0 ;
print k - cnt and newline	cout << k - cnt << endl ;
declare constant integer inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
declare constant integer mod = integer casted 1e9 + 7	const int mod = ( int ) 1e9 + 7 ;
declare constant integer maxn = integer casted 1e5 + 5	const int maxn = ( int ) 1e5 + 5 ;
declare integer array vis size 30	int vis [ 30 ] ;
declare string s	string s ;
read s	cin >> s ;
declare integer len = size of s	int len = s . size ( ) ;
declare integer n	int n ;
read n	cin >> n ;
if n is greater than len , return 0 * print " impossible "	if ( n > len ) return 0 * puts ( " impossible " ) ;
for i = 0 to len exclusive , increment vis [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < len ; i ++ ) { vis [ s [ i ] - ' a ' ] ++ ; }
declare integer cnt = 0	int cnt = 0 ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if vis [ i ] , increment cnt	if ( vis [ i ] ) cnt ++ ;
if cnt is greater than or equal to n	if ( cnt >= n )
print " 0 "	puts ( " 0 " ) ;
else	else
print n - cnt and newline	cout << n - cnt << endl ;
s = string	string s ;
k = int , cnt = array of 26 int filled with 0	int k , cnt [ 26 ] = { 0 } ;
read s , k	cin >> s >> k ;
if length of s < k	if ( s . length ( ) < k )
print " impossibile "	cout << " impossible "
print newline	<< " \n " ;
else	else
for i = 0 to length of s exclusive increment cnt [ s [ i ] - 97 ]	for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s [ i ] - 97 ] ++ ; }
res = 0	int res = 0 ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if cnt [ i ] increment res	if ( cnt [ i ] ) { res ++ ; }
print max ( 0 , k - res )	cout << max ( 0 , k - res ) << " \n " ;
declare integer k	int k ;
declare string s	string s ;
read s and k	cin >> s >> k ;
if size of s is less than k , return print " impossible \ n " , 0	if ( s . size ( ) < k ) return cout << " impossible\n " , 0 ;
sort from beginning of s to end of s	sort ( s . begin ( ) , s . end ( ) ) ;
resize s to size ( remove all duplicates but one from ( beginning of s to end of s ) - beginning of s )	s . resize ( unique ( s . begin ( ) , s . end ( ) ) - s . begin ( ) ) ;
print maximum of ( k - integer casted size of s and 0 ) and newline	cout << max ( k - ( int ) s . size ( ) , 0 ) << endl ;
declare integers n , num , ans	int n , num , ans ;
declare string str	string str ;
read str	cin >> str ;
read n	cin >> n ;
if size of str is less than n	if ( str . size ( ) < n )
print " impossible \ n "	cout << " impossible\n " ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if first index of ' a ' + i in str is not - 1 , increment num	if ( str . find ( ' a ' + i ) != - 1 ) num ++ ;
print maximum of ( n - num and 0 ) and " \ n "	cout << max ( n - num , 0 ) << " \n " ;
create constant integer N with value 2e6 + 5	const int N = 2e6 + 5 ;
long long function power with long long arguments x and p and unsigned long long argument y	long long power ( long long x , unsigned long long y , long long p )
create new long long variable res with value 1	long long res = 1 ;
assign x modulo p to x	x = x % p ;
while y > 0	while ( y > 0 )
if y & 1 is not 0 , change res to ( res * x ) % p	if ( y & 1 ) res = ( res * x ) % p ;
assign the new value = y to y	y = y >> 1 ;
change x to ( x * x ) % p	x = ( x * x ) % p ;
return res	return res ;
declare new long long variables i and j	long long i , j ;
declare string variable with name s	string s ;
create new long long k	long long k ;
read s and k from the input	cin >> s >> k ;
if k is greater than length of s	if ( k > ( long long ) s . size ( ) )
print " impossible " and ' \ n ' to the standard output	cout << " impossible " << ' \n ' ;
else	else
temp is a set of unique characters	set < char > temp ;
for i = 0 to length of s exclusive	for ( i = 0 ; i < ( long long ) s . size ( ) ; i ++ )
insert s [ i ] into temp	temp . insert ( s [ i ] ) ;
if length of temp = k	if ( ( long long ) temp . size ( ) == k )
print 0 and ' \ n '	cout << 0 << ' \n ' ;
print k - length of temp and ' \ n '	cout << k - ( long long ) temp . size ( ) << ' \n ' ;
declare string s	string s ;
declare integer k	int k ;
read s and k	cin >> s >> k ;
if k is greater than size of s	if ( k > s . size ( ) )
print " impossible \ n "	cout << " impossible\n " ;
sort from beginning of s to end of s	sort ( s . begin ( ) , s . end ( ) ) ;
remove from ( remove all but first of ( beginning of s to end of s ) ) to end of s from s	s . erase ( unique ( s . begin ( ) , s . end ( ) ) , s . end ( ) ) ;
print maximum of ( k - integer casted size of s and 0 ) and newline	cout << max ( k - ( int ) s . size ( ) , 0 ) << endl ;
let N , K , ans , val , x , y be integers with ans = 2e9 , A = array of integers of length 26	int N , K , ans = 2e9 , A [ 26 ] , val , x , y ;
let T , S be strings	string T , S ;
read S , N	cin >> S >> N ;
if length of S is less than N	if ( S . length ( ) < N )
print impossible and newline	cout << " impossible\n " ;
for integer i = 0 to length of S exclusive	for ( int i = 0 ; i < S . length ( ) ; i ++ )
increment A [ S [ i ] - a ] by 1	A [ S [ i ] - ' a ' ] ++ ;
if A [ S [ i ] - a is equal to 1 , increment val by 1	if ( A [ S [ i ] - ' a ' ] == 1 ) val ++ ;
print maximum of 0 , N - val and newline	cout << max ( 0 , N - val ) << ' \n ' ;
create new int k and an array of ints haSh with 30 elements	int k , haSh [ 30 ] ;
declare string variable s	string s ;
read standard input to s and k	cin >> s >> k ;
if k is greater than length of s	if ( k > s . size ( ) )
print " impossible "	cout << " impossible " << endl ;
start for loop from i = 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if haSh [ ( s [ i ] - ' a ' ) ] is false	if ( ! haSh [ ( s [ i ] - ' a ' ) ] )
change haSh [ s [ i ] - ' a ' ] to 1	haSh [ s [ i ] - ' a ' ] = 1 ;
decrement k by one	k -- ;
if k < = 0	if ( k <= 0 )
print 0	cout << 0 << endl ;
else	else
print k	cout << k << endl ;
declare string variable with name s	string s ;
k is a new integer	int k ;
read standard input to s and k	cin >> s >> k ;
ms is a set of unique characters	set < char > ms ;
insert all elements of s into ms	for ( int i = 0 ; i < s . size ( ) ; i ++ ) { ms . insert ( s [ i ] ) ; }
if length of s is less than k	if ( s . size ( ) < k )
print " impossible "	cout << " impossible " << endl ;
else	else
if length of ms is less than k	if ( ms . size ( ) < k )
print k - length of ms	cout << k - ms . size ( ) << endl ;
else	else
print 0 to the standard output	cout << 0 << endl ;
create new constant integer INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
declare integer constant mod with value 998244353	const int mod = 998244353 ;
create new string s	string s ;
declare integers k and cnt and an integer array vis with 26 elements	int k , vis [ 26 ] , cnt ;
read s and k from the input	cin >> s >> k ;
if length of s is less than k	if ( s . size ( ) < k )
return puts ( " impossible " ) , 0	return puts ( " impossible " ) , 0 ;
else	else
in a for loop , change i from 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if vis [ s [ i ] - ' a ' ] is equal to 0	if ( vis [ s [ i ] - ' a ' ] == 0 )
set the value of vis [ s [ i ] - ' a ' ] to 1	vis [ s [ i ] - ' a ' ] = 1 ;
increment cnt	cnt ++ ;
if cnt > = k	if ( cnt >= k )
print 0	cout << 0 << endl ;
else	else
print k - cnt	cout << k - cnt << endl ;
create new strings input and insertion	string input , insertion ;
create new integers unique and inputLength with inputLength = 0	int unique , inputLength = 0 ;
read input and unique from the input	cin >> input >> unique ;
assign the new value = length of input to inputLength	inputLength = input . length ( ) ;
if inputLength is less than unique	if ( inputLength < unique )
print " impossible "	cout << " impossible " << endl ;
else	else
create new set of unique strings called inputs	set < string > inputs ;
start for loop from i = 0 to inputLength exclusive	for ( int i = 0 ; i < inputLength ; i ++ )
change the value of insertion to input [ i ]	insertion = input [ i ] ;
insert insertion to the inputs	inputs . insert ( insertion ) ;
if unique is greater than length of inputs	if ( unique > inputs . size ( ) )
print unique - length of inputs	cout << unique - inputs . size ( ) << endl ;
else	else
print 0	cout << 0 << endl ;
maxn = constant integer = 3e5 + 5	const int maxn = 3e5 + 5 ;
a = integer array of size 50	int a [ 50 ] = { } ;
s = string	string s ;
k = integer	int k ;
read s , k	cin >> s >> k ;
for i = 0 to length of s , then increase a [ s [ i ] - a ] by 1	for ( int i = 0 ; i < s . length ( ) ; i ++ ) a [ s [ i ] - ' a ' ] ++ ;
sum = integer = 0 , cnt = integer = 0	int sum = 0 , cnt = 0 ;
for i = 0 to 30 exclusive	for ( int i = 0 ; i < 30 ; i ++ )
if a [ i ] > 0 , then increase cnt by 1	if ( a [ i ] > 0 ) cnt ++ ;
sum = sum + a [ i ]	sum += a [ i ] ;
if sum < k , then print impossible then end execution of code	if ( sum < k ) return puts ( " impossible " ) , 0 ;
if cnt > = k print 0 then end execution of code	if ( cnt >= k ) return puts ( " 0 " ) , 0 ;
print k - cnt	cout << k - cnt << endl ;
let n , pre , cur , nex , sum be integers , let sum = 0	int n , pre , cur , nex , sum = 0 ;
read n	cin >> n ;
if n equals 1 or 2 , return and print 0	if ( n == 1 || n == 2 ) return cout << 0 << endl , 0 ;
read pre , cur	cin >> pre >> cur ;
subract 2 from n	n -= 2 ;
while n > 0	while ( n -- )
read nex	cin >> nex ;
if cur > pre & & cur > nex or cur < pre & & cur < nex , add one to sum	if ( ( cur > pre && cur > nex ) || ( cur < pre && cur < nex ) ) sum ++ ;
let pre = cur	pre = cur ;
let cur = nex	cur = nex ;
print sum	cout << sum << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
create vector of integers a with size n	vector < int > a ( n ) ;
read n elements from the user input and out them into a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
ans is a new integer with value 0	int ans = 0 ;
start a loop from i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if ( a [ i ] - a [ i - 1 ] ) * ( a [ i ] - a [ i + 1 ] ) is greater than 0 , increment ans	if ( ( a [ i ] - a [ i - 1 ] ) * ( a [ i ] - a [ i + 1 ] ) > 0 ) ans ++ ;
print ans	cout << ans << endl ;
declare integers n , c = 0	int n , c = 0 ;
declare integer vector v	vector < int > v ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
declare integer a	int a ;
read a	cin >> a ;
add a to end of v	v . push_back ( a ) ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if v [ i ] is greater than v [ i + 1 ] and v [ i ] is greater than v [ i - 1 ]	if ( v [ i ] > v [ i + 1 ] && v [ i ] > v [ i - 1 ] )
increment c	c ++ ;
else if v [ i ] is less than v [ 1 + i ] and v [ i ] is less than v [ i - 1 ]	else if ( v [ i ] < v [ 1 + i ] && v [ i ] < v [ i - 1 ] )
increment c	c ++ ;
print c and newline	cout << c << endl ;
create int a [ 1005 ]	int a [ 1005 ] ;
create int n , set ans to 0	int n , ans = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] , increment ans	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) ans ++ ;
if a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] , increment ans	if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ans ++ ;
print ans	cout << ans << endl ;
create int n , a [ 1001 ]	int n , a [ 1001 ] ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
ans = 0	int ans = 0 ;
for i = 2 to n exclusive	for ( int i = 2 ; i < n ; i ++ )
if a [ i ] > a [ i + 1 ] and a [ i ] > a [ i - 1 ]	if ( a [ i ] > a [ i + 1 ] && a [ i ] > a [ i - 1 ] )
increment ans	ans ++ ;
continue	continue ;
if a [ i ] < a [ i + 1 ] and a [ i ] < a [ i - 1 ] , increment ans	if ( a [ i ] < a [ i + 1 ] && a [ i ] < a [ i - 1 ] ) { ans ++ ; }
print ans	cout << ans << endl ;
maxsum , minsum , a , n = integers with a = array of size 1005	int maxsum , minsum , a [ 1005 ] , n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
foe i = 2 to n exclusive	for ( int i = 2 ; i < n ; i ++ )
if ( a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] ) , increment maxsum	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) { maxsum ++ ; }
if ( a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] ) , increment minsum	if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) { minsum ++ ; }
print maxsum + minsum	cout << maxsum + minsum << endl ;
declare long long integer n	long long int n ;
read n	cin >> n ;
declare long long integer array a size n + 1 = { 0 }	long long int a [ n + 1 ] = { 0 } ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
declare long long integers c = 0 , d = 0	long long int c = 0 , d = 0 ;
for i = 2 to n exclusive	for ( int i = 2 ; i < n ; i ++ )
if a [ i ] is greater than a [ i - 1 ] and a [ i ] is greater than a [ i + 1 ] or a [ i ] is less than a [ i - 1 ] and a [ i ] is less than a [ i + 1 ] , increment c	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) { c ++ ; }
print c and newline	cout << c << endl ;
g = 9 . 8	const double g = 9.8 ;
set mod = 1000000007	const int mod = 1000000007 ;
create int n , i , j , k , ans	int n , i , j , k , ans ;
set x = 1e5	const int x = 1e5 ;
create long long a [ x ]	long long a [ x ] ;
create int i , j , k , m , n , t	int i , j , k , m , n , t ;
read t	cin >> t ;
for i = 0 to t exclusive , read a [ i ]	for ( i = 0 ; i < t ; i ++ ) cin >> a [ i ] ;
num = 0	int num = 0 ;
for i = 1 to t - 1 exclusive	for ( i = 1 ; i < t - 1 ; i ++ )
if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] , increment num	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) num ++ ;
if a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] , add 1 to num	if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) num ++ ;
print num	cout << num << endl ;
make constant integer maxn = 1e5 + 5	const int maxn = 1e5 + 5 ;
make const double esp = 1e - 8	const double esp = 1e-8 ;
declare inline read returning integer	inline int read ( )
make int X = 0 and w = 0	int X = 0 , w = 0 ;
let char ch = 0	char ch = 0 ;
while ch is not a digit	while ( ! isdigit ( ch ) )
set w to w | ch = = ' - '	w |= ch == ' - ' ;
read ch	ch = getchar ( ) ;
while ch is a digit , set X to X < < 3 ) + ( X < < 1 ) + ( ch ^ 48 ) and ch to getchar ( )	while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch ^ 48 ) , ch = getchar ( ) ;
return - X if w is truthy or X if not	return w ? - X : X ;
make long long int array a of size maxn	long long a [ maxn ] ;
make integer n	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
create integer num = 0	int num = 0 ;
for i = 1 to n - 1	for ( int i = 2 ; i <= n - 1 ; i ++ )
if a [ i ] is greater than a [ i + 1 ] and a [ i ] is greater than a [ i - 1 ] or a [ i ] is less than a [ i - 1 ] or a [ i ] is less than a [ i - 1 ] and a [ i ] is less than a [ i + 1 ] , increment num	if ( a [ i ] > a [ i + 1 ] && a [ i ] > a [ i - 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ++ num ;
output num	cout << num << endl ;
create ints n , l , mid , r , and now	int n , l , mid , r , now ;
read n	cin >> n ;
make integer ans = 0	int ans = 0 ;
read l	cin >> l ;
if n is greater than or equal to 1	if ( n >= 1 )
end statement	;
if n is greater than or equal to 2 , read mid	if ( n >= 2 ) { cin >> mid ; }
if n is greater than or equal to 3	if ( n >= 3 )
set n to n - 2	n -= 2 ;
while n - - is truthy	while ( n -- )
read r	cin >> r ;
if mid is less than 1 and mid is less than r	if ( mid < l && mid < r )
set ans to ans + 1	ans ++ ;
else if mid is greater than 1 and mid is greater than r	else if ( mid > l && mid > r )
set ans to ans + 1	ans ++ ;
set l to mid	l = mid ;
set mid to r	mid = r ;
output ans	cout << ans << endl ;
create int a [ 1002 ] , n , i , set ans to 0	int ans = 0 , a [ 1002 ] , n , i ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 2 to n exclusive	for ( i = 2 ; i < n ; i ++ )
if a [ i ] > a [ i + 1 ] and a [ i ] > a [ i - 1 ]	if ( a [ i ] > a [ i + 1 ] && a [ i ] > a [ i - 1 ] )
increment ans	ans ++ ;
else if a [ i ] < a [ i + 1 ] and a [ i ] < a [ i - 1 ]	else if ( a [ i ] < a [ i + 1 ] && a [ i ] < a [ i - 1 ] )
increment ans	ans ++ ;
print ans	cout << ans << endl ;
a = long long array length 1001	long long a [ 1001 ] ;
let n , ans = 0 be long long	long long n , ans = 0 ;
read n	cin >> n ;
read the first n elements of a	for ( long long i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for long long i = 1 to n - 1 exclusive	for ( long long i = 1 ; i < n - 1 ; i ++ )
if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] then increment ans	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) ans ++ ;
if a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] then increment ans	if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ans ++ ;
print ans	cout << ans << endl ;
let n and ans be integers , set ans to 0	int n , ans = 0 ;
read in n	cin >> n ;
let a be an array of integers of size n	int a [ n ] ;
read in n values into a	for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;
for i = 1 to n - 1	for ( int i = 1 ; i < n - 1 ; ++ i )
if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] or a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] , increment a	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ++ ans ;
print ans and a newline	cout << ans << " \n " ;
read in n	cin >> n ;
create int n , set c to 0	int n , c = 0 ;
read n	cin >> n ;
create int a [ n + 2 ]	int a [ n + 2 ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ]	if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] )
increment c	c ++ ;
else if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ]	else if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] )
increment c	c ++ ;
print c	cout << c << endl ;
let gcd be a function which accepts long integers a and b and returns a long integer	long long gcd ( long long a , long long b )
return a if ( not b ) else return gcd of b and a modulo b	return ! b ? a : gcd ( b , a % b ) ;
let lcm be a function which accepts long integers a and b and returns a long integer	long long lcm ( long long a , long long b )
return the value of ( a / gcd of a and b ) * b	return ( a / gcd ( a , b ) ) * b ;
let dix be an integer array with elements as 1 , - 1 , 0 , 0 , 1 , 1 , - 1 , - 1	int dix [ ] = { 1 , - 1 , 0 , 0 , 1 , 1 , - 1 , - 1 } ;
let diy be an integer array with elements as 0 , 0 , 1 , - 1 , 1 , - 1 , 1 , - 1	int diy [ ] = { 0 , 0 , 1 , - 1 , 1 , - 1 , 1 , - 1 } ;
let n be a integer	int n ;
read n	cin >> n ;
create a vector of integers v and size n	vector < int > v ( n ) ;
the integer value of res = 0	int res = 0 ;
for i = 0 to n exclusive , read v [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if v [ i ] is greater than v [ i - 1 ] and v [ i ] is greater than v [ i + 1 ] , increment res by 1	if ( v [ i ] > v [ i - 1 ] && v [ i ] > v [ i + 1 ] ) res ++ ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if v [ i ] is less than v [ i - 1 ] and v [ i ] is less than v [ i + 1 ] , increment res by 1	if ( v [ i ] < v [ i - 1 ] && v [ i ] < v [ i + 1 ] ) res ++ ;
print res and newline	cout << res << ' \n ' ;
semicolumn	;
n = integer	int n ;
while read n	while ( cin >> n )
a = integer array of size 1005	int a [ 1005 ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
num = integer with num = 0	int num = 0 ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if ( a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] ) , increment num	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) num ++ ;
if ( a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] ) , increment num	if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) num ++ ;
print num	cout << num << endl ;
n = int	int n ;
read n	cin >> n ;
arr = int array length n	int arr [ n ] ;
read the first n elements of arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sol = 0 = int	int sol = 0 ;
for i = 1 to n - 1exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
if ( ( arr [ i ] - arr [ i - 1 ] ) * ( arr [ i ] - arr [ i + 1 ] ) ) is stricly positive then increment sol	if ( ( ( arr [ i ] - arr [ i - 1 ] ) * ( arr [ i ] - arr [ i + 1 ] ) ) > 0 ) sol ++ ;
print sol	cout << sol << endl ;
r = integer	int r ;
while reading values r	while ( cin >> r )
sum = integer with 0	int sum = 0 ;
a = array of 1001 integers with 0 elements	int a [ 1001 ] = { 0 } ;
Read r values into array a	for ( int i = 0 ; i < r ; i ++ ) cin >> a [ i ] ;
for i = 1 to r - 1 exclusive	for ( int i = 1 ; i < r - 1 ; i ++ )
if a [ i ] is less than a [ i - 1 ]	if ( a [ i ] < a [ i - 1 ] )
if a [ i ] is less than a [ i + 1 ]	if ( a [ i ] < a [ i + 1 ] )
increment sum	sum ++ ;
else do the following	else
do nothing	;
else if a [ i ] is greater than a [ i - 1 ]	else if ( a [ i ] > a [ i - 1 ] )
if a [ i ] is less than a [ i + 1 ] , then increment sum	if ( a [ i ] > a [ i + 1 ] ) sum ++ ;
print sum and new line	cout << sum << endl ;
let n , i , extrema = 0 , arr [ 1000 + 5 ] be ints	int n , i , extrema = 0 , arr [ 1000 + 5 ] ;
read n	cin >> n ;
for i = 0 to n exclusive increment i first , read arr [ i ]	for ( i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }
for i = 1 to n - 1 increment i first	for ( i = 1 ; i < n - 1 ; ++ i )
if arr [ i ] > arr [ i - 1 ] and arr [ i ] > arr [ i + 1 ]	if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] )
increment first extrema	++ extrema ;
else if arr [ i ] < arr [ i - 1 ] and arr [ i ] < arr [ i + 1 ]	else if ( arr [ i ] < arr [ i - 1 ] && arr [ i ] < arr [ i + 1 ] )
increment first extrema	++ extrema ;
print extrema	cout << extrema << endl ;
return 0	return ( 0 ) ;
let n be a integer	int n ;
read n	cin >> n ;
let * elements be a integer with * elements = new int [ n ]	int * elements = new int [ n ] ;
for i = 0 to n exclusive , read elements [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> elements [ i ] ; }
the integer value of count = 0	int count = 0 ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
the integer value of prev = elements [ i - 1 ]	int prev = elements [ i - 1 ] ;
the integer value of cur = elements [ i ]	int cur = elements [ i ] ;
the integer value of next = elements [ i + 1 ]	int next = elements [ i + 1 ] ;
if ( cur is less than prev and cur is less than next ) or ( cur is greater than prev and cur is greater than next ) , increment count by 1	if ( ( cur < prev && cur < next ) || ( cur > prev && cur > next ) ) { count ++ ; }
print count and newline	cout << count << endl ;
declare new ints n and k and an int array a with size 1005	int a [ 1005 ] , n , k ;
read n and loop further	while ( cin >> n )
change k to 0	k = 0 ;
read n elements into a in a loop	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i from 1 to n - 1 exclusive incrementing i	for ( int i = 1 ; i < n - 1 ; i ++ )
increment k if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] or a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ]	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) k ++ ;
print k to the standard output	cout << k << endl ;
n , a = ints with a an int array of length 1020	int a [ 1020 ] , n ;
i = int	int i ;
read n	cin >> n ;
read the first n elements of a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
cnt = 0 = int	int cnt = 0 ;
for i = 1 to n - 1 exclusive	for ( i = 1 ; i < n - 1 ; i ++ )
if a at i > a at i - 1 and a at i > a at i + 1 then increment cnt	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) cnt ++ ;
if a [ i ] < a [ i - 1 ] and a [ i + 1 ] > a [ i ] then increment cnt	if ( a [ i ] < a [ i - 1 ] && a [ i + 1 ] > a [ i ] ) cnt ++ ;
print cnt	cout << cnt << endl ;
make ints n and c = 0	int n , c = 0 ;
make integer vector a of size 1000	vector < int > a ( 1000 ) ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( __typeof ( n ) i = 0 ; i < ( n ) ; i ++ ) cin >> a [ i ] ;
for i = 1 to n - 2	for ( __typeof ( n - 2 ) i = 1 ; i <= ( n - 2 ) ; i ++ )
if a [ i - 1 ] is greater than a [ i ] and a [ i + 1 ] is greater than a [ i ] , add 1 to c	if ( a [ i - 1 ] > a [ i ] && a [ i + 1 ] > a [ i ] ) c ++ ;
if a [ i - 1 ] is less than a [ i ] and a [ i + 1 ] is less than a [ i ] , increment c	if ( a [ i - 1 ] < a [ i ] && a [ i + 1 ] < a [ i ] ) c ++ ;
show c	cout << c << " \n " ;
create integer n	int n ;
read n	cin >> n ;
v = array of integers of size n	int v [ n ] ;
read n integers into array v	for ( int q = 0 ; q < n ; q ++ ) { cin >> v [ q ] ; }
create integer ans = 0	int ans = 0 ;
for q = 1 to n - 1 exclusive	for ( int q = 1 ; q < n - 1 ; q ++ )
if v [ q ] > v [ q - 1 ] and v [ q ] > v [ q + 1 ] then	if ( v [ q ] > v [ q - 1 ] && v [ q ] > v [ q + 1 ] )
increment ans	ans ++ ;
else if v [ q ] < v [ q - 1 ] and v [ q ] < v [ q + 1 ] then	else if ( v [ q ] < v [ q - 1 ] && v [ q ] < v [ q + 1 ] )
increment ans	ans ++ ;
print ans and newline	cout << ans << endl ;
declare constant integer maxn = 1e4 + 10	const int maxn = 1e4 + 10 ;
a is a new array of integers with size maxn	int a [ maxn ] ;
create integer variable n	int n ;
declare new integer cnt = 0	int cnt = 0 ;
read variable n from the input	cin >> n ;
start a loop from i = 1 to n inclusive , and read a [ i ] from the input on each loop	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
in a for loop , change i from 2 to n - 1 inclusive incrementing i	for ( int i = 2 ; i <= n - 1 ; i ++ )
if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] or a [ i ] < a [ i - 1 ] and a [ i ] < a [ i + 1 ] , increment cnt	if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] || a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) cnt ++ ;
print cnt	cout << cnt << endl ;
create string s	string s ;
read s	cin >> s ;
create character stack st	stack < char > st ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if st is empty	if ( st . empty ( ) )
add element s [ i ] to top of st	st . push ( s [ i ] ) ;
else if top of st is s [ i ]	else if ( st . top ( ) == s [ i ] )
remove element from top of st	st . pop ( ) ;
else	else
add element s [ i ] to top of st	st . push ( s [ i ] ) ;
create string tmp with tmp = " "	string tmp = "  " ;
while st is not empty	while ( ! st . empty ( ) )
increment tmp by top of st	tmp += st . top ( ) ;
remove element from top of st	st . pop ( ) ;
reverse element order between beginning of tmp and end of tmp	reverse ( tmp . begin ( ) , tmp . end ( ) ) ;
print tmp print " \ n "	cout << tmp << " \n " ;
create character stack chars	stack < char > chars ;
create string str	string str ;
read str	cin >> str ;
create character ch	char ch ;
for i = 0 to str [ i ] is not ' \ 0 ' , iincrementing i	for ( int i = 0 ; str [ i ] != ' \0 ' ; i ++ )
set ch to str [ i ]	ch = str [ i ] ;
if chars is not empty	if ( ! chars . empty ( ) )
if top of chars is ch	if ( chars . top ( ) == ch )
remove element from top of chars	chars . pop ( ) ;
else	else
add element ch to top of chars	chars . push ( ch ) ;
else	else
add element ch to top of chars	chars . push ( ch ) ;
create character vector result	vector < char > result ;
while chars is not empty	while ( ! chars . empty ( ) )
add element top of chars to end of result	result . push_back ( chars . top ( ) ) ;
remove element from top of chars	chars . pop ( ) ;
for i = size of result - 1 to 0 inclusive , decrementing i , print result [ i ]	for ( int i = result . size ( ) - 1 ; i >= 0 ; i -- ) cout << result [ i ] ;
print " \ n "	cout << " \n " ;
OO = const long long with OO = 1e8	const long long OO = 1e8 ;
o_o = const integer with o_o = 0	const int o_o = 0 ;
EPS = double with EPS = double epsilon numeric_limits	double EPS = numeric_limits < double > :: epsilon ( ) ;
MAX = integer const with MAX = 2 * 100000 + 9	int const MAX = 2 * 100000 + 9 ;
ar = character array of size MAX	char ar [ MAX ] ;
co = integer with co = - 1	int co = - 1 ;
in the function inzlition	void inzlition ( )
for i = 0 to MAX exclusive , ar [ i ] = 0	for ( int i = 0 ; i < MAX ; i ++ ) { ar [ i ] = ' 0 ' ; }
text = string	string text ;
read text	getline ( cin , text ) ;
call inzlition	inzlition ( ) ;
co = - 1	co = - 1 ;
for i = 0 to text . size ( ) exclusive	for ( int i = 0 ; i < text . size ( ) ; i ++ )
if co is - 1	if ( co == - 1 )
increment co	co ++ ;
ar [ co ] = text [ i ]	ar [ co ] = text [ i ] ;
else if text [ i ] is ar [ co ]	else if ( text [ i ] == ar [ co ] )
ar [ co ] = 0	ar [ co ] = ' 0 ' ;
decrement co	co -- ;
else	else
increment co	co ++ ;
ar [ co ] = text [ i ]	ar [ co ] = text [ i ] ;
for j = 0 to co , print ar [ j ]	for ( int j = 0 ; j <= co ; j ++ ) { cout << ar [ j ] ; }
print next line	cout << endl ;
declare string s	string s ;
create vector of characters a	vector < char > a ;
read input to s	cin >> s ;
declare long int n = length of s	long int n = s . size ( ) ;
loop i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a is empty	if ( a . empty ( ) )
push s [ i ] into a	a . push_back ( s [ i ] ) ;
else if last element of a is not s [ i ]	else if ( a . back ( ) != s [ i ] )
push s [ i ] into a	a . push_back ( s [ i ] ) ;
else	else
remove last element from a	a . pop_back ( ) ;
for i = 0 to length of a exclusive print a [ i ]	for ( int i = 0 ; i < a . size ( ) ; i ++ ) cout << a [ i ] ;
print a new line	cout << endl ;
create string s	string s ;
read s	cin >> s ;
create integer i with i = size of s - 1	int i = s . size ( ) - 1 ;
while i is greater than 0	while ( i > 0 )
if s [ i ] is s [ i - 1 ] , erase from i - 1 to length 2 from s	if ( s [ i ] == s [ i - 1 ] ) { s . erase ( i - 1 , 2 ) ; }
decrement i	-- i ;
print s print " \ n "	cout << s << " \n " ;
x = integer with x = 0	int x = 0 ;
s2 = string	string s2 ;
read s2	cin >> s2 ;
for i = s2 . length ( ) - 2 down to 0	for ( int i = s2 . length ( ) - 2 ; i >= 0 ; i -- )
if s2 [ i ] is s2 [ i + 1 ] , erase ( i , 2 ) from s2	if ( s2 [ i ] == s2 [ i + 1 ] ) s2 . erase ( i , 2 ) ;
print s2	cout << s2 << endl ;
Let s be a string	string s ;
Read s	cin >> s ;
Create integer l and set it to length of s	int l = s . length ( ) ;
for i = 1 to l exclusive	for ( int i = 1 ; i < l ; i ++ )
if s [ i ] equals s [ i - 1 ]	if ( s [ i ] == s [ i - 1 ] )
erase characters i - 1 and i from s	s . erase ( i - 1 , 2 ) ;
set i = i - 2	i -= 2 ;
Print s	cout << s << endl ;
str = string	string str ;
read str	cin >> str ;
size = int with size = size of str	int size = str . size ( ) ;
s = char stack	stack < char > s ;
push str [ 0 ] to s	s . push ( str [ 0 ] ) ;
for i = 1 to size if s is not empty and str [ i ] is top of s then pop s else push str [ i ] to s	for ( int i = 1 ; i < size ; i ++ ) ( ! s . empty ( ) && str [ i ] == s . top ( ) ) ? s . pop ( ) : s . push ( str [ i ] ) ;
ans = string with ans = " "	string ans = "  " ;
loop while s is not empty	while ( ! s . empty ( ) )
append top of s to ans	ans += s . top ( ) ;
pop s	s . pop ( ) ;
reverse ans	reverse ( ans . begin ( ) , ans . end ( ) ) ;
print ans	cout << ans << endl ;
create constant integer maxn with maxn = 2 * 1e5 + 10	const int maxn = 2 * 1e5 + 10 ;
create character stack s	stack < char > s ;
create string array maxn	char str [ maxn ] ;
while s is not empty , remove element from top of s	while ( ! s . empty ( ) ) s . pop ( ) ;
create integer len	int len ;
read string into str + 1	gets ( str + 1 ) ;
set len to string length of str + 1	len = strlen ( str + 1 ) ;
for i = len to 1 inclusive , decrementing i	for ( int i = len ; i >= 1 ; i -- )
if not size of s	if ( ! s . size ( ) )
add element str [ i ] to top of s	s . push ( str [ i ] ) ;
else	else
if top of s is str [ i ]	if ( s . top ( ) == str [ i ] )
remove element from top of s	s . pop ( ) ;
else	else
add str [ i ] to top of s	s . push ( str [ i ] ) ;
while s is not empty	while ( ! s . empty ( ) )
print top of s	cout << s . top ( ) ;
remove element from top of s	s . pop ( ) ;
print newline	cout << endl ;
create characters stack s	stack < char > s ;
declare string f	string f ;
read input to f	cin >> f ;
for i from 0 to length of f exclusive	for ( int i = 0 ; i < f . length ( ) ; i ++ )
if s is empty	if ( s . empty ( ) )
push f [ i ] to s	s . push ( f [ i ] ) ;
else	else
if f [ i ] = top element of s	if ( f [ i ] == s . top ( ) )
remove top element of s	s . pop ( ) ;
else	else
push f [ i ] to s	s . push ( f [ i ] ) ;
declare string variable t = " "	string t = "  " ;
while s is not empty	while ( ! s . empty ( ) )
add top element of s to t	t += s . top ( ) ;
remove top element of s	s . pop ( ) ;
loop i from length of t - 1 to 0 inclusive counting down , print t [ i ]	for ( int i = t . length ( ) - 1 ; i >= 0 ; i -- ) { cout << t [ i ] ; }
print	cout << endl ;
create string s	string s ;
read s	cin >> s ;
create character stack c	stack < char > c ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if c is not empty and top of c is s [ i ]	if ( ! c . empty ( ) && c . top ( ) == s [ i ] )
remove element from top of c	c . pop ( ) ;
else	else
add element s [ i ] to top of c	c . push ( s [ i ] ) ;
create string a	string a ;
create integer y with y = size of c	int y = c . size ( ) ;
while c is not empty	while ( ! c . empty ( ) )
increment a by top of c	a += c . top ( ) ;
remove element from top of c	c . pop ( ) ;
for i = y - 1 to 0 inclusive , decrementing i , print a [ i ]	for ( int i = y - 1 ; i >= 0 ; i -- ) cout << a [ i ] ;
print newline	cout << endl ;
create constant integer N with N = 1e5 + 5	const int N = 1e5 + 5 ;
create constant integer inf with inf = 1e9	const int inf = 1e9 ;
create constant long long INF with INF = 1e18	const long long INF = 1e18 ;
create constant double PI with PI = acosign of - 1 . 0	const double PI = acos ( - 1.0 ) ;
create constant double EPS with EPS = 1e - 8	const double EPS = 1e-8 ;
create constant integer MOD with MOD = 1000000007	const int MOD = 1000000007 ;
create string s	string s ;
read s	cin >> s ;
create character stack st	stack < char > st ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if st is empty	if ( st . empty ( ) )
add element s [ i ] to top of st	st . push ( s [ i ] ) ;
else	else
if st is not empty and top of st is s [ i ]	if ( ! st . empty ( ) && st . top ( ) == s [ i ] )
while st is not empty and top of st is s [ i ] , remove top of st	while ( ! st . empty ( ) && st . top ( ) == s [ i ] ) st . pop ( ) ;
else	else
add element s [ i ] to top of st	st . push ( s [ i ] ) ;
create string ans with ans = " "	string ans = "  " ;
while st is not emtpy , increment and by top of st , remove top element from st	while ( ! st . empty ( ) ) ans += st . top ( ) , st . pop ( ) ;
reverse element order from beginning of and to end of ans	reverse ( ans . begin ( ) , ans . end ( ) ) ;
prnt ans print newline	cout << ans << endl ;
declare string a	string a ;
create int i	int i ;
read a	cin >> a ;
loop i from length of a to 0 inclusive decrementing i	for ( i = a . size ( ) ; i >= 0 ; i -- )
if a [ i ] = a [ i + 1 ] , remove 2 elements at the index i of a	if ( a [ i ] == a [ i + 1 ] ) a . erase ( i , 2 ) ;
print a	cout << a << endl ;
create string s	string s ;
get s	cin >> s ;
create character array stack with size of s	char stack [ s . size ( ) ] ;
create long integer j with j = 0	long int j = 0 ;
for integer i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if j is equal to 0 then	if ( j == 0 )
set stack [ j ] to s [ i ] and increment j	stack [ j ++ ] = s [ i ] ;
else if stack [ j - 1 ] not equal to s [ i ] then	else if ( stack [ j - 1 ] != s [ i ] )
set stack [ j ] to s [ i ] and increment j	stack [ j ++ ] = s [ i ] ;
else do the following	else
decrement j	j -- ;
for i = 0 to j exclusive print stack [ i ]	for ( int i = 0 ; i < j ; i ++ ) { cout << stack [ i ] ; }
print a new line	cout << endl ;
maxn = const int with maxn = 200010	const int maxn = 200010 ;
str = char array of size maxn	char str [ maxn ] ;
loop while reading str	while ( cin >> str )
j , len = int with j = 1 and len = strlen of str	int j = 1 , len = strlen ( str ) ;
for i = 1 to len	for ( int i = 1 ; i < len ; i ++ )
if str [ i ] is str [ j - 1 ]	if ( str [ i ] == str [ j - 1 ] )
decrement j	j -- ;
set str [ j ] to ' \ 0 '	str [ j ] = ' \0 ' ;
else	else
set str [ j ] to str [ i ] then increment j	str [ j ++ ] = str [ i ] ;
set str [ j ] to ' \ 0 '	str [ j ] = ' \0 ' ;
print str	cout << str << endl ;
create stack of chars st	stack < char > st ;
declare string s	string s ;
read input to s	cin >> s ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if st is not empty and top element of st is not s [ i ]	if ( ! st . empty ( ) && st . top ( ) == s [ i ] )
remove top element of st	st . pop ( ) ;
else	else
push s [ i ] into st	st . push ( s [ i ] ) ;
set s to " "	s = "  " ;
while st is not emptu	while ( ! st . empty ( ) )
increase s by top element of st	s += st . top ( ) ;
remove top element of st	st . pop ( ) ;
loop i from length of s - 1 to 0 inclusive decrementing i , printing s [ i ]	for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) cout << s [ i ] ;
print a new line	cout << endl ;
s = string	string s ;
read s	cin >> s ;
for i = s . size ( ) - 2 down to 0	for ( int i = s . size ( ) - 2 ; i >= 0 ; i -- )
if s [ i ] is s [ i + 1 ] , erase ( i , 2 ) from s	if ( s [ i ] == s [ i + 1 ] ) { s . erase ( i , 2 ) ; }
print s	cout << s << endl ;
s = string array	string s ;
read s	cin >> s ;
for i = ( s . length ( ) - 1 ) to greater than or equal to 0 do the following	for ( int i = ( s . length ( ) - 1 ) ; i >= 0 ; i -- )
if s [ i ] is s [ i + 1 ] then do the following s . erase ( i , 2 )	if ( s [ i ] == s [ i + 1 ] ) s . erase ( i , 2 ) ;
output s	cout << s << endl ;
declare const int INF = 1e9 + 7 casted to int	const int INF = int ( 1e9 + 7 ) ;
create string s	string s ;
read s	cin >> s ;
p is a stack of chars	stack < char > p ;
loop a from 0 to length of s exclusive	for ( int a = 0 ; a < s . size ( ) ; a ++ )
if p is empty	if ( p . empty ( ) )
push s [ a ] into p	p . push ( s [ a ] ) ;
else	else
if top element of p = s [ a ]	if ( p . top ( ) == s [ a ] )
remove top element from p	p . pop ( ) ;
else	else
push s [ a ] into p	p . push ( s [ a ] ) ;
assign " " to s	s = "  " ;
while p is not empty	while ( ! p . empty ( ) )
append top element of p to s	s += p . top ( ) ;
remove top element from p	p . pop ( ) ;
reverse s	reverse ( ( s ) . begin ( ) , ( s ) . end ( ) ) ;
print s	cout << s << endl ;
create string s	string s ;
read s	cin >> s ;
create character stack st	stack < char > st ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if st is not empty and s [ i ] is top of st	if ( ! st . empty ( ) && s [ i ] == st . top ( ) )
remove element from top of st	st . pop ( ) ;
else	else
add element s [ i ] to top of st	st . push ( s [ i ] ) ;
set s to " "	s = "  " ;
while st is not empty	while ( ! st . empty ( ) )
increment s by top of st	s += st . top ( ) ;
remove top element from st	st . pop ( ) ;
for i = size of s - 1 to 0 inclusive , decrementing i , print s [ i ]	for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) cout << s [ i ] ;
print newline	cout << endl ;
make string str	string str ;
read str	cin >> str ;
let ints pearls = 0 and links = 0	int pearls = 0 , links = 0 ;
for i = 0 to str . size ( ) exclusive	for ( int i = 0 ; i < str . size ( ) ; i ++ )
if str [ i ] is equal to ' o '	if ( str [ i ] == ' o ' )
increment pearls	pearls ++ ;
else do	else
add 1 to links	links ++ ;
if pearls is equal to 0 or links is equal to 0	if ( pearls == 0 || links == 0 )
print " YES "	cout << " YES " << endl ;
if ( links % pearls ) is not equal to 0	if ( ( links % pearls ) != 0 )
show " NO "	cout << " NO " << endl ;
otherwise	else
display " YES "	cout << " YES " << endl ;
maxn = 110	const int maxn = 110 ;
inf = 3fffffff in exadecimal	const int inf = 0x3f3f3f3f ;
s = array of maxn char	char s [ maxn ] ;
s = string	string s ;
read s	cin >> s ;
cnt1 , cnt2 = 0	int cnt1 = 0 , cnt2 = 0 ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] is ' o '	if ( s [ i ] == ' o ' )
increment cnt1	cnt1 ++ ;
else	else
increment cnt2	cnt2 ++ ;
if cnt1 is 0	if ( cnt1 == 0 )
print YES	cout << " YES " << endl ;
else	else
if cnt2 modulo cnt1 is 0	if ( cnt2 % cnt1 == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
declare character array s size 106	char s [ 106 ] ;
while read string into s	while ( gets ( s ) )
declare integers a = 0 , b = 0 , ll = string length of s	int a = 0 , b = 0 , ll = strlen ( s ) ;
for i = 0 to ll exclusive	for ( int i = 0 ; i < ll ; i ++ )
if s [ i ] is ' - '	if ( s [ i ] == ' - ' )
increment a	a ++ ;
else if s [ i ] is ' o '	else if ( s [ i ] == ' o ' )
increment b	b ++ ;
if b is 0 or a % b is 0	if ( b == 0 || a % b == 0 )
print " YES "	puts ( " YES " ) ;
else	else
print " NO "	puts ( " NO " ) ;
declare string s	string s ;
read s	cin >> s ;
declare integers z = 0 , x = 0	int z = 0 , x = 0 ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is ' o ' , increment z	if ( s [ i ] == ' o ' ) { z ++ ; }
if s [ i ] is ' - ' , increment x	if ( s [ i ] == ' - ' ) { x ++ ; }
if z is 0 or x is 0 or x % z is 0	if ( z == 0 || x == 0 || x % z == 0 )
print " YES " and newline	cout << " YES " << endl ;
else	else
print " NO " and newline	cout << " NO " << endl ;
create chars zhu and xian and char array s of size 243554	char s [ 243554 ] , zhu , xian ;
read s	gets ( s ) ;
make int len = strlen ( s )	int len = strlen ( s ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; ++ i )
if s [ i ] is equal to ' 0 '	if ( s [ i ] == ' o ' )
increment zhu	++ zhu ;
else do	else
increase xian by 1	++ xian ;
if zhu is equal to 0	if ( zhu == 0 )
print " YES "	puts ( " YES " ) ;
else if xian modulo zhu is 0	else if ( xian % zhu == 0 )
print " YES "	puts ( " YES " ) ;
else	else
print " NO "	puts ( " NO " ) ;
maxn = 110 = int const	const int maxn = 110 ;
inf = 0x3f3f3f3f = const int	const int inf = 0x3f3f3f3f ;
s = char array of length maxn	char s [ maxn ] ;
s = string	string s ;
read s	cin >> s ;
cnt1 = cnt2 = 0 = int	int cnt1 = 0 , cnt2 = 0 ;
for i = 0 to size of s	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s at i is ' o '	if ( s [ i ] == ' o ' )
increment cnt1	cnt1 ++ ;
else	else
increment cnt2	cnt2 ++ ;
if cnt1 = 0	if ( cnt1 == 0 )
print YES	cout << " YES " << endl ;
else	else
if cnt2 mod cnt1 is 0	if ( cnt2 % cnt1 == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
s = string	string s ;
read s	cin >> s ;
x = 0 = int	int x = 0 ;
for i = 0 to length of s	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] = ' o ' then increment x	if ( s [ i ] == ' o ' ) { x ++ ; }
if x = 0	if ( x == 0 )
print YES and new line	cout << " YES " << ' \n ' ;
else	else
if length of s mod x = 0	if ( s . length ( ) % x == 0 )
print YES	cout << " YES " << ' \n ' ;
else	else
print NO	cout << " NO " << ' \n ' ;
declare new string called s	string s ;
create ints p and l = 0	int p = 0 , l = 0 ;
read from the input to s	cin >> s ;
for integer i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] = ' - '	if ( s [ i ] == ' - ' )
increment l by one	l ++ ;
else	else
increment p	p ++ ;
if p = 0 or l % p = 0	if ( ( p == 0 ) || ( l % p == 0 ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
s = string	string s ;
j , k = integers , both set to 0	int j = 0 , k = 0 ;
Read s	cin >> s ;
for i = 0 to length of string s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is -	if ( s [ i ] == ' - ' )
increment j	j ++ ;
else do the following	else
increment k	k ++ ;
if k is equal to 0	if ( k == 0 )
print Yes and a new line	cout << " YES " << endl ;
else if j modulo k is 0	else if ( j % k == 0 )
print Yes and a new line	cout << " YES " << endl ;
else do the following	else
print NO and new line	cout << " NO " << endl ;
set INF to 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create char s [ 1005 ]	char s [ 1005 ] ;
create int i , j and k	int i , j , k ;
create int n and m	int n , m ;
read s	cin >> s ;
set cou and co to 0	int cou = 0 , co = 0 ;
for i = 0 to length of s exclusive	for ( i = 0 ; i < strlen ( s ) ; i ++ )
if s [ i ] = o	if ( s [ i ] == ' o ' )
increment cou	cou ++ ;
else	else
increment co	co ++ ;
if cou = 0	if ( cou == 0 )
print YES	cout << " YES " << endl ;
if co < cou and > 0	if ( co < cou && co > 0 )
print NO	cout << " NO " << endl ;
else	else
if co mod cou = 0	if ( co % cou == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
x , o = integers with x = 0 , o = 0	int x = 0 , o = 0 ;
n = string	string n ;
Read n	cin >> n ;
for i = 0 to length of string t exclusive	for ( int i = 0 ; i < n . length ( ) ; i ++ )
if n [ i ] is o	if ( n [ i ] == ' o ' )
increment o	o ++ ;
else do the following	else
increment x	x ++ ;
if o is greater than 0	if ( o > 0 )
if x modulo o is 0	if ( x % o == 0 )
print YES and a new line	cout << " YES\n " ;
else do the following	else
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
set char to S [ 101 ]	char S [ 101 ] ;
set pearls and dash to 0	int pearls = 0 , dash = 0 ;
read S	cin >> S ;
for i = 0 to S [ i ]	for ( int i = 0 ; S [ i ] ; i ++ )
if S [ i ] = -	if ( S [ i ] == ' - ' )
increment dash	dash ++ ;
else	else
increment pearls	pearls ++ ;
if pearls = 0 or dash mod pearls = 0	if ( pearls == 0 || dash % pearls == 0 )
print YES and a newline	cout << " YES\n " ;
else	else
print NO and a newline	cout << " NO\n " ;
len , n1 , n2 = long long integers	int len , n1 , n2 ;
s = array of 105 characters	char s [ 105 ] ;
Read s	cin >> s ;
set len to length of string s	len = strlen ( s ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if s [ i ] is o	if ( s [ i ] == ' o ' )
increment n1	n1 ++ ;
else if s [ i ] is -	else if ( s [ i ] == ' - ' )
increment n2	n2 ++ ;
if n1 is 0	if ( n1 == 0 )
print YES and a new line	cout << " YES " << endl ;
else if n2 modulo n1 is 0	else if ( n2 % n1 == 0 )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
count , p , i , n = integers with count = 0 , p = 0	int count = 0 , p = 0 , i , n ;
a = string	string a ;
Read a	cin >> a ;
set n to length of string a	n = a . length ( ) ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is -	if ( a [ i ] == ' - ' )
increment count	count ++ ;
else do the following	else
increment p	p ++ ;
if count is 0 OR p is 0	if ( count == 0 || p == 0 )
print YES and a new line	cout << " YES " << endl ;
else if count modulo p is 0	else if ( count % p == 0 )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
declare string variable with name cad	string cad ;
read cad from the input	cin >> cad ;
declare new int variables guiones and perlas = 0	int guiones = 0 , perlas = 0 ;
for integer i = 0 to length of cad exclusive incrementing i	for ( int i = 0 ; i < cad . size ( ) ; i ++ )
if cad [ i ] is equal to ' - '	if ( cad [ i ] == ' - ' )
increment guiones by one	guiones ++ ;
else	else
increment perlas	perlas ++ ;
if guiones or perlas is equal to 0	if ( guiones == 0 || perlas == 0 )
print " YES \ n " to the standard output	cout << " YES\n " ;
else	else
if guiones is less than perlas	if ( guiones < perlas )
print " NO \ n "	cout << " NO\n " ;
else	else
if guiones = perlas	if ( guiones == perlas )
print " YES \ n " to the standard output	cout << " YES\n " ;
else	else
if guiones % perlas = 0	if ( guiones % perlas == 0 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
link , pearl = integers with link = 0 , pearl = 0	int link = 0 , pearl = 0 ;
str = string	string str ;
read str	cin >> str ;
for i = 0 to str . length ( ) exclusive	for ( int i = 0 ; i < str . length ( ) ; i ++ )
if ( str [ i ] is - )	if ( str [ i ] == ' - ' )
increment link	link ++ ;
else	else
increment pearl	pearl ++ ;
if ( pearl is 0 )	if ( pearl == 0 )
print YES	cout << " YES " << endl ;
if ( link % pearl = = 0 )	if ( link % pearl == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
s = string	string s ;
read s	cin >> s ;
bul = integer = 0 , ris = integer = 0	int bul = 0 , ris = 0 ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is -	if ( s [ i ] == ' - ' )
ris = ris + 1	ris += 1 ;
else	else
bul = bul + 1	bul += 1 ;
if bul is 0	if ( bul == 0 )
print YES	cout << " YES " << endl ;
else if ris modulo bul is 0	else if ( ris % bul == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
a = array of 1001 char	char a [ 1001 ] ;
n , m = int	int n , m ;
while read a	while ( cin >> a )
n , m = 0	n = 0 , m = 0 ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < strlen ( a ) ; i ++ )
if a [ i ] is ' - '	if ( a [ i ] == ' - ' )
increment n	n ++ ;
else if a [ i ] is ' o '	else if ( a [ i ] == ' o ' )
increment m	m ++ ;
if n is 0 or m is 0 or n modulo m is 0	if ( n == 0 || m == 0 || n % m == 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
s = string	string s ;
a , b = integers	int a = 0 , b = 0 ;
Read s	cin >> s ;
for i = 0 to length of string s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is -	if ( s [ i ] == ' - ' )
increment b	b ++ ;
else do the following	else
increment a	a ++ ;
if a is 0 OR b modulo a is 0	if ( a == 0 || b % a == 0 )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
Create constant integer maxN with value 10 ^ 5	const int maxN = ( int ) 1e5 ;
n , x , y = integers	int n , x , y ;
read n , x , and y	cin >> n >> x >> y ;
create double t and set it to ceil of n * y * 1 . 0 / 100 . 0	double t = ceil ( n * y * 1.0 / 100.0 ) ;
call max on ( int ) t - x and 0 and print the result	cout << max ( ( int ) t - x , 0 ) << endl ;
declare const int M = 100 + 5	const int M = 100 + 5 ;
declare ints n , x and y	int n , x , y ;
read n , x and y	cin >> n >> x >> y ;
declare integer variable tmp = n * y / 100 + ( ( n * y ) % 100 ! = 0 ) - x	int tmp = n * y / 100 + ( ( n * y ) % 100 != 0 ) - x ;
declare integer ans = max of tmp and 0	int ans = max ( tmp , 0 ) ;
print ans	cout << ans << endl ;
define ints n , x , and y	int n , x , y ;
read n , x , and y	cin >> n >> x >> y ;
define integer z and set it to the ceiling of ( ( double ) n * y / 100 )	int z = ceil ( ( double ) n * y / 100 ) ;
if z is greater than x	if ( z > x )
print z - x followed by a newline	cout << z - x << endl ;
else	else
print 0 followed by a newline	cout << 0 << endl ;
create long longs n , x , y , ans and xx	long long n , x , y , ans , xx ;
read n , x and y	cin >> n >> x >> y ;
change xx to n * y / 100	xx = n * y / 100 ;
while xx * 100 < n * y	while ( xx * 100 < n * y ) xx ++ ;
set ans to max of 0LL and xx - x	ans = max ( 0LL , xx - x ) ;
print ans and " \ n "	cout << ans << " \n " ;
create integers n , x , y	int n , x , y ;
create integer p with p = 1	int p = 1 ;
read n	cin >> n ;
read x	cin >> x ;
read y	cin >> y ;
set p to n * y	p = n * y ;
if p % 100 is not 0	if ( p % 100 != 0 )
set p to p / 100 + 1	p = p / 100 + 1 ;
else	else
set p to p / 100	p = p / 100 ;
if p is less than or equal to x	if ( p <= x )
print 0 print newline	cout << 0 << endl ;
else	else
print p - x print newline	cout << p - x << endl ;
create doubles size_n , size_x , size_y	double size_n , size_x , size_y ;
create double result	double result ;
create doubles man , have_now	double man , have_now ;
read size_n read size_x read size_y	cin >> size_n >> size_x >> size_y ;
set man to size_n * 0 . 01	man = size_n * 0.01 ;
set have_now to size_x / man	have_now = size_x / man ;
if have_now is less than size_y	if ( have_now < size_y )
set result to ( size_y - have_now ) * man	result = ( size_y - have_now ) * man ;
if double casted ( integer casted ( result ) ) is not result , increment result by 1	if ( double ( int ( result ) ) != result ) result += 1 ;
else	else
set result to 0	result = 0 ;
print integer casted result print newline	cout << int ( result ) << endl ;
define doubles n , x , and y	double n , x , y ;
read n , x , y	cin >> n >> x >> y ;
define int r , setting it to the ceiling of ( y / 100 * n )	int r = ceil ( y / 100 * n ) ;
if x > = r . . .	if ( x >= r )
print 0 and a newline	cout << 0 << ' \n ' ;
otherwise . . .	else
print the difference of r and x , followed by a newline	cout << r - x << ' \n ' ;
declare long long int variables x , y and n	long long int x , y , n ;
read n , x and y	cin >> n >> x >> y ;
create double m = ( n * y ) / 100	double m = ( double ( n * y ) / 100 ) ;
declare long long int dem = m rounded up	long long int dem = ceil ( m ) ;
if x > = dem	if ( x >= dem )
print 0	cout << 0 << endl ;
else	else
print dem - x	cout << dem - x << endl ;
n , x , y = integers	int n , x , y ;
read n , x , y	cin >> n >> x >> y ;
print max ( 0 , ( n * y + 99 ) / 100 - x )	cout << max ( 0 , ( n * y + 99 ) / 100 - x ) << endl ;
create constant long long mod with mod = 1e9 + 7	const long long mod = 1e9 + 7 ;
create constant integer N with N = 1e5 + 5	const int N = 1e5 + 5 ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
return result of run gcd with b , a % b as arguments if b is true , else a	return b ? gcd ( b , a % b ) : a ;
declare pwr with long longs x , y as arguments , returning long long	long long pwr ( long long x , long long y ) ;
declare isprime with long long x as argument , returning boolean	bool isprime ( long long x ) ;
create integers n , x , y	int n , x , y ;
read n read x read y	cin >> n >> x >> y ;
create integer ans with ans = ( ( n * y ) / 100 + boolean casted ( ( n * y ) % 100 )	int ans = ( ( n * y ) / 100 + bool ( ( n * y ) % 100 ) ) ;
if x is greater than ans	if ( x > ans )
print 0 print newline	cout << 0 << endl ;
print ans - x print newline	cout << ( ans - x ) << endl ;
declare pwr with long longs x , y as arguments , returning long long	long long pwr ( long long x , long long y )
create long long ans with ans = 1	long long ans = 1 ;
set x to x % mod	x = x % mod ;
while y is greater than 0	while ( y > 0 )
if y bitwise and 1 , set ans to ( x * ans ) % mod	if ( y & 1 ) ans = ( x * ans ) % mod ;
set x to ( x * x ) % mod	x = ( x * x ) % mod ;
set y to y / 2	y = y / 2 ;
return ans from function	return ans ;
declare isprime with long long x as argument , returning boolean	bool isprime ( long long x )
if x is less than 2 , return false from function	if ( x < 2 ) return false ;
if x is less than 4 , return true from function	if ( x < 4 ) return true ;
if x % 2 is 0 or x % 3 is 0 , return false from fucntion	if ( x % 2 == 0 || x % 3 == 0 ) return false ;
for i = 5 to i * i is less than or equal to x , increment i by 6	for ( long long i = 5 ; i * i <= x ; i += 6 )
if x % i is 0 or x % ( i + 2 ) is 0 , return false from function	if ( x % i == 0 || x % ( i + 2 ) == 0 ) return false ;
return true from function	return true ;
integers = n , x , y	int n , x , y ;
read n , x , y	cin >> n >> x >> y ;
ans is the rounding up of ( ( double ) y / 100 * n )	int ans = ceil ( ( double ) y / 100 * n ) ;
if ans - x is greater than 0 then do the following	if ( ans - x > 0 )
output ans - x	cout << ans - x << endl ;
else	else
output 0	cout << 0 << endl ;
create long long array spf with size 100001	long long spf [ 100001 ] ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b ) ;
declare palindrome with string s as argument , returning long long	long long palindrome ( string s ) ;
declare modexp with long longs a , b , m as arguments , returning long long	long long modexp ( long long a , long long b , long long m ) ;
declare sieve with no arguments , returning void	void sieve ( ) ;
declare ceil with long longs a , b as arguments , returning long long	long long ceil ( long long a , long long b ) ;
declare getFactorization with long long x as argument , returning long long vector	vector < long long > getFactorization ( long long x ) ;
declare getZarr with string str , long long array Z as arguments , returning void	void getZarr ( string str , long long Z [ ] ) ;
declare prefix_function with string s as argument , returning long long vector	vector < long long > prefix_function ( string s ) ;
create long doubles n , x , y	long double n , x , y ;
read n read x read y	cin >> n >> x >> y ;
create long double ans with ans = ( n * y ) / 100 - x	long double ans = ( n * y ) / 100 - x ;
if ans is less than 0 , set ans to 0	if ( ans < 0 ) ans = 0 ;
print result of run ceil with ans as argument print newline	cout << ceil ( ans ) << endl ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
if a is 0 , return b from function	if ( a == 0 ) return b ;
if b is 0 , return a from function	if ( b == 0 ) return a ;
if a is b , return a from function	if ( a == b ) return a ;
if a is greater than b , return result of run gcd with a % b , b as arguments , from function	if ( a > b ) return gcd ( a % b , b ) ;
return result of run gcd with a , b % a as arguments , from function	return gcd ( a , b % a ) ;
declare palindrome with string s as argument , returning long long	long long palindrome ( string s )
create long long l with l = 0	long long l = 0 ;
create long long h with h = length of s - 1	long long h = s . length ( ) - 1 ;
while h is greater than l	while ( h > l )
if s [ increment l ] is not s [ decrement h ] , return 0 from function	if ( s [ l ++ ] != s [ h -- ] ) { return 0 ; }
return 1 from function	return 1 ;
declare modexp with long longs a , b , m as arguments , returning long long	long long modexp ( long long a , long long b , long long m )
if b is 0 , return 1 from function	if ( b == 0 ) return 1 ;
create long long temp with temp = result of run modexp with a , b / 2 , m as arguments	long long temp = modexp ( a , b / 2 , m ) ;
set temp to ( temp * temp ) % m	temp = ( temp * temp ) % m ;
if b bitwise and 1 , return ( temp * ( a % m ) ) % m from function	if ( b & 1 ) return ( temp * ( a % m ) ) % m ;
return temp from function	return temp ;
declare sieve with no arguments , returning void	void sieve ( )
set spf [ 1 ] to 1	spf [ 1 ] = 1 ;
for i = 2 to 100001 exclusive , set spf [ i ] to i	for ( long long i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;
for i = 4 to 100001 exclusive , incrementing i by 2 , set spf [ i ] to 2	for ( long long i = 4 ; i < 100001 ; i += 2 ) spf [ i ] = 2 ;
for i = 3 to i * i is less than 100001 , incrementing i	for ( long long i = 3 ; i * i < 100001 ; i ++ )
if spf [ i ] is i	if ( spf [ i ] == i )
for j = i * i to 100001 exclusive , incrementing j by i	for ( long long j = i * i ; j < 100001 ; j += i )
if spf [ j ] is j , set spf [ j ] to i	if ( spf [ j ] == j ) spf [ j ] = i ;
declare getFactorization with long long x as argument , returning long long vector	vector < long long > getFactorization ( long long x )
create long long vector ret	vector < long long > ret ;
while x is not 1	while ( x != 1 )
add element spf [ x ] to end of ret	ret . push_back ( spf [ x ] ) ;
set x to x / spf [ x ]	x = x / spf [ x ] ;
return ret from function	return ret ;
declare ceil with long longs a , b as arguments , returning long long	long long ceil ( long long a , long long b )
return a / b + ( a % b is not 0 )	return a / b + ( a % b != 0 ) ;
declare getZarr with string str , long long array Z as arguments , returning void	void getZarr ( string str , long long Z [ ] )
create long long n with n = length of str	long long n = str . length ( ) ;
create long longs L , R , K	long long L , R , k ;
set L to R to 0	L = R = 0 ;
for i = 1 to n exclusive	for ( long long i = 1 ; i < n ; ++ i )
if i is greater than R	if ( i > R )
set L to R to i	L = R = i ;
while R is less than n and str [ R - L ] is str [ R ] , increment R	while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;
set Z [ i ] to R - L	Z [ i ] = R - L ;
decrement R	R -- ;
else	else
set k to i - L	k = i - L ;
if Z [ k ] is less than R - i + 1	if ( Z [ k ] < R - i + 1 )
set Z [ i ] to Z [ k ]	Z [ i ] = Z [ k ] ;
else	else
set L to i	L = i ;
while R is less than n and str [ R - L ] is str [ R ] , increment R	while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;
set Z [ i ] to R - L	Z [ i ] = R - L ;
decrement R	R -- ;
declare prefix_function with string s as argument , returning long long vector	vector < long long > prefix_function ( string s )
create long long n with n = long long casted length of s	long long n = ( long long ) s . length ( ) ;
create long long vector pi initialized with n	vector < long long > pi ( n ) ;
for i = 1 to n exclusive	for ( long long i = 1 ; i < n ; i ++ )
create long long j with j = pi [ i - 1 ]	long long j = pi [ i - 1 ] ;
while j is greater than 0 and s [ i ] is not s [ j ] , set j to pi [ j - 1 ]	while ( j > 0 && s [ i ] != s [ j ] ) j = pi [ j - 1 ] ;
if s [ i ] is s [ j ] , increment j	if ( s [ i ] == s [ j ] ) j ++ ;
set pi [ i ] to j	pi [ i ] = j ;
return pi from function	return pi ;
declare doubles n , x and y	double n , x , y ;
read n , x and y	cin >> n >> x >> y ;
declare integer variable temp = x	int temp = x ;
while ( x / n ) * 100 < y	while ( ( x / n ) * 100 < y ) { x ++ ; }
print x - temp	cout << x - temp << endl ;
declare integers n , x and y	int n , x , y ;
read n , x and y	cin >> n >> x >> y ;
create int res = ( ( y / 100 . 0 ) * n ) rounded up - x	int res = ceil ( ( y / 100.0 ) * n ) - x ;
if res is less than 0	if ( res < 0 )
print 0	cout << 0 << endl ;
else	else
print res	cout << res << endl ;
create constant integer MOD with MOD = 1e9 + 7	const int MOD = 1e9 + 7 ;
declare gcd with doubles a , b as arguments , returning double	double gcd ( double a , double b )
return b if a is less than 0 . 01 , else result of run gcd with ( ( floating point remainder of b / a ) , a ) as arguments from function	return a < 0.01 ? b : gcd ( fmod ( b , a ) , a ) ;
declare max with long long integers a , b as arguments , returning long long integer	long long int max ( long long int a , long long int b )
return a if a is greater than b , else b from function	return ( a > b ) ? a : b ;
declare max with long long integers a , b , c as arguments , returning long long integer	long long int max ( long long int a , long long int b , long long int c )
return maximum of ( a and maximum of ( b and c ) ) from function	return max ( a , max ( b , c ) ) ;
declare min with long long integers a , b as arguments , returning long long integer	long long int min ( long long int a , long long int b )
return a if a is less than b , else b from function	return ( a < b ) ? a : b ;
declare min with long long integers a , b , c as arguments , returning long long integer	long long int min ( long long int a , long long int b , long long int c )
return minimum of ( a and minimum of ( b and c ) ) from function	return min ( a , min ( b , c ) ) ;
declare power with long long integers x , y as arguments , returning long long integer	long long int power ( long long int x , long long int y )
declare long long integer res with res = 1	long long int res = 1 ;
set x to x % MOD	x = x % MOD ;
while y is greater than 0	while ( y > 0 )
if y bitwise and 1 , set res to ( res * x ) % MOD	if ( y & 1 ) res = ( res * x ) % MOD ;
set y to y bitshift right 1	y = y >> 1 ;
set x to ( x * x ) % MOD	x = ( x * x ) % MOD ;
return res from function	return res ;
declare swap with character pointers x , y as arguments , returning void	void swap ( char * x , char * y )
create character temp	char temp ;
set temp to value of y	temp = * y ;
set value of y to value of x	* y = * x ;
set value of x to temp	* x = temp ;
declare mod with long long integer a as argument , returning long long integer	long long int mod ( long long int a )
if a is greater than 0	if ( a > 0 )
return a	return a ;
else	else
return - a	return - a ;
create integers n , x , y	int n , x , y ;
read n read x read y	cin >> n >> x >> y ;
create integer r with r = round up ( ( n * y ) / 100 . 0 )	int r = ceil ( ( n * y ) / 100.0 ) ;
print r - x if ( r - x ) is greater than or equal to 0 , else 0 print newline	cout << ( ( ( r - x ) >= 0 ) ? r - x : 0 ) << endl ;
n , x , y = int	int n , x , y ;
read n then x then y	cin >> n >> x >> y ;
temp = int with temp = ( y * n / 100 ) + 1 if ( y * n % 100 ) is not 0	int temp = ( y * n / 100 ) + ( ( y * n % 100 ) ? 1 : 0 ) ;
decrement temp by x	temp -= x ;
if temp is less or equal to 0	if ( temp <= 0 )
print " 0 "	cout << " 0\n " ;
else	else
print temp	cout << temp << ' \n ' ;
Create x , y , and z as double precision number	double x , y , z ;
Set x to the first input , y to the second input , and z to the third input	cin >> x >> y >> z ;
Create ans as an integer and set to the next bigger integer of ( x * z ) / 100 then subtract y	int ans = ceil ( ( x * z ) / 100 ) - y ;
If ans is negative	if ( ans < 0 )
Output 0	cout << 0 << " \n " ;
Otherwise	else
Output ans	cout << ans << " \n " ;
create doubles n , x , y	double n , x , y ;
read n read x read y	cin >> n >> x >> y ;
create long long z with z = round up ( ( y / 100 ) * n )	long long z = ceil ( ( y / 100 ) * n ) ;
create long long ans with ans = 0	long long ans = 0 ;
if z is greater than x , set ans to z - x	if ( z > x ) { ans = z - x ; }
print ans print newline	cout << ans << endl ;
let n , x , y be ints	int n , x , y ;
read n , x , and y	cin >> n >> x >> y ;
print ( y * n - min ( y * n , x * 100 ) + 99 ) / 100	cout << ( y * n - min ( y * n , x * 100 ) + 99 ) / 100 << endl ;
create int n , x and y	int n , x , y ;
read n , x , y	cin >> n >> x >> y ;
set p to ( x * 100 . 0 ) / ( n * 1 . 0 )	double p = ( x * 100.0 ) / ( n * 1.0 ) ;
if p > = y	if ( p >= y )
print 0	cout << 0 << endl ;
S = 0	int S = 0 ;
for i = x + 1 to 1000010 inclusive	for ( int i = x + 1 ; i <= 1000010 ; i ++ )
increment S	S ++ ;
if ( i * 100 . 0 ) / ( n * 1 . 0 ) > = y , break the loop	if ( ( i * 100.0 ) / ( n * 1.0 ) >= y ) break ;
print S	cout << S << endl ;
define ints n , x , y	int n , x , y ;
read n , x , and y	cin >> n >> x >> y ;
define int clones set to ( n y + 99 ) / 100 - x	int clones = ( n * y + 99 ) / 100 - x ;
if clones is negative , then set clones to 0	if ( clones < 0 ) { clones = 0 ; }
print clones and newline	cout << clones << endl ;
N , K , ans , A , val , x , y = integers with A = array of size 10	int N , K , ans , A [ 10 ] , val , x , y ;
T , S , P = string	string T , S , P ;
cek = bool	bool cek ;
read N , x , y	cin >> N >> x >> y ;
print max ( 0 , ( N * y - 1 ) / 100 + 1 - x )	cout << max ( 0 , ( N * y - 1 ) / 100 + 1 - x ) << ' \n ' ;
create integers x , y , z , t1 , t2 , t3	int x , y , z , t1 , t2 , t3 ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
create integers el , st	int el , st ;
set el to absolute value of ( x - z ) * t2 + 3 * t3 + absolute value of ( y - x ) * t2	el = abs ( x - z ) * t2 + 3 * t3 + abs ( y - x ) * t2 ;
set st to absolute value of ( x - y ) * t1	st = abs ( x - y ) * t1 ;
if st is less than el	if ( st < el )
print " NO \ n "	cout << " NO\n " ;
else	else
print " YES \ n "	cout << " YES\n " ;
x , y , z , t1 , t2 , t3 = integers	int x , y , z , t1 , t2 , t3 ;
read x and y and z and t1 and t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
set k = x - y	int k = x - y ;
if k < 0 set k = k * - 1	if ( k < 0 ) { k = k * ( - 1 ) ; }
set l = z - x	int l = z - x ;
if l < 0 then l = l * - 1	if ( l < 0 ) { l = l * ( - 1 ) ; }
set stairs = k * t1	int stairs = k * t1 ;
set elevator = 1 * t2 + k * t2 + 3 * t3	int elevator = l * t2 + k * t2 + 3 * t3 ;
if stairs < elevator	if ( stairs < elevator )
print NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
create integers x , y , z , t1 , t2 , t3 , st , el	int x , y , z , t1 , t2 , t3 , st , el ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
set st to absolute value of ( x - y ) * t1	st = abs ( x - y ) * t1 ;
set el to ( absolute value of ( x - z ) + absolute value of ( x - y ) ) * t2 + t3 * 3	el = ( abs ( x - z ) + abs ( x - y ) ) * t2 + t3 * 3 ;
if el is less than or equal to st	if ( el <= st )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create integers x , y , z , t1 , t2 , t3	int x , y , z , t1 , t2 , t3 ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
if ( ( absolute value of ( z - x ) + absolute value of ( x - y ) ) * t2 + 3 * t3 is less than or equal to absolute value of ( x - y ) * t1	if ( ( fabs ( z - x ) + fabs ( x - y ) ) * t2 + 3 * t3 <= fabs ( x - y ) * t1 )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
x , y , z , t1 , t2 , t3 = integers	int x , y , z , t1 , t2 , t3 ;
Read x , y , z , t1 , t2 , t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
masha_time = integer , set to absolute value of x - y * t1	int masha_time = abs ( x - y ) * t1 ;
elevator_time = integer , set to absolute value of x - z * t2 + absolute value of x - y * t2 + t3 + t3 + t3	int elevator_time = abs ( x - z ) * t2 + abs ( x - y ) * t2 + t3 + t3 + t3 ;
if elevator_time is less than or equal to masha_time	if ( elevator_time <= masha_time )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
let x , y , z , t1 , t2 and t3 be integers	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
if abs ( x - z ) * t2 + abs ( x - y ) * t2 + t3 * 3 < = abs ( x - y ) * t1	if ( abs ( x - z ) * t2 + abs ( x - y ) * t2 + t3 * 3 <= abs ( x - y ) * t1 )
print " YES " and ' \ n '	cout << " YES " << ' \n ' ;
else	else
print " NO " and ' \ n '	cout << " NO " << ' \n ' ;
create constant integer INF with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create integers x , y , z , t1 , t2 , t3	int x , y , z , t1 , t2 , t3 ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
create integers tv , ts with tv = 0 , ts = 0	int tv = 0 , ts = 0 ;
set ts to t1 * absolute value of ( y - x )	ts = t1 * abs ( y - x ) ;
set tv to t2 * absolute value of ( z - x ) + t2 * absolute value of ( y - x ) + t3 * 3	tv = t2 * abs ( z - x ) + t2 * abs ( y - x ) + t3 * 3 ;
if tv is less than or equal to ts	if ( tv <= ts )
print " YES "	puts ( " YES " ) ;
else	else
print " NO "	puts ( " NO " ) ;
create integers x , y , z , t1 , t2 , t3	int x , y , z , t1 , t2 , t3 ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
create integer str_dif with str_dif = x - y	int str_dif = x - y ;
create integer elv_dif with elv_dif = x - z	int elv_dif = x - z ;
if str_dif is less than 0 or elv_dif is less than 0	if ( str_dif < 0 || elv_dif < 0 )
if str_dif is less than 0 , set str_dif to str_dif * - 1	if ( str_dif < 0 ) str_dif = str_dif * - 1 ;
if elv_dif is less than 0 , set elv_dif to elv_dif * - 1	if ( elv_dif < 0 ) elv_dif = elv_dif * - 1 ;
create integer str_time with str_time = str_dif * t1	int str_time = str_dif * t1 ;
create integer elv_time with elv_time = elv_dif * t2 + str_dif * t2 + 3 * t3	int elv_time = elv_dif * t2 + str_dif * t2 + 3 * t3 ;
if str_time is less than elv_time	if ( str_time < elv_time )
print " NO " print newline	cout << " NO " << endl ;
else	else
print " YES " print newline	cout << " YES " << endl ;
x , y , z , t1 , t2 , t3 = integers	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 , t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
set stairs to abs ( y - x ) * t1	int stairs = abs ( y - x ) * t1 ;
elevator = abs ( z - x ) * t2 + abs ( y - x ) * t2 + 3 * t3	int elevator = abs ( z - x ) * t2 + abs ( y - x ) * t2 + 3 * t3 ;
if elevator < = stairs	if ( elevator <= stairs )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
x , y , z , t1 , t2 , t3 = integers	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
if ( ( ( abs ( x - y ) + abs ( x - z ) ) * t2 ) + ( 3 * t3 ) < = ( ( abs ( x - y ) ) * t1 ) ) )	if ( ( ( abs ( x - y ) + abs ( x - z ) ) * t2 ) + ( 3 * t3 ) <= ( ( abs ( x - y ) ) * t1 ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
declare integer variables x , y , z , t1 , t2 and t3	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
declare integer variables ans1 and ans2 with ans2 = ( absolute value of x - y ) * t1	int ans1 , ans2 = abs ( x - y ) * t1 ;
ans1 = ( absolute value of z - x ) * t2 + t3 * 3 + ( absolute value of x - y ) * t2	ans1 = abs ( z - x ) * t2 + t3 * 3 + abs ( x - y ) * t2 ;
if ans1 < = ans2	if ( ans1 <= ans2 )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
let a , b , c , d , e , f , g , m , s , l , n , t be integers	int a , b , c , d , e , f , g , m , s , l , n , t ;
read a , b , c , d , e and f	cin >> a >> b >> c >> d >> e >> f ;
s is equal to ( a - b ) * d	s = ( a - b ) * d ;
if ( s is less than 0 ) , s is equal to - 1 * s	if ( s < 0 ) { s = - 1 * s ; }
l is equal to ( ( c - a ) * e ) ;	l = ( ( c - a ) * e ) ;
if ( l is less than 0 ) , l is equal to - l ;	if ( l < 0 ) l = - l ;
t is equal to ( a - b ) * e	t = ( a - b ) * e ;
if ( t is less than 0 ) , t is equal to - t	if ( t < 0 ) t = - t ;
m is equal to t + l + 3 * f	m = t + l + 3 * f ;
if ( m is less than or equal to s )	if ( m <= s )
print YES and endline	cout << " YES " << endl ;
else do something	else
print NO and endline	cout << " NO " << endl ;
x , y , z , t1 , t2 , t3 = integers	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
a , b , c , d = long integers	long long a , b , c , d ;
if ( x > y ) execute	if ( y > x )
set a to y - x	a = y - x ;
else execute	else
set a to x - y	a = x - y ;
set c to a * t1	c = a * t1 ;
if ( z is greater than x ) execute	if ( z > x )
b = z - x	b = z - x ;
else execute	else
b = x - z	b = x - z ;
set d to ( b + a ) * t2 + 3 * t3	d = ( b + a ) * t2 + 3 * t3 ;
if ( c is greater than or equal to d )	if ( c >= d )
Print out YES	cout << " YES " << endl ;
else	else
Print out NO	cout << " NO " << endl ;
declare long long integer variables x , y , z , t1 , t2 , t3 , s and e	long long int x , y , z , t1 , t2 , t3 , s , e ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
if x is greater than y	if ( x > y )
s = ( x - y ) * t1	s = ( x - y ) * t1 ;
else	else
s = ( y - x ) * t1	s = ( y - x ) * t1 ;
if x > = y & & x > = z	if ( x >= y && x >= z )
e = ( ( x - y ) * t2 ) + ( ( x - z ) * t2 ) + ( 3 * t3 )	e = ( ( x - y ) * t2 ) + ( ( x - z ) * t2 ) + ( 3 * t3 ) ;
if e < = s	if ( e <= s )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
else if x < = y & & x > = z	else if ( x <= y && x >= z )
e = ( ( y - x ) * t2 ) + ( ( x - z ) * t2 ) + ( 3 * t3 )	e = ( ( y - x ) * t2 ) + ( ( x - z ) * t2 ) + ( 3 * t3 ) ;
if e < = s	if ( e <= s )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
else if x < = y & & x < = z	else if ( x <= y && x <= z )
e = ( ( y - x ) * t2 ) + ( ( z - x ) * t2 ) + ( 3 * t3 )	e = ( ( y - x ) * t2 ) + ( ( z - x ) * t2 ) + ( 3 * t3 ) ;
if e < = s	if ( e <= s )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
else if x > = y & & x < = z	else if ( x >= y && x <= z )
e = ( ( x - y ) * t2 ) + ( ( z - x ) * t2 ) + ( 3 * t3 )	e = ( ( x - y ) * t2 ) + ( ( z - x ) * t2 ) + ( 3 * t3 ) ;
if e < = s	if ( e <= s )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
assign value 4 to constant integer MAX	const int MAX = 4 ;
let x , y , z , t1 , t2 and t3 be integers	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
let a and b be integers	int a , b ;
a = abs ( z - x ) * t2 + t3 * 3 + abs ( x - y ) * t2	a = abs ( z - x ) * t2 + t3 * 3 + abs ( x - y ) * t2 ;
b = abs ( x - y ) * t1	b = abs ( x - y ) * t1 ;
if a < = b	if ( a <= b )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
declare integers x , y , z , a , b , c	int x , y , z , a , b , c ;
read x , y , z , a , b , c	cin >> x >> y >> z >> a >> b >> c ;
declare integer stair as ( absolute value of x - y ) times a	int stair = abs ( x - y ) * a ;
declare integer lift as ( absolute value ( x - z ) + absolute value ( x - y ) ) * b + ( 3 * c )	int lift = ( abs ( x - z ) + abs ( x - y ) ) * b + ( 3 * c ) ;
if lift is less than or equal to stair	if ( lift <= stair )
print " YES " and a new line	cout << " YES\n " ;
else	else
print " NO " and a new line	cout << " NO\n " ;
create integers x , y , z , t1 , t2 , t3	int x , y , z , t1 , t2 , t3 ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
create integer tot1 with tot1 = absolute value of ( z - x ) * t2 + t3 * 3 + absolute value of ( y - x ) * t2	int tot1 = abs ( z - x ) * t2 + t3 * 3 + abs ( y - x ) * t2 ;
create integer tot2 with tot2 = absolute value of ( y - x ) * t1	int tot2 = abs ( y - x ) * t1 ;
if tot1 is greater than tot2	if ( tot1 > tot2 )
print " NO " print newline	cout << " NO " << endl ;
else	else
print " YES " print newline	cout << " YES " << endl ;
let x , y , z , t1 , t2 , t3 , e be long integers	long long x , y , z , t1 , t2 , t3 , e ;
read the values x , y , z , t1 , t2 , t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
let the value of e is equal to abs ( z - x ) * t2	e = abs ( z - x ) * t2 ;
let the value of e is equal to e + t3 * 3	e += t3 * 3 ;
let the value of e is equal to e + abs ( y - x ) * t2	e += abs ( y - x ) * t2 ;
let the value of t1 is equal to t1 * abs ( y - x )	t1 *= abs ( y - x ) ;
if ( t1 is greater than or equal to e )	if ( t1 >= e )
print YES and newline	cout << " YES " << ' \n ' ;
else , do the following	else
print NO and newline	cout << " NO " << ' \n ' ;
let mod is a long integer with value 1e9 + 7	long long mod = 1e9 + 7 ;
do map < int , int > mp	map < int , int > mp ;
let a is an array of size 200001 which is a long integer	long long a [ 200001 ] ;
let b is an array of size 200001 which is a long integer	long long b [ 200001 ] ;
let c is an array of size 11 which is a long integer	long long c [ 11 ] ;
let u is an array of size 151 which is a long integer	long long u [ 151 ] ;
let n , m , mn , l , t1 , t2 , t3 be long integers with mn is equal to 0	long long n , m , mn = 0 , l , t1 , t2 , t3 ;
initialize the long integers cnt and ans to 0	long long cnt = 0 , ans = 0 ;
read the values n , m and l	cin >> n >> m >> l ;
read the values t1 , t2 and t3	cin >> t1 >> t2 >> t3 ;
let the value of long integer res = abs ( n - l ) * t2 + t3 + t3 + abs ( n - m ) * t2 + t3 ;	long long res = abs ( n - l ) * t2 + t3 + t3 + abs ( n - m ) * t2 + t3 ;
let the value of long integer oi is equal to abs ( n - m ) * t1	long long oi = abs ( n - m ) * t1 ;
if ( res is greater than oi )	if ( res > oi )
print NO and newline	cout << " NO " << endl ;
else do the following	else
print YES and endline	cout << " YES " << endl ;
declare abs with integer x as argument , returning integer	int abs ( int x )
if x is less than 0 , return - x	if ( x < 0 ) return - x ;
return x	return x ;
declare solve with no arguments , returning void	void solve ( )
create integers x , y , z , t1 , t2 , t3	int x , y , z , t1 , t2 , t3 ;
read x read y read z read t1 read t2 read t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
create integer timeWalk with timeWalk = absolute value of ( y - x ) * t1	int timeWalk = abs ( y - x ) * t1 ;
create integer timeTakeElevator with timeTakeElevator = t3 * 3	int timeTakeElevator = t3 * 3 ;
increment timeTakeElevator by absolute value of ( x - z ) * t2	timeTakeElevator += abs ( x - z ) * t2 ;
increment timeTakeElevator by absolute value of ( y - x ) * t2	timeTakeElevator += abs ( y - x ) * t2 ;
if timeTakeElevator is greater than timeWalk	if ( timeTakeElevator > timeWalk )
print " NO \ n "	cout << " NO\n " ;
else	else
print " YES \ n "	cout << " YES\n " ;
run solve	solve ( ) ;
x , y , z , t1 , t2 , t3 = int	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 , t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
fd = absolute value of x - y	int fd = abs ( x - y ) ;
cd = absolute value of x - z	int cd = abs ( x - z ) ;
stt , lift_t = int	int stt , lift_t ;
stt = fd * t1	stt = fd * t1 ;
nw = int	int nw ;
nw = fd + cd	nw = fd + cd ;
lift_t = ( nw * t2 ) + ( 3 * t3 )	lift_t = ( nw * t2 ) + ( 3 * t3 ) ;
mn = int	int mn ;
if lift_t < = stt	if ( lift_t <= stt )
print " YES "	cout << " YES\n " ;
else	else
print " NO "	cout << " NO\n " ;
x , y , z , t1 , t2 and t3 are integers	int x , y , z , t1 , t2 , t3 ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
walk_time is integer = asbolute value of ( x - y ) * t1	int walk_time = abs ( x - y ) * t1 ;
lift_time = asbolute value of ( x - z ) * t2 + asbolute value of ( x - y ) * t2	int lift_time = abs ( x - z ) * t2 + abs ( x - y ) * t2 ;
increase lift_time by ( t3 * 3 )	lift_time += ( t3 * 3 ) ;
if lift_time < = walk_time	if ( lift_time <= walk_time )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
create integers x , y , z , a , b , c	int x , y , z , a , b , c ;
read x read y read z read a read b read c	cin >> x >> y >> z >> a >> b >> c ;
create integer r with r = absolute value of ( x - y ) * a	int r = abs ( x - y ) * a ;
create integer s with s = absolute value of ( x - z ) * b + 3 * c + absolute value of ( x - y ) * b	int s = abs ( x - z ) * b + 3 * c + abs ( x - y ) * b ;
if r is less than s	if ( r < s )
print " NO \ n "	cout << " NO\n " ;
else	else
print " YES \ n "	cout << " YES\n " ;
function absu with integer argument q that returns integer	int absu ( int q )
if q is greater than 0	if ( q > 0 )
return q	return q ;
else	else
return - q	return - q ;
create integers x , y , z , t1 , t2 , t3 , a and b	int x , y , z , t1 , t2 , t3 , a , b ;
read x , y , z , t1 , t2 and t3	cin >> x >> y >> z >> t1 >> t2 >> t3 ;
a = absu ( x - y ) * t1	a = absu ( x - y ) * t1 ;
b = absu ( x - z ) * t2 + absu ( x - y ) * t2 + 3 * t3	b = absu ( x - z ) * t2 + absu ( x - y ) * t2 + 3 * t3 ;
if a is less than b	if ( a < b )
print " NO " and a new line	cout << " NO " << endl ;
else	else
print " YES " and a new line	cout << " YES " << endl ;
MOD = 998244353	const long long int MOD = 998244353 ;
N , M , K , H , W , L , R = long long integers	long long int N , M , K , H , W , L , R ;
a , b , c , d , e , f = integers	int a , b , c , d , e , f ;
read a , b , c , d , e and f	cin >> a >> b >> c >> d >> e >> f ;
N = absolute value of ( a - b ) * d	N = abs ( a - b ) * d ;
M = absolute value of ( a - c ) * e	M = abs ( a - c ) * e ;
M = M + absolute value of ( b - a ) * e	M += abs ( b - a ) * e ;
M = M + 3 * f	M += 3 * f ;
if N is greater or equal than M	if ( N >= M )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
a = array of integers of length 100	int a [ 100 ] ;
let n , count , ans be integers with ans = 0	int n , count , ans = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n inclusive	for ( int i = 0 ; i <= n ; i ++ )
count is equal to 0	count = 0 ;
for j = i to n exclusive	for ( int j = i ; j < n ; j ++ )
if a [ j ] is equal to 1 , increment count by 1	if ( a [ j ] == 1 ) count ++ ;
for k = 0 to i exclusive	for ( int k = 0 ; k < i ; k ++ )
if a [ k ] is equal to 0 , increment count by 1	if ( a [ k ] == 0 ) count ++ ;
ans = maximum of ans , count	ans = max ( ans , count ) ;
print ans and newline	cout << ans << endl ;
create int n , a [ 105 ] , temp , ans , i and j , set ans to 1	int n , a [ 105 ] , temp , ans = 1 , i , j ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
temp = 0	temp = 0 ;
for j = 0 to i exclusive	for ( j = 0 ; j <= i ; j ++ )
if a [ j ] = 0 , increment temp	if ( ! a [ j ] ) temp ++ ;
for j = i to n exclusive	for ( j = i ; j < n ; j ++ )
if a [ j ] different from 0 , increment temp	if ( a [ j ] ) temp ++ ;
set ans to max of ans and temp	ans = max ( ans , temp ) ;
print ans	cout << ans << endl ;
inf = const int with inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
s , dp = int array of size 105 each and n = int	int s [ 105 ] , n , dp [ 105 ] ;
read n	cin >> n ;
for i = 1 to n inclusive read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
set dp [ 1 ] to s [ 1 ]	dp [ 1 ] = s [ 1 ] ;
len = int with len = 1	int len = 1 ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if s [ i ] > = dp [ len ]	if ( s [ i ] >= dp [ len ] )
increment lent then set dp [ len ] to s [ i ]	dp [ ++ len ] = s [ i ] ;
else	else
index = int with index = upper_bound of ( dp + 1 , dp + 1 + len , s [ i ] ) - dp	int index = upper_bound ( dp + 1 , dp + 1 + len , s [ i ] ) - dp ;
set dp [ index ] to s [ i ]	dp [ index ] = s [ i ] ;
print len	cout << len << endl ;
n = integer	int n ;
read n	cin >> n ;
a = integer array of size 200	int a [ 200 ] ;
one , zero = integers with one = 0 , zero = 0	int one = 0 , zero = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if ( a [ i ] ) increment one	if ( a [ i ] ) one ++ ;
ans = integer with ans = 0	int ans = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] is 0 ) increment zero	if ( a [ i ] == 0 ) zero ++ ;
ans = max ans and one + zero	ans = max ( ans , one + zero ) ;
if ( a [ i ] is 1 ) decrement one	if ( a [ i ] == 1 ) one -- ;
print ans	cout << ans << ' \n ' ;
create integer array cont of size 1005	int cont [ 1005 ] ;
make int n	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read cont [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> cont [ i ] ; }
let integer ans = 0	int ans = 0 ;
let int now = 0	int now = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if cont [ i ] is 0	if ( cont [ i ] == 0 )
add 1 to now	now ++ ;
set ans to max of ans and now	ans = max ( ans , now ) ;
else do	else
create int tmp = now	int tmp = now ;
for j = i to n exclusive	for ( int j = i ; j < n ; j ++ )
if cont [ j ] is truthy , add 1 to tmp	if ( cont [ j ] ) { tmp ++ ; }
set ans to max of ans and temp	ans = max ( ans , tmp ) ;
display ans	cout << ans << endl ;
declare new constant integer MAXN with value 100 + 5	const int MAXN = 100 + 5 ;
create constant integer called INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create new integer called n	int n ;
read standard input to n	cin >> n ;
data is a new array of integers with MAXN elements	int data [ MAXN ] ;
read n elements to data from the user input	for ( int i = 0 ; i < n ; i ++ ) cin >> data [ i ] ;
let cnt and ans be integers where ans = n	int cnt , ans = n ;
start for loop from i = 1 to n exclusive incrementing i	for ( int i = 1 ; i < n ; i ++ )
change the value of cnt to 0	cnt = 0 ;
if data [ i - 1 ] = data [ i ] , go to the start of the loop	if ( data [ i - 1 ] == data [ i ] ) continue ;
for j = 0 to i exclusive	for ( int j = 0 ; j < i ; j ++ )
if data [ j ] ! = 0 , increment cnt	if ( data [ j ] != 0 ) cnt ++ ;
for j from i to n exclusive incrementing j	for ( int j = i ; j < n ; j ++ )
if data [ j ] ! = 1 , increment cnt	if ( data [ j ] != 1 ) cnt ++ ;
assign min of ans and cnt to ans	ans = min ( ans , cnt ) ;
set cnt to 0	cnt = 0 ;
in a for loop , change i from 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
if data [ i ] ! = 0 , increment cnt by one	if ( data [ i ] != 0 ) cnt ++ ;
assign min of ans and cnt to ans	ans = min ( ans , cnt ) ;
change the value of cnt to 0	cnt = 0 ;
start for loop from i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
if data [ i ] ! = 1 , add 1 to cnt	if ( data [ i ] != 1 ) cnt ++ ;
set ans to min of ans and cnt	ans = min ( ans , cnt ) ;
print n - ans and ' \ n ' to the standard output	cout << n - ans << ' \n ' ;
create int n	int n ;
while read n	while ( cin >> n )
create int game [ n ]	int game [ n ] ;
for i = 0 to n exclusive , read game [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> game [ i ] ;
set large and prezero = 0	int large = 0 , prezero = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if game [ i ] = 0	if ( game [ i ] == 0 )
increment prezero	prezero ++ ;
set large to max of large and prezero	large = max ( large , prezero ) ;
else	else
set cur to prezero	int cur = prezero ;
for j = i to n exclusive	for ( int j = i ; j < n ; j ++ )
if game [ j ] = 1 , increment cur	if ( game [ j ] == 1 ) { cur ++ ; }
set large to max of cur and large	large = max ( cur , large ) ;
print large and a newline	cout << large << ' \n ' ;
make const integer maxn = 100005	const int maxn = 100005 ;
make int arrays s of size maxn and dp of size maxn	int s [ maxn ] , dp [ maxn ] ;
create int n	int n ;
read n	cin >> n ;
for i = 1 to n , read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
set dp [ 1 ] to s [ 1 ]	dp [ 1 ] = s [ 1 ] ;
create int len = 1	int len = 1 ;
for i = 2 to n	for ( int i = 2 ; i <= n ; i ++ )
if s [ i ] is greater than or equal to dp [ len ]	if ( s [ i ] >= dp [ len ] )
set dp [ + + len ] to s [ i ]	dp [ ++ len ] = s [ i ] ;
otherwise	else
create int index = upper_bound ( dp + 1 , dp + len + 1 , s [ i ] ) - dp	int index = upper_bound ( dp + 1 , dp + len + 1 , s [ i ] ) - dp ;
set dp [ index ] to s [ i ]	dp [ index ] = s [ i ] ;
print len	cout << len << endl ;
i , j , n , t = int , a = 1 , s = array of 10000 int	int i , j , n , a = 1 , t , s [ 10000 ] ;
read n	cin >> n ;
for i = 0 to n exclusive read s [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
t = 0	t = 0 ;
for j = 0 to i inclusive	for ( j = 0 ; j <= i ; j ++ )
if not s [ j ] increment t	if ( ! s [ j ] ) t ++ ;
for j = i to n exclusive	for ( j = i ; j < n ; j ++ )
if s [ j ] increment t	if ( s [ j ] ) t ++ ;
a = max ( a , t )	a = max ( a , t ) ;
print a	cout << a << endl ;
a , d = integer array of size 4005	int a [ 4005 ] , d [ 4005 ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
d [ 1 ] = a [ 1 ]	d [ 1 ] = a [ 1 ] ;
len = integer with len = 1	int len = 1 ;
for i = 2 to n	for ( int i = 2 ; i <= n ; i ++ )
if ( a [ i ] > = d [ len ] )	if ( a [ i ] >= d [ len ] )
d [ increment len ] = a [ i ]	d [ ++ len ] = a [ i ] ;
else	else
j = integer with j = upper_bound ( d + 1 , d + len + 1 , a [ i ] ) - d	int j = upper_bound ( d + 1 , d + len + 1 , a [ i ] ) - d ;
d [ j ] = a [ i ]	d [ j ] = a [ i ] ;
print len	cout << len << endl ;
create ints n , p = 1 , and cnt = 0 and int array a of size 1000	int n , a [ 1000 ] , p = 1 , cnt = 0 ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
create int t = 0	int t = 0 ;
for j = 1 to i	for ( int j = 1 ; j <= i ; j ++ )
if a [ j ] is equal to 0 , increment t	if ( a [ j ] == 0 ) t ++ ;
for j = i to n	for ( int j = i ; j <= n ; j ++ )
if a [ j ] is equal to 1 , increment t	if ( a [ j ] == 1 ) t ++ ;
set cnt to max of cnt and t	cnt = max ( cnt , t ) ;
print cnt	cout << cnt << endl ;
declare new constant integer called N = 105	const int N = 105 ;
create new ints n and ans ; declare int arrays s and dp with N elements	int n , s [ N ] , dp [ N ] , ans ;
read user input to n	cin >> n ;
read input to s [ i ] from the index 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i ) cin >> s [ i ] ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
set dp [ i ] to 1	dp [ i ] = 1 ;
for j from i - 1 to 1 inclusive decrementing j	for ( int j = i - 1 ; j >= 1 ; -- j )
if s [ i ] is equal to 0	if ( s [ i ] == 0 )
if s [ j ] = 0 , change the value of dp [ i ] to max of dp [ i ] and 1 + dp [ j ]	if ( s [ j ] == 0 ) dp [ i ] = max ( dp [ i ] , 1 + dp [ j ] ) ;
else	else
change the value of dp [ i ] to max of dp [ i ] and 1 + dp [ j ]	dp [ i ] = max ( dp [ i ] , 1 + dp [ j ] ) ;
assign max of dp [ i ] and ans to ans	ans = max ( dp [ i ] , ans ) ;
print ans and " \ n "	cout << ans << " \n " ;
size = const integer with size = 105	const int size = 105 ;
suf , pre = integers with pre , suf = integer array of size size = { 0 }	int suf [ size ] = { 0 } , pre [ size ] = { 0 } ;
n = integer	int n ;
read n	cin >> n ;
arr = integer array of size n + 1 = { 0 }	int arr [ n + 1 ] = { 0 } ;
for i = 1 to n , read arr [ i ] , suf [ i ] = ( arr [ i ] ) , pre [ i ] = ( not arr [ i ] )	for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] , suf [ i ] = ( arr [ i ] ) , pre [ i ] = ( ! arr [ i ] ) ;
for i = n down to 1 , suf [ i ] = suf [ i ] + suf [ i + 1 ]	for ( int i = n ; i >= 1 ; i -- ) suf [ i ] += suf [ i + 1 ] ;
for i = 1 to n , pre [ i ] = pre [ i ] + pre [ i - 1 ]	for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] += pre [ i - 1 ] ;
ans = integer with ans = 0	int ans = 0 ;
for i = 1 to n , ans = max ( ans , pre [ i ] + suf [ i ] )	for ( int i = 1 ; i <= n ; i ++ ) ans = max ( ans , pre [ i ] + suf [ i ] ) ;
print ans	cout << ans << " \n " ;
n = integer	int n ;
read n	cin >> n ;
a = integer array of size 200	int a [ 200 ] ;
one , zero = integers with one = 0 , zero = 0	int one = 0 , zero = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if ( a [ i ] ) increment one	if ( a [ i ] ) one ++ ;
ans = integer with ans = 0	int ans = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] is 0 ) , increment zero	if ( a [ i ] == 0 ) zero ++ ;
ans = max of ans and one + zero	ans = max ( ans , one + zero ) ;
if ( a [ i ] is 1 ) , decrement one	if ( a [ i ] == 1 ) one -- ;
print ans	cout << ans << ' \n ' ;
create const integer maxn = 10005	const int maxn = 10005 ;
create integer array s of size maxn	int s [ maxn ] ;
make int array dp of size dp	int dp [ maxn ] ;
create int len = 0	int len = 0 ;
create int n	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read s [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
set dp [ i ] to 1	dp [ i ] = 1 ;
for j = 0 to i exclusive	for ( int j = 0 ; j < i ; j ++ )
if s [ i ] is greater than or equal to s [ j ] and dp [ j ] + 1 is greater than dp [ i ] , set dp [ i ] to dp [ j ] + 1	if ( s [ i ] >= s [ j ] && dp [ j ] + 1 > dp [ i ] ) dp [ i ] = dp [ j ] + 1 ;
set len to max of dp [ i ] and len	len = max ( dp [ i ] , len ) ;
print len	cout << len << endl ;
make long long integer a of size 204	long long int a [ 204 ] ;
create long long integer n , i , j , k , x , y , t , and m	long long int n , i , j , k , x , y , t , m ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
make long long integer mx = 0 and cnt1 = 0	long long int mx = 0 , cnt1 = 0 ;
for i = 1 to n	for ( i = 1 ; i <= n ; i ++ )
create long long integer cnt = 0	long long int cnt = 0 ;
if a [ i ] is 1 , increment cnt1	if ( a [ i ] == 1 ) cnt1 ++ ;
if a [ i ] is 0	if ( a [ i ] == 0 )
for j = 1 to i	for ( j = 1 ; j <= i ; j ++ )
if a [ j ] is 0 , increment cnt	if ( a [ j ] == 0 ) cnt ++ ;
for j = i + 1 to n	for ( j = i + 1 ; j <= n ; j ++ )
if a [ j ] is 1 , add 1 to cnt	if ( a [ j ] == 1 ) cnt ++ ;
set mx to max of mx and cnt	mx = max ( mx , cnt ) ;
print max of mx and cnt1	cout << max ( mx , cnt1 ) << endl ;
n = int	int n ;
read n	cin >> n ;
game = int vector of size n	vector < int > game ( n ) ;
numOf0 = int with numOf0 = 0	int numOf0 = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; ++ i )
read game [ i ]	cin >> game [ i ] ;
if game [ i ] is 0 increment numOf0	if ( game [ i ] == 0 ) numOf0 ++ ;
if numOf0 is 0 or n	if ( numOf0 == 0 || numOf0 == n )
print n	cout << n << ' \n ' ;
last0 = int with last0 = n - 1	int last0 = n - 1 ;
loop while last0 > = 0 and game [ last0 ] is 1 decrement last0	while ( last0 >= 0 && game [ last0 ] == 1 ) { last0 -- ; }
numOf1 = int with numOf1 = n - 1 - last0	int numOf1 = n - 1 - last0 ;
ans = int with ans = numOf0 + numOf1	int ans = numOf0 + numOf1 ;
for i = last0 to 0 inclusive decrementing i	for ( int i = last0 ; i >= 0 ; -- i )
if game [ i ] is 1	if ( game [ i ] == 1 )
increment numOf1	numOf1 ++ ;
continue	continue ;
else	else
set ans to max of ans , numOf0 + numOf1	ans = max ( ans , numOf0 + numOf1 ) ;
decrement numOf0	numOf0 -- ;
print max of ans , numOf1	cout << max ( ans , numOf1 ) << ' \n ' ;
create integers n , res , one and zero , all except n with value 0	int n , res = 0 , one = 0 , zero = 0 ;
read from the input to n	cin >> n ;
a is a new array of integers with n elements	int a [ n ] ;
for integer i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is true	if ( a [ i ] )
set one to max of one and zero	one = max ( one , zero ) ;
increment one by one	one ++ ;
else	else
increment zero	zero ++ ;
change the value of res to max of one and zero	res = max ( one , zero ) ;
print res and " \ n " to the standard output	cout << res << " \n " ;
n , i , j = int , s , max = 0 , a and b = array of 105 int	int n , i , j , s = 0 , max = 0 , a [ 105 ] , b [ 105 ] ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is 0 increment s	if ( a [ i ] == 0 ) s ++ ;
b [ i ] = s	b [ i ] = s ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is 0	if ( a [ i ] == 0 )
if 2 * b [ i ] + n - 1 - i - s > max max = 2 * b [ i ] + n - 1 - i - s	if ( 2 * b [ i ] + n - 1 - i - s > max ) max = 2 * b [ i ] + n - 1 - i - s ;
if a [ i ] is 1	if ( a [ i ] == 1 )
if 2 * b [ i ] + n - i - s > max max = 2 * b [ i ] + n - i - s	if ( 2 * b [ i ] + n - i - s > max ) max = 2 * b [ i ] + n - i - s ;
print max	cout << max << endl ;
x = long long	long long x ;
read x	cin >> x ;
if x is even	if ( x % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
create new long long variable a	long long a ;
read user input to a	cin >> a ;
if a is even	if ( a % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1 to stdout	cout << 1 << endl ;
create long long int k , n , a [ 100000 ]	long long int k , n , a [ 100000 ] ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
declare n as long long	long long n ;
read n	cin >> n ;
if n bitwise and 1	if ( n & 1 )
print 1 , newline	cout << 1 << endl ;
else	else
print 2 and newline	cout << 2 << endl ;
create long longs x and y	long long x , y ;
read from the input to x	cin >> x ;
assign x % 2 to y	y = x % 2 ;
if y = 0	if ( y == 0 )
print 2 to the standard output	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
create string s	string s ;
read s	cin >> s ;
reverse s	reverse ( s . begin ( ) , s . end ( ) ) ;
id s [ 0 ] = 0 , 2 , 4 , 6 or 8	if ( s [ 0 ] == ' 0 ' || s [ 0 ] == ' 2 ' || s [ 0 ] == ' 4 ' || s [ 0 ] == ' 6 ' || s [ 0 ] == ' 8 ' )
print 2	cout << ' 2 ' << endl ;
else	else
print 1 and a newline	cout << ' 1 ' << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n mod 2 = 1	if ( n % 2 == 1 )
print 1	cout << 1 << endl ;
else	else
print 2	cout << 2 << endl ;
declare new long long called n	long long n ;
read n from the user input	cin >> n ;
print 2 - n % 2	cout << 2 - n % 2 << endl ;
declare long long variables n , mid and f	long long n , mid , f ;
set decimal precision of the output to 30 and change notation to floating - point	cout << setprecision ( 30 ) << fixed ;
read standard input to n	cin >> n ;
print 2 - n % 2 and ' \ n ' to the standard output	cout << 2 - n % 2 << ' \n ' ;
create long long int n	long long n ;
read n	cin >> n ;
if n modulo 2 is 1	if ( n % 2 == 1 )
print 1	cout << 1 << endl ;
else	else
print 2	cout << 2 << endl ;
create new unsigned long long variable n	unsigned long long n ;
read from the input to n	cin >> n ;
print 2 if n is even and 1 if n is odd	n % 2 == 0 ? cout << 2 << endl : cout << 1 << endl ;
end statement	;
declare constant long long INT64M = 0X3F3F3F3F3F3F3F3F	const long long INT64M = 0X3F3F3F3F3F3F3F3F ;
declare constant integer INT32M = 0x3F3F3F3F	const int INT32M = 0x3F3F3F3F ;
declare constant integer mod = 1e9 + 7	const int mod = 1e9 + 7 ;
declare n as long long	long long n ;
read n	cin >> n ;
if n bitwise and 1	if ( n & 1 )
print 1 , newline	cout << 1 << endl ;
else	else
print 2 , newline	cout << 2 << endl ;
MAX = n , a [ 1005 ] , sum = 0 , m , cmp	const int MAX = 1e5 + 5 ;
create long long n	long long n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1 and a newline	cout << 1 << endl ;
let n be a long integer	long long n ;
read n	cin >> n ;
if n modulo 2 is equal to 0	if ( n % 2 == 0 )
print 2 and newline	cout << 2 << endl ;
else do the following	else
print 1 and newline	cout << 1 << endl ;
n = long long int	long long int n ;
read n	cin >> n ;
if n is uneven	if ( n % 2 )
print 1	cout << 1 << endl ;
else	else
print 2	cout << 2 << endl ;
v is a new vector of long long integers	vector < long long int > v ;
create new long long integer variable n	long long int n ;
read n from the input	cin >> n ;
if n is even	if ( n % 2 == 0 )
print 2 to the standard output	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
create new long long variable called n	long long n ;
read the value of n from the input	cin >> n ;
if n modulo 2 is not 0	if ( n % 2 )
print " 1 " to the output	puts ( " 1 " ) ;
else	else
print " 2 " to stdout	puts ( " 2 " ) ;
create new unsigned long long integer called n	unsigned long long int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
create constant integer inf with value 0x3f3f3f	const int inf = 0x3f3f3f ;
create new long long n	long long n ;
read n and loop further	while ( cin >> n )
if n is even	if ( n % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1 to the standard output	cout << 1 << endl ;
a = long long	long long a ;
read a	cin >> a ;
if a is uneven print 1 else print 2	cout << ( a % 2 == 1 ? 1 : 2 ) << endl ;
create constant int INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
let long long integer mod = 10000000000LL	long long mod = 10000000000LL ;
declare cheng taking in long long integers a , b , and c and returning long long integer	long long cheng ( long long a , long long b , long long c )
make long long int ret = 0	long long ret = 0 ;
while b is truthy	while ( b )
if b & 1 are truthy	if ( b & 1 )
set ret to ret + a	ret += a ;
if ret is greater than or equal to c , set ret to ret - c	if ( ret >= c ) ret -= c ;
set a to a + a	a += a ;
if a is greater than or equal to c , set a to a - c	if ( a >= c ) a -= c ;
move bits of b 1 place to right	b >>= 1 ;
return ret	return ret ;
create long long int n	long long n ;
read n	cin >> n ;
make long long integer ans = cheng ( n , n , mod )	long long ans = cheng ( n , n , mod ) ;
if ans modulo 2 is 0	if ( ans % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
create constant long long MAX = 1000	const long long MAX = 1000 ;
declare long long variable n	long long n ;
read input to n	cin >> n ;
if n is odd	if ( n % 2 == 1 )
print 1	cout << 1 << endl ;
else	else
print 2 to the output	cout << 2 << endl ;
n = long long	long long n ;
read n	cin >> n ;
print 1 if n is odd else 2	cout << ( n % 2 == 1 ? 1 : 2 ) << endl ;
create constant int MAX = 1e5 + 5	const int MAX = 1e5 + 5 ;
let long long n	long long n ;
read n	cin >> n ;
if n modulo 2 is 0	if ( n % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
declare long long n	long long n ;
read n from the input	cin >> n ;
print 2 - ( n modulo 2 ) to the standard output	cout << 2 - ( n % 2 ) << endl ;
n is a new long long variable	long long n ;
declare new long long called a = 1	long long a = 1 ;
create new long long called b with value 2	long long b = 2 ;
read user input to n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print b to the standard output	cout << b << endl ;
else	else
print a	cout << a << endl ;
let n = long long	long long n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print 2	cout << " 2 " << endl ;
else	else
print 1	cout << " 1 " << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n is odd	if ( n % 2 )
print 1	cout << 1 << endl ;
else	else
print 2	cout << 2 << endl ;
make long long integers a , b , c , e , and f	long long a , b , c , e , f ;
read a	cin >> a ;
if a modulo 2 is truthy	if ( a % 2 )
print 1	cout << 1 << endl ;
otherwise do	else
print 2	cout << 2 << endl ;
create long long int n	long long int n ;
read n	cin >> n ;
if n and 1 different from 0	if ( n & 1 )
print 1 \ n	cout << " 1\n " ;
else	else
print 2 \ n	cout << " 2\n " ;
create long long int n	long long int n ;
read n and while n is truthy	while ( cin >> n )
if n modulo 2 is 1	if ( n % 2 == 1 )
print " 1 "	cout << " 1 " ;
else	else
print " 2 "	cout << " 2 " ;
print new line	cout << endl ;
n = unsigned long long	unsigned long long n ;
read n	cin >> n ;
if n is even then print 2 else print 1	n % 2 == 0 ? cout << 2 << endl : cout << 1 << endl ;
declare constant integer maxn = 1e5 + 5	const int maxn = 1e5 + 5 ;
declare long long n as argument	long long n ;
read n	cin >> n ;
if n % 2	if ( n % 2 )
print " 1 " , newline	cout << " 1 " << endl ;
else	else
print " 2 " , newline	cout << " 2 " << endl ;
declare n as long long	long long n ;
read n	cin >> n ;
if n % 2 is 0	if ( n % 2 == 0 )
print " 2 " , newline	cout << " 2 " << endl ;
else	else
print " 1 ' , newline	cout << " 1 " << endl ;
declare long long x	long long x ;
read x	cin >> x ;
if x % 2 is 0	if ( x % 2 == 0 )
print 2 and newline	cout << 2 << endl ;
else	else
print 1 and newline	cout << 1 << endl ;
declare new long long n	long long n ;
read n and keep looping	while ( cin >> n )
if n is even	if ( n % 2 == 0 )
print " 2 " to the otuput stream	cout << " 2 " << endl ;
else	else
print " 1 "	cout << " 1 " << endl ;
create long long n	long long n ;
read n	cin >> n ;
print 2 - ( n % 2 )	cout << 2 - ( n % 2 ) << endl ;
a_i , b_i , n = long long	long long a_i , b_i , n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
declare constant integer maxn = 1e5 + 10	const int maxn = 1e5 + 10 ;
declare constant integer maxm = 1e6 + 10	const int maxm = 1e6 + 10 ;
declare constant integer INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
declare long longs casn , n , m , k	long long casn , n , m , k ;
declare long long array num size maxn	long long num [ maxn ] ;
declare cal with long long x as argument , returning lon glong	long long cal ( long long x )
declare long long ans = 1	long long ans = 1 ;
for i = 1 to x inclusive , let ans be ans * i	for ( long long i = 1 ; i <= x ; i ++ ) { ans *= i ; }
return ans from function	return ans ;
read n	cin >> n ;
print 1 + ( n % 2 is 0 ) , newline	cout << 1 + ( n % 2 == 0 ) << endl ;
let n be a integer	int n ;
read n	cin >> n ;
let count be a vector of integers	vector < int > count ( 101 ) ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	int x ;
read x	cin >> x ;
increase count [ x ] by 1	++ count [ x ] ;
print * max_element from beginning to end of count and endline	cout << * max_element ( count . begin ( ) , count . end ( ) ) << endl ;
let n , ans = 0 , a [ 111 ] , vis [ 100010 ] be long long	long long n , ans = 0 , a [ 111 ] , vis [ 100010 ] ;
in inline long long function read	inline long long read ( )
x = long long = 0	long long x = 0 ;
bool = 0 = f	bool f = 0 ;
ch = char = get char	char ch = getchar ( ) ;
for , until not ch is digit set ch to get char , f bit exclusive or ( ch = = ' - ' )	for ( ; ! isdigit ( ch ) ; ch = getchar ( ) ) f ^= ( ch == ' - ' ) ;
for , is digit of ch = false , set ch = get char ; set x to ( x < < 3 ) + ( x < < 1 ) + ( ch ^ 48 )	for ( ; isdigit ( ch ) ; ch = getchar ( ) ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ) ;
is f not 0 ? then return - x else return x	return f ? - x : x ;
n = read ( )	n = read ( ) ;
for resgister int i = 1 to n inclusive , set a [ i ] to read , increment vis at a [ i ]	for ( register int i = 1 ; i <= n ; i ++ ) a [ i ] = read ( ) , vis [ a [ i ] ] ++ ;
for register int i = 1 to n inclusive	for ( register int i = 1 ; i <= n ; i ++ )
if ans < vis at a [ i ]	if ( ans < vis [ a [ i ] ] ) ans = vis [ a [ i ] ] ;
then set ans to vis at a [ i ]	cout << ans << endl ;
max_elemento is a integer function with vector of integers argument coins_array	int max_elemento ( vector < int > coins_array )
create integer max_element with value 0	int max_element = 0 ;
for i from 0 to length of coins_array exclusive incrementing i	for ( int i = 0 ; i < coins_array . size ( ) ; i ++ )
if coins_array [ i ] is greater than max_element , set max_element to coins_array [ i ]	if ( coins_array [ i ] > max_element ) { max_element = coins_array [ i ] ; }
return max_element	return max_element ;
create integer coins_nro	int coins_nro ;
create new integer variable coin_value	int coin_value ;
create vector of integers coins_array with size 105 filled with 0	vector < int > coins_array ( 105 , 0 ) ;
result is a new integer variable	int result ;
read variable coins_nro from the input	cin >> coins_nro ;
in a for loop , change i from 0 to coins_nro exclusive incrementing i	for ( int i = 0 ; i < coins_nro ; i ++ )
read from the input to coin_value	cin >> coin_value ;
increment coins_array [ coin_value ] by one	coins_array [ coin_value ] ++ ;
assign the new value = max_elemento ( coins_array ) to result	result = max_elemento ( coins_array ) ;
print result and ' \ n '	cout << result << ' \n ' ;
declare integer array a size 10005	int a [ 10005 ] ;
declare integers n , m , d = 0	int n , m , d = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read m	cin >> m ;
increment a [ m ]	a [ m ] ++ ;
for j = 0 to 10000 exclusive	for ( int j = 0 ; j < 10000 ; j ++ )
if a [ j ] is greater than d , let d be a [ j ]	if ( a [ j ] > d ) { d = a [ j ] ; }
print d and newline	cout << d << endl ;
create long long integer n	long long int n ;
read n	cin >> n ;
make long long int array a of size and long long c = 0	long long int a [ n ] , c = 0 ;
let long long int array x of size 101 containing { 0 }	long long int x [ 101 ] = { 0 } ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment x [ a [ i ] ]	x [ a [ i ] ] ++ ;
display * max_element ( x , x + 101 )	cout << * max_element ( x , x + 101 ) << endl ;
declare integer array a size 250 , integers ans , sum = 1	int a [ 250 ] , ans , sum = 1 ;
declare integer n	int n ;
read n	cin >> n ;
if n is 1	if ( n == 1 )
print " 1 " and newline	cout << " 1 " << endl ;
for i = 0 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort from a + 1 to a + n + 1	sort ( a + 1 , a + n + 1 ) ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if a [ i ] is a [ i - 1 ] , increment sum	if ( a [ i ] == a [ i - 1 ] ) sum ++ ;
let ans be maximum of ans and sum	ans = max ( ans , sum ) ;
if a [ i ] is not a [ i - 1 ] , let sum be 1	if ( a [ i ] != a [ i - 1 ] ) sum = 1 ;
print ans and newline	cout << ans << endl ;
integer as n , a [ 1000 ] , i , j	int n , a [ 1000 ] , i , j ;
create memset with pointer a , value of 0 , and byte size of a	memset ( a , 0 , sizeof ( a ) ) ;
read n	cin >> n ;
for = 0 to less than n do the following	for ( i = 0 ; i < n ; i ++ )
read j	cin >> j ;
add one to a [ j ]	a [ j ] ++ ;
integer as m = - 999	int m = - 999 ;
for = 0 to less than 1000 do the following	for ( i = 0 ; i < 1000 ; i ++ )
if a [ i ] is greater than m then do the following m = a [ i ]	if ( a [ i ] > m ) { m = a [ i ] ; }
output m	cout << m << endl ;
let INF be a constant integer with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
let v be an integer array of size 105	int v [ 105 ] ;
let i , j , k be integers	int i , j , k ;
let n , m , x be integers	int n , m , x ;
read n	cin >> n ;
for i = 0 to n exclusive , read x and increase v [ x ] by 1	for ( i = 0 ; i < n ; i ++ ) cin >> x , v [ x ] ++ ;
sort the values v and v + 101	sort ( v , v + 101 ) ;
print v [ 100 ] and endline	cout << v [ 100 ] << endl ;
let n be a integer	int n ;
read n	cin >> n ;
arr = array of integers of length n	int arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }
count = array of integers of length 101	int count [ 101 ] ;
for i = 0 to 101 exclusive , count [ i ] is equal to 0	for ( int i = 0 ; i < 101 ; ++ i ) { count [ i ] = 0 ; }
for i = 0 to n exclusive , increment count [ arr [ i ] ] by 1	for ( int i = 0 ; i < n ; ++ i ) { count [ arr [ i ] ] ++ ; }
the integer value of answer = 0	int answer = 0 ;
for i = 0 to 101 exclusive	for ( int i = 0 ; i < 101 ; ++ i )
if count [ i ] is greater than answer , answer is equal to count [ i ]	if ( count [ i ] > answer ) { answer = count [ i ] ; }
print answer and newline	cout << answer << endl ;
arr is a vector of integers	vector < int > arr ( 10000 ) ;
n , x be integers	int n , x ;
read n	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
increase arr [ x ] by 1	++ arr [ x ] ;
print * max_element ( arr . begin ( ) , arr . end ( ) ) and endline	cout << * max_element ( arr . begin ( ) , arr . end ( ) ) << endl ;
declare cmp with integers a , b as arguments , returning boolean	bool cmp ( int a , int b )
return a is greater than b	return a > b ;
declare integer n	int n ;
read n	cin >> n ;
declare integer array a size 200 = { 0 }	int a [ 200 ] = { 0 } ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
declare integer mid	int mid ;
read mid	cin >> mid ;
increment a [ mid ]	a [ mid ] ++ ;
sort from a to a + 105 using cmp to compare	sort ( a , a + 105 , cmp ) ;
print a [ 0 ] and newline	cout << a [ 0 ] << endl ;
integer as array a of size 10005	int a [ 10005 ] ;
integer as n , m , b = 0	int n , m , b = 0 ;
read n	cin >> n ;
for i = 1 to less than or equal to n do the following	for ( int i = 1 ; i <= n ; i ++ )
read m	cin >> m ;
add one to a [ m ]	a [ m ] ++ ;
for i = 0 to less than or equal to 10000 do the following	for ( int i = 0 ; i <= 10000 ; i ++ )
if a [ i ] is greater than b then b = a [ i ]	if ( a [ i ] > b ) b = a [ i ] ;
output b	cout << b << endl ;
create long long n	long long n ;
read n	cin >> n ;
make long long vector coins	vector < long long > coins ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
create long long aux	long long aux ;
read aux	cin >> aux ;
append aux to coins	coins . push_back ( aux ) ;
sort coins	sort ( coins . begin ( ) , coins . end ( ) ) ;
create long long ints cont = 1 and resp = 1	long long cont = 1 , resp = 1 ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
if coins [ i ] is equal to coins [ i - 1 ]	if ( coins [ i ] == coins [ i - 1 ] )
increment cont	cont ++ ;
else do	else
if cont is greater than resp , set resp to cont	if ( cont > resp ) { resp = cont ; }
set cont to 1	cont = 1 ;
if cont is greater than resp , set resp to cont	if ( cont > resp ) { resp = cont ; }
display resp	cout << resp << endl ;
declare integers n , max = - 1 , cnt , integer array arr size 105	int n , arr [ 105 ] , max = - 1 , cnt ;
read n	cin >> n ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let cnt be 0	cnt = 0 ;
if arr [ i ] is - 5000000 , end loop iteration	if ( arr [ i ] == - 5000000 ) { continue ; }
declare integer tmp = arr [ i ]	int tmp = arr [ i ] ;
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
if tmp is arr [ j ]	if ( tmp == arr [ j ] )
increment cnt	cnt ++ ;
let arr [ j ] be - 5000000	arr [ j ] = - 5000000 ;
if cnt is greater than or equal to max , let max be cnt	if ( cnt >= max ) { max = cnt ; }
print max , newline	cout << max << endl ;
create integer n	int n ;
read n	cin >> n ;
make integer ma = 0	int ma = 0 ;
make integer array a of size 110	int a [ 110 ] ;
set all content of a to 0	memset ( a , 0 , sizeof ( a ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
make integer num	int num ;
read num	cin >> num ;
add 1 to a [ num ]	a [ num ] ++ ;
set ma to max of a [ num ] and ma	ma = max ( a [ num ] , ma ) ;
print ma	cout << ma << endl ;
integer as n	int n ;
read n	cin >> n ;
create integer vector of v ( 101 , 0 )	vector < int > v ( 101 , 0 ) ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
integer as x	int x ;
read x	cin >> x ;
add one to v [ x ]	v [ x ] ++ ;
integer as MAX = value pointed to by max_element within v	int MAX = * max_element ( v . begin ( ) , v . end ( ) ) ;
output MAX	cout << MAX << endl ;
create long long ints n and i	long long int n , i ;
read n	cin >> n ;
make long long array a of size n and long long max = 0	long long int a [ n ] , max = 0 ;
make map m of long long ints to long long ints	map < long long int , long long int > m ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment m [ a [ i ] ]	m [ a [ i ] ] ++ ;
if m [ a [ i ] ] is greater than max , set max to m [ a [ i ] ]	if ( m [ a [ i ] ] > max ) max = m [ a [ i ] ] ;
print max	cout << max << " \n " ;
n is a new integer	int n ;
loop , reading n from the input	while ( cin >> n )
declare integer ans with value 0	int ans = 0 ;
let p be a map from integers to integers	map < int , int > p ;
increment i in a loop from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
new integer val	int val ;
read val	cin >> val ;
increment p [ val ]	p [ val ] ++ ;
assign the new value = max of p [ val ] and ans to ans	ans = max ( p [ val ] , ans ) ;
print ans	cout << ans << endl ;
let cont be a long integer array	long long cont [ 101 ] ;
n is a long integer	long long n ;
read n	cin >> n ;
for long integer i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
num is a long integer	long long num ;
read num	cin >> num ;
increase cont [ num ] by 1	cont [ num ] ++ ;
maxi is a long integer 0	long long maxi = 0 ;
for long integer i = 1 to 100 inclusive , maxi = max ( maxi , cont [ i ]	for ( long long i = 1 ; i <= 100 ; i ++ ) { maxi = max ( maxi , cont [ i ] ) ; }
print maxi and endline	cout << maxi << endl ;
integer as n , i , j , maxx	int n , i , j , maxx ;
read n	cin >> n ;
integer as a [ n ]	int a [ n ] ;
integer as freq [ 101 ] = 0	int freq [ 101 ] = { 0 } ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
read array a [ i ]	cin >> a [ i ] ;
add one to freq [ a [ i ] ]	freq [ a [ i ] ] ++ ;
do nothing	{ }
set maxx to INT_MIN	maxx = INT_MIN ;
for i = 0 to less than 101 do the following	for ( int i = 0 ; i < 101 ; i ++ )
if freq [ i ] is greater than or equal to maxx then do the following maxx = freq [ i ]	if ( freq [ i ] >= maxx ) { maxx = freq [ i ] ; }
output maxx	cout << maxx << endl ;
n , m , c = int with m = 0 and c = 0 and arr = int array of size 101	int n , arr [ 101 ] , m = 0 , c = 0 ;
read n	cin >> n ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr from index 0 to n	sort ( arr , arr + n ) ;
for i = 1 to n	for ( int i = 1 ; i < n ; i ++ )
if arr [ i - 1 ] is arr [ i ]	if ( arr [ i - 1 ] == arr [ i ] )
increment c	c ++ ;
else	else
set c to 0	c = 0 ;
set m to max of m , c	m = max ( m , c ) ;
if m is 0	if ( m == 0 )
print 1	cout << 1 << endl ;
else	else
print m + 1	cout << m + 1 << endl ;
create integers n , i , t and max = 0	int n = 0 , i = 0 , t = 0 , max = 0 ;
read user input to n	cin >> n ;
f is a new vector of integers with size 101 filled with 0	vector < int > f ( 101 , 0 ) ;
start for loop from i = 0 to n exclusive incrementing i	for ( i = 0 ; i < n ; i ++ )
read standard input to t	cin >> t ;
increment f [ t ]	f [ t ] ++ ;
in a for loop , change i from 1 to 100 inclusive , changing max to maximum of f [ i ] and max on each iteration	for ( i = 1 ; i <= 100 ; i ++ ) { max = ( f [ i ] > max ) ? f [ i ] : max ; }
print max	cout << max << endl ;
create long long n	long long n ;
read n	cin >> n ;
make long long int array c of size n and int max = 1	long long c [ n ] , max = 1 ;
for i = 0 to n exclusive , read c [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }
for i = 0 to n - 1 exclusive	for ( long long i = 0 ; i < n - 1 ; i ++ )
create long long cnt = 1	long long cnt = 1 ;
for j = i + 1 to n exclusive	for ( long long j = i + 1 ; j < n ; j ++ )
if c [ j ] is equal to c [ i ] , increment cnt	if ( c [ j ] == c [ i ] ) { cnt ++ ; }
if i is equal to 0 , set max to cnt	if ( i == 0 ) max = cnt ;
if cnt is greater than or equal to max , set max to cnt	if ( cnt >= max ) max = cnt ;
display max	cout << max << endl ;
integer as n	int n ;
read n	cin >> n ;
create integer vector of coins 101 , 0	vector < int > coins ( 101 , 0 ) ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
integer as value	int value ;
read value	cin >> value ;
add one to coins [ value ]	coins [ value ] ++ ;
integer as minPockets = - 1	int minPockets = - 1 ;
for i = 0 to less than 101 then minPockets = maximum of minpockets or coins [ i ]	for ( int i = 0 ; i < 101 ; i ++ ) minPockets = max ( minPockets , coins [ i ] ) ;
output minPockets	cout << minPockets << endl ;
p1 , p2 , p3 , p4 , a , b = int	int p1 , p2 , p3 , p4 , a , b ;
read p1 , p2 , p3 , p4 , a , b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
ans = 0	int ans = 0 ;
p = min ( p1 , p2 )	int p = min ( p1 , p2 ) ;
p = min ( p , p3 )	p = min ( p , p3 ) ;
p = min ( p , p4 )	p = min ( p , p4 ) ;
if b < p	if ( b < p )
print b - a + 1	cout << b - a + 1 << " \n " ;
if p - a > 0 ans = p - a	if ( p - a > 0 ) { ans = p - a ; }
print ans	cout << ans << " \n " ;
declare integer array p size 4 , integers a , b , ans	int p [ 4 ] , a , b , ans ;
for i = 0 to 4 exclusive , read p [ i ]	for ( int i = 0 ; i < 4 ; ++ i ) cin >> p [ i ] ;
read a , b	cin >> a >> b ;
let ans be b - a + 1	ans = b - a + 1 ;
for i = a to b inclusive	for ( int i = a ; i <= b ; ++ i )
for j = 0 to 4 exclusive	for ( int j = 0 ; j < 4 ; ++ j )
if i is less than p [ j ] , end loop iteration	if ( i < p [ j ] ) continue ;
decrement ans	-- ans ;
end loop	break ;
print ans and newline	cout << ans << endl ;
declare integers p1 , p2 , p3 , p4 , a and b	int p1 , p2 , p3 , p4 , a , b ;
read input to p1 , p2 , p3 , p4 , a and b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
declare integer variable with name sum = 0	int sum = 0 ;
for i from a to b inclusive	for ( int i = a ; i <= b ; i ++ )
if i % p1 = i and i % p2 = i and i % p3 = i and i % p4 = i , increment sum by one	if ( i % p1 == i && i % p2 == i && i % p3 == i && i % p4 == i ) { sum ++ ; }
print sum	cout << sum << endl ;
p = array of 4 int	int p [ 4 ] ;
for i = 0 to 4 exclusive read p [ i ]	for ( int i = 0 ; i < 4 ; i ++ ) cin >> p [ i ] ;
esq , dir = int	int esq , dir ;
read esq , dir	cin >> esq >> dir ;
res = 0	int res = 0 ;
for i = esq to dir inclusive	for ( int i = esq ; i <= dir ; i ++ )
sort p	sort ( p , p + 4 ) ;
cnt = 0	int cnt = 0 ;
do	do
x = i	int x = i ;
for j = 0 to 4 exclusive x = x modulo p [ j ]	for ( int j = 0 ; j < 4 ; j ++ ) x = x % p [ j ] ;
if x is i increment cnt	if ( x == i ) cnt ++ ;
while next_permutation ( p , p + 4 )	while ( next_permutation ( p , p + 4 ) ) ;
if cnt > = 7 increment res	if ( cnt >= 7 ) res ++ ;
print res	cout << res << endl ;
p1 , p2 , p3 , p4 = int	int p1 , p2 , p3 , p4 ;
a , b = int	int a , b ;
ans = int with ans = 0	int ans = 0 ;
read p1 then p2 then p3 then p4 then a then b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
if i mod p1 is i and i mod p2 is is and i mod p3 is i and i mod p4 is i increment ans	if ( i % p1 == i && i % p2 == i && i % p3 == i && i % p4 == i ) ans ++ ;
print ans	cout << ans << endl ;
create long long ints p1 , p2 , p3 , p4 , a , b , and ans = 0	long long p1 , p2 , p3 , p4 , a , b , ans = 0 ;
read p1 , p2 , p3 , p4 , a , and b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
for i = a to b	for ( int i = a ; i <= b ; i ++ )
if i % p1 is equal to i , i % p2 is equal to i , i % p3 is equal to i , and i % p4 is equal to i , increment ans	if ( i % p1 == i && i % p2 == i && i % p3 == i && i % p4 == i ) ans ++ ;
print ans	cout << ans << endl ;
p1 , p2 , p3 , p4 , a , b , x = int , cnt = 0	int p1 , p2 , p3 , p4 , a , b , cnt = 0 , x ;
read p1 , p2 , p3 , p4 , a , b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
x = ( ( ( i modulo p1 ) modulo p2 ) modulo p3 ) modulo p4	x = ( ( ( i % p1 ) % p2 ) % p3 ) % p4 ;
if x is i increment cnt	if ( x == i ) { cnt ++ ; }
print cnt	cout << cnt << " \n " ;
create integers a , b , c , d , x , y and s where s = 0	int a , b , c , d , x , y , s = 0 ;
read standard input to a , b , c , d , x and y	cin >> a >> b >> c >> d >> x >> y ;
for i from x to y inclusive	for ( int i = x ; i <= y ; i ++ )
if i % a , i % b , i % c and i % d are all equal to i , increment s	if ( i % a == i && i % b == i && i % c == i && i % d == i ) s ++ ;
print s	cout << s << endl ;
a , b , p , q , r , s = short	short a , b , p , q , r , s ;
read p then q then r then s then a then b	cin >> p >> q >> r >> s >> a >> b ;
ans = short with ans = 0	short ans = 0 ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
if ( ( ( ( i mod p ) mod q ) mod r ) mod s ) is i increment ans	if ( ( ( ( ( i % p ) % q ) % r ) % s ) == i ) ans ++ ;
print ans	cout << ans << endl ;
create int p , a , b	int p , a , b ;
set min to 99999999	int min = 99999999 ;
for i = 1 to 4 inclusive	for ( int i = 1 ; i <= 4 ; i ++ )
read p	cin >> p ;
if p < min , min = p	if ( p < min ) min = p ;
read a and b	cin >> a >> b ;
if min > = a and < = b	if ( min >= a && min <= b )
print min - a	cout << min - a << endl ;
else if min < a	else if ( min < a )
print 0	cout << 0 << endl ;
else if min > b	else if ( min > b )
print b - a + 1	cout << b - a + 1 << endl ;
ifstream in ( txt . in )	ifstream in ( " txt.in " ) ;
ofstream out ( txt . out )	ofstream out ( " txt.out " ) ;
print fixed and setprecision ( 12 )	cout << fixed << setprecision ( 12 ) ;
let mx be a long integer with mx = 2e9	long long mx = 2e9 ;
for i = 1 to 4 inclusive	for ( int i = 1 ; i <= 4 ; ++ i )
let x be a long integer	long long x ;
read x	cin >> x ;
mx is equal to minimum of mx , x	mx = min ( mx , x ) ;
let a , b be long integers	long long a , b ;
read a , b	cin >> a >> b ;
let cnt be a long integer with cnt = 0	long long cnt = 0 ;
for i = a to b inclusive , cnt is equal to cnt + i is less than mx	for ( int i = a ; i <= b ; ++ i ) { cnt += ( i < mx ) ; }
print cnt and newline	cout << cnt << ' \n ' ;
declare integers a , b , integer array p size 4	int a , b , p [ 4 ] ;
for i = 0 to 4 exclusive , read p [ i ]	for ( int i = 0 ; i < 4 ; i ++ ) cin >> p [ i ] ;
read a and b	cin >> a >> b ;
sort between p and p + 4	sort ( p , p + 4 ) ;
declare integers x , cnt = 0	int x , cnt = 0 ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
declare integer match = 0	int match = 0 ;
start loop	do
let x be i	x = i ;
for i = 0 to 4 exclusive , let x be x % p [ i ]	for ( int i = 0 ; i < 4 ; i ++ ) x %= p [ i ] ;
if x is i , increment match	if ( x == i ) match ++ ;
while ( re - arrange elements lexicographically p , p + 4 )	while ( next_permutation ( p , p + 4 ) ) ;
if match is greater than or equal to 7 , increment cnt	if ( match >= 7 ) cnt ++ ;
print cnt and ' \ n '	cout << cnt << ' \n ' ;
declare ints a , b , c , d , x , y and cnt	int a , b , c , d , x , y , cnt ;
read a , b , c , d , x and y and keep looping	while ( cin >> a >> b >> c >> d >> x >> y )
change the value of cnt to 0	cnt = 0 ;
for i from x to y inclusive	for ( int i = x ; i <= y ; i ++ )
if i % a % b % c % d is equal to i , increment cnt by one	if ( i % a % b % c % d == i ) cnt ++ ;
print cnt	cout << cnt << endl ;
let a , b , s be integers with s = 0 , p = array of integers of length 4	int p [ 4 ] , a , b , s = 0 ;
read p [ 0 ] , p [ 1 ] , p [ 2 ] , p [ 3 ] , a , b	cin >> p [ 0 ] >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> a >> b ;
sort the values p , p + 4	sort ( p , p + 4 ) ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
if i is less than p [ 0 ] , increment s by 1	if ( i < p [ 0 ] ) s ++ ;
print s and newline	cout << s << endl ;
declare integers p1 , p2 , p3 , p4 , a , b	int p1 , p2 , p3 , p4 , a , b ;
read p1 , p2 , p3 , p4 , a , b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
declare ans = 0 as integer	int ans = 0 ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
declare integer ans = ( ( ( ( i % p1 ) % p2 ) % p3 ) % p4 )	int ans1 = ( ( ( ( i % p1 ) % p2 ) % p3 ) % p4 ) ;
if ans is i , increment ans	if ( ans1 == i ) ans ++ ;
print ans and newline	cout << ans << endl ;
create int x	int x ;
read x	cin >> x ;
for i = 0 to 3 exclusive	for ( int i = 0 ; i < ( int ) 3 ; i ++ )
create int y	int y ;
read y	cin >> y ;
x = min of x and y	x = min ( x , y ) ;
create int a and b	int a , b ;
read a and b	cin >> a >> b ;
c = 0	int c = 0 ;
for i = a to b inclusive and to x , increment c	for ( int i = a ; i <= b && i < x ; i ++ ) c ++ ;
print c	cout << c << endl ;
a , b = int and s = int array of size 4	int s [ 4 ] , a , b ;
loop while reading s [ 0 ] then s [ 1 ] then s [ 2 ] then s [ 3 ] then a then b	while ( cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 3 ] >> a >> b )
sort s	sort ( s , s + 4 ) ;
if s [ 0 ] > b	if ( s [ 0 ] > b )
print b - a + 1	cout << b - a + 1 << endl ;
else if s [ 0 ] > a	else if ( s [ 0 ] > a )
print s [ 0 ] - a	cout << s [ 0 ] - a << endl ;
else	else
print " 0 "	cout << " 0 " << endl ;
call precision of 7 on cout	cout . precision ( 7 ) ;
p1 , p2 , p3 , p4 , a , b = int	int p1 , p2 , p3 , p4 , a , b ;
read p1 then p2 then p3 then p4 then a then b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
minP = int with minP = mind of p1 , min of p2 , min of p3 , p4	int minP = min ( p1 , min ( p2 , min ( p3 , p4 ) ) ) ;
print max of 0 , min of minP - a , b - a + 1	cout << max ( 0 , min ( minP - a , b - a + 1 ) ) << " \n " ;
create int a , b , c , d	int a , b , c , d ;
create int p and m	int n , m ;
set p to 1000 and q to 31415	int p = 1000 , q = 31415 ;
create int ans	int ans ;
read a , b , c and d	cin >> a >> b >> c >> d ;
read n and m	cin >> n >> m ;
set p to min of p and a	p = min ( p , a ) ;
assign min of p and b to p	p = min ( p , b ) ;
set p = min of p and c	p = min ( p , c ) ;
p = min ( p , d )	p = min ( p , d ) ;
if p > m	if ( p > m )
set ans to m - n + 1	ans = m - n + 1 ;
else	else
set ans = p - n	ans = p - n ;
if ans < 0 , set ans equal to 0	if ( ans < 0 ) ans = 0 ;
print ans	cout << ans << endl ;
declare integers p1 , p2 , p3 , p4	int p1 , p2 , p3 , p4 ;
declare integers a , b	int a , b ;
read p1 , p2 , p3 , p4 , a , b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
declare integer ans = 0	int ans = 0 ;
for i = a to b inclusive	for ( int i = a ; i <= b ; ++ i )
if i is ( ( ( i % p1 ) % p2 ) % p3 ) % p4 , increment ans	if ( i == ( ( ( i % p1 ) % p2 ) % p3 ) % p4 ) ++ ans ;
print ans and newline	cout << ans << endl ;
declare new array of integers p with size 4	int p [ 4 ] ;
let a and b be new integer variables	int a , b ;
create integer variable with name cnt	int cnt ;
read input to p [ 0 ] , p [ 1 ] , p [ 2 ] , p [ 3 ] , a and b	cin >> p [ 0 ] >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> a >> b ;
start for loop from i = a to b inclusive incrementing i	for ( int i = a ; i <= b ; ++ i )
sort p	sort ( p , p + 4 ) ;
create integer variable s with value 0	int s = 0 ;
start the loop	do
increment s if ( ( ( i % p [ 0 ] ) % p [ 1 ] ) % p [ 2 ] ) % p [ 3 ] = = i	if ( ( ( ( i % p [ 0 ] ) % p [ 1 ] ) % p [ 2 ] ) % p [ 3 ] == i ) ++ s ;
loop again while next_permutation ( p , p + 4 ) is true	while ( next_permutation ( p , p + 4 ) ) ;
if s > = 7	if ( s >= 7 ) ++ cnt ;
print cnt	cout << cnt << endl ;
declare long longs p1 , p2 , p3 , p4 , a , b , ans = 0	long long p1 , p2 , p3 , p4 , a , b , ans = 0 ;
declare inline read with no arguments , returning long long	inline long long read ( )
declare x = 0 as long long	long long x = 0 ;
declare f = 0 as boolean	bool f = 0 ;
declare ch = read character as character	char ch = getchar ( ) ;
for ch is not digit , setting ch to read character , let f be f xor ( ch is ' 0 ' )	for ( ; ! isdigit ( ch ) ; ch = getchar ( ) ) f ^= ( ch == ' - ' ) ;
for ch is digit , setting ch to read character , let x be ( x bitshift left 3 ) + ( x bitshift left 1 ) + ( ch bitwise xor 48 )	for ( ; isdigit ( ch ) ; ch = getchar ( ) ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ) ;
return - x if f is true , else x	return f ? - x : x ;
let p1 = result of run read , p2 = result of run read , p3 = result of run read , p4 = result of run read	p1 = read ( ) , p2 = read ( ) , p3 = read ( ) , p4 = read ( ) ;
let a be result of run read , let b be result of run read	a = read ( ) , b = read ( ) ;
for i = a to b inclusive	for ( register long long i = a ; i <= b ; i ++ )
declare long longs z = i % p1 , zz = i % p2 , zzz = i % p3 , zzzz = i % p4	long long z = i % p1 , zz = i % p2 , zzz = i % p3 , zzzz = i % p4 ;
if zz is zzz and zz is z and zz is zzzz and z is i , increment ans	if ( zz == zzz && zz == z && zz == zzzz && z == i ) ans ++ ;
print ans and newline	cout << ans << endl ;
p1 , p2 , p3 , p4 , a , b = int , p = 0	int p1 , p2 , p3 , p4 , a , b , p = 0 ;
read p1 , p2 , p3 , p4 , a , b	cin >> p1 >> p2 >> p3 >> p4 >> a >> b ;
for i = a to b inclusive	for ( int i = a ; i <= b ; i ++ )
if i modulo p1 modulo p2 modulo p3 modulo p4 is i increment p	if ( i % p1 % p2 % p3 % p4 == i ) p ++ ;
print p	cout << p << endl ;
let minn be a integer function which accepts integers a , b , c , d	int minn ( int a , int b , int c , int d )
a is equal to minimum of a and b	a = min ( a , b ) ;
c is equal to minimum of c and d	c = min ( c , d ) ;
return the value minimum of a and c	return min ( a , c ) ;
let p1 , p2 , p3 , p4 , a , b be integers	int p1 , p2 , p3 , p4 , a , b ;
while read p1 , p2 , p3 , p4 , a , b	while ( cin >> p1 >> p2 >> p3 >> p4 >> a >> b )
if p1 < = a or p2 < = a or p3 < = a or p4 < = a	if ( p1 <= a || p2 <= a || p3 <= a || p4 <= a )
print 0 and newline	cout << 0 << endl ;
proceed to next	continue ;
let the value of integer p = minn ( p1 , p2 , p3 , p4 )	int p = minn ( p1 , p2 , p3 , p4 ) ;
if p is greater than b	if ( p > b )
print b - a + 1 and newline	cout << b - a + 1 << endl ;
proceed to next	continue ;
print p - a and newline	cout << p - a << endl ;
a , b = integer , p = integer array of size 5	int p [ 5 ] , a , b ;
ans = integer = 0	int ans = 0 ;
read p [ 1 ] , p [ 2 ] , p [ 3 ] , p [ 4 ] , a , b	cin >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> p [ 4 ] >> a >> b ;
Min = integer = the lowest value between p [ 1 ] , p [ 2 ] , p [ 3 ] , p [ 4 ]	int Min = min ( min ( min ( p [ 1 ] , p [ 2 ] ) , p [ 3 ] ) , p [ 4 ] ) ;
if a < Min	if ( a < Min )
ans = ans + ( Min - a )	ans += ( Min - a ) ;
if b > = Min	if ( b >= Min )
print ans	cout << ans << endl ;
ans = b = a + 1	ans = b - a + 1 ;
print ans	cout << ans << endl ;
create constant double pi = 3 . 14159265358979323846	const double pi = 3.14159265358979323846 ;
create int array p of size 4	int p [ 4 ] ;
create integers a and b	int a , b ;
read p [ 0 ] , p [ 1 ] , p [ 2 ] , p [ 3 ] , a , and b	cin >> p [ 0 ] >> p [ 1 ] >> p [ 2 ] >> p [ 3 ] >> a >> b ;
let ints i , j , k , l , and m	int i , j , k , l , m ;
create integer ctr = 0	int ctr = 0 ;
make integer ans = 0	int ans = 0 ;
for i = a to b + 1 exclusive	for ( i = a ; i < b + 1 ; i ++ )
for j = 0 to 4 exclusive	for ( j = 0 ; j < 4 ; j ++ )
for k = 0 to 4 exclusive	for ( k = 0 ; k < 4 ; k ++ )
if k is equal to j , continue to next loop	if ( k == j ) continue ;
if l = 0 to 4 exclusive	for ( l = 0 ; ( l < 4 ) ; l ++ )
if i is equal to j or l is equal to k , continue to next loop iteration	if ( ( l == j ) || ( l == k ) ) continue ;
for m = 0 to 4 exclusive	for ( m = 0 ; m < 4 ; m ++ )
if m is 1 or m is j or m is k , continue loop	if ( ( m == l ) || ( m == j ) || ( m == k ) ) continue ;
if i is equal to ( ( ( i % p [ j ] ) % p [ k ] ) % p [ l ] ) % p [ m ] , increment ctr	if ( i == ( ( ( i % p [ j ] ) % p [ k ] ) % p [ l ] ) % p [ m ] ) ctr ++ ;
if ctr is greater than or equal to 7 , increment ans	if ( ctr >= 7 ) ans ++ ;
set ctr to 0	ctr = 0 ;
print ans	cout << ans << " \n " ;
arrA be integer array with 100005 elements	int arrA [ 100005 ] ;
arrB be integer array with 100005 elements	int arrB [ 100005 ] ;
nA , nB , k , m be integer	int nA , nB , k , m ;
read nA , nB	cin >> nA >> nB ;
read k , m	cin >> k >> m ;
for integer i = 0 to nA exclusive , read arrA [ i ]	for ( int i = 0 ; i < nA ; i ++ ) cin >> arrA [ i ] ;
for integer i = 0 to nA exclusive , read arrB [ i ]	for ( int i = 0 ; i < nB ; i ++ ) cin >> arrB [ i ] ;
if arrA [ k - 1 ] is less than arrB [ nB - m ]	if ( arrA [ k - 1 ] < arrB [ nB - m ] )
print YES and newline	cout << " YES " << endl ;
else	else
print NO and newline	cout << " NO " << endl ;
let n1 , n2 , k , m be integers	int n1 , n2 , k , m ;
read n1 , n2 , k , m	cin >> n1 >> n2 >> k >> m ;
decrease k by 1	k -- ;
decrease m by 1	m -- ;
v1 , v2 are ineger vectors	vector < int > v1 ( n1 ) , v2 ( n2 ) ;
for integer i = 1 to n1 inclusive , read v1 [ i ]	for ( int i = 0 ; i < n1 ; i ++ ) cin >> v1 [ i ] ;
for integer i = 1 to n2 inclusive , read v2 [ i ]	for ( int i = 0 ; i < n2 ; i ++ ) cin >> v2 [ i ] ;
sort v1 from begin to end	sort ( v1 . begin ( ) , v1 . end ( ) ) ;
sort v2 from begin to end	sort ( v2 . begin ( ) , v2 . end ( ) ) ;
if v1 [ k ] is less than v2 [ v2 . size ( ) - m - 1 ]	if ( v1 [ k ] < v2 [ v2 . size ( ) - m - 1 ] )
print YES and endline	cout << " YES " << endl ;
else	else
print NO and newline	cout << " NO " << endl ;
s = 100002	const int s = 1E5 + 2 ;
a and b = array of s int	int a [ s ] , b [ s ] ;
n1 , n2 = int	int n1 , n2 ;
read n1 , n2	cin >> n1 >> n2 ;
k , m = int	int k , m ;
read k , m	cin >> k >> m ;
for i = 0 to n1 exclusive read a [ i ]	for ( int i = 0 ; i < n1 ; i ++ ) cin >> a [ i ] ;
for i = 0 to n2 exclusive read b [ i ]	for ( int i = 0 ; i < n2 ; i ++ ) cin >> b [ i ] ;
if a [ k - 1 ] < b [ n2 - m ]	if ( a [ k - 1 ] < b [ n2 - m ] )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
long long integer as a , b , m , n	long long a , b , m , n ;
read a , b	cin >> a >> b ;
read m , n	cin >> m >> n ;
integer as array ar size a + 5 and array br with size of b + 5	int ar [ a + 5 ] , br [ b + 5 ] ;
for i = 0 to less than a do the following	for ( int i = 0 ; i < a ; i ++ ) { cin >> ar [ i ] ; }
for j = 0 to less than b do the following	for ( int j = 0 ; j < b ; j ++ ) { cin >> br [ j ] ; }
if ar [ m - 1 ] is less than br [ b - n ] then do the following	if ( ar [ m - 1 ] < br [ b - n ] )
output YES	cout << " YES\n " ;
else	else
output NO	cout << " NO\n " ;
a , b , n , k , c , p , i = int with c = 0 and p = 0 and i = 0	int a , b , n , k , c = 0 , p = 0 , i = 0 ;
read a then b then n then k	cin >> a >> b >> n >> k ;
A = int array of size a and B = int array of size b	int A [ a ] , B [ b ] ;
read a values into A	for ( i = 0 ; i < a ; i ++ ) { cin >> A [ i ] ; }
read b values into B	for ( i = 0 ; i < b ; i ++ ) { cin >> B [ i ] ; }
for j = b - 1 to b - 1 - k decrementing j	for ( int j = b - 1 ; j > b - 1 - k ; j -- )
if A [ n - 1 ] < B [ j ]	if ( A [ n - 1 ] < B [ j ] )
increment c	c ++ ;
else	else
goto jump	goto jump ;
goto label jump	jump :
if c is k	if ( c == k )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
na = int64_t	int64_t na ;
nb = int64_t	int64_t nb ;
k = int64_t	int64_t k ;
m = int64_t	int64_t m ;
i = 0	int64_t i = 0 ;
a = int64_t	int64_t a ;
read na	cin >> na ;
read nb	cin >> nb ;
read k	cin >> k ;
read m	cin >> m ;
an = array of na int64_t	int64_t an [ na ] ;
bn = array of nb int64_t	int64_t bn [ nb ] ;
while i < na	while ( i < na )
read a	cin >> a ;
an [ i ] = a	an [ i ] = a ;
increment i	i += 1 ;
end of while	;
i = 0	i = 0 ;
while i < nb	while ( i < nb )
read a	cin >> a ;
bn [ i ] = a	bn [ i ] = a ;
increment i	i += 1 ;
sort an	sort ( an , an + na ) ;
sort bn	sort ( bn , bn + nb ) ;
if an [ k - 1 ] < bn [ nb - m ]	if ( an [ k - 1 ] < bn [ nb - m ] )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
end if	;
a , b , k , m = int	int a , b , k , m ;
read a , b , k , m	cin >> a >> b >> k >> m ;
arr1 = array of a + 5 int , arr2 = array of b + 5 int	int arr1 [ a + 5 ] , arr2 [ b + 5 ] ;
for i = 0 to a exclusive read arr1 [ i ]	for ( int i = 0 ; i < a ; i ++ ) { cin >> arr1 [ i ] ; }
sort first a items of arr1	sort ( arr1 , arr1 + a ) ;
for i = 0 to b exclusive read arr2 [ i ]	for ( int i = 0 ; i < b ; i ++ ) { cin >> arr2 [ i ] ; }
sort first b items of arr2	sort ( arr2 , arr2 + b ) ;
if arr1 [ k - 1 ] < arr2 [ b - m ]	if ( arr1 [ k - 1 ] < arr2 [ b - m ] )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
let n , m , a , b be integers , arr = array of integers of length 100009 , brr = array of integers of length 100009	int n , m , a , b , arr [ 100009 ] , brr [ 100009 ] ;
read n , m , a , b	cin >> n >> m >> a >> b ;
for i = 1 to n inclusive , read arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }
for i = 1 to m inclusive , read brr [ i ]	for ( int i = 1 ; i <= m ; i ++ ) { cin >> brr [ i ] ; }
if arr [ a ] is less than brr [ m - b + 1 ]	if ( arr [ a ] < brr [ m - b + 1 ] )
print YES and newline	cout << " YES\n " ;
else do the following	else
print NO and newline	cout << " NO\n " ;
na , nb , ka , kb = int	int na , nb , ka , kb ;
read na , nb , ka , kb	cin >> na >> nb >> ka >> kb ;
a = vector of na int , b = vector of nb int	vector < int > a ( na ) , b ( nb ) ;
for i = 0 to na exclusive read a [ i ]	for ( int i = 0 ; i < na ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to nb exclusive read b [ i ]	for ( int i = 0 ; i < nb ; i ++ ) { cin >> b [ i ] ; }
k = 0	int k = 0 ;
for i = nb - 1 down to 0 inclusive	for ( int i = nb - 1 ; i >= 0 ; i -- )
if a [ ka - 1 ] < b [ i ]	if ( a [ ka - 1 ] < b [ i ] )
increment k	k ++ ;
else if k < kb and a [ ka - 1 ] > = b [ i ]	else if ( k < kb && a [ ka - 1 ] >= b [ i ] )
print NO	cout << " NO\n " ;
print YES	cout << " YES\n " ;
let a and b be integers	int a , b ;
read in a and b	cin >> a >> b ;
let n and m be integers	int n , m ;
read in n and m	cin >> n >> m ;
let mx and mn be integers	int mx , mn ;
iterate for a times	for ( int i = 0 ; i < a ; i ++ )
let x be an integer	int x ;
read in x	cin >> x ;
if i + 1 is equal to n , set mx to x	if ( i + 1 == n ) { mx = x ; }
iterate for b times	for ( int i = 0 ; i < b ; i ++ )
let x be an integer	int x ;
read in x	cin >> x ;
if i is equal to b - m , set mn to x	if ( i == b - m ) { mn = x ; }
if mx is less than mn	if ( mx < mn )
print YES	cout << " YES " << endl ;
or else	else
print NO	cout << " NO " << endl ;
let line1 , line2 , first , second , i , j be long integers	long long int line1 , line2 , first , second , i , j ;
read line1 , line2	cin >> line1 >> line2 ;
read first , second	cin >> first >> second ;
stud1 = array of integers of length line1 , stud2 = array of integers of length line2	long long int stud1 [ line1 ] , stud2 [ line2 ] ;
for i = 0 to line1 exclusive , read stud1 [ i ]	for ( i = 0 ; i < line1 ; i ++ ) { cin >> stud1 [ i ] ; }
for i = 0 to line2 exclusive , read stud2 [ i ]	for ( i = 0 ; i < line2 ; i ++ ) { cin >> stud2 [ i ] ; }
sort the values of stud1 and stud1 + line1	sort ( stud1 , stud1 + line1 ) ;
sort the values of stud2 and stud2 + line2	sort ( stud2 , stud2 + line2 ) ;
the integer value of mx = stud2 [ line2 - ( second ) ]	int mx = stud2 [ line2 - ( second ) ] ;
let tot , y be integers with tot = 0 , y = 0	int tot = 0 , y = 0 ;
for i = 0 to line1 exclusive	for ( i = 0 ; i < line1 ; i ++ )
if stud1 [ i ] is less than mx , increment tot by 1	if ( stud1 [ i ] < mx ) { ++ tot ; }
if tot equals first	if ( tot == first )
increment y by 1	++ y ;
stop	break ;
if stud1 [ i ] is greater than mx , stop	if ( stud1 [ i ] > mx ) { break ; }
if y is true	if ( y )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
declare integer vector a	vector < int > a ;
declare integer vector b	vector < int > b ;
declare integers na , nb , counta = 0 , countb = 0	int na , nb , counta = 0 , countb = 0 ;
read na , nb	cin >> na >> nb ;
declare integers k , m , A , B	int k , m , A , B ;
read k , m	cin >> k >> m ;
for i = 0 to na exclusive	for ( int i = 0 ; i < na ; i ++ )
read A	cin >> A ;
add A to end of a	a . push_back ( A ) ;
for i = 0 to nb exclusive	for ( int i = 0 ; i < nb ; i ++ )
read B	cin >> B ;
add B to end of b	b . push_back ( B ) ;
sort from beginning of a to end of a	sort ( a . begin ( ) , a . end ( ) ) ;
sort from reverse beginning of b to reverse end of b	sort ( b . rbegin ( ) , b . rend ( ) ) ;
if a [ k - 1 ] is less than b [ m - 1 ]	if ( a [ k - 1 ] < b [ m - 1 ] )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
declare strings n1 , n2 , k , m	int n1 , n2 , k , m ;
declare integers v1 , v2 , x	int v1 , v2 , x ;
read n1 , n2	cin >> n1 >> n2 ;
read k , m	cin >> k >> m ;
for i = 0 to n1 exclusive	for ( int i = 0 ; i < n1 ; i ++ )
read x	cin >> x ;
if i is k - 1 , let v1 be k	if ( i == k - 1 ) { v1 = x ; }
for i = 0 to n2 exclusive	for ( int i = 0 ; i < n2 ; i ++ )
read x	cin >> x ;
if i is n2 - m , let v2 be x	if ( i == n2 - m ) { v2 = x ; }
if v1 is less than v2	if ( v1 < v2 )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
let n1 , n2 be long integers	long long int n1 , n2 ;
a is a long integer array of size 100007	long long int a [ 100007 ] ;
b is a long integer array of size 100007	long long int b [ 100007 ] ;
let k , m be long integers	long long int k , m ;
read n1 , n2	cin >> n1 >> n2 ;
read k , m	cin >> k >> m ;
for long integer i = 0 to n1 - 1 , read a [ i ]	for ( long long int i = 0 ; i <= n1 - 1 ; i ++ ) { cin >> a [ i ] ; }
for long integer i = 0 to n2 - 1 , read b [ i ]	for ( long long int i = 0 ; i <= n2 - 1 ; i ++ ) { cin >> b [ i ] ; }
sort the values a , a + n1	sort ( a , a + n1 ) ;
sort the values b , b + n2 , greater < long long int > ( )	sort ( b , b + n2 , greater < long long int > ( ) ) ;
if a [ k - 1 ] is less than b [ m - 1 ]	if ( a [ k - 1 ] < b [ m - 1 ] )
print YES	cout << " YES "
newline	<< " \n " ;
else	else
print NO	cout << " NO "
newline	<< " \n " ;
let r1 , r2 be integer array of size 100001	int r1 [ 100001 ] , r2 [ 100001 ] ;
let a , b , c , d , e , f , g , h be integers	int a , b , c , d , e , f , g , h ;
let v be a vector of integers	vector < int > v ;
while read a , b	while ( cin >> a >> b )
read c , d	cin >> c >> d ;
for e = 1 to a inclusive , read r1 [ e ]	for ( e = 1 ; e <= a ; e ++ ) { cin >> r1 [ e ] ; }
f equals 0	f = 0 ;
for e = 1 to b inclusive	for ( e = 1 ; e <= b ; e ++ )
read r2 [ e ]	cin >> r2 [ e ] ;
if r2 [ e ] > r1 [ c ] , increase f by 1	if ( r2 [ e ] > r1 [ c ] ) { f ++ ; }
if f is greater than or equal to d	if ( f >= d )
print YES and newline	cout << " YES " << endl ;
else	else
print NO and newline	cout << " NO " << endl ;
a , b be integer arrays of size 100040	int a [ 100500 ] , b [ 100040 ] ;
let na , nb be integers	int na , nb ;
let x1 , x2 , y1 , y2 be integers	int x1 , x2 , y1 , y2 ;
let i , k , j , m be integers	int i , k , j , m ;
s is a 2d character array	char s [ 20000 ] [ 20 ] ;
read na , nb	cin >> na >> nb ;
read k , m	cin >> k >> m ;
for i = 0 to na exclusive , read a [ i ]	for ( i = 0 ; i < na ; i ++ ) cin >> a [ i ] ;
for j = 0 to nb exclusive , read b [ j ]	for ( j = 0 ; j < nb ; j ++ ) cin >> b [ j ] ;
sort from a to a + na	sort ( a , a + na ) ;
sort from b to b + nb	sort ( b , b + nb ) ;
for i = 0 to nb exclusive	for ( i = 0 ; i < nb ; i ++ )
if b [ i ] is greater than a [ k - 1 ] , stop	if ( b [ i ] > a [ k - 1 ] ) break ;
if i + m is less than or equal to nb	if ( i + m <= nb )
print YES and newline	cout << " YES " << endl ;
else	else
print NO and newline	cout << " NO " << endl ;
create integer vector of arr1 , arr2	vector < int > arr1 , arr2 ;
integer as a , b , k , m	int a , b , k , m ;
read a , b , k , m	cin >> a >> b >> k >> m ;
if k is greater than a or m is greater than b then do the following	if ( k > a || m > b )
output NO	cout << " NO " << endl ;
for i = 0 to less than a do the following	for ( int i = 0 ; i < a ; i ++ )
integer as inp	int inp ;
read inp	cin >> inp ;
add new element inp to end of vector arr1	arr1 . push_back ( inp ) ;
for i = 0 to less than b do the following	for ( int i = 0 ; i < b ; i ++ )
integer as inp	int inp ;
read inp	cin >> inp ;
add new element inp to end of vector arr2	arr2 . push_back ( inp ) ;
if arr1 [ k - 1 ] is less than arr2 [ b - m ] then do the following	if ( arr1 [ k - 1 ] < arr2 [ b - m ] )
output YES	cout << " YES " << endl ;
else	else
output NO	cout << " NO " << endl ;
declare constant integer MAX = 100001	const int MAX = 100001 ;
declare long long arrays An size MAX , Bn size MAX	long long An [ MAX ] , Bn [ MAX ] ;
declare integers n , m , a , b	int n , m , a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
for i = 1 to n inclusive , read An [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> An [ i ] ;
for i = 1 to m inclusive , read Bn [ i ]	for ( int i = 1 ; i <= m ; i ++ ) cin >> Bn [ i ] ;
sort from An + 1 to An + n + 1	sort ( An + 1 , An + n + 1 ) ;
sort from Bn + 1 to Bn + m + 1	sort ( Bn + 1 , Bn + m + 1 ) ;
if An [ a ] is less than Bn [ m - b + 1 ]	if ( An [ a ] < Bn [ m - b + 1 ] )
print " YES " and newline	cout << " YES " << endl ;
else	else
print " NO " , newline	cout << " NO " << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
k , m = int	int k , m ;
read k , m	cin >> k >> m ;
ar1 = array of a int	int ar1 [ a ] ;
ar2 = array of b int	int ar2 [ b ] ;
for i = 0 to a exclusive read ar1 [ i ]	for ( int i = 0 ; i < a ; i ++ ) { cin >> ar1 [ i ] ; }
for i = 0 to b exclusive read ar2 [ i ]	for ( int i = 0 ; i < b ; i ++ ) { cin >> ar2 [ i ] ; }
if ar1 [ k - 1 ] < ar2 [ b - m ] and k < = a and m < = b	if ( ar1 [ k - 1 ] < ar2 [ b - m ] && k <= a && m <= b )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
define integers a , b , c and d	int a , b , c , d ;
read user input to a and b	cin >> a >> b ;
if a is less than b	if ( a < b )
assign a to c	c = a ;
change the value of d to ( b - a ) / 2	d = ( b - a ) / 2 ;
print c , ' ' and d to the standard output	cout << c << '   ' << d << endl ;
else	else
change c to b	c = b ;
set the value of d to ( a - b ) / 2	d = ( a - b ) / 2 ;
print c , ' ' and d to the output	cout << c << '   ' << d << endl ;
a , b , c , d = int	int a , b , c , d ;
read a , b	cin >> a >> b ;
d = min ( a , b )	d = min ( a , b ) ;
c = max ( a , b ) - d	c = max ( a , b ) - d ;
if c is odd , change sign of c	if ( c % 2 ) c -= 1 ;
print d , space , c / 2	cout << d << "   " << c / 2 << endl ;
declare integers a = 0 , b = 0	int a = 0 , b = 0 ;
declare integer counter_moda = 0 , counter_utility = 0	int counter_moda = 0 , counter_utility = 0 ;
read a and b	cin >> a >> b ;
while a is greater than 0 and b is greater than 0	while ( a > 0 && b > 0 )
decrement a	a -- ;
decrement b	b -- ;
increment counter_moda	counter_moda ++ ;
while a is greater than or equal to 2 or b is greater than or equal to 2	while ( a >= 2 || b >= 2 )
increment counter_utility	counter_utility ++ ;
if a is greater than b	if ( a > b )
decrement a by 2	a -= 2 ;
else	else
decrement b by 2	b -= 2 ;
print counter_moda , " " , counter_utility , newline	cout << counter_moda << "   " << counter_utility << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
if a > b swap a and b	if ( a > b ) swap ( a , b ) ;
print a , space , ( b - a ) / 2	cout << a << "   " << ( b - a ) / 2 << endl ;
declare integers a , b	int a , b ;
read a , b	cin >> a >> b ;
declare m = minimum of a and b as integer	int m = min ( a , b ) ;
print m , ' '	cout << m << '   ' ;
decrement a by m	a -= m ;
decrement b by m	b -= m ;
print a / 2 + b / 2 , newline	cout << a / 2 + b / 2 << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
the integer value of r1 = minimum of a and b	int r1 = min ( a , b ) ;
the integer value of r2 = ( max ( a , b ) - min ( a , b ) ) / 2	int r2 = ( max ( a , b ) - min ( a , b ) ) / 2 ;
print r1 and space and r2 and newline	cout << r1 << "   " << r2 << endl ;
declare integers a , b	int a , b ;
read a , b	cin >> a >> b ;
declare integer MIN = minimum of a and b	int MIN = min ( a , b ) ;
declare integer MAX = maximum of a and b	int MAX = max ( a , b ) ;
print MIN and ' ' and ( MAX - MIN ) / 2 and newline	cout << MIN << '   ' << ( MAX - MIN ) / 2 << endl ;
let a , b , ans be integers with ans = 0	int a , b , ans = 0 ;
read a , b	cin >> a >> b ;
ans is equal to mimimum of a , b	ans = min ( a , b ) ;
print ans and space	cout << ans << "   " ;
ans equals max ( a , b ) - ans ) > > 1	ans = ( ( max ( a , b ) - ans ) >> 1 ) ;
print ans and endline	cout << ans << endl ;
a , b = int	int a , b ;
while read a , b print min ( a , b ) , space , ( max ( a - b ) - min ( a , b ) ) / 2	while ( cin >> a >> b ) { cout << min ( a , b ) << "   " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ; }
declare long long n , a , b , res	long long n , a , b , res ;
declare string s	string s ;
declare long long array arr size 100005	long long arr [ 100005 ] ;
declare long long array arr1 size 100005	long long arr1 [ 100005 ] ;
read a , b	cin >> a >> b ;
print minimum of ( a and b ) , " " , absolute value of ( a - b ) / 2	cout << min ( a , b ) << "   " << abs ( a - b ) / 2 ;
print " \ n "	cout << " \n " ;
declare integer variables a , b and x	int a , b , x ;
read variables a and b from the input	cin >> a >> b ;
assign the new value = min of a and b to x	x = min ( a , b ) ;
print x and " "	cout << x << "   " ;
decrease a by x	a -= x ;
change b to b - x	b -= x ;
print b / 2 if a = 0 , or a / 2 if a is not 0	a == 0 ? cout << b / 2 : cout << a / 2 ;
print " \ n "	cout << " \n " ;
declare integers n , m	int n , m ;
read n and m	cin >> n >> m ;
declare integer a = minimum of n and m	int a = min ( n , m ) ;
declare integer b = ( maximum of ( n and m ) - a ) / 2	int b = ( max ( n , m ) - a ) / 2 ;
print a and " " and b and newline	cout << a << "   " << b << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
ds , ss , k = int with ds = 0 , ss = 0 , k = 0	int ds = 0 , ss = 0 , k = 0 ;
if ( a > b )	if ( a > b )
ds = b	ds = b ;
k = a - b	k = a - b ;
ss = k / 2	ss = k / 2 ;
else if ( a < b )	else if ( a < b )
ds = a	ds = a ;
k = b - a	k = b - a ;
ss = k / 2	ss = k / 2 ;
else	else
ds = a	ds = a ;
ss = 0	ss = 0 ;
print ds , " " , ss	cout << ds << "   " << ss << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
if a equals b	if ( a == b )
print a and space	cout << a << "   "
print 0 and newline	<< " 0 " << endl ;
else if a is greater than b	else if ( a > b )
print b and space and ( a - b ) / 2 and newline	cout << b << "   " << ( a - b ) / 2 << endl ;
else do the following	else
print a and space and ( b - a ) / 2 and newline	cout << a << "   " << ( b - a ) / 2 << endl ;
declare integer variables a and b	int a , b ;
read input to a and b	cin >> a >> b ;
prazn is a new integer with value min of a and b	int prazn = min ( a , b ) ;
create new integer podin = ( ( max of a and b ) - prazn ) / 2	int podin = ( int ) ( ( max ( a , b ) - prazn ) / 2 ) ;
print prazn , " " and podin to the standard output	cout << prazn << "   " << podin << endl ;
declare ints r and b	int r , b ;
read r and b from the user input	cin >> r >> b ;
if r is less than b	if ( r < b )
print r , " " and ( b - r ) / 2	cout << r << "   " << ( b - r ) / 2 << endl ;
else	else
print b , " " and ( r - b ) / 2	cout << b << "   " << ( r - b ) / 2 << endl ;
let n , m , i and k be integers	int n , m , i , k ;
while reading in n and m	while ( cin >> n >> m )
if n is less than m set i to n , otherwise set i to m	i = n < m ? n : m ;
set k to abs ( n - m ) / 2	k = abs ( n - m ) / 2 ;
print i , ' ' , and k	cout << i << '   ' << k << endl ;
let a , b , count1 , count2 be integers with count1 = 0 , count2 = 0	int a , b , count1 = 0 , count2 = 0 ;
read a , b	cin >> a >> b ;
for integer i = 0 , the condition is always true , increment i by 1	for ( int i = 0 ; ; i ++ )
if ( a equals 0 and b equals 1 ) or ( a equals 1 and b equals 0 ) or ( a equals 0 and b equals 0 ) , stop	if ( ( a == 0 && b == 1 ) || ( a == 1 && b == 0 ) || ( a == 0 && b == 0 ) ) break ;
decrement a by 1	-- a ;
decrement b by 1	-- b ;
increment count1 by 1	++ count1 ;
if a equals 0 and b is greater than 1	if ( a == 0 && b > 1 )
while b is not equal to 0	while ( b != 0 )
decrement b by 2	b = b - 2 ;
increment count2 by 1	++ count2 ;
if b is less than 0 or b equals 1 , stop	if ( b < 0 || b == 1 ) break ;
stop	break ;
if a is greater than 1 and b equals 0	if ( a > 1 && b == 0 )
while a is not equal to 0	while ( a != 0 )
decrement a by 2	a = a - 2 ;
increment count2 by 1	++ count2 ;
if a is less than 0 or a equals 1 , stop	if ( a < 0 || a == 1 ) break ;
stop	break ;
print count1 and space and count2 and newline	cout << count1 << "   " << count2 << endl ;
let n , m be integers	int n , m ;
read n and m	cin >> n >> m ;
print min ( n , m ) and space and ( max ( n , m ) - min ( n , m ) ) / 2 and newline	cout << min ( n , m ) << "   " << ( max ( n , m ) - min ( n , m ) ) / 2 << endl ;
r , b = int	int r , b ;
p , q = int	int p , q ;
read r , b	cin >> r >> b ;
p = min ( r , b )	p = min ( r , b ) ;
q = abs ( r - b ) / 2	q = abs ( r - b ) / 2 ;
print p , space , q	cout << p << "   " << q << " \n " ;
function prime with int argument n that returns bool	bool prime ( int n )
declare integer c with value 0	int c = 0 ;
in a for loop , change i from 1 to n exclusive incrementing i	for ( int i = 1 ; i < n ; i ++ )
increment c if n modulo i is 0	if ( n % i == 0 ) c ++ ;
if c is equal to 1	if ( c == 1 )
return true	return true ;
else	else
return false	return false ;
create ints a , b , a2 , b2 , a1 and b1 with a1 and b1 = 0	int a , b , a2 , b2 , a1 = 0 , b1 = 0 ;
read standard input to a and b	cin >> a >> b ;
if a is greater than b	if ( a > b )
set a2 to a	a2 = a ;
for i = 0 to a2 exclusive	for ( int i = 0 ; i < a2 ; i ++ )
if b ! = 0	if ( b != 0 )
increment a1 by one	a1 ++ ;
decrement b	b -- ;
decrement a by one	a -- ;
if b is equal to 0 , set the value of b1 to a / 2	if ( b == 0 ) { b1 = a / 2 ; }
else if a is less than b	else if ( a < b )
change b2 to b	b2 = b ;
for i from 0 to b2 exclusive incrementing i	for ( int i = 0 ; i < b2 ; i ++ )
if a ! = 0	if ( a != 0 )
increment a1 by one	a1 ++ ;
decrement b	b -- ;
decrement a	a -- ;
if a is equal to 0 , set the value of b1 to b / 2	if ( a == 0 ) { b1 = b / 2 ; }
else	else
set a1 to ( a + b ) / 2	a1 = ( a + b ) / 2 ;
print a1 , " " and b1 to the standard output	cout << a1 << "   " << b1 << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
mn = min ( a , b ) , mx = max ( a , b )	int mn = min ( a , b ) , mx = max ( a , b ) ;
print mn , space , ( mx - mn ) / 2	cout << mn << "   " << ( mx - mn ) / 2 << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
print min ( a , b ) and space and ( max ( a , b ) - min ( a , b ) ) / 2 and newline	cout << min ( a , b ) << "   " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ;
INF = 3f3f3f3f in exadecimal	const int INF = 0x7FFFFFFF ;
mod = 1000000007	const int MOD = 1e9 + 7 ;
EPS = 0 . 0000000001	const double EPS = 1e-10 ;
PI = 2 * acos ( 0 )	const double PI = 2 * acos ( 0.0 ) ;
maxn = 101666	const int maxn = 1e5 + 1666 ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
c = min ( a , b )	int c = min ( a , b ) ;
print c , space	cout << c << "   " ;
subtract c from a and from b	a -= c , b -= c ;
if a is 0	if ( a == 0 )
print b / 2	cout << b / 2 << endl ;
else	else
print a / 2	cout << a / 2 << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
ans1 and ans2 = int	int ans1 , ans2 ;
ans1 = min ( a , b )	ans1 = min ( a , b ) ;
ans2 = max ( a , b )	ans2 = max ( a , b ) ;
subtract ans1 from ans2	ans2 = ans2 - ans1 ;
divide ans2 by 2	ans2 = ans2 / 2 ;
print ans1 , space , ans2	cout << ans1 << "   " << ans2 << endl ;
declare integers a , b	int a , b ;
while read a , b	while ( cin >> a >> b )
declare integer ans1 = minimum of a and b	int ans1 = min ( a , b ) ;
declare integer k = maximum of a and b	int k = max ( a , b ) ;
declare integer ans2 = ( k - ans1 ) / 2	int ans2 = ( k - ans1 ) / 2 ;
print ans1 and " " ans2 and newline	cout << ans1 << "   " << ans2 << endl ;
declare integers a , b , x , y , c = 0	int a , b , x , y , c = 0 ;
read a , b	cin >> a >> b ;
let x be absolute value of ( a - b )	x = abs ( a - b ) ;
print minimum of ( a and b ) , " " , x / 2 , newline	cout << min ( a , b ) << "   " << x / 2 << endl ;
declare integers a , b	int a , b ;
read a , b	cin >> a >> b ;
print minimum of a and b , " " , ( maximum of ( a and b ) - minimum of ( a and b ) ) / 2 , newline	cout << min ( a , b ) << "   " << ( max ( a , b ) - min ( a , b ) ) / 2 << endl ;
declare integer dx = { 1 , 0 , - 1 , 0 }	int dx [ ] = { 1 , 0 , - 1 , 0 } ;
declare integer dy = { 0 , - 1 , 0 , 1 }	int dy [ ] = { 0 , - 1 , 0 , 1 } ;
declare long longs a , b	long long a , b ;
read a , b	cin >> a >> b ;
declare long longs Min , s	long long Min , s ;
if a is greater than b	if ( a > b )
let Min be minimum of a and b	Min = min ( a , b ) ;
let s be ( a - Min ) / 2	s = ( a - Min ) / 2 ;
print Min and " " and s and newline	cout << Min << "   " << s << endl ;
else	else
let Min be minimum of a and b	Min = min ( a , b ) ;
let s be ( b - Min ) / 2	s = ( b - Min ) / 2 ;
print Min and " " and s and newline	cout << Min << "   " << s << endl ;
a , b = int	int a , b ;
read a then b	cin >> a >> b ;
if a < b swap a and b	if ( a < b ) { swap ( a , b ) ; }
print b and a - b	cout << b << "   " << ( a - b ) / 2 << endl ;
a , b , max , min , ans be integers	int a , b , max , min , ans ;
read a , b	cin >> a >> b ;
if a is greater than b	if ( a > b )
max equals a	max = a ;
min equals b	min = b ;
else	else
max equals b	max = b ;
min equals a	min = a ;
ans equals ( max - min ) / 2	ans = ( max - min ) / 2 ;
print min space ans and endline	cout << min << "   " << ans << endl ;
create long long ints n , m , a and b	long long int n , m , a , b ;
read n , m , a and b	cin >> n >> m >> a >> b ;
declare long long int variable _s = 0	long long int _s = 0 ;
if n % m is not 0	if ( n % m != 0 )
create long long int x = n / m * m + m	long long int x = ( long long int ) n / m * m + m ;
declare long long int variable y = x - m	long long int y = x - m ;
change _s to min of ( x - n ) * a and ( n - y ) * b	_s = min ( ( x - n ) * a , ( n - y ) * b ) ;
print _s and " \ n "	cout << _s << " \n " ;
n , m , a , b = long long	long long n , m , a , b ;
read n then m then a then b	cin >> n >> m >> a >> b ;
if n is a multiple of m	if ( n % m == 0 )
print 0	cout << 0 << endl ;
else if n is greater than m	else if ( n > m )
res = long long	long long res ;
if n / m equals 1	if ( n / m == 1 )
set res to 2	res = 2 ;
else	else
set res to n / m + 1	res = n / m + 1 ;
print min of ( n - n / m * m ) * b and ( res * m - n ) * a	cout << min ( ( n - n / m * m ) * b , ( res * m - n ) * a ) << endl ;
else	else
print min of n * b and ( m - n ) * a	cout << min ( n * b , ( m - n ) * a ) << endl ;
create long longs a , b , n , m and ans	long long a , b , n , m , ans ;
read n , m , a and b	cin >> n >> m >> a >> b ;
if n % m is 0	if ( n % m == 0 )
assign 0 to ans	ans = 0 ;
else if n is less than m	else if ( n < m )
assign min ( n * b , ( m - n ) * a ) to ans	ans = min ( n * b , ( m - n ) * a ) ;
else	else
declare long longs cnt1 and cnt2	long long cnt1 , cnt2 ;
set cnt1 to n modulo m	cnt1 = n % m ;
set cnt2 to n / m + 1	cnt2 = n / m + 1 ;
assign min ( ( cnt2 * m - n ) * a , cnt1 * b ) to ans	ans = min ( ( cnt2 * m - n ) * a , cnt1 * b ) ;
print ans	cout << ans << endl ;
S , T = string	string S , T ;
M , A , B , sum , x , y , K , ans , val , L , a = long long integer	long long N , M , A , B , sum , x , y , K , ans , val , L , a ;
create character variable C	char C ;
read N , M , A , B	cin >> N >> M >> A >> B ;
set x to ( ( N - 1 ) / M + 1 ) * M	x = ( ( N - 1 ) / M + 1 ) * M ;
set y to N / M * M	y = N / M * M ;
output min ( ( x - N ) * A , ( N - y ) * B )	cout << min ( ( x - N ) * A , ( N - y ) * B ) << ' \n ' ;
lim = const int with lim = 2e5	int const lim = 2e5 ;
inp = int array of size lim + 3	int inp [ lim + 3 ] ;
n , m , a , b = long long	long long n , m , a , b ;
read n then m then a then b	cin >> n >> m >> a >> b ;
ans = long long with ans = min of ( n mod m ) * b and ( m - ( n mod m ) ) * a	long long ans = min ( ( n % m ) * b , ( m - ( n % m ) ) * a ) ;
print ans	cout << ans << endl ;
declare long longs n , m , a and b	long long n , m , a , b ;
read n , m , a and b and loop further	while ( cin >> n >> m >> a >> b )
declare long long tmp = n / m	long long tmp = n / m ;
declare long long ans = 1e15	long long ans = 1e15 ;
set ans to min of ans and ( n - tmp * m ) * b	ans = min ( ans , ( n - tmp * m ) * b ) ;
set ans to min of ans and ( tmp + 1 ) * m - n ) * a	ans = min ( ans , ( ( tmp + 1 ) * m - n ) * a ) ;
print ans	cout << ans << endl ;
n , m = long long integers	long long n , m ;
integers = a , b	int a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
set long long x to ( n - n / m * m ) * b , y = ( ( n / m + 1 ) * m - n ) * a	long long x = ( n - n / m * m ) * b , y = ( ( n / m + 1 ) * m - n ) * a ;
if x is greater than y then do	if ( x > y )
output y	cout << y << endl ;
else	else
output x	cout << x << endl ;
declare const double pi = acos ( - 1 )	const double pi = acos ( - 1 ) ;
declare const double EPS = 1e - 6	const double EPS = 1e-6 ;
declare const int INF = 1e9 + 40	const int INF = 1e9 + 40 ;
create const long long INF64 = 1e18 + 40	const long long INF64 = 1e18 + 40 ;
create const double INFd = 1e9 + 40 . 0	const double INFd = 1e9 + 40.0 ;
declare const long long MOD = ( int ) 1e18 + 7	const long long MOD = ( int ) 1e18 + 7 ;
declare const long long MODf = 998244353	const long long MODf = 998244353 ;
declare const int N = 1000 * 10 + 15	const int N = 1000 * 10 + 15 ;
integer function solve	int solve ( )
declare long longs n , m , a and b	long long n , m , a , b ;
read n , m , a and b	cin >> n >> m >> a >> b ;
print min of n % m * b and ( m - n % m ) * a ; print ' \ n '	cout << min ( n % m * b , ( m - n % m ) * a ) << ' \n ' ;
call function solve	solve ( ) ;
define integers n , m , a , b	long long int n , m , a , b ;
define ints dem , bui , and tm	long long int dem , bui , tm ;
read n , m , a , and b	cin >> n >> m >> a >> b ;
set tm to n / m	tm = n / m ;
assign ( n - tm m ) b to dem	dem = ( n - ( tm * m ) ) * b ;
set bui to ( ( tm + 1 ) m - n ) a	bui = ( ( tm + 1 ) * m - n ) * a ;
print min ( dem , bui ) and a newline	cout << min ( dem , bui ) << endl ;
m , n , a , b = integers	long long m , n , a , b ;
Read m , n , a , b	cin >> n >> m >> a >> b ;
if n modulo m is 0	if ( n % m == 0 )
print 0 and a new line	cout << 0 << ' \n ' ;
else do the following	else
print minimum value of ( m * ( n / m + 1 ) - n ) * a and n % m * b and a new line	cout << min ( ( ( m * ( n / m + 1 ) ) - n ) * a , n % m * b ) << ' \n ' ;
i , j , k , m , n , t , a , b = integers	long long int i , j , k , m , n , t , a , b ;
Read n , m , a , b	cin >> n >> m >> a >> b ;
if n modulo m is 0	if ( n % m == 0 )
print 0 and a new line	cout << 0 << endl ;
set k to n / m	k = n / m ;
set i to n - k * m	i = n - k * m ;
set j to ( k + 1 ) * m - n	j = ( k + 1 ) * m - n ;
print minimum value of a * j and b * i and a new line	cout << min ( a * j , b * i ) << endl ;
create long long int n , m a and b	long long int n , m , a , b ;
print n , m , a and b	cin >> n >> m >> a >> b ;
let sum , min , ans be long long int	long long int sum , min , ans ;
if n mod m = 0	if ( n % m == 0 )
set min = 0	min = 0 ;
else	else
sum = a * ( ( ( n / m + 1 ) * m ) - n )	sum = a * ( ( ( n / m + 1 ) * m ) - n ) ;
assign sum to min	min = sum ;
set ans = b * ( n - ( ( n / m ) * m ) )	ans = b * ( n - ( ( n / m ) * m ) ) ;
if ans less than min , min = ans	if ( ans < min ) min = ans ;
print min	cout << min << endl ;
create constant long long mod with mod = 1e9 + 7	const long long mod = 1e9 + 7 ;
create constant integer MAX with MAX = 1e6 + 7	const int MAX = 1e6 + 7 ;
create long longs n , d , a , b	long long n , d , a , b ;
read n read d read a read b	cin >> n >> d >> a >> b ;
create long long ans with ans = ( n % d ) * b	long long ans = ( n % d ) * b ;
create long long r with r = ( n / d + 1 ) * d	long long r = ( n / d + 1 ) * d ;
set ans to minimum of ( ans and ( r - n ) * a )	ans = min ( ans , ( r - n ) * a ) ;
print ans print " \ n "	cout << ans << " \n " ;
n , m , a , b = long long integers	long long n , m , a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
output min ( b * ( n modulo m ) , a * ( ( ( n / m ) + 1 ) * m - n ) )	cout << min ( b * ( n % m ) , a * ( ( ( n / m ) + 1 ) * m - n ) ) << endl ;
create long longs n , m , a , b	long long n , m , a , b ;
while read n read m read a read b , print minimum of ( ( m - n % m ) * a and n % m * b ) print newline	while ( cin >> n >> m >> a >> b ) { cout << min ( ( m - n % m ) * a , n % m * b ) << endl ; }
declare long long variables n and k	long long n , k ;
create ints a and b	int a , b ;
read n , k , a and b	cin >> n >> k >> a >> b ;
if n % k is 0	if ( n % k == 0 )
print 0	cout << 0 << endl ;
else	else
declare long long sum1 = n % k * b	long long sum1 = n % k * b ;
declare long long variable sum2 = ( k - n % k ) * a	long long sum2 = ( k - n % k ) * a ;
print min of sum1 and sum2	cout << min ( sum1 , sum2 ) << endl ;
n , m , a , b = long long integers	long long n , m , a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
if n modulo m is 0 then do	if ( n % m == 0 )
output 0	cout << 0 << endl ;
else	else
set long long tmp to n / m	long long tmp = n / m ;
output min ( ( n - tmp * m ) * b , ( ( tmp + 1 ) * m - n ) * a )	cout << min ( ( n - tmp * m ) * b , ( ( tmp + 1 ) * m - n ) * a ) << endl ;
n , m , a , b , sum1 , sum2 = integers	long long n , m , a , b , sum1 , sum2 ;
Read n , m , a , b	cin >> n >> m >> a >> b ;
if ( n modulo m is 0	if ( ( n % m == 0 ) )
print 0 and a new line	cout << 0 << endl ;
set sum1 to ( ( n / m + 1 ) * m - n ) * a	sum1 = ( ( n / m + 1 ) * m - n ) * a ;
set sum2 to ( n - ( n / m ) * m ) * b	sum2 = ( n - ( n / m ) * m ) * b ;
if sum1 is greater than sum2	if ( sum1 > sum2 )
print sum2 and a new line	cout << sum2 << endl ;
else do the following	else
print sum1 and a new line	cout << sum1 << endl ;
n , m = long long	long long n , m ;
a , b = int	int a , b ;
read n then m then a then b	cin >> n >> m >> a >> b ;
plus , minus = long long with plus = 0 and minus = 0	long long plus = 0 , minus = 0 ;
mod = long long with mod = n mod m	long long mod = n % m ;
div = long long with div = n / m	long long div = n / m ;
if n is not a multiple of m	if ( n % m != 0 )
if n is less than m	if ( n < m )
set plus to m - n	plus = m - n ;
set minus to n	minus = n ;
else	else
set plus to absolute of n - ( ( div * m ) + m )	plus = abs ( n - ( ( div * m ) + m ) ) ;
set minus to mod	minus = mod ;
else	else
print 0	cout << 0 << endl ;
print min of plus * a and minus * b	cout << min ( plus * a , minus * b ) << endl ;
n , m , a , b , r = long long int	long long int n , m , a , b , r ;
read n , m , a , b	cin >> n >> m >> a >> b ;
r = n modulo m	r = n % m ;
print min of r * b and ( m - r ) * a )	cout << ( min ( r * b , ( m - r ) * a ) ) << ' \n ' ;
n , m , a , b , x = integers	long long n , m , a , b , x ;
Read n , m , a , b	cin >> n >> m >> a >> b ;
sum , sum2 = integers , both set to 0	long long sum1 = 0 , sum2 = 0 ;
if n is greater than or equal to m	if ( n >= m )
if n modulo m is 0	if ( n % m == 0 )
print 0 and a new line	cout << 0 << endl ;
set x to n modulo m	x = n % m ;
set sum1 to sum1 + b * x	sum1 += b * x ;
set sum2 to sum2 + a * ( m - x )	sum2 += a * ( m - x ) ;
print minimum value of sum1 and sum2 and a new line	cout << min ( sum1 , sum2 ) << endl ;
create long longs n , m , a , b	long long n , m , a , b ;
read n read m read a read b	cin >> n >> m >> a >> b ;
create long longs resa , resb	long long resa , resb ;
create long long mod with mod = n % m	long long mod = n % m ;
set resb to mod * b	resb = mod * b ;
if n is greater than or equal to m	if ( n >= m )
set resa to ( round up ( double casted ( n ) / m ) * m - n ) * a	resa = ( ceil ( double ( n ) / m ) * m - n ) * a ;
else	else
set resa to ( m - n ) * a	resa = ( m - n ) * a ;
print minimum of resa and resb print newline	cout << min ( resa , resb ) << endl ;
create constant integer INF with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create constant double PI with PI = acosign of - 1 . 0	const double PI = acos ( - 1.0 ) ;
create long longs n , m , a , b	long long n , m , a , b ;
read n read m read a read b	cin >> n >> m >> a >> b ;
create long long res with res = minimum of ( ( m - ( n % m ) ) * a and ( n % m ) * b )	long long res = min ( ( m - ( n % m ) ) * a , ( n % m ) * b ) ;
print res print newline	cout << res << endl ;
n , m , a , b num = long long with num having value of 0	long long n , m , a , b , num = 0 ;
read n , m , a and b	cin >> n >> m >> a >> b ;
if n mod m equals 0	if ( n % m == 0 )
set num to 0	num = 0 ;
else if n is less than m	else if ( n < m )
set num to the minimum of ( a * ( m - n ) ) and n * b	num = min ( a * ( m - n ) , n * b ) ;
else	else
y , z = long long with y value of n mod m and z value of m minus n mod m	long long y = n % m , z = m - n % m ;
set num to the minimum of y * b and z * a	num = min ( y * b , z * a ) ;
print num	cout << num << endl ;
n , m , a , b = integers	long long n , m , a , b ;
Read n , m , a , b	cin >> n >> m >> a >> b ;
print minimum value of ( m - n % m ) * a and n % m * b and a new line	cout << min ( ( m - n % m ) * a , n % m * b ) << endl ;
declare long longs n and m	long long n , m ;
declare integers a and b	int a , b ;
read from the input to n , m , a and b	cin >> n >> m >> a >> b ;
print min of n % m * b and ( m - n % m ) * a	cout << min ( n % m * b , ( m - n % m ) * a ) << endl ;
let n , m , a , b = long long	long long n , m , a , b ;
whilte reading new values for n , m , a , and b , print min ( ( m - n modulo m ) * a , n modulo m * b )	while ( cin >> n >> m >> a >> b ) { cout << min ( ( m - n % m ) * a , n % m * b ) << endl ; }
n , m , a , b = long long	long long n , m , a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
ans = long long	long long ans ;
if n > m	if ( n > m )
ans = min of ( m - n modulo m ) modulo m * a and ( n % m ) * b	ans = min ( ( ( m - n % m ) % m ) * a , ( n % m ) * b ) ;
else	else
if n modulo m is 0	if ( n % m == 0 )
ans = 0	ans = 0 ;
else	else
ans = ( n + ( m - n modulo m ) modulo m ) / m	ans = ( n + ( m - n % m ) % m ) / m ;
ans = min of ( ans * m - n ) * a and ( n - ( n / m ) * m ) * b	ans = min ( ( ans * m - n ) * a , ( n - ( n / m ) * m ) * b ) ;
print ans	cout << ans << endl ;
n , m , a , b = long long	long long n , m , a , b ;
read n then m then a then b	cin >> n >> m >> a >> b ;
s = long long with s = ( n + m - 1 ) / m	long long s = ( n + m - 1 ) / m ;
t = long long with t = n / m	long long t = n / m ;
print min of ( s * m - n ) * a and ( n - t * m ) * b	cout << min ( ( s * m - n ) * a , ( n - t * m ) * b ) << endl ;
n , m , a , b , x , y = integers	long long int n , m , a , b , x , y ;
Read n , m , a , b	cin >> n >> m >> a >> b ;
set x to n modulo m	x = n % m ;
set y to m - x	y = m - x ;
set x to x * b	x = x * b ;
set y to y * a	y = y * a ;
print minimum value of x and y and a new line	cout << min ( x , y ) << " \n " ;
let n , m , a and b be long long	long long n , m , a , b ;
read n , m , a and b	cin >> n >> m >> a >> b ;
set k = n / m	long long k = n / m ;
assign ( n - k * m ) * b to t1	long long t1 = ( n - k * m ) * b ;
t2 = ( m * ( k + 1 ) - n ) * a	long long t2 = ( m * ( k + 1 ) - n ) * a ;
if t1 greater than t2	if ( t1 > t2 )
print t2	cout << t2 << endl ;
else	else
print t1 and a newline	cout << t1 << endl ;
a , b , c = int	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
x , y , z = int	int x , y , z ;
z = sqrt ( ( b * c ) / a )	z = sqrt ( ( b * c ) / a ) ;
y = c / z	y = c / z ;
x = b / z	x = b / z ;
print 4 * ( x + y + z )	cout << 4 * ( x + y + z ) << endl ;
di = int vector array of size 3	vector < int > di [ 3 ] ;
linha0 = int vector array of size 10010	vector < int > linha0 [ 10010 ] ;
linha1 = int vector array of size 10010	vector < int > linha1 [ 10010 ] ;
linha2 = int vector array of size 10010	vector < int > linha2 [ 10010 ] ;
in function multiplos taking int a , int b , int h	void multiplos ( int a , int b , int h )
menor = int with menor = a	int menor = a ;
if a > b set b to menor	if ( a > b ) b = menor ;
for i = 1 to menor inclusive	for ( int i = 1 ; i <= menor ; i ++ )
if a and b are a multiple of i append i to di [ h ]	if ( a % i == 0 && b % i == 0 ) { di [ h ] . push_back ( i ) ; }
a , b , c , s = int	int a , b , c , s ;
read a then b then c	cin >> a >> b >> c ;
call multiplos on a , b , 0	multiplos ( a , b , 0 ) ;
call multiplos on a , c , 1	multiplos ( a , c , 1 ) ;
call multiplos on b , c , 2	multiplos ( b , c , 2 ) ;
for i = 0 to size of di [ 0 ]	for ( int i = 0 ; i < ( int ) di [ 0 ] . size ( ) ; i ++ )
for j = 0 to size of di [ 1 ]	for ( int j = 0 ; j < ( int ) di [ 1 ] . size ( ) ; j ++ )
if di [ 0 ] [ i ] * di [ 1 ] [ j ] is a	if ( di [ 0 ] [ i ] * di [ 1 ] [ j ] == a )
for u = 0 to size of di [ 2 ]	for ( int u = 0 ; u < ( int ) di [ 2 ] . size ( ) ; u ++ )
if d [ 0 ] [ i ] * di [ 2 ] [ u ] is b	if ( di [ 0 ] [ i ] * di [ 2 ] [ u ] == b )
if di [ 1 ] [ j ] * di [ 2 ] [ u ] is c set s to di [ 2 ] [ u ] + di [ 1 ] [ j ] + di [ 0 ] [ i ]	if ( di [ 1 ] [ j ] * di [ 2 ] [ u ] == c ) { s = di [ 2 ] [ u ] + di [ 1 ] [ j ] + di [ 0 ] [ i ] ; }
total = int with total = 4 * s	int total = 4 * s ;
print total	cout << total << endl ;
create ints A1 , A2 and A3	int A1 , A2 , A3 ;
read standard input to A1 , A2 and A3	cin >> A1 >> A2 >> A3 ;
declare integer variable with name l = square root of ( A1 * A2 / A3 )	int l = ( int ) sqrt ( A1 * A2 / A3 ) ;
declare integer variable b with value = square root of ( A3 * A1 / A2 )	int b = ( int ) sqrt ( A3 * A1 / A2 ) ;
create new integer called h = square root of ( A3 * A2 / A1 )	int h = ( int ) sqrt ( A3 * A2 / A1 ) ;
print 4 * ( l + b + h ) and " \ n "	cout << 4 * ( l + b + h ) << " \n " ;
create ints ab , bc , ca , a , b , c and s	int ab , bc , ca , a , b , c , s ;
read user input to ab , bc and ca	cin >> ab >> bc >> ca ;
assign square root of ( ( ab * ca ) / bc ) to a	a = sqrt ( ( ab * ca ) / bc ) ;
change b to the square root of ( ( bc * ab ) / ca )	b = sqrt ( ( bc * ab ) / ca ) ;
set c to the square root of ( ( ca * bc ) / ab )	c = sqrt ( ( ca * bc ) / ab ) ;
assign 4 * ( a + b + c ) to s	s = 4 * ( a + b + c ) ;
print s	cout << s << endl ;
create new long longs a , b and c	long long a , b , c ;
read from the input to a , b and c	cin >> a >> b >> c ;
create long long variable with name z with value = sqrt ( ( b * c ) / a )	long long z = sqrt ( ( b * c ) / a ) ;
create new long long x = c / z	long long x = c / z ;
declare long long y = b / z	long long y = b / z ;
print x * 4 + y * 4 + z * 4 and ' \ n '	cout << x * 4 + y * 4 + z * 4 << ' \n ' ;
l , h , b , a1 , a2 , a3 = int	int l , h , b , a1 , a2 , a3 ;
read a1 , a2 , a3	cin >> a1 >> a2 >> a3 ;
l = sqrt ( ( a2 * a3 ) / a1 )	l = sqrt ( ( a2 * a3 ) / a1 ) ;
b = sqrt ( ( a1 * a3 ) / a2 )	b = sqrt ( ( a1 * a3 ) / a2 ) ;
h = sqrt ( ( a2 * a1 ) / a3 )	h = sqrt ( ( a2 * a1 ) / a3 ) ;
print 4 * ( l + b + h )	cout << 4 * ( l + b + h ) << endl ;
u , v , w = long long int	long long int u , v , w ;
read u , v , w	cin >> u >> v >> w ;
t1 , t2 , t3 = long long int	long long int t1 , t2 , t3 ;
t1 = sqrt ( ( u * v * w ) ) / u	t1 = sqrt ( ( u * v * w ) ) / u ;
t2 = sqrt ( ( u * v * w ) ) / v	t2 = sqrt ( ( u * v * w ) ) / v ;
t3 = sqrt ( ( u * v * w ) ) / w	t3 = sqrt ( ( u * v * w ) ) / w ;
print 4 * ( t1 + t2 + t3 )	cout << 4 * ( t1 + t2 + t3 ) << endl ;
a , b , c = int	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
print 4 * ( sqrt ( a * c / b ) + sqrt ( b * c / a ) + sqrt ( a * b / c ) )	cout << 4 * ( sqrt ( a * c / b ) + sqrt ( b * c / a ) + sqrt ( a * b / c ) ) << endl ;
let a , b , c be double values	double a , b , c ;
read a , b , c	cin >> a >> b >> c ;
let s be a double value with s = square root of a * b * c	double s = sqrt ( a * b * c ) ;
print 4 . 0 * ( s / a + s / b + s / c ) and newline	cout << 4.0 * ( s / a + s / b + s / c ) << endl ;
lb , bh , hl , l , b , h = int	int lb , bh , hl , l , b , h ;
read lb , bh , hl	cin >> lb >> bh >> hl ;
b = sqrt ( lb * bh / hl )	b = ( int ) sqrt ( lb * bh / hl ) ;
l = lb / b	l = lb / b ;
h = hl / l	h = hl / l ;
print 4 * ( l + b + h )	cout << 4 * ( l + b + h ) << endl ;
create ints a , b and c	int a , b , c ;
read user input to a , b and c	cin >> a >> b >> c ;
create new integer m with value = ( max of a and max ( b , c ) )	int m = max ( a , max ( b , c ) ) ;
declare integer r = 0	int r = 0 ;
in a for loop , change i from 1 to m inclusive incrementing i	for ( int i = 1 ; i <= m ; i ++ )
if a % i = 0 and b % i = 0 and ( a / i ) * ( b / i ) = c	if ( a % i == 0 && b % i == 0 && ( ( a / i ) * ( b / i ) == c ) )
change r to a / i + b / i + i	r = a / i + b / i + i ;
set r to r multiplied by 4	r *= 4 ;
print r to the standard output	cout << r << endl ;
in the function gcd that takes integer a , b and returns integer	int gcd ( int a , int b )
if b is 0	if ( b == 0 )
return a	return a ;
else	else
gcd of b and a modulo b	gcd ( b , a % b ) ;
x , y , z = integers	int x , y , z ;
while read x , y , z	while ( cin >> x >> y >> z )
c = integer with c = square root of ( z * y ) / x )	int c = sqrt ( ( z * y ) / x ) ;
a = integer with a = ( x * c ) / y	int a = ( x * c ) / y ;
b = integer with b = x / a	int b = x / a ;
print a * 4 + b * 4 + c * 4	cout << a * 4 + b * 4 + c * 4 << endl ;
a , b , c = int	int a , b , c ;
read a then b then c	cin >> a >> b >> c ;
print 4 * ( sqrt of a * b / c + sqrt of b * c / a + sqrt of a * c / b )	cout << 4 * ( sqrt ( a * b / c ) + sqrt ( b * c / a ) + sqrt ( a * c / b ) ) << endl ;
a , b , c , i , j , k = int	int a , b , c , i , j , k ;
read a then b then c	cin >> a >> b >> c ;
for i = 1 to 10005	for ( i = 1 ; i < 10005 ; i ++ )
for j = 1 to 10005	for ( j = 1 ; j < 10005 ; j ++ )
for k = 1 to 10005	for ( k = 1 ; k < 10005 ; k ++ )
if i * j is a and i * k is b and j * k is c	if ( i * j == a && i * k == b && j * k == c )
print 4 * i + 4 * j + 4 * k	cout << 4 * i + 4 * j + 4 * k << endl ;
if i * k is greater than b or j * k is greater than c break	if ( i * k > b || j * k > c ) break ;
if i * j is greater than a or j is greater than c break	if ( i * j > a || j > c ) break ;
if i is greater than a or b beak	if ( i > a || i > b ) break ;
in function fatora taking int factor , int n and returning pointer to int	int * fatora ( int factor , int n )
f = pointer to int with f = new int of size 2	int * f = new int [ 2 ] ;
loop while n mod factor is not 0 increment factor	while ( n % factor != 0 ) { factor ++ ; }
set f [ 0 ] to factor	f [ 0 ] = factor ;
set f [ 1 ] to n / factor	f [ 1 ] = n / factor ;
return f	return f ;
area = int vector	vector < int > area ;
a , f3_1 , f3_2 , edges_sum = int	int a , f3_1 , f3_2 , edges_sum ;
factor = pointer to int	int * factor ;
for i = 0 to 3	for ( int i = 0 ; i < 3 ; i ++ )
read a	cin >> a ;
append a to area	area . push_back ( a ) ;
for i = 0 to area [ 0 ] / 2 + 1	for ( int i = 0 ; i < ( area [ 0 ] / 2 ) + 1 ; i ++ )
set factor to fatora of i + 1 , area [ 0 ]	factor = fatora ( i + 1 , area [ 0 ] ) ;
if area [ 1 ] mod factor [ 0 ] is 0 and area [ 2 ] mod factor [ 1 ] is 0	if ( area [ 1 ] % factor [ 0 ] == 0 && area [ 2 ] % factor [ 1 ] == 0 )
set f3_1 to area [ 1 ] / factor [ 0 ]	f3_1 = area [ 1 ] / factor [ 0 ] ;
set f3_2 to area [ 2 ] / factor [ 1 ]	f3_2 = area [ 2 ] / factor [ 1 ] ;
if f3_1 is f3_2 break	if ( f3_1 == f3_2 ) break ;
else if area [ 2 ] mod factor [ 0 ] is 0 and area [ 1 ] mod factor [ 1 ] is 0	else if ( area [ 2 ] % factor [ 0 ] == 0 && area [ 1 ] % factor [ 1 ] == 0 )
set f3_1 to area [ 1 ] / factor [ 1 ]	f3_1 = area [ 1 ] / factor [ 1 ] ;
set f3_2 to area [ 2 ] / factor [ 0 ]	f3_2 = area [ 2 ] / factor [ 0 ] ;
if f3_1 is f3_2 break	if ( f3_1 == f3_2 ) break ;
set edges_sum to 4 * ( factor [ 0 ] + factor [ 1 ] + f3_1 )	edges_sum = 4 * ( factor [ 0 ] + factor [ 1 ] + f3_1 ) ;
print edges_sum	cout << edges_sum << endl ;
let di be a vector containing integers with size 3	vector < int > di [ 3 ] ;
let linha0 be a vector containing integers with size 10010	vector < int > linha0 [ 10010 ] ;
let linha1 be a vector containing integers with size 10010	vector < int > linha1 [ 10010 ] ;
let linha2 be a vector containing integers with size 10010	vector < int > linha2 [ 10010 ] ;
let multiplos be a void function which accepts int a , int b , int h	void multiplos ( int a , int b , int h )
let menor be a integer with menor = a	int menor = a ;
if a is greater than b , b is equal to menor	if ( a > b ) b = menor ;
for i = 1 to menor inclusive	for ( int i = 1 ; i <= menor ; i ++ )
if a modulo i is equal to 0 and b modulo i is equal to 0 , push_back i in di [ h ]	if ( a % i == 0 && b % i == 0 ) { di [ h ] . push_back ( i ) ; }
let a , b , c , s be integers	int a , b , c , s ;
read a , b , c , s	cin >> a >> b >> c ;
multiplos of a , b , 0	multiplos ( a , b , 0 ) ;
multiplos of a , c , 1	multiplos ( a , c , 1 ) ;
multiplos of b , c , 2	multiplos ( b , c , 2 ) ;
for i = 0 to ( int ) di [ 0 ] . size ( ) exclusive	for ( int i = 0 ; i < ( int ) di [ 0 ] . size ( ) ; i ++ )
for j = 0 to ( int ) di [ 1 ] . size ( ) exclusive	for ( int j = 0 ; j < ( int ) di [ 1 ] . size ( ) ; j ++ )
if di [ 0 ] [ i ] * di [ 1 ] [ j ] is equal to a	if ( di [ 0 ] [ i ] * di [ 1 ] [ j ] == a )
for u = 0 to ( int ) di [ 2 ] . size ( ) exclusive	for ( int u = 0 ; u < ( int ) di [ 2 ] . size ( ) ; u ++ )
if di [ 0 ] [ i ] * di [ 2 ] [ u ] is equal to b	if ( di [ 0 ] [ i ] * di [ 2 ] [ u ] == b )
if di [ 1 ] [ j ] * di [ 2 ] [ u ] is equal to c , the value of s = di [ 2 ] [ u ] + di [ 1 ] [ j ] + di [ 0 ] [ i ]	if ( di [ 1 ] [ j ] * di [ 2 ] [ u ] == c ) { s = di [ 2 ] [ u ] + di [ 1 ] [ j ] + di [ 0 ] [ i ] ; }
let total be a integer with total = 4 * s	int total = 4 * s ;
print total and newline	cout << total << endl ;
declare x , y , z as integers	int x , y , z ;
read x , y , z	cin >> x >> y >> z ;
declare integers a , b , c	int a , b , c ;
let a be square root of ( x * z ) / y	a = sqrt ( ( x * z ) / y ) ;
let b be square root of ( x * y ) / z	b = sqrt ( ( x * y ) / z ) ;
let c be square root of ( y * z ) / x	c = sqrt ( ( y * z ) / x ) ;
print 4 * ( a + b + c ) , newline	cout << 4 * ( a + b + c ) << endl ;
a , b , c = int	int a , b , c ;
loop while reading a then b then c	while ( cin >> a >> b >> c )
ans = int with ans = 4 * ( sqrt of a * b / c + sqrt of a * c / b + sqrt of b * c / a )	int ans = 4 * ( sqrt ( a * b / c ) + sqrt ( a * c / b ) + sqrt ( b * c / a ) ) ;
print ans	cout << ans << endl ;
create doubles A , B and C	double A , B , C ;
declare integers a , b and c	int a , b , c ;
read a , b and c	cin >> a >> b >> c ;
change A to the square root of a * b / c	A = sqrt ( a * b / c ) ;
assign sqrt ( b * c / a ) to B	B = sqrt ( b * c / a ) ;
assign the square root of c * a / b to C	C = sqrt ( c * a / b ) ;
create new integer variable count = ( A + B + C ) * 4	int count = ( A + B + C ) * 4 ;
print count to the standard output	cout << count << endl ;
create long long integers a , b , c , and s	long long a , b , c , s ;
declare solve	void solve ( )
read a , b , and c	cin >> a >> b >> c ;
set s to s + ( long long ) sqrt ( a * b / c )	s += ( long long ) sqrt ( a * b / c ) ;
set s to s + ( long long ) sqrt ( b * c / a )	s += ( long long ) sqrt ( b * c / a ) ;
set s to s + ( long long ) sqrt ( a * c / b )	s += ( long long ) sqrt ( a * c / b ) ;
print s * 4	cout << s * 4 << endl ;
declare prep	void prep ( ) { }
let long long int t = 1	long long t = 1 ;
call prep	prep ( ) ;
print fixed and setprecision ( 12 )	cout << fixed << setprecision ( 12 ) ;
while t - - is truthy , call solve	while ( t -- ) solve ( ) ;
declare three integer variables ab , bc , and ac	int ab , bc , ac ;
read in ab , bc and ac	cin >> ab >> bc >> ac ;
variable b is equal to the square root of the value of ab * bc divided by ac	int b = sqrt ( ab * bc / ac ) ;
variable a is equal to ab divided by b	int a = ab / b ;
c is equal to bc divided by b	int c = bc / b ;
print the sum of a multiplied by 4 , b multiplied by 4 and c multiplied by 4	cout << a * 4 + b * 4 + c * 4 << endl ;
a , b , c = int	int a , b , c ;
x , y , z = int	int x , y , z ;
read a , b , c	cin >> a >> b >> c ;
x = sqrt ( ( a * c ) / b )	x = sqrt ( ( a * c ) / b ) ;
y = sqrt ( ( b * a ) / c )	y = sqrt ( ( b * a ) / c ) ;
z = sqrt ( ( b * c ) / a )	z = sqrt ( ( b * c ) / a ) ;
print x * 4 + y * 4 + z * 4	cout << x * 4 + y * 4 + z * 4 << endl ;
x , y , z = long long	long long x , y , z ;
read x then y then z	cin >> x >> y >> z ;
abc = long long with abc = ( sqrt of x * y * z + 0 . 00001 ) as long long	long long abc = ( long long ) ( sqrt ( x * y * z + 0.00001 ) ) ;
ans = long long with ans = 4 * ( abc / x + abc / y + abc / z )	long long ans = 4 * ( abc / x + abc / y + abc / z ) ;
print ans	cout << ans << endl ;
create long long ints a , b , and c	long long a , b , c ;
read a , b , and c	cin >> a >> b >> c ;
let long long int p = sqrt ( a * b * c )	long long p = sqrt ( a * b * c ) ;
let long long integer res = 0	long long res = 0 ;
set res to res + ( p / a + p / b + p / c )	res += ( p / a + p / b + p / c ) ;
print res * 4	cout << res * 4 << endl ;
create int a , b and c	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
sum = 0	int sum = 0 ;
set sum to square root of ( a * b ) / c ) + sqrt of ( b * c ) / a ) + sqrt ( ( c * a ) / b )	sum = sqrt ( ( a * b ) / c ) + sqrt ( ( b * c ) / a ) + sqrt ( ( c * a ) / b ) ;
print sum * 4	cout << sum * 4 << endl ;
declare a , b , c , as integers	int a , b , c ;
read a and b and c	cin >> a >> b >> c ;
declare x = 0 , y = 0 , z = 0 , flag = 0 , as integers	int x = 0 , y = 0 , z = 0 , flag = 0 ;
let x be square root of ( ( b * c ) / a )	x = sqrt ( ( b * c ) / a ) ;
let y be square root of ( ( c * a ) / b )	y = sqrt ( ( c * a ) / b ) ;
let z be square root of ( ( a * b ) / c )	z = sqrt ( ( a * b ) / c ) ;
print 4 * ( x + y + z ) , newline	cout << 4 * ( x + y + z ) << endl ;
m , n , p = int	int m , n , p ;
read m , n , p	cin >> m >> n >> p ;
a = sqrt ( p * m / n )	int a = sqrt ( p * m / n ) ;
b = sqrt ( m * n / p )	int b = sqrt ( m * n / p ) ;
c = sqrt ( n * p / m )	int c = sqrt ( n * p / m ) ;
sum = 4 * ( a + b + c )	int sum = 4 * ( a + b + c ) ;
print sum	cout << sum << endl ;
declare integers m , n , p , sum = 0 , a , b , c	int m , n , p , sum = 0 , a , b , c ;
read m read n read p	cin >> m >> n >> p ;
let a be square root of p * m / n	a = sqrt ( p * m / n ) ;
let b be square root of m * n / p	b = sqrt ( m * n / p ) ;
let b be square root of n * p / m	c = sqrt ( n * p / m ) ;
let sum = 4 * ( a + b + c )	sum = 4 * ( a + b + c ) ;
print sum print newline	cout << sum << endl ;
declare integers a , b and c	int a , b , c ;
read standard input to a , b and c	cin >> a >> b >> c ;
declare integer variable with name x with value sqrt ( ( a * b ) / c )	int x = sqrt ( ( a * b ) / c ) ;
declare integer y with value = square root of ( ( a * c ) / b )	int y = sqrt ( ( a * c ) / b ) ;
z is a new integer = square root of ( ( b * c ) / a )	int z = sqrt ( ( b * c ) / a ) ;
print 4 * ( x + y + z ) to the standard output	cout << 4 * ( x + y + z ) << endl ;
x1 , x2 , x3 = integers	int x1 , x2 , x3 ;
read x1 , x2 , x3	cin >> x1 >> x2 >> x3 ;
sum = integer with sum = sqrt ( ( x1 * x3 ) / x2 ) + sqrt ( ( x2 * x1 ) / x3 ) + sqrt ( ( x3 * x2 ) / x1 )	int sum = sqrt ( ( x1 * x3 ) / x2 ) + sqrt ( ( x2 * x1 ) / x3 ) + sqrt ( ( x3 * x2 ) / x1 ) ;
sum = sum * 4	sum = sum * 4 ;
print sum	cout << sum << endl ;
create integer array arr of size 104	int arr [ 104 ] ;
make ints n and k	int n , k ;
read n and k	cin >> n >> k ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
make integer total = 0	int total = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
for i = 0 to n exclusive	total += arr [ i ] ;
set total to total + arr [ i ]	k -= min ( total , 8 ) ;
subtract min ( total , 8 ) from total	total -= min ( total , 8 ) ;
if k is less than or equal to 0	if ( k <= 0 )
print i + 1	cout << i + 1 << endl ;
show - 1	cout << - 1 << endl ;
declare int variables n and k	int n , k ;
read from the input to n and k	cin >> n >> k ;
define new integer a	int a ;
define integers totalChocolate , days and remain = 0	int totalChocolate = 0 , days = 0 , remain = 0 ;
declare boolean variable with name flag with value false	bool flag = false ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read standard input to a	cin >> a ;
change a to the sum of a and remain	a += remain ;
if a is greater than 8	if ( a > 8 )
assign a - 8 to remain	remain = a - 8 ;
change totalChocolate to the sum of totalChocolate and 8	totalChocolate += 8 ;
else	else
add a to totalChocolate	totalChocolate += a ;
assign the new value = 0 to remain	remain = 0 ;
increment days by one	days ++ ;
if totalChocolate > = k	if ( totalChocolate >= k )
assign true to flag	flag = true ;
break	break ;
if flag is true	if ( flag )
print days	cout << days << endl ;
else	else
print " - 1 " to the standard output	cout << " -1 " << endl ;
let MAX be a constant integer 100001	const int MAX = 100001 ;
An , Bn are integer arrays	int An [ MAX ] , Bn [ MAX ] ;
n , k are integers	int n , k ;
read n , k	cin >> n >> k ;
for integer i = 1 to n inclusive , print An [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> An [ i ] ;
sum , flag , coun be integers 0	int sum = 0 , flag = 0 , coun = 0 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
increase coun by An [ i ]	coun += An [ i ] ;
if coun is greater than 8	if ( coun > 8 )
increase sum by 8	sum += 8 ;
decrease coun by 8	coun -= 8 ;
else	else
increase sum by coun	sum += coun ;
coun is 0	coun = 0 ;
if sum is greater than k	if ( sum >= k )
flag is 0	flag = 1 ;
print i and endline	cout << i << endl ;
stop	break ;
if flag is 0 , print - 1 and endline	if ( ! flag ) cout << - 1 << endl ;
n , k , a = int , c , v = 0	int n , k , a , c = 0 , v = 0 ;
read n , k	cin >> n >> k ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
if a < = 8	if ( a <= 8 )
if c > = 8 - a	if ( c >= 8 - a )
add 8 to v	v += 8 ;
subtract 8 - a from c	c -= 8 - a ;
else	else
add a + c to v	v += a + c ;
c = 0	c = 0 ;
else	else
add 8 to v	v += 8 ;
add a - 8 to c	c += a - 8 ;
if v > = k	if ( v >= k )
print i	cout << i << endl ;
print - 1	cout << - 1 << endl ;
create int a , b , c , t , l , i , j , m , set sum and count to 0	int a , b , c , t , l , i , j , sum = 0 , count = 0 , m ;
read a and b	cin >> a >> b ;
for i = 1 to a inclusive	for ( i = 1 ; i <= a ; i ++ )
read c	cin >> c ;
set sum to sum + c	sum += c ;
set m to min of 8 and sum	m = min ( 8 , sum ) ;
set sum to sum - m	sum -= m ;
b = b - m	b -= m ;
increment count	count ++ ;
if b < = 0	if ( b <= 0 ) { break ; }
if b > 0	if ( b > 0 )
print - 1	cout << - 1 << endl ;
else	else
print count	cout << count << endl ;
n , k , ans , sum , aux , candies = int	int n , k , ans , sum , aux , candies ;
ans , sum , candies = 0	ans = sum = candies = 0 ;
found = false	bool found = false ;
read n , k	cin >> n >> k ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read aux	cin >> aux ;
if found continue	if ( found ) continue ;
add aux to candies	candies += aux ;
aux = min ( candies , 8 )	aux = min ( candies , 8 ) ;
add aux to sum	sum += aux ;
increment ans	ans ++ ;
subtract aux from candies	candies -= aux ;
if sum > = k found = true	if ( sum >= k ) found = true ;
if not found	if ( ! found )
print - 1	cout << " -1\n " ;
else	else
print ans	cout << ans << " \n " ;
let n , k , a , b = 1 , c = 0 , d = 0 , e , s be integers	int n , k , a , b = 1 , c = 0 , d = 0 , e , s [ 117 ] ;
read n . k	cin >> n >> k ;
for integer i = 1 to n inclusive . read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }
while b is less than or equal to n	while ( b <= n )
e equals s [ b ] + d	e = s [ b ] + d ;
if e is less than or equal to 8	if ( e <= 8 )
c equals c + e	c = c + e ;
d equals 0	d = 0 ;
b increased by 1	b ++ ;
if c is greater than or equal to k , stop	if ( c >= k ) { break ; }
else if e is greater than 8	else if ( e > 8 )
increment c by 8	c = c + 8 ;
d equals e minus 8	d = e - 8 ;
increment b by 1	b ++ ;
if c is greater than or equal to k , stop	if ( c >= k ) { break ; }
if c is less than k	if ( c < k )
print - 1 and newline	cout << - 1 << endl ;
else	else
print b - 1 and newline	cout << b - 1 << endl ;
n , k = integers	long long int n , k ;
a = array of 1007 integers	long long int a [ 1007 ] ;
Read n , k	cin >> n >> k ;
_d , _c = integers with _d = 0 , _c = 0	long long int _d = 0 , _c = 0 ;
for i = 1 to n exclusive	for ( long long int i = 1 ; i <= n ; i ++ )
Read n values into array a	cin >> a [ i ] ;
if k is greater than 0	if ( k > 0 )
set _c to _c + a [ i ]	_c += a [ i ] ;
x = integer , set to minimum value of 8LL , and _c	long long int x = min ( 8LL , _c ) ;
set k to k - x	k -= x ;
set _c to _c - x	_c -= x ;
set _d to i	_d = i ;
if k is less than or equal to 0	if ( k <= 0 )
print _d and a new line	cout << _d << " \n " ;
else do the following	else
print - 1 and a new line	cout << - 1 << " \n " ;
n , k = integers	long long int n , k ;
Read n , k	cin >> n >> k ;
arr = array of n integers with 0 elements	long long int arr [ n ] = { 0 } ;
answer = integer with 0	int answer = 0 ;
sum = integer with 0	int sum = 0 ;
Read n values into array arr	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
temp = integer with 0	int temp = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
set arr [ i ] to arr [ i ] + temp	arr [ i ] += temp ;
if arr [ i ] is greater than or equal to 8	if ( arr [ i ] >= 8 )
set k to k - 8	k -= 8 ;
set temp to arr [ i ] - 8	temp = arr [ i ] - 8 ;
increment answer	answer ++ ;
else do the following	else
set k to k - arr [ i ]	k -= arr [ i ] ;
set temp to 0	temp = 0 ;
increment answer	answer ++ ;
if k is less than or equal to 0	if ( k <= 0 )
print answer and a new line	cout << answer << endl ;
print - 1 and a new line	cout << - 1 << endl ;
n , k , a , b , c , d , e = integers and s = array of 117 integers	int n , k , a , b = 1 , c = 0 , d = 0 , e , s [ 117 ] ;
Read n and k	cin >> n >> k ;
Read n values into array s	for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }
while b is less than or equal to n	while ( b <= n )
set e to s [ b ] + d	e = s [ b ] + d ;
if e is less than or equal to 8	if ( e <= 8 )
set c to c + e	c = c + e ;
set d to 0	d = 0 ;
increment b	b ++ ;
if c is greater than or equal to k , then Terminate the loop	if ( c >= k ) { break ; }
else if e is greater than 8	else if ( e > 8 )
set c to c + 8	c = c + 8 ;
set d to e - 8	d = e - 8 ;
increment b	b ++ ;
if c is greater than or equal to k , then Terminate the loop	if ( c >= k ) { break ; }
if c is less than k	if ( c < k )
print - 1 and a new line	cout << - 1 << endl ;
else do the following	else
print b - 1 and a new line	cout << b - 1 << endl ;
define integers n and k	int n , k ;
read n and k	cin >> n >> k ;
declare integer variables arya and bran = 0	int arya = 0 , bran = 0 ;
define new integer called s = 0	int s = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
create integer t	int t ;
read standard input to t	cin >> t ;
if t + arya > = 8	if ( t + arya >= 8 )
increase bran by 8	bran += 8 ;
increase arya by t - 8	arya += t - 8 ;
increase s by 1	++ s ;
else	else
add t + arya to bran	bran += t + arya ;
change arya to 0	arya = 0 ;
increase s by 1	++ s ;
if bran > = k	if ( bran >= k )
print s	cout << s << endl ;
if bran < = k , print - 1 to the standard output	if ( bran <= k ) { cout << - 1 << endl ; }
declare solve taking in ints n and k and int array arr and returning integer	int solve ( int arr [ ] , int n , int k )
create integer t = 0	int t = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
set t to t + arr [ i ]	t += arr [ i ] ;
make integer val = min ( 8 , t )	int val = min ( 8 , t ) ;
subtract val from k	k -= val ;
set t to t - val	t -= val ;
if k is less than or equal to 0 , return i + 1	if ( k <= 0 ) return i + 1 ;
return - 1	return - 1 ;
create ints n and k	int n , k ;
read n and k	cin >> n >> k ;
create int array arr of size n	int arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
print the result of solve ( arr , n , k )	cout << solve ( arr , n , k ) << endl ;
n , i , k , j , t , m = integers with t = 0	int n , i , k , j , t = 0 , m ;
Read n and k	cin >> n >> k ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
Read j	cin >> j ;
set j to j + t	j += t ;
set t to 0	t = 0 ;
if j is greater than or equal to 8	if ( j >= 8 )
set t to t + j - 8	t += j - 8 ;
set j to 8	j = 8 ;
set k to k - j	k -= j ;
if k is greater than or equal to 0 , then Terminate the loop	if ( k <= 0 ) { break ; }
if k is greater than 0	if ( k > 0 )
print - 1 and new line	cout << - 1 << endl ;
else do the following	else
print i + 1 and a new line	cout << i + 1 << endl ;
declare new integer variables n and k	int n , k ;
read n and k from the input	cin >> n >> k ;
create vector of integers a with n elements	vector < int > a ( n ) ;
create new integer called curr = 0	int curr = 0 ;
goal is a new integer = k	int goal = k ;
create integer variable count with value 0	int count = 0 ;
for integer i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set curr to curr + a [ i ]	curr = curr + a [ i ] ;
declare integer variable with name maxGive = min of 8 and curr	int maxGive = min ( 8 , curr ) ;
set the value of curr to curr - maxGive	curr = curr - maxGive ;
change goal to goal - maxGive	goal = goal - maxGive ;
if goal < = 0	if ( goal <= 0 )
else	else
increment count	count ++ ;
if goal is greater than 0 , set the value of count to - 2	if ( goal > 0 ) { count = - 2 ; }
print count + 1	cout << count + 1 << endl ;
n , k = int	int n , k ;
read n , k	cin >> n >> k ;
c = int array length n	int c [ n ] ;
for i = 0 to n exclusive , read c [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }
if k < = n * 8	if ( k <= n * 8 )
sum = 0 = int	int sum = 0 ;
p = 0 = int	int p = 0 ;
for i = 0 to n excluisve	for ( int i = 0 ; i < n ; i ++ )
if c [ i ] < = 8	if ( c [ i ] <= 8 )
set c [ i ] to c [ i ]	c [ i ] = c [ i ] ;
else	else
a = int = c [ i ] - 8	int a = c [ i ] - 8 ;
set c [ i ] to 8	c [ i ] = 8 ;
set c [ i + 1 ] to c [ i + 1 ] + a	c [ i + 1 ] = ( c [ i + 1 ] + a ) ;
increment sum by c [ i ]	sum += c [ i ] ;
if sum > = k	if ( sum >= k )
print i + 1	cout << i + 1 << endl ;
exit loop	break ;
else	else
increment p	p ++ ;
if p = n then print - 1	if ( p == n ) { cout << " -1 " << endl ; }
else	else
print - 1	cout << " -1 " << endl ;
declare integers a , b , c = 0	int a , b , c = 0 ;
read a , b	cin >> a >> b ;
while b is true	while ( b )
declare integer d = b % 10	int d = b % 10 ;
let c be c * 10 + d	c = c * 10 + d ;
let b be b / 10	b /= 10 ;
print a + c and newline	cout << a + c << endl ;
a , b = long long	long long a , b ;
read a , b	cin >> a >> b ;
temp = long long with temp = 0	long long temp = 0 ;
while ( b > 0 )	while ( b > 0 )
temp = ( temp * 10 ) + ( b modulo 10 )	temp = ( temp * 10 ) + ( b % 10 ) ;
b = b / 10	b /= 10 ;
print a + temp	cout << a + temp << endl ;
a and num are integers with num = 0	int a , num = 0 ;
b is a new array of characters with 100 elements	char b [ 100 ] ;
read a from the user input	cin >> a ;
read standard input to b	cin >> b ;
reverse b	reverse ( b , b + strlen ( b ) ) ;
increment i by 1 in a loop , starting from 0 to the length of b , ans change num to ( num * 10 ) + ( b [ i ] - ' 0 ' ) on every loop	for ( int i ( 0 ) ; i < ( strlen ( b ) ) ; i ++ ) { num = ( num * 10 ) + ( b [ i ] - ' 0 ' ) ; }
print num + a	cout << num + a << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
y = array of 30 int	int y [ 30 ] = { } ;
r = b , d = 0	int r = b , d = 0 ;
while r > 0	while ( r > 0 )
y [ d ] = r modulo 10	y [ d ] = r % 10 ;
divide r by 10	r /= 10 ;
increment d	d ++ ;
for i = 0 to d / 2 exclusive swap y [ i ] and y [ d - 1 - i ]	for ( int i = 0 ; i < d / 2 ; i ++ ) swap ( y [ i ] , y [ d - 1 - i ] ) ;
w = 0 , k = 1	int w = 0 , k = 1 ;
for i = 0 to d exclusive	for ( int i = 0 ; i < d ; i ++ )
add y [ i ] * k to w	w += y [ i ] * k ;
multiply k by 10	k *= 10 ;
print w + a	cout << w + a << endl ;
a , b , c = integers set c = 0	int a , b , c = 0 ;
read a and b	cin >> a >> b ;
while b ! = 0	while ( b != 0 )
set c = c * 10 + b decrement 10	c = c * 10 + b % 10 ;
set b = b / 10	b = b / 10 ;
print a + c	cout << a + c << endl ;
a , be and eb are integers with eb = 0	int a , be , eb = 0 ;
read standard input to a and be	cin >> a >> be ;
while be is not 0	while ( be )
change the value of eb to 10 * eb + be % 10	eb = 10 * eb + be % 10 ;
change the value of be to be divided by 10	be /= 10 ;
print a + eb and ' \ n '	cout << a + eb << ' \n ' ;
let a , b and c be integers , set c to 0	int a , b , c = 0 ;
read in a and b	cin >> a >> b ;
while b is not 0	while ( b )
let d be an integer and set it to b % 10	int d = b % 10 ;
set c to c * 10 + d	c = c * 10 + d ;
set b to b / 10	b /= 10 ;
print a + c	cout << a + c << endl ;
let a , ans , plus be long integers with ans = 0	long long a , ans = 0 , plus ;
let b be a string	string b ;
read a and b	cin >> a >> b ;
for i = 0 to ( length of b ) - 1 inclusive	for ( int i = 0 ; i <= b . size ( ) - 1 ; i ++ )
plus = ( int ) b [ i ] - 48	plus = ( ( int ) b [ i ] - 48 ) ;
for j = 0 to i inclusive , plus is equal to plus * 10	for ( int j = 0 ; j <= i ; j ++ ) plus *= 10 ;
divide plus by 10	plus /= 10 ;
increment ans by plus	ans += plus ;
increment ans by a	ans += a ;
print ans and new line	cout << ans << endl ;
a , b = integers	long int a , b ;
Read a , b	cin >> a >> b ;
reversedNumber , remainder = integers with reversedNumber = 0	int reversedNumber = 0 , remainder ;
while b is not equal to 0	while ( b != 0 )
set remainder to b modulo 10	remainder = b % 10 ;
set reversedNumber to reversedNumber * 10 + remainder	reversedNumber = reversedNumber * 10 + remainder ;
set b to b / 10	b /= 10 ;
print a + reversedNumber and a new line	cout << a + reversedNumber << endl ;
in int rever taking n = int	int rever ( int n )
rn = 0 = int	int rn = 0 ;
while n	while ( n )
set rn to rn * 10 + n mod 10	rn = rn * 10 + n % 10 ;
divide n by 10	n /= 10 ;
return rn	return rn ;
a , b = int	int a , b ;
while reading a and b , print a + rever of b	while ( cin >> a >> b ) { cout << a + rever ( b ) << endl ; }
let ff be the ifstream file . txt	ifstream ff ( " file.txt " ) ;
s1 , s2 = string	string s1 , s2 ;
read s1 and s2	cin >> s1 >> s2 ;
reverse s2	reverse ( s2 . begin ( ) , s2 . end ( ) ) ;
while length of s1 is not length of s2	while ( s1 . length ( ) != s2 . length ( ) )
if lenght of s1 is > length of s2	if ( s1 . length ( ) > s2 . length ( ) )
call insert on s2 with args beginning of s2 , 1 , ' 0 '	s2 . insert ( s2 . begin ( ) , 1 , ' 0 ' ) ;
else	else
call insert on s1 with args beginning of s1 , 1 , ' 0 '	s1 . insert ( s1 . begin ( ) , 1 , ' 0 ' ) ;
x , y = int	int x , y ;
iss of s2 = istringstream	istringstream iss ( s2 ) ;
iss > > x	iss >> x ;
iss1 of s1 = istringstream	istringstream iss1 ( s1 ) ;
iss1 > > y	iss1 >> y ;
print x + y	cout << x + y << endl ;
create int int a , b , c , set c to 0	int a , b , c = 0 ;
read a and b	cin >> a >> b ;
while b different from b	while ( b )
set d to b mod 10	int d = b % 10 ;
set c to c * 10 + d	c = c * 10 + d ;
assign b / 10 to b	b /= 10 ;
print a + c	cout << a + c << endl ;
declare rev taking in long long x and returning long long	long long rev ( long long x )
create long long int ans = 0	long long ans = 0 ;
while x is truthy	while ( x )
set ans to ans * 10 + ( x % 10 )	ans = ans * 10 + ( x % 10 ) ;
set x to x / 10	x /= 10 ;
return ans	return ans ;
make long long ints a and b	long long a , b ;
read a and b and while a and b are truthy	while ( cin >> a >> b )
set b to return result of rev ( b )	b = rev ( b ) ;
output a + b	cout << a + b << ' \n ' ;
declare strings a , b , c	string a , b , c ;
read a and b	cin >> a >> b ;
reverse sort from beginning of a to end of a	reverse ( a . begin ( ) , a . end ( ) ) ;
while size of a is less than size of b , increment a by " 0 "	while ( a . size ( ) < b . size ( ) ) a += " 0 " ;
while size of b is less than size of a , increment b by " 0 "	while ( b . size ( ) < a . size ( ) ) b += " 0 " ;
declare integer vector ans	vector < int > ans ;
declare integer sisa = 0	int sisa = 0 ;
for i = 0 to size of a exclusive	for ( int i = 0 ; i < a . size ( ) ; i ++ )
declare integer x = a [ i ] - ' 0 ' + b [ i ] - ' 0 ' + sisa	int x = a [ i ] - ' 0 ' + b [ i ] - ' 0 ' + sisa ;
let sisa be 0	sisa = 0 ;
add ( x % 10 ) to end of ans	ans . push_back ( x % 10 ) ;
let sisa be x / 10	sisa = x / 10 ;
while sisa is greater than 0	while ( sisa > 0 )
add ( sisa % 10 ) to end of ans	ans . push_back ( sisa % 10 ) ;
let sisa be sisa / 10	sisa /= 10 ;
while size of ans is greater than 1 and back of ans is 0 , remove last element from ans	while ( ans . size ( ) > 1 && ans . back ( ) == 0 ) ans . pop_back ( ) ;
for i = size of ans - 1 to 0 inclusive , decrementing i , print ans [ i ]	for ( int i = ans . size ( ) - 1 ; i >= 0 ; i -- ) cout << ans [ i ] ;
print newline	cout << endl ;
declare long longs n , i , j , ans = 0	long long n , i , j , ans = 0 ;
declare strings s1 , s2	string s1 , s2 ;
read s1 , s2	cin >> s1 >> s2 ;
reverse sort from beginning of s2 to end of s2	reverse ( s2 . begin ( ) , s2 . end ( ) ) ;
declare stringstreams geek initialized with s2 , geek1 initialized with s1	stringstream geek ( s2 ) , geek1 ( s1 ) ;
declare long long a	long long a ;
read a using geek	geek >> a ;
declare long long b	long long b ;
read b using geek1	geek1 >> b ;
print a + b and newline	cout << a + b << endl ;
declare new string variables a and b	string a , b ;
read a and b	cin >> a >> b ;
reverse b	reverse ( b . begin ( ) , b . end ( ) ) ;
create new stringstream n1 from the string a	stringstream n1 ( a ) ;
create new stringstream n2 from the string b	stringstream n2 ( b ) ;
define new integers num1 and num2	int num1 , num2 ;
read num1 from n1	n1 >> num1 ;
read the new value for num2 from n2	n2 >> num2 ;
declare long long integer res = num1 + num2	long long int res = num1 + num2 ;
print res to the standard output	cout << res << endl ;
let a , b be strings	string a , b ;
read a , b	cin >> a >> b ;
reverse the values of b from beginning to end	reverse ( b . begin ( ) , b . end ( ) ) ;
stringstream allows you to read n1 from a	stringstream n1 ( a ) ;
stringstream allows you to read n2 from b	stringstream n2 ( b ) ;
let num1 , num2 be integers	int num1 , num2 ;
n1 > > num1	n1 >> num1 ;
n2 > > num2	n2 >> num2 ;
the long integer value of res = num1 + num2	long long int res = num1 + num2 ;
print res and newline	cout << res << endl ;
create int a , b , c , set c to 0	int a , b , c = 0 ;
read a and b	cin >> a >> b ;
while b different from 0	while ( b )
d = b mod 10	int d = b % 10 ;
set c = c * 10 + d	c = c * 10 + d ;
b = b / 10	b /= 10 ;
print a + c	cout << a + c << endl ;
a1 , a2 , k , a3 = integers with a3 = 0	int a1 , a2 , k , a3 = 0 ;
Read a1 , a2	cin >> a1 >> a2 ;
while a2 is not equal to 0	while ( a2 != 0 )
sett k to a2 modulo 10	k = a2 % 10 ;
set a3 to a3 * 10 + k	a3 = a3 * 10 + k ;
set a2 to a2 / 10	a2 /= 10 ;
print a1 + a3 and a new line	cout << a1 + a3 << endl ;
create int a , b , c	int a , b , c ;
read a and b	cin >> a >> b ;
while b > 0	while ( b > 0 )
set d to b mod 10	int d = b % 10 ;
set c = c * 10 + d	c = c * 10 + d ;
assign b / 10 to b	b /= 10 ;
print a + c	cout << a + c << endl ;
declare boolean flag	bool flag ;
declare integer arrays a size 71720 , dp size 811 by 811 , integers n , i , sumend , m , j , k , x , y , b , c	int a [ 71720 ] , n , i , sumend , dp [ 811 ] [ 811 ] , m , j , k , x , y , b , c ;
declare long long integer sum	long long int sum ;
declare boolean cmp with integers a , b as arguments , returning boolean	bool cmp ( int a , int b )
return a is greater than b	return a > b ;
declare gcd with integers a , b as arguments , returning integer	int gcd ( int a , int b )
if not b , return a from function	if ( ! b ) return a ;
return result of run gcd ( b , a % b )	return gcd ( b , a % b ) ;
declare maxx with short integers a , b as arguments , returning integer	int maxx ( short int a , short int b )
if a is greater than b , return a	if ( a > b ) return a ;
return b from function	return b ;
declare gqt with integer n as argument , returning integer	int gqt ( int n )
if not n or n , return 1 from function	if ( ! n || n ) return 1 ;
if n is 2 , return 0 from function	if ( n == 2 ) return 0 ;
for i = 3 to square root of n inclusive	for ( i = 3 ; i <= sqrt ( n ) ; i ++ )
if n % i is 0 , return 1	if ( n % i == 0 ) return 1 ;
read x , y	cin >> x >> y ;
while y is not 0	while ( y != 0 )
let sum be y % 10	sum = y % 10 ;
let sumend be sumend * 10	sumend *= 10 ;
increment sumend by sum	sumend += sum ;
let y be y / 10	y /= 10 ;
increment sumend by x	sumend += x ;
print sumend and newline	cout << sumend << endl ;
declare int variables a and b	int a , b ;
read input to a and b	cin >> a >> b ;
create integers vectors x and y	vector < int > x , y ;
while a is not 0	while ( a )
push a % 10 after the last element of x	x . push_back ( a % 10 ) ;
change the value of a to a divided by 10	a /= 10 ;
while b	while ( b )
push b % 10 to the end of y	y . push_back ( b % 10 ) ;
set b to b divided by 10	b /= 10 ;
reverse y	reverse ( y . begin ( ) , y . end ( ) ) ;
push 0 to x while size of x < size of y	while ( x . size ( ) < y . size ( ) ) x . push_back ( 0 ) ;
push 0 to y while size of y < size of x	while ( y . size ( ) < x . size ( ) ) y . push_back ( 0 ) ;
for i from 0 to length of y exclusive , increase x [ i ] by y [ i ]	for ( int i = 0 ; i < y . size ( ) ; i ++ ) x [ i ] += y [ i ] ;
declare new long long ans = 0	long long ans = 0 ;
in a loop for i from size of - 1 to 0 inclusive , counting down , change ans to 10 * ans + x [ i ]	for ( int i = x . size ( ) - 1 ; i >= 0 ; i -- ) ans = ( long long ) 10 * ans + ( long long ) x [ i ] ;
print ans to the standard output	cout << ans << endl ;
create integers a , b , i , j , and x	int a , b , i , j , x ;
read a and b	cin >> a >> b ;
create integer sum = 0	int sum = 0 ;
while b is not 0	while ( b != 0 )
set sum to sum * 10	sum = sum * 10 ;
set sum to sum + b % 10	sum += b % 10 ;
divide b by 10	b /= 10 ;
set sum to sum + a	sum += a ;
display sum	cout << sum << endl ;
let s , ss be strings	string s , ss ;
read s , ss	cin >> s >> ss ;
reverse the values of ss from beginning to end	reverse ( ss . begin ( ) , ss . end ( ) ) ;
let x , y be integers	int x , y ;
read a stringstream into sss and read a stringstream into ssss	stringstream sss , ssss ;
shift sss to the right by s	sss << s ;
shift sss to the left by x	sss >> x ;
shift ssss to the right by ss	ssss << ss ;
shift ssss to the left by y	ssss >> y ;
print x + y and newline	cout << x + y << endl ;
create string b	string b ;
create long long a , c , d	long long a , c , d ;
read a and b	cin >> a >> b ;
c = 0	c = 0 ;
for I00 to length of b - 1 exclusive , set c = c * 10 + b [ i ] - 0	for ( int i = b . length ( ) - 1 ; i >= 0 ; i -- ) { c = c * 10 + b [ i ] - ' 0 ' ; }
d = a + c	d = a + c ;
print d	cout << d << endl ;
n = integer	int n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
n = int	int n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
let n be a long integer	long long int n ;
read n	cin >> n ;
print 25 and newline	cout << 25 << endl ;
declare new int variables a and b	int a , b ;
read variable a from the input	cin >> a ;
print " 25 "	cout << " 25 " << endl ;
n = long long	long long n ;
read n	cin >> n ;
print " 25 "	cout << " 25 " << endl ;
let n , a , i be float values	float n , a , i ;
let s be a integer	int s ;
read n	cin >> n ;
s is equal to 25	s = 25 ;
if n is equal to 1 , s is equal to 5	if ( n == 1 ) { s = 5 ; }
print s and newline	cout << s << endl ;
n = long long int	long long int n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
n = integer	long long n ;
Read n	cin >> n ;
print 25 and a new line	cout << " 25 " << endl ;
n = long long	long long n ;
loop while reading n	while ( cin >> n )
if n is 1	if ( n == 1 )
print 5	cout << 5 << endl ;
else	else
print 25	cout << 25 << endl ;
n = integer	int n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
create long long int n	long long n ;
read n	cin >> n ;
if n is equal to 1 , print 5	if ( n == 1 ) { cout << 5 << endl ; }
if n equals 0 , print 1	if ( n == 0 ) { cout << 1 << endl ; }
if n is greater than or equal to 2 , print 25	if ( n >= 2 ) { cout << 25 << endl ; }
long long function Q_pow with long long arguments a and b	long long Q_pow ( long long a , long long b )
declare long long variable with name ans = 1	long long ans = 1 ;
while b > 0	while ( b > 0 )
if b is odd	if ( b % 2 == 1 )
change a to the remainder of a divided by 100	a %= 100 ;
change ans to the ans modulo 100	ans %= 100 ;
set ans to ans multiplied by a	ans *= a ;
change a to a modulo 100	a %= 100 ;
multiply a by a	a *= a ;
divide b by 2	b /= 2 ;
return ans % 100	return ans % 100 ;
create long long variable n	long long n ;
read n and print the result of Q_pow ( 5 , n )	while ( cin >> n ) { cout << Q_pow ( 5 , n ) << endl ; }
n = integer	long long n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
in , ans = integer with ans = 25	int in , ans = 25 ;
Read in	cin >> in ;
print ans and a new line	cout << ans << endl ;
n = integer	long long n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
create integer i , j	int i , j ;
create long long n	long long n ;
read n	cin >> n ;
print 25	cout << 25 << endl ;
n = long long	long long n ;
while n can be read as a valid long long , print 25	while ( cin >> n ) { cout << " 25 " << endl ; }
print 25 and a new line	cout << 25 << endl ;
create unsigned long long variable n	unsigned long long n ;
read user input to n	cin >> n ;
print 25 to the standard output	cout << 25 << endl ;
j = integer	int j ;
Read j	cin >> j ;
print 25 and a new line	cout << " 25 " << endl ;
n , b = integers with b = 25	int n , b = 25 ;
Read n	cin >> n ;
print b and a new line	cout << b << endl ;
n = int	int n ;
read n	cin >> n ;
print 25	cout << 25 << endl ;
print 25	cout << 25 << endl ;
print 25 and a new line	cout << 25 << endl ;
let n be a long integer	long long n ;
while read n , print 25 and newline	while ( cin >> n ) { cout << " 25 " << endl ; }
create long long int n	long long int n ;
read n	cin >> n ;
print 25	cout << 25 << endl ;
n = integer	long long int n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
in function Q_pow that returns a long long and takes arguments a , b = long long	long long Q_pow ( long long a , long long b )
ans = long long with value of 1	long long ans = 1 ;
while b is greater than 0	while ( b > 0 )
if b mod 2 equals 1	if ( b % 2 == 1 )
set a to a mod 100	a %= 100 ;
set ans to ans mod 100	ans %= 100 ;
set ans to ans * a	ans *= a ;
set a to a mod 100	a %= 100 ;
set a to a * a	a *= a ;
set b to b / 2	b /= 2 ;
return ans mod 100	return ans % 100 ;
n = long long	long long n ;
while read n do print the return of function Q_pow with arguments a = 5 and b = n	while ( cin >> n ) { cout << Q_pow ( 5 , n ) << endl ; }
n = integer	int n ;
Read n	cin >> n ;
print 25 and a new line	cout << " 25 " << endl ;
n = integer	long long int n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
n = long long	long long n ;
loop while reading n print 25	while ( cin >> n ) { cout << 25 << endl ; }
n = integer	long long int n ;
Read n	cin >> n ;
print 25 and a new line	cout << " 25 " << endl ;
n = integer	int n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
n = unsigned long lon	unsigned long long n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
n = integer	int n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
mod = const long long with mod = 100	const long long mod = 100 ;
in function re taking long long a , long long n and returning long long	long long re ( long long a , long long n )
ans = long long with ans = 1	long long ans = 1 ;
loop while n > 0	while ( n > 0 )
if n bitwise - and 1 set ans to ( ans * a ) modulo mod	if ( n & 1 ) ans = ( ans * a ) % mod ;
set a to ( a * a ) modulo mod	a = ( a * a ) % mod ;
set n to n bitshfit right by 1	n >>= 1 ;
return ans	return ans ;
n = long long	long long n ;
loop while reading n	while ( cin >> n )
result = long long with result = re of 5 , n	long long result = re ( 5 , n ) ;
print result	cout << result << endl ;
n = long long	long long n ;
while reading n print 25	while ( cin >> n ) { cout << 25 << endl ; }
create long long integer n	long long int n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
MOD = const integer with MOD = 100	const int MOD = 100 ;
n = long long	long long n ;
read n	cin >> n ;
v = integer with v = 5	int v = 5 ;
ans = integer with ans = 1	int ans = 1 ;
for i = 0 to 62 with increment i , v = ( v * v ) modulo MOD	for ( int i = 0 ; i <= 62 ; i ++ , v = ( v * v ) % MOD )
if ( n bitwise and ( left shift i 1 place ) ) , ans = ( ans * v ) modulo MOD	if ( n & ( 1 << i ) ) { ans = ( ans * v ) % MOD ; }
print ans	cout << ans << endl ;
create int n	int n ;
read n	cin >> n ;
print 25	cout << 25 << endl ;
create long long n	long long n ;
read n and while n is truthy , print 25	while ( cin >> n ) { cout << 25 << endl ; }
declare integer n	int n ;
read n	cin >> n ;
print " 25 " and newline	cout << " 25 " << endl ;
i , j , n , c , ans = integers with c = 0 and ans = 25	long long i , j , n , c = 0 , ans = 25 ;
Read n	cin >> n ;
print ans and a new line	cout << ans << endl ;
n = long long	long long n ;
read n	cin >> n ;
print " 25 "	cout << " 25 " << endl ;
n = integer	int n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
n = long long	long long n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
n = int	int n ;
read n	cin >> n ;
print 25	cout << 25 << endl ;
n = integer	int n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
n = unsigned long long	unsigned long long n ;
read n	cin >> n ;
print 25	cout << " 25 " << endl ;
n = integer	int n ;
Read n	cin >> n ;
print 25 and a new line	cout << " 25 " << endl ;
create char n [ 20 ]	char n [ 20 ] ;
while read n , print 25	while ( cin >> n ) { cout << 25 << endl ; }
n = integer	long long int n ;
Read n	cin >> n ;
print 25 and a new line	cout << " 25 " << endl ;
n = integer	int n ;
Read n	cin >> n ;
print 25 and a new line	cout << 25 << endl ;
n = integer	int n ;
read n	cin >> n ;
print 25	cout << 25 << endl ;
create constant double eps = 1e - 6	const double eps = 1e-6 ;
let const int MAXN = 8000	const int MAXN = 8000 ;
let double array a of size MAXN	double a [ MAXN ] ;
create int n	int n ;
read n	cin >> n ;
let double x	double x ;
for i = 0 to 2 exclusive , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
let double sum = 0	double sum = 0 ;
create int num = 0	int num = 0 ;
for i = 0 to 2 exclusive	for ( int i = 0 ; i < 2 * n ; i ++ )
set x to ( ( int ) a [ i ] + 1 ) * 1 . 0 - a [ i ]	x = ( ( int ) a [ i ] + 1 ) * 1.0 - a [ i ] ;
if ( fabs ( x - 1 ) < = eps	if ( fabs ( x - 1 ) <= eps )
increment num + +	num ++ ;
else	else
set sum to sum + x	sum += x ;
create integer m = 0	int m = 0 ;
if num is less than 0 , set m to n - num	if ( num < n ) m = n - num ;
let double res = 0x3f3f3f3f * 1 . 0	double res = 0x3f3f3f3f * 1.0 ;
loop until m < = min ( 2 * n - num , n ) , set res to min of res and fabs ( sum - m )	for ( ; m <= min ( 2 * n - num , n ) ; m ++ ) res = min ( res , fabs ( sum - m ) ) ;
print fixed , setprecision ( 3 ) , and res	cout << fixed << setprecision ( 3 ) << res << endl ;
create ifstream infile	ifstream infile ;
create ofstream outfile	ofstream outfile ;
create long double array a with size 2 * 2005 , create 2d long double array dp with size 2 * 2005 by 2005	long double a [ 2 * 2005 ] , dp [ 2 * 2005 ] [ 2005 ] ;
create integer n	int n ;
declare OpenFile with no arguments , returning integer	int OpenFile ( )
using infile open file " 351A . INP " in ios : : in mode	infile . open ( " 351A.INP " , ios :: in ) ;
using outfile open file " 351A . OUT " in ios : : out mode	outfile . open ( " 351A.OUT " , ios :: out ) ;
if stream infile failed	if ( infile . fail ( ) )
print " Khong mo duoc file input ! " print newline	cout << " Khong mo duoc file input ! " << endl ;
return - 1 from function	return - 1 ;
if stream outfile failed	if ( outfile . fail ( ) )
print " khong mo duoc file output ! " print newline	cout << " khong mo duoc file output! " << endl ;
return - 1 from function	return - 1 ;
declare input with no arguments , returning void	void input ( )
read n	cin >> n ;
for i = 1 to 2 * n inclusive , read a [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
declare init with no arguments , returning void	void init ( )
for i = 0 to 2 * n inclusive	for ( int i = 0 ; i <= 2 * n ; i ++ )
for j = 0 to n inclusive , set dp [ i ] [ j ] to INT_MAX	for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = INT_MAX ;
set dp [ 0 ] [ 0 ] to 0	dp [ 0 ] [ 0 ] = 0 ;
declare process with no arguments , returning void	void process ( )
for i = 1 to 2 * n inclusive	for ( int i = 1 ; i <= 2 * n ; i ++ )
for j = 0 to minimum of i and n inclusive	for ( int j = 0 ; j <= min ( i , n ) ; j ++ )
create long doubles val1 , val2 with val1 = INT_MAX , val2 = INT_MAX	long double val1 = INT_MAX , val2 = INT_MAX ;
if j is greater than 0 , set val to dp [ i - 1 ] [ j - 1 ] + round up ( a [ i ] ) - a [ i ]	if ( j > 0 ) val1 = dp [ i - 1 ] [ j - 1 ] + ceil ( a [ i ] ) - a [ i ] ;
if i - j is less than or equal to n , set val2 to dp [ i - 1 ] [ j ] + round down ( a [ i ] ) - a [ i ]	if ( ( i - j ) <= n ) val2 = dp [ i - 1 ] [ j ] + floor ( a [ i ] ) - a [ i ] ;
set dp [ i ] [ j ] to val1	dp [ i ] [ j ] = val1 ;
if absolute value of val2 is less than absolute value of val1 , set dp [ i ] [ j ] to val2	if ( fabs ( val2 ) < fabs ( val1 ) ) dp [ i ] [ j ] = val2 ;
declare output with no arguments , returning void	void output ( )
set stream format to fixed , set precision to 3 , print absolute value of dp [ 2 * n ] [ n ] print newline	cout << fixed << setprecision ( 3 ) << fabs ( dp [ 2 * n ] [ n ] ) << endl ;
declare in with no arguments , returning void	void in ( )
for i = 0 to 2 * n inclusive	for ( int i = 0 ; i <= 2 * n ; i ++ )
for j = 0 to n inclusive	for ( int j = 0 ; j <= n ; j ++ )
if dp [ i ] [ j ] is INT_MAX	if ( dp [ i ] [ j ] == INT_MAX )
print 999999 print " "	cout << 999999 << "   " ;
else if dp [ i ] [ j ] is greater than or equal to 0	else if ( dp [ i ] [ j ] >= 0 )
print " " print dp [ i ] [ j ] print " "	cout << "   " << dp [ i ] [ j ] << "   " ;
else	else
print dp [ i ] [ j ] print " "	cout << dp [ i ] [ j ] << "   " ;
print newline	cout << endl ;
run input	input ( ) ;
run init	init ( ) ;
run process	process ( ) ;
run output	output ( ) ;
create ifstream infile	ifstream infile ;
create ofstream outfile	ofstream outfile ;
create long double array a with size 2 * 2005 , create 2d long double array dp with size 2 * 2005 by 2005	long double a [ 2 * 2005 ] , dp [ 2 * 2005 ] [ 2005 ] ;
create integer n	int n ;
declare OpenFile with no arguments , returning integer	int OpenFile ( )
using infile open " input . txt " using ios : : in mode	infile . open ( " input.txt " , ios :: in ) ;
using outfile open " output . txt " using ios : : out mode	outfile . open ( " output.txt " , ios :: out ) ;
if infile failed	if ( infile . fail ( ) )
print " Khong mo duoc file input ! " print newline	cout << " Khong mo duoc file input ! " << endl ;
return - 1 from function	return - 1 ;
if outfile failed	if ( outfile . fail ( ) )
print " khong mo duoc file output ! " print newline	cout << " khong mo duoc file output! " << endl ;
return - 1 from function	return - 1 ;
declare input with no arguments , returning void	void input ( )
read n	cin >> n ;
for i = 1 to 2 * n inclusive , read a [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
declare init with no arguments , returning void	void init ( )
for i = 0 to 2 * n inclusive	for ( int i = 0 ; i <= 2 * n ; i ++ )
for j = 0 to n inclusive , set dp [ i ] [ j ] to INT_MAX	for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = INT_MAX ;
set dp [ 0 ] [ 0 ] to 0	dp [ 0 ] [ 0 ] = 0 ;
declare process with no arguments , returning void	void process ( )
for i = 1 to 2 * n inclusive	for ( int i = 1 ; i <= 2 * n ; i ++ )
for j = 0 to minimum of i and n inclusive	for ( int j = 0 ; j <= min ( i , n ) ; j ++ )
create long doubles val1 , val2 with val1 = INT_MAX , val2 = INT_MAX	long double val1 = INT_MAX , val2 = INT_MAX ;
if j is greater than 0 , set val1 to dp [ i - 1 ] [ j - 1 ] + round up ( a [ i ] ) - a [ i ]	if ( j > 0 ) val1 = dp [ i - 1 ] [ j - 1 ] + ceil ( a [ i ] ) - a [ i ] ;
if ( i - j ) is less than or equal to n , set val2 to dp [ i - 1 ] [ j ] + round down ( a [ i ] ) - a [ i ]	if ( ( i - j ) <= n ) val2 = dp [ i - 1 ] [ j ] + floor ( a [ i ] ) - a [ i ] ;
set dp [ i ] [ j ] to val1	dp [ i ] [ j ] = val1 ;
if absolute value of val2 is less than absolute value of val1 , set dp [ i ] [ j ] to val2	if ( fabs ( val2 ) < fabs ( val1 ) ) dp [ i ] [ j ] = val2 ;
declare output with no arguments , returning void	void output ( )
set cout flag fixed , set cout precision to 3 , print absolute value of dp [ 2 * n ] [ n ] print newline	cout << fixed << setprecision ( 3 ) << fabs ( dp [ 2 * n ] [ n ] ) << endl ;
declare in with no arguments , returning void	void in ( )
for i = 0 to 2 * n inclusive	for ( int i = 0 ; i <= 2 * n ; i ++ )
for j = 0 to n inclusive	for ( int j = 0 ; j <= n ; j ++ )
if dp [ i ] [ j ] is INT_MAX	if ( dp [ i ] [ j ] == INT_MAX )
print 999999 print " "	cout << 999999 << "   " ;
else if dp [ i ] [ j ] is greater than or equal to 0	else if ( dp [ i ] [ j ] >= 0 )
print " " print dp [ i ] [ j ] print " "	cout << "   " << dp [ i ] [ j ] << "   " ;
else	else
print dp [ i ] [ j ] print " "	cout << dp [ i ] [ j ] << "   " ;
print newline	cout << endl ;
run input	input ( ) ;
run init	init ( ) ;
run process	process ( ) ;
run output	output ( ) ;
in function fastMax taking two ints x and y and returning an int	int fastMax ( int x , int y )
return ( ( ( y - x ) bitshift right by ( 32 - 1 ) ) bitwise - and ( x bitwise - xor y ) ) bitwise - xor y	return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ y ;
in function fastMin taking two ints x and y and returning an int	int fastMin ( int x , int y )
return ( ( ( y - x ) bitshift right by ( 32 - 1 ) ) bitwise - and ( x bitwise - xor y ) ) bitwise - xor x	return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ x ;
MAX = const long long int with MAXN = 2001	const long long int MAXN = 2001 ;
a = long double array of size 2 * MAXN	long double a [ 2 * MAXN ] ;
n = long long int	long long int n ;
dp = two dimensional long double array of sizes MAXN and MAXN	long double dp [ MAXN ] [ MAXN ] ;
visit = two dimensional bool array of sizes MAXN and MAXN	bool visit [ MAXN ] [ MAXN ] ;
in function recursion taking three long long ints i , ceils and floors and returning a double	double recursion ( long long int i , long long int ceils , long long int floors )
if i is greater than 2 * n then return 0	if ( i > 2 * n ) return 0 ;
if visit [ ceils ] [ floors ] is true return dp [ ceils ] [ floors ]	if ( visit [ ceils ] [ floors ] ) return dp [ ceils ] [ floors ] ;
val1 = long double with val1 = INT_MAX	long double val1 = INT_MAX ;
val2 = long double with val2 = INT_MAX	long double val2 = INT_MAX ;
if ceils is less than n set val1 to ceil of a [ i ] - a [ i ] + recursion of i + 1 , ceils + 1 and floors	if ( ceils < n ) val1 = ceil ( a [ i ] ) - a [ i ] + recursion ( i + 1 , ceils + 1 , floors ) ;
if floors is less than n then set val2 to floor of a [ i ] - a [ i ] + recursion of i + 1 , ceils and floors + 1	if ( floors < n ) val2 = floor ( a [ i ] ) - a [ i ] + recursion ( i + 1 , ceils , floors + 1 ) ;
ans = long double	long double ans ;
if fabs of val is less than fabs of val2	if ( fabs ( val1 ) < fabs ( val2 ) )
set ans to val1	ans = val1 ;
else	else
set ans to val2	ans = val2 ;
set visit [ ceils ] [ floors ] to true	visit [ ceils ] [ floors ] = true ;
set dp [ ceils ] [ floors ] to ans and return dp [ ceils ] [ floors ]	return dp [ ceils ] [ floors ] = ans ;
in function solve	void solve ( )
read n	cin >> n ;
for i = 1 to 2 * n inclusive read a [ i ]	for ( int i = ( 1 ) ; i <= ( 2 * n ) ; ++ i ) cin >> a [ i ] ;
call fixed and setprectision of 3 on cout	cout << fixed << setprecision ( 3 ) ;
print fabs of recursion of 1 , 0 , 0	cout << fabs ( recursion ( 1 , 0 , 0 ) ) << endl ;
t = long long int	long long int t ;
set t to 1	t = 1 ;
call solve t times	while ( t -- ) solve ( ) ;
frac is a double function with double argument x	double frac ( double x )
return x - ( x casted to long long )	return x - ( long long ) x ;
create integer n	int n ;
read variable n from the input	cin >> n ;
declare double variable diff with value 0	double diff = 0 ;
create new long long called c with value 0	long long c = 0 ;
a is a new vector of doubles	vector < double > a ;
loop i from 0 to 2 * n exclusive	for ( int i = 0 ; i < 2 * n ; i ++ )
x is a new double	double x ;
read x from the user input	cin >> x ;
push frac ( x ) to the end of a	a . push_back ( frac ( x ) ) ;
if a [ i ] = 0 , increment c	if ( a [ i ] == 0 ) c ++ ;
increase diff by a [ i ]	diff += a [ i ] ;
create new double ans = 1e9	double ans = 1e9 ;
for i from 0 to c inclusive	for ( int i = 0 ; i <= c ; i ++ )
if i is less than c - n , go to the start of the loop	if ( i < c - n ) { continue ; }
declare new double variable p = abs ( diff - ( n - i ) * 1 . 0 )	double p = abs ( diff - ( n - i ) * 1.0 ) ;
set ans to min of p and ans	ans = min ( p , ans ) ;
set decimal output precision to 3 and force it to usefixed floating - point notation	cout << setprecision ( 3 ) << fixed ;
print ans and ' \ n ' to the output	cout << ans << ' \n ' ;
create ifstrean called infile	ifstream infile ;
create ofstream outfile	ofstream outfile ;
declare an array of long doubles a with 2 * 2005 elements and 2d array dp with size 2 * 2005 by 2005	long double a [ 2 * 2005 ] , dp [ 2 * 2005 ] [ 2005 ] ;
create new integer variable n	int n ;
OpenFile is a integer function	int OpenFile ( )
open file called " 351A . INP " with parameter ios : : in , to ifstream	infile . open ( " 351A.INP " , ios :: in ) ;
open file called " 351A . OUT " with parameter ios : : out , to ofstream	outfile . open ( " 351A.OUT " , ios :: out ) ;
if infile . fail ( )	if ( infile . fail ( ) )
print " Khong mo duoc file input ! "	cout << " Khong mo duoc file input ! " << endl ;
return - 1	return - 1 ;
if outfile . fail ( )	if ( outfile . fail ( ) )
print " khong mo duoc file output ! "	cout << " khong mo duoc file output! " << endl ;
return - 1	return - 1 ;
function input	void input ( )
read n from the input	cin >> n ;
start for loop from i = 1 to 2 * n inclusive , read user input to a [ i ] on each loop	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
define function init	void init ( )
in a for loop , change i from 0 to 2 * n inclusive incrementing i	for ( int i = 0 ; i <= 2 * n ; i ++ )
for loop , changing j from 0 to n inclusive and assigning INT_MAX to dp [ i ] [ j ] on each iteration	for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = INT_MAX ;
change dp [ 0 ] [ 0 ] to 0	dp [ 0 ] [ 0 ] = 0 ;
function process	void process ( )
in a for loop , change i from 1 to 2 * n inclusive incrementing i	for ( int i = 1 ; i <= 2 * n ; i ++ )
for integer j = 0 to min of i and n inclusive	for ( int j = 0 ; j <= min ( i , n ) ; j ++ )
create long double variables val1 with value INT_MAX and val2 = INT_MAX	long double val1 = INT_MAX , val2 = INT_MAX ;
if j is greater than 0 , change val1 to dp [ i - 1 ] [ j - 1 ] + ceil ( a [ i ] ) - a [ i ]	if ( j > 0 ) val1 = dp [ i - 1 ] [ j - 1 ] + ceil ( a [ i ] ) - a [ i ] ;
if ( i - j ) < = n , set val2 to dp [ i - 1 ] [ j ] + ( a [ i ] ) - a [ i ] ) rounded down	if ( ( i - j ) <= n ) val2 = dp [ i - 1 ] [ j ] + floor ( a [ i ] ) - a [ i ] ;
assign val1 to dp [ i ] [ j ]	dp [ i ] [ j ] = val1 ;
if fabs ( val2 ) is less than fabs ( val1 ) , change dp [ i ] [ j ] to val2	if ( fabs ( val2 ) < fabs ( val1 ) ) dp [ i ] [ j ] = val2 ;
void function output	void output ( )
change output format to fixed , set decimal precision to 3 and print fabs ( dp [ 2 * n ] [ n ] )	cout << fixed << setprecision ( 3 ) << fabs ( dp [ 2 * n ] [ n ] ) << endl ;
in the function in	void in ( )
start for loop from i = 0 to 2 * n inclusive incrementing i	for ( int i = 0 ; i <= 2 * n ; i ++ )
start for loop from j = 0 to n inclusive	for ( int j = 0 ; j <= n ; j ++ )
if dp [ i ] [ j ] is equal to INT_MAX	if ( dp [ i ] [ j ] == INT_MAX )
print 999999 and " " to the standard output	cout << 999999 << "   " ;
else if dp [ i ] [ j ] > = 0	else if ( dp [ i ] [ j ] >= 0 )
print " " , dp [ i ] [ j ] and " "	cout << "   " << dp [ i ] [ j ] << "   " ;
else	else
print dp [ i ] [ j ] and " " to the standard output	cout << dp [ i ] [ j ] << "   " ;
print new line	cout << endl ;
call input ( )	input ( ) ;
call function init ( )	init ( ) ;
call method process ( )	process ( ) ;
call output ( )	output ( ) ;
declare int n	int n ;
read n	cin >> n ;
set n to 2 * n	n = 2 * n ;
declare an array of long doubles a with 100005 elements	long double a [ 100005 ] ;
declare integer i	int i ;
declare vectors of long doubles v , v1 and v2	vector < long double > v1 , v , v2 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] = ( int ) a [ i ]	if ( a [ i ] == ( int ) a [ i ] )
push a [ i ] into v	v . push_back ( a [ i ] ) ;
else	else
push a [ i ] into v1	v1 . push_back ( a [ i ] ) ;
for i from 0 to length of v1 exclusive	for ( i = 0 ; i < v1 . size ( ) ; i ++ )
declare long double variable g = v1 [ i ] rounded up - v1 [ i ]	long double g = ceil ( v1 [ i ] ) - v1 [ i ] ;
push g into v2	v2 . push_back ( g ) ;
sort v2	sort ( v2 . begin ( ) , v2 . end ( ) ) ;
declare integer h = n / 2	int h = n / 2 ;
create int j	int j ;
declare int variable hh = length of v2	int hh = v2 . size ( ) ;
declare long double variables ans1 and ans = 0 and ans2 = 1e9	long double ans1 = 0 , ans = 0 , ans2 = 1e9 ;
for i from - 1 to hh exclusive	for ( i = - 1 ; i < hh ; i ++ )
if i is equal to - 1	if ( i == - 1 )
else	else
increase ans by v2 [ i ]	ans += v2 [ i ] ;
assign 0 to ans1	ans1 = 0 ;
if ( ( i + 1 ) + length of v ) > = h and ( n - ( i + 1 ) ) > = h	if ( ( ( i + 1 ) + v . size ( ) ) >= h && ( n - ( i + 1 ) ) >= h )
for j from i + 1 to hh exclusive , subtract 1 - v2 [ j ] from ans1	for ( j = i + 1 ; j < hh ; j ++ ) { ans1 -= 1 - v2 [ j ] ; }
set ans2 to min of ans2 and abs ( ans + ans1 )	ans2 = min ( ans2 , abs ( ans + ans1 ) ) ;
set output fixed flag , set decimal precision to 3 and print ans2	cout << fixed << setprecision ( 3 ) << ans2 << endl ;
create long double array a with size 2 * 2005 , create 2d long double array dp with size 2 * 2005 by 2005	long double a [ 2 * 2005 ] , dp [ 2 * 2005 ] [ 2005 ] ;
create integer n	int n ;
declare input with no arguments , returning integer	int input ( )
read n	cin >> n ;
for i = 1 to 2 * n inclusive , read a [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
declare init with no arguments , returning integer	int init ( )
for i = 0 to 2 * n inclusive	for ( int i = 0 ; i <= 2 * n ; i ++ )
for j = 0 to n inclusive , set dp [ i ] [ j ] to INT_MAX	for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = INT_MAX ;
set dp [ 0 ] [ 0 ] to 0	dp [ 0 ] [ 0 ] = 0 ;
declare process with no arguments , returning integer	int process ( )
for i = 1 to 2 * n inclusive	for ( int i = 1 ; i <= 2 * n ; i ++ )
for cei = 0 to minimum of i and n inclusive	for ( int cei = 0 ; cei <= min ( i , n ) ; cei ++ )
create long doubles val1 , val2 with val1 = INT_MAX , val2 = INT_MAX	long double val1 = INT_MAX , val2 = INT_MAX ;
if cei is greater than 0 , set val1 to dp [ i - 1 ] [ cei - 1 ] + round up ( a [ i ] ) - a [ i ]	if ( cei > 0 ) val1 = dp [ i - 1 ] [ cei - 1 ] + ceil ( a [ i ] ) - a [ i ] ;
if ( i - cei ) is less than or equal to n , set val2 to dp [ i - 1 ] [ cei ] + round down ( a [ i ] ) - a [ i ]	if ( ( i - cei ) <= n ) val2 = dp [ i - 1 ] [ cei ] + floor ( a [ i ] ) - a [ i ] ;
set dp [ i ] [ cei ] to val1	dp [ i ] [ cei ] = val1 ;
if absolute value of val2 is less than absolute value of val1 , set dp [ i ] [ cei ] to val2	if ( fabs ( val2 ) < fabs ( val1 ) ) dp [ i ] [ cei ] = val2 ;
declare output with no arguments , returning integer	int output ( )
print fixed , set cout precision to 3 , print absolute value of dp [ 2 * n ] [ n ] , print newline	cout << fixed << setprecision ( 3 ) << fabs ( dp [ 2 * n ] [ n ] ) << endl ;
declare in with no arguments , returning void	void in ( )
for i = 0 to 2 * n inclusive	for ( int i = 0 ; i <= 2 * n ; i ++ )
for j = 0 to n inclusive	for ( int j = 0 ; j <= n ; j ++ )
if dp [ i ] [ j ] is INT_MAX	if ( dp [ i ] [ j ] == INT_MAX )
print 999999 print " "	cout << 999999 << "   " ;
else if dp [ i ] [ j ] is greater than or equal to 0	else if ( dp [ i ] [ j ] >= 0 )
print " " print dp [ i ] [ j ] print " "	cout << "   " << dp [ i ] [ j ] << "   " ;
else	else
print dp [ i ] [ j ] print " "	cout << dp [ i ] [ j ] << "   " ;
print newline	cout << endl ;
run input	input ( ) ;
run init	init ( ) ;
run process	process ( ) ;
run output	output ( ) ;
n = integer	int n ;
Read n	cin >> n ;
if n is 1	if ( n == 1 )
print 1 and a new line	cout << 1 << endl ;
else do the following	else
if n is odd , then decrement n	if ( n % 2 != 0 ) n -- ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
Create global constant integers n = 100010 and INF = 1000000007	const int N = 1e5 + 10 , INF = 1e9 + 7 ;
Create n as a global integer	int n ;
Set n to the input	cin >> n ;
Output one plus n divided by 2	cout << ( n / 2 ) + 1 << ' \n ' ;
set const int maxa to 1000000	const int maxa = 1000000 ;
integers = n	int n ;
read n	cin >> n ;
if n is 1 then do the following	if ( n == 1 )
output 1	cout << " 1 " << endl ;
else	else
output ( n / 2 ) + 1	cout << int ( n / 2 ) + 1 << endl ;
create integer n	int n ;
while read n is true , print n / 2 + 1 print newline	while ( cin >> n ) { cout << ( n ) / 2 + 1 << endl ; }
declare int n	int n ;
read from the input to n	cin >> n ;
print n / 2 + 1 and ' \ n '	cout << n / 2 + 1 << ' \n ' ;
create const long long int MOD = 1000000007	const long long int MOD = 1000000007 ;
create long long ints N , M , K , H , W , L and R	long long int N , M , K , H , W , L , R ;
read from the input to N	cin >> N ;
print N / 2 + 1	cout << N / 2 + 1 << endl ;
n = integer	int n ;
Read n	cin >> n ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
n = integer	int n ;
Read n	cin >> n ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
a = integer	int a ;
Read a	cin >> a ;
print a / 2 + 1 and a new line	cout << a / 2 + 1 << endl ;
num = integer	long long int num ;
Read num	cin >> num ;
print ( num / 2 ) + 1 and a new line	cout << ( num / 2 ) + 1 << endl ;
create integer n	int n ;
read input to n	cin >> n ;
print n / 2 + 1	cout << n / 2 + 1 << endl ;
create int n	int n ;
read n	cin >> n ;
print n / 2 + 1	cout << n / 2 + 1 << endl ;
pi = const double with pi = 2 * acos of 0 . 0	const double pi = 2 * acos ( 0.0 ) ;
maxn = const int with maxn = 2e2 + 10	const int maxn = 2e2 + 10 ;
n = int	int n ;
read n	cin >> n ;
set n to n / 2	n /= 2 ;
print n + 1	cout << n + 1 << endl ;
create unsigned long integer i , j , n , sum with sum = 0	unsigned long int i , j , n , sum = 0 ;
read n	cin >> n ;
set sum to n / 2 + 1	sum = n / 2 + 1 ;
print sum print newline	cout << sum << endl ;
integers = n	int n ;
read n	cin >> n ;
output n / 2 + 1	cout << n / 2 + 1 << endl ;
create int n	int n ;
read n	cin >> n ;
print n divided by 2 + 1	cout << n / 2 + 1 << endl ;
n , k , s , p = integers	long long n , k , s , p ;
read n	cin >> n ;
print n / 2 + 1	cout << n / 2 + 1 << ' \n ' ;
n = integer	int n ;
Read n	cin >> n ;
print ( n / 2 ) + 1 and a new line	cout << ( n / 2 ) + 1 << endl ;
create integers n and m	int n , m ;
read n	cin >> n ;
set m to n divided by 2	m = n / 2 ;
print m + 1	cout << m + 1 << endl ;
integers = n	int n ;
read n	cin >> n ;
output n / 2 + 1	cout << n / 2 + 1 << endl ;
integers = n	int n ;
read n	cin >> n ;
if n is 1 then do the following	if ( n == 1 )
output 1	cout << 1 << endl ;
else	else
output n / 2 + 1	cout << n / 2 + 1 << endl ;
let n be a integer	int n ;
read n	cin >> n ;
print n / 2 + 1 and newline	cout << n / 2 + 1 << endl ;
n , ans = long long with ans = 2	long long n , ans = 2 ;
read n	cin >> n ;
if n is 1	if ( n == 1 )
print 1	cout << 1 << endl ;
if n is 2 or n is 3	if ( n == 2 || n == 3 )
print 2	cout << 2 << endl ;
print n / 2 + 1	cout << n / 2 + 1 << endl ;
declare constant double PI to 2 times the arccosine of 0	const double PI = 2.0 * acos ( 0.0 ) ;
declare constant int MOD to be 1e9 + 7	const int MOD = 1e9 + 7 ;
declare constant int oo to be 2 * MOD plus 1e3	const int oo = 2 * MOD + 1e3 ;
declare function long long gcd of long long a , long long b	long long gcd ( long long a , long long b )
if not b , return a , and if b , return gcd of b and a mod b	return ! b ? a : gcd ( b , a % b ) ;
declare int n	int n ;
input n	cin >> n ;
output n over 1 plus 1 and a newline	cout << n / 2 + 1 << ' \n ' ;
PI = const double with PI = acos of - 1 . 0	const double PI = acos ( - 1.0 ) ;
eps = const double with eps = 1e - 6	const double eps = 1e-6 ;
INF = const int with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
maxn = const int with maxn = 100	const int maxn = 100 ;
T , n , m = int	int T , n , m ;
loop while reading n print n / 2 + 1	while ( cin >> n ) { cout << n / 2 + 1 << endl ; }
integers = long int n	long long int n ;
read n	cin >> n ;
output ( n / 2 + 1 )	cout << ( n / 2 + 1 ) << endl ;
n = integer	int n ;
Read n	cin >> n ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
set inf = 205	const int inf = 205 ;
let a [ inf ] be int array	int a [ inf ] ;
create int array b [ inf ]	int b [ inf ] ;
create int m , n , k , t , x	int m , n , k , t , x ;
while read n , print n / 2 + 1	while ( cin >> n ) { cout << n / 2 + 1 << endl ; }
set long long n , m , a , b , x , ff to 2e7 + 1 , l , r , cnt , ans	long long n , m , a , b , x , ff = 2e7 + 1 , l , r , cnt , ans ;
make a vector using long long integer out of v , f , and res	vector < long long > v , f , res ;
s1 , s2 = string	string s1 , s2 ;
used array of 1001 = long long integers	long long used [ 1001 ] ;
read n	cin >> n ;
output n / 2 + 1	cout << n / 2 + 1 << endl ;
n , k = integers	int n , k ;
Read n	cin >> n ;
set k to n / 2	k = n / 2 ;
increment k	k ++ ;
print k and a new line	cout << k << endl ;
n = long long integers	long long n ;
read n	cin >> n ;
output n / 2 + 1	cout << n / 2 + 1 << endl ;
integers = a	int a ;
while input of a output ( a / 2 ) + 1	while ( cin >> a ) { cout << ( a / 2 ) + 1 << endl ; }
n = integer	long long n ;
Read n	cin >> n ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
n , b = integers	int n , b ;
Read n	cin >> n ;
set b to n / 2 + 1	b = n / 2 + 1 ;
print b and a new line	cout << b << endl ;
n = integer	int n ;
Read n	cin >> n ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
n , ans = integers	long long n , ans ;
while reading values n	while ( cin >> n )
set ans to n / 2 + 1	ans = n / 2 + 1 ;
print ans and a new line	cout << ans << endl ;
create long long n	long long n ;
read n	cin >> n ;
print n / 2 + 1 print " \ n "	cout << n / 2 + 1 << " \n " ;
integers = n	int n ;
read n	cin >> n ;
output n / 2 + 1	cout << n / 2 + 1 << endl ;
n = integer	int n ;
Read n	cin >> n ;
print ( n / 2 ) + 1 and a new line	cout << ( n / 2 ) + 1 << endl ;
= long long integers	long long n ;
read n	while ( cin >> n )
integers = m , ans	int m , ans ;
set m to n / 2	m = n / 2 ;
set ans to m + 1	ans = m + 1 ;
output ans	cout << ans << endl ;
create integer n	int n ;
read n and print n / 2 + 1 in a loop	while ( cin >> n ) { cout << n / 2 + 1 << endl ; }
N = integer	int N ;
Read N	cin >> N ;
print N / 2 + 1 and a new line	cout << N / 2 + 1 << endl ;
declare integer n	int n ;
read from the input to n	cin >> n ;
print ( n + 2 ) / 2	cout << ( n + 2 ) / 2 << endl ;
num = integer	int num ;
Read num	cin >> num ;
print num / 2 + 1 and a new line	cout << num / 2 + 1 << endl ;
declare integers n and ans with ans = 0	int n , ans = 0 ;
read n and keep looping , printing n / 2 + 1 on each iteration	while ( cin >> n ) { cout << n / 2 + 1 << endl ; }
create integer n	int n ;
read n	cin >> n ;
print n / 2 + 1 print ' \ n '	cout << n / 2 + 1 << ' \n ' ;
declare 2d int array dp with size 5000 by 5	int dp [ 5000 ] [ 5 ] ;
declare integer arrays s and c with size 5000	int s [ 5000 ] , c [ 5000 ] ;
create int n	int n ;
read input to n	cin >> n ;
print n / 2 + 1	cout << n / 2 + 1 << endl ;
declare long longs n and ans where ans = 2	long long n , ans = 2 ;
read from the input to n	cin >> n ;
if n = 1	if ( n == 1 )
print 1	cout << 1 << endl ;
if n is 2 or n is 3	if ( n == 2 || n == 3 )
print 2	cout << 2 << endl ;
print n / 2 + 1	cout << n / 2 + 1 << endl ;
declare an uninitialized integer n and initialize integer count to zero	int n , count = 0 ;
read n	cin >> n ;
print the value of n with one added after being divided by two and a newline	cout << n / 2 + 1 << endl ;
n = integer	int n ;
Read n	cin >> n ;
print n / 2 + 1 and a new line	cout << n / 2 + 1 << endl ;
l , r , x , y , k = long long	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for long long i = x to y inclusive	for ( long long i = x ; i <= y ; i ++ )
if i * k > = l and di * k < = r	if ( i * k >= l && i * k <= r )
print YES	cout << " YES " << endl ;
print NO	cout << " NO " << endl ;
declare long long variables z , x , c , v and b	long long z , x , c , v , b ;
read standard input to z , x , c , v and b	cin >> z >> x >> c >> v >> b ;
create new boolean cek with value false	bool cek = false ;
in a for loop , change q from c to v inclusive	for ( long long q = c ; q <= v ; q ++ )
declare long long variable asd = q * b	long long asd = q * b ;
if asd > = z and asd < = x , assign the new value = true to cek	if ( asd >= z && asd <= x ) cek = true ;
if cek = true	if ( cek == true )
print " YES "	cout << " YES " << endl ;
else	else
print " NO " to the standard output	cout << " NO " << endl ;
l , r , x , y , k , flag = long long integers with flag = 0	long long int l , r , x , y , k , flag = 0 ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for j = x to y	for ( int j = x ; j <= y ; j ++ )
if ( ( k * j ) > = l and ( k * j ) < = r ) , flag = 1	if ( ( k * j ) >= l && ( k * j ) <= r ) { flag = 1 ; }
if ( flag )	if ( flag )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
create long long l , r , x , y , k , i , j , c , c = 0	long long l , r , x , y , k , i , j , c = 0 ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for j = x to y inclusive	for ( j = x ; j <= y ; j ++ )
if k * j < = r and k * j > = l	if ( k * j <= r && k * j >= l )
print YES	cout << " YES " << endl ;
c = 1	c = 1 ;
break	break ;
if c = 0 , print NO	if ( c == 0 ) { cout << " NO " << endl ; }
let l , r , x , y , and k long long ints	long long int l , r , x , y , k ;
let exist a bool with value false	bool exist = false ;
read l , r , x , y , and k	cin >> l >> r >> x >> y >> k ;
for i from x to y	for ( int i = x ; i <= y ; i ++ )
if i * k at most r and i * k at least l	if ( ( i * k ) <= r and ( i * k ) >= l )
set exist to true	exist = true ;
leave loop	break ;
if exist	if ( exist )
print YES	cout << " YES\n " ;
otherwise	else
print NO	cout << " NO\n " ;
let l , r , x , y , k be long integers	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
let i be a long integer	long long i ;
let ok be an integer which equals 0	int ok = 0 ;
for i = x to y inclusive	for ( i = x ; i <= y ; i ++ )
if l < = i * k and r > = i * k , ok = 1	if ( l <= i * k && r >= i * k ) ok = 1 ;
if ok is true	if ( ok )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
l , r , x , y , k = long long	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for i = x to y inclusive	for ( int i = x ; i <= y ; i ++ )
if k * i > = l and k * i < = r	if ( k * i >= l && k * i <= r )
print YES	cout << " YES " << endl ;
goto end	goto end ;
print NO	cout << " NO " << endl ;
label end	end : ;
let l , r , x , y , k be integers	int l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for integer i is equal to l , j is equal to x , i < = r and j < = y	for ( int i = l , j = x ; i <= r && j <= y ; )
if i / j is equal to k and i modulo j is equal to 0	if ( i / j == k && i % j == 0 )
print YES and newline	cout << " YES " << endl ;
else if i / j > = k	else if ( i / j >= k )
increment j by 1	j ++ ;
else do the following	else
increment i by 1	i ++ ;
print NO and newline	cout << " NO " << endl ;
let l , r , x , and y be doubles	double l , r , x , y ;
let k be a double	double k ;
let flag be a boolean , set flag to false	bool flag = false ;
read in l , r , x , y , and k	cin >> l >> r >> x >> y >> k ;
for i = 0 iterate until i < = y	for ( double i = x ; i <= y ; i ++ )
if k * i < = r and k * i > = l , set flag to true	if ( k * i <= r && k * i >= l ) flag = true ;
if flag is true	if ( flag )
print YES	cout << " YES " << endl ;
or else	else
print NO	cout << " NO " << endl ;
l , r , x , y , k = long long	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
flag = 0 = int	int flag = 0 ;
for i = x to y inclusve	for ( int i = x ; i <= y ; i ++ )
if i * k > = 1 and i * k < = r	if ( i * k >= l && i * k <= r )
set flag to 1	flag = 1 ;
exit loop	break ;
if flag	if ( flag )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create long long int l , r , x , y , k	long long int l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
found = false	bool found = false ;
for b = x to y inclusive	for ( long long int b = x ; b <= y ; ++ b )
set a = k * b	long long int a = k * b ;
if a > = 1 and a < = r	if ( a >= l && a <= r )
set found to true	found = true ;
break	break ;
if found different from 0	if ( found )
print YES	cout << " YES "
print a newline	<< " \n " ;
else	else
print NO	cout << " NO "
print a newline	<< " \n " ;
l , r , x , y , k = long long int	long long int l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for i = x to i < = y	for ( int i = x ; i <= y ; i ++ )
if i * k > = 1 and i * k < = r	if ( ( i * k ) >= l && ( i * k ) <= r )
print YES	cout << " YES " << endl ;
print NO	cout << " NO " << endl ;
create new constant integer maxn = 15	const int maxn = 15 ;
declare new cons integer called inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
declare new constant double eps with value 1e - 10	const double eps = 1e-10 ;
declare doubles l , r , x , y and k	double l , r , x , y , k ;
read standard input to l , r , x , y and k	cin >> l >> r >> x >> y >> k ;
if r < k * x or l > k * y	if ( r < k * x || l > k * y )
print " NO "	cout << " NO " << endl ;
else	else
start for loop from i = x to y inclusive incrementing i	for ( long long i = x ; i <= y ; i ++ )
if i * k > = l and i * k < = r	if ( i * k >= l && i * k <= r )
print " YES " to the standard output	cout << " YES " << endl ;
print " NO "	cout << " NO " << endl ;
let maxn a constant long long int with value 2e5 + 3	const long long int maxn = 2e5 + 3 ;
let l , r , x , y , k , t long long ints with t = 0	long long int l , r , x , y , k , t = 0 ;
read l , r , x , y , and k	cin >> l >> r >> x >> y >> k ;
for long long int i from x to y	for ( long long int i = x ; i <= y ; i ++ )
if i * k at least l and i * k at most r	if ( i * k >= l && i * k <= r )
set t to 1	t = 1 ;
leave loop	break ;
if t	if ( t )
print YES	cout << " YES " << endl ;
otherwise	else
print NO	cout << " NO " << endl ;
declare long longs l , r , x , y , k	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
if l is greater than k * y or r is less than k * x	if ( l > k * y || r < k * x )
print " NO " , newline	cout << " NO " << endl ;
for i = l to r inclusive	for ( long long i = l ; i <= r ; i ++ )
for j = x to y inclusive	for ( long long j = x ; j <= y ; j ++ )
if i is greater than k * y or i is less than k * x	if ( i > k * y || i < k * x )
end loop	break ;
else if i is k * j	else if ( i == k * j )
print " YES " and newline	cout << " YES " << endl ;
print " NO " and newline	cout << " NO " << endl ;
declare integer array marked with size 101	int marked [ 101 ] ;
declare long longs l , r , x , y , k	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for i = x to y inclusive	for ( long long i = x ; i <= y ; i ++ )
if i * k is greater than or equal to l and i * k is less than or equal to r	if ( i * k >= l && i * k <= r )
print " YES " and newline	cout << " YES " << endl ;
go to jump point pause	goto pause ;
print " NO " and newline	cout << " NO " << endl ;
mark jump point pause	pause :
declare integer pause	int pause ;
read pause	cin >> pause ;
create float a , s , d , f , g	float a , s , d , f , g ;
create int i and flag , set flag to 0	int i , flag = 0 ;
read a , s , d , f , g	cin >> a >> s >> d >> f >> g ;
for i = d to f inclusive	for ( i = d ; i <= f ; i ++ )
if i * g < = s and g * i > = a	if ( i * g <= s && g * i >= a )
flag = 1	flag = 1 ;
break	break ;
if flag different from 0	if ( flag )
print YES	cout << " YES " << endl ;
else	else
print NO and a newline	cout << " NO " << endl ;
l , r , x , y , k = integers	long long int l , r , x , y , k ;
Read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for i = x to y exclusive	for ( long long i = x ; i <= y ; i ++ )
if i * k is greater than or equal to l an i * k is less than or equal to r	if ( i * k >= l && i * k <= r )
print YES and a new line	cout << " YES " << endl ;
print NO and a new line	cout << " NO " << endl ;
create long long l , r , x , y , k	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
while l < = r and x < = y	while ( l <= r && x <= y )
if l / x < k	if ( l / x < k )
increment l	l ++ ;
else if l / x = k	else if ( l / float ( x ) == k )
print YES	cout << " YES " << endl ;
else	else
increment x	x ++ ;
print NO and a newline	cout << " NO " << endl ;
declare constant integer variable inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
declare long ints l , r , x , y and k	long int l , r , x , y , k ;
bool function find with long int arguments start and end	bool find ( long int start , long int end )
create new long integer variable mid = ( start + end ) / 2	long int mid = ( start + end ) / 2 ;
return false if start + 1 is equal to end	if ( start + 1 == end ) return false ;
if mid * k is greater than r	if ( mid * k > r )
if find ( start , mid ) returned true	if ( find ( start , mid ) )
return true	return true ;
else	else
return false	return false ;
else if mid * k is less than l	else if ( mid * k < l )
if find ( mid , end ) returned true	if ( find ( mid , end ) )
return true	return true ;
else	else
return false	return false ;
else	else
return true	return true ;
create long long ints a , b , c , d and e	long long int a , b , c , d , e ;
read input to a , b , c , d and e	cin >> a >> b >> c >> d >> e ;
for i = c to d inclusive incrementing i	for ( int i = c ; i <= d ; i ++ )
declare new long long num with value i * e	long long num = i * e ;
if num > = a and num < = b	if ( num >= a && num <= b )
print " YES "	cout << " YES " << endl ;
else if num is greater than b	else if ( num > b )
break	break ;
print " NO "	cout << " NO " << endl ;
create long long l , r , x , y , k	long long l , r , x , y , k ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for b = x to y inclusive	for ( int b = x ; b <= y ; b ++ )
set a to k * b	long long a = k * b ;
if a > = 1 and a < = r	if ( a >= l && a <= r )
print YES	cout << " YES " << endl ;
print NO	cout << " NO " << endl ;
l , r , x , y = int	int l , r , x , y ;
k = float	float k ;
flag = 0	int flag = 0 ;
read l , r , x , y , k	cin >> l >> r >> x >> y >> k ;
for i = x to y inclusive	for ( int i = x ; i <= y ; i ++ )
if l < = k * i and k * i > = r flag = 1	if ( l <= k * i && k * i <= r ) { flag = 1 ; }
if flag	if ( flag )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
create ints n and k	int n , k ;
read n and k and while they ' re truthy	while ( cin >> n >> k )
create int a = n * 2 / k + ( n * 2 % k = = 0 ? 0 : 1 )	int a = n * 2 / k + ( n * 2 % k == 0 ? 0 : 1 ) ;
make integer b = n * 5 / k + ( n * 5 % k = = 0 ? 0 : 1 )	int b = n * 5 / k + ( n * 5 % k == 0 ? 0 : 1 ) ;
let int c = n * 8 / k + ( n * 8 % k = = 0 ? 0 : 1 )	int c = n * 8 / k + ( n * 8 % k == 0 ? 0 : 1 ) ;
show the result of a + b + c	cout << a + b + c << endl ;
make ints n and k	int n , k ;
read n and k	cin >> n >> k ;
create integer red = n * 2 / k	int red = n * 2 / k ;
make int green = n * 5 / k	int green = n * 5 / k ;
let int blue = n * 8 / k	int blue = n * 8 / k ;
if red is less than n * 2 . 0 / k , set red to red + 1	if ( red < n * 2.0 / k ) { red = red + 1 ; }
if green is less than n * 5 . 0 / k , add 1 to green	if ( green < n * 5.0 / k ) { green = green + 1 ; }
if blue is less than n * 8 . 0 / k , increase blue by 1	if ( blue < n * 8.0 / k ) { blue += 1 ; }
print the result of red + green + blue	cout << red + green + blue << endl ;
let n , k be long integers	long long n , k ;
read n , k	cin >> n >> k ;
let ans be a long integer with ans = 0LL	long long ans = 0LL ;
ans is equal to ( n * 2LL ) / k + ( n * 2LL modulo k is not equal to 0 )	ans = ( n * 2LL ) / k + ( n * 2LL % k != 0 ) ;
increment ans by ( n * 5LL ) / k + ( n * 5LL modulo k is not equal to 0 )	ans += ( n * 5LL ) / k + ( n * 5LL % k != 0 ) ;
increment ans by ( n * 8LL ) / k + ( n * 8LL modulo k is not equal to 0 )	ans += ( n * 8LL ) / k + ( n * 8LL % k != 0 ) ;
print ans and newline	cout << ans << ' \n ' ;
n , k = integers	int n , k ;
Read n and k	cin >> n >> k ;
sum = integer with 0	int sum = 0 ;
if n * 2 modulo k is 0	if ( n * 2 % k == 0 )
set sum to sum + n * 2 / k	sum += n * 2 / k ;
else do the following	else
set sum to sum + n * 2 / k + 1	sum += n * 2 / k + 1 ;
if n * 5 modulo k is 0	if ( n * 5 % k == 0 )
set sum to sum + n * 5 / k	sum += n * 5 / k ;
else do the following	else
set sum to sum + n * 5 / k + 1	sum += n * 5 / k + 1 ;
if n * 8 modulo k is 0	if ( n * 8 % k == 0 )
set sum to sum + n * 8 / k	sum += n * 8 / k ;
else do the following	else
set sum to sum + n * 8 / k + 1	sum += n * 8 / k + 1 ;
print sum and a new line	cout << sum << endl ;
n , k , red , green , blue , notebooks = long long integers	long long n , k , red , green , blue , notebooks ;
read n , k	cin >> n >> k ;
set red to 2 * n	red = 2 * n ;
set green to 5 * n	green = 5 * n ;
set blue to 8 * n	blue = 8 * n ;
set notebooks to ( red / k ) + ( green / k ) + ( blue / k )	notebooks = ( red / k ) + ( green / k ) + ( blue / k ) ;
if red modulo k is not equal to 0 then do the following notebooks + = 1	if ( red % k != 0 ) { notebooks += 1 ; }
if green modulo k is not equal to 0 then do the following notebooks + = 1	if ( green % k != 0 ) { notebooks += 1 ; }
if blue modulo k is not equal to 0 then do the following notebooks + = 1	if ( blue % k != 0 ) { notebooks += 1 ; }
write notebooks value	cout << notebooks << endl ;
p , q , lal , sobuj , nil = integers	double p , q , lal , sobuj , nil ;
read p , q	cin >> p >> q ;
lal = ceil ( ( p * 2 ) / q )	lal = ceil ( ( p * 2 ) / q ) ;
sobuj = ceil ( ( p * 5 ) / q )	sobuj = ceil ( ( p * 5 ) / q ) ;
nil = ceil ( ( p * 8 ) / q )	nil = ceil ( ( p * 8 ) / q ) ;
mot = integer with mot = lal + sobuj + nil	int mot = lal + sobuj + nil ;
print mot	cout << mot << endl ;
n , k = int	int n , k ;
res , cur = int	int res , cur ;
read n then k	cin >> n >> k ;
set res to 0	res = 0 ;
set cur to 2 * n	cur = n * 2 ;
increment res by ( cur + k - 1 ) / k	res += ( cur + k - 1 ) / k ;
set cur to n * 5	cur = n * 5 ;
increment res by ( cur + k - 1 ) / k	res += ( cur + k - 1 ) / k ;
set cur to n * 8	cur = n * 8 ;
increment res by ( cur + k - 1 ) / k	res += ( cur + k - 1 ) / k ;
print res	cout << res << endl ;
declare integer divUp	int divUp ( int a , int b )
return a / b + ( 1 if a % b is greater than 0 , else 0 )	return a / b + ( a % b > 0 ? 1 : 0 ) ;
declare integers n , k	int n , k ;
read n and k	cin >> n >> k ;
print result of run divUp with 2 * n , k as arguments + result of run divUp ( 5 * n , k ) + result of run divUp ( 8 * n , k ) , newline	cout << ( divUp ( 2 * n , k ) + divUp ( 5 * n , k ) + divUp ( 8 * n , k ) ) << endl ;
make doubles n and k	double n , k ;
read n and k	cin >> n >> k ;
create long long ints red = n * 2 , green = n * 5 , and blue = n * 8	long long red = n * 2 , green = n * 5 , blue = n * 8 ;
display ( long long ) ( ceil ( red / k ) + ceil ( green / k ) + ceil ( blue / k ) )	cout << ( long long ) ( ceil ( red / k ) + ceil ( green / k ) + ceil ( blue / k ) ) << endl ;
create long long constant inf = 1e16	const long long inf = 1e16 ;
new long long constant MAXN with value 1e6	const long long MAXN = 1e6 ;
declare new double constant variable pi = acos of - 1	const double pi = acos ( - 1 ) ;
declare new long longs n , k and ans	long long n , k , ans ;
read from the input to n and k	cin >> n >> k ;
decrement k by one	k -- ;
change ans to ans + ( n * 2 + k ) / ( k + 1 )	ans += ( n * 2 + k ) / ( k + 1 ) ;
change ans to the sum of ans and ( n * 5 + k ) / ( k + 1 )	ans += ( n * 5 + k ) / ( k + 1 ) ;
add ( n * 8 + k ) / ( k + 1 ) to ans	ans += ( n * 8 + k ) / ( k + 1 ) ;
print ans to the standard output	cout << ans << endl ;
create long long ints sum = 0 , a , and b	long long sum = 0 , a , b ;
read a and b	cin >> a >> b ;
if ( a * 2 ) % b is equal to 0	if ( ( a * 2 ) % b == 0 )
add ( a * 2 ) / b to sum	sum += ( a * 2 ) / b ;
otherwise	else
add ( ( a * 2 ) / b ) + 1 to sum	sum += ( ( a * 2 ) / b ) + 1 ;
if ( a * 5 ) % b is equal to 0	if ( ( a * 5 ) % b == 0 )
set sum to sum + ( a * 5 ) / b	sum += ( a * 5 ) / b ;
else do	else
set sum to sum + ( ( a * 5 ) / b ) + 1	sum += ( ( a * 5 ) / b ) + 1 ;
if ( a * 8 ) % b is equal to 0	if ( ( a * 8 ) % b == 0 )
set sum to sum + ( a * 8 ) / b	sum += ( a * 8 ) / b ;
else do	else
set sum to sum + ( ( a * 8 ) / b ) + 1	sum += ( ( a * 8 ) / b ) + 1 ;
show sum	cout << sum << endl ;
create long longs n and k	long long n , k ;
loop , reading n and k from the input	while ( cin >> n >> k )
declare new long longs sum1 , sum2 and sum3	long long sum1 , sum2 , sum3 ;
set sum1 to 2 * n / k	sum1 = 2 * n / k ;
if 2 * n % k ! = 0 , add 1 to sum1	if ( 2 * n % k != 0 ) { sum1 ++ ; }
assign 5 * n / k to sum2	sum2 = 5 * n / k ;
if 5 * n modulo k is not 0 , increment sum2	if ( 5 * n % k != 0 ) { sum2 ++ ; }
change sum3 to 8 * n / k	sum3 = 8 * n / k ;
if 8 * n modulo k ! = 0 , increment sum3 by one	if ( 8 * n % k != 0 ) { sum3 ++ ; }
print sum1 + sum2 + sum3	cout << sum1 + sum2 + sum3 << endl ;
n , k , ans = long	long n , k , ans ;
in the function sheets that takes long a , b and returns long	long sheets ( long a , long b )
d , m = long	long d , m ;
d = a / b	d = a / b ;
m = a modulo b	m = a % b ;
if ( m ) , return ( d + 1 )	if ( m ) return ( d + 1 ) ;
return d	return d ;
read n , k	cin >> n >> k ;
ans = ans + sheets ( 2 * n , k )	ans += sheets ( 2 * n , k ) ;
ans = ans + sheets ( 5 * n , k )	ans += sheets ( 5 * n , k ) ;
ans = ans + sheets ( 8 * n , k )	ans += sheets ( 8 * n , k ) ;
print ans	cout << ans << endl ;
n , k , a , b , c , x , y , z , s = integers	int n , k , a , b , c , x , y , z , s ;
Read n and k	cin >> n >> k ;
set a to n * 2	a = ( n * 2 ) ;
set b to n * 5	b = ( n * 5 ) ;
set c to n * 8	c = ( n * 8 ) ;
if a is less than k	if ( a < k )
set x to 1	x = 1 ;
else do the following	else
if a modulo k is 0	if ( a % k == 0 )
set x to a / k	x = ( a / k ) ;
else do the following	else
set x to ( a / k ) + 1	x = ( a / k ) + 1 ;
if b is less than k	if ( b < k )
set y to 1	y = 1 ;
else do the following	else
if b modulo k is 0	if ( b % k == 0 )
set y to b / k	y = ( b / k ) ;
else do the following	else
set y to ( b / k ) + 1	y = ( b / k ) + 1 ;
if c is less than k	if ( c < k )
set z to 1	z = 1 ;
else do the following	else
if c modulo k is 0	if ( c % k == 0 )
set z to c / k	z = ( c / k ) ;
else do the following	else
set z to ( c / k ) + 1	z = ( c / k ) + 1 ;
set s to x + y + z	s = x + y + z ;
print s and a new line	cout << s << endl ;
n , k , r = integer	int n , k , r ;
read n , k	cin >> n >> k ;
r = ( ( 2 * n ) / k ) + ( ( 5 * n ) / k ) + ( ( 8 * n ) / k )	r = ( int ) ( ( 2 * n ) / k ) + ( int ) ( ( 5 * n ) / k ) + ( int ) ( ( 8 * n ) / k ) ;
if ( 2 * n ) modulo k is not 0 , increase r by 1	if ( ( 2 * n ) % k != 0 ) r ++ ;
if ( 5 * n ) modulo k is not 0 , increase r by 1	if ( ( 5 * n ) % k != 0 ) r ++ ;
if ( 8 * n ) modulo k is not 0 , increase r by 1	if ( ( 8 * n ) % k != 0 ) r ++ ;
print r	cout << r << endl ;
s , n and k are integers with s = 0	int s = 0 , n , k ;
read n and k from the user input	cin >> n >> k ;
if ( 8 * n ) modulo k = 0	if ( ( 8 * n ) % k == 0 )
assign the new value = s + 8 * n / k to s	s = s + 8 * n / k ;
else	else
change s to s + 8 * n / k + 1	s = s + 8 * n / k + 1 ;
if ( 2 * n ) % k is equal to 0	if ( ( 2 * n ) % k == 0 )
assign s + 2 * n / k to s	s = s + 2 * n / k ;
else	else
assign s + 2 * n / k + 1 to s	s = s + 2 * n / k + 1 ;
if ( 5 * n ) modulo k is 0	if ( ( 5 * n ) % k == 0 )
assign the new value = s + 5 * n / k to s	s = s + 5 * n / k ;
else	else
change the value of s to s + 5 * n / k + 1	s = s + 5 * n / k + 1 ;
print s	cout << s << endl ;
n , k = integers	int n , k ;
ans , asn = integers	int ans , asn ;
Read n , k	cin >> n >> k ;
set ans to 0	ans = 0 ;
set asn to n * 2	asn = n * 2 ;
set ans to ans + ( asn + k - 1 ) / k	ans += ( asn + k - 1 ) / k ;
set asn to n * 5	asn = n * 5 ;
set ans to ans + ( asn + k - 1 ) / k	ans += ( asn + k - 1 ) / k ;
set asn to n * 8	asn = n * 8 ;
set ans to ans + ( asn + k - 1 ) / k	ans += ( asn + k - 1 ) / k ;
print ans and a new line	cout << ans << endl ;
n , k , red , green , blue = integers	int n , k , red , green , blue ;
Read n and k	cin >> n >> k ;
set red to 2 * n	red = 2 * n ;
set green to 5 * n	green = 5 * n ;
set blue to 8 * n	blue = 8 * n ;
if red modulo k is 0	if ( red % k == 0 )
set red to red / k	red = red / k ;
else do the following	else
set red to red / k + 1	red = red / k + 1 ;
if green modulo k is 0	if ( green % k == 0 )
set green to green / k	green = green / k ;
else do the following	else
set green to green / k + 1	green = green / k + 1 ;
if blue modulo k is 0	if ( blue % k == 0 )
set blue to blue / k	blue = blue / k ;
else do the following	else
set blue to blue / k + 1	blue = blue / k + 1 ;
print red + green + blue and a new line	cout << red + green + blue << endl ;
n , k , t , l , m , g = integers	int n , k , t , l , m , g ;
Read n and k	cin >> n >> k ;
if n * 2 modulo k is 0	if ( n * 2 % k == 0 )
set t to n * 2 / k	t = n * 2 / k ;
else do the following	else
set t to n * 2 / k + 1	t = n * 2 / k + 1 ;
if n * 5 modulo k is 0	if ( n * 5 % k == 0 )
set l to n * 5 / k	l = n * 5 / k ;
else do the following	else
set l to n * 5 / k + 1	l = n * 5 / k + 1 ;
if n * 8 modulo k is 0	if ( n * 8 % k == 0 )
set m to n * 8 / k	m = n * 8 / k ;
else do the following	else
set m to n * 8 / k + 1	m = n * 8 / k + 1 ;
set g to m + l + t	g = m + l + t ;
print g and a new line	cout << g << endl ;
create ints n and a	int n , a ;
make ints ans and cnt	int ans , cnt ;
read n and a	cin >> n >> a ;
set ans to 0	ans = 0 ;
set cnt to n * 2	cnt = n * 2 ;
set ans to ans + ( cnt + a - 1 ) / a	ans += ( cnt + a - 1 ) / a ;
set cnt to n * 5	cnt = n * 5 ;
add ( cnt + a - 1 ) / a to ans	ans += ( cnt + a - 1 ) / a ;
set cnt to n * 8	cnt = n * 8 ;
set ans to ans + ( cnt + a - 1 ) / a	ans += ( cnt + a - 1 ) / a ;
show ans	cout << ans << endl ;
let n , k be integers	int n , k ;
read n , k	cin >> n >> k ;
let red , green , blue be integers with red = 0 , green = 0 , blue = 0	int red = 0 , green = 0 , blue = 0 ;
let bookred , bookgreen , bookblue be integers with bookred = 0 , bookgreen = 0 , bookblue = 0	int bookred = 0 , bookgreen = 0 , bookblue = 0 ;
red is equal to n * 2	red = n * 2 ;
green is equal to n * 5	green = n * 5 ;
blue is equal to n * 8	blue = n * 8 ;
if red modulo k is equal to 0	if ( red % k == 0 )
bookred is equal to red / k	bookred = red / k ;
else do the following	else
bookred is equal to red / k + 1	bookred = red / k + 1 ;
if blue modulo k is equal to 0	if ( blue % k == 0 )
bookblue is equal to blue / k	bookblue = blue / k ;
else do the following	else
bookblue is equal to blue / k + 1	bookblue = blue / k + 1 ;
if green modulo k is equal to 0	if ( green % k == 0 )
bookgreen is equal to green / k	bookgreen = green / k ;
else do the following	else
bookgreen is equal to green / k + 1	bookgreen = green / k + 1 ;
let total be a integer with total is equal to 0	int total = 0 ;
total is equal to bookred + bookblue + bookgreen	total = bookred + bookblue + bookgreen ;
print total and newline	cout << total << endl ;
function Ceil with int arguments n and k that returns int	int Ceil ( int n , int k )
return ( n + k - 1 ) / k	return ( n + k - 1 ) / k ;
declare new ints n and k	int n , k ;
read input to n and k	cin >> n >> k ;
ans is a new integer variable = Ceil ( 2 * n , k ) + Ceil ( 5 * n , k ) + Ceil ( 8 * n , k )	int ans = Ceil ( 2 * n , k ) + Ceil ( 5 * n , k ) + Ceil ( 8 * n , k ) ;
print ans and ' \ n '	cout << ans << ' \n ' ;
a = int array of size 1010	int a [ 1010 ] ;
n = int	int n ;
read n	cin >> n ;
read n values into a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a from beginning to n	sort ( a , a + n ) ;
i = int	int i ;
for i = n - 1 to 0 inclusive decrementing i	for ( i = n - 1 ; i >= 0 ; i -- )
b = int with b = sqrt of a [ i ]	int b = sqrt ( a [ i ] ) ;
if b * b is a [ i ]	if ( b * b == a [ i ] )
continue	continue ;
else	else
break	break ;
print a [ i ]	cout << a [ i ] << endl ;
create integers n , i , x , maxi , tem , flag , with maxi = - 1000000007	int n , i , x , maxi = - 1000000007 , tem , flag ;
create double p	double p ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
set flag to 0	flag = 0 ;
read x	cin >> x ;
if x is less than 0	if ( x < 0 )
if x is greater than maxi , set maxi to x	if ( x > maxi ) maxi = x ;
set flag to 1	flag = 1 ;
if flag is 1 , set x to - x	if ( flag == 1 ) x = - x ;
set p to square root of ( x * 1 . 00 )	p = sqrt ( x * 1.00 ) ;
set tem to p	tem = p ;
if tem is not p and flag is not 1	if ( tem != p && flag != 1 )
if x is greater than maxi , set maxi to x	if ( x > maxi ) maxi = x ;
print maxi print newline	cout << maxi << endl ;
declare integer variables n and a	int n , a ;
read n	cin >> n ;
create priority_queue of integers t	priority_queue < int > t ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read input to a	cin >> a ;
declare int variable l = square root of a	int l = sqrt ( a ) ;
if l squared ! = a , push a into t	if ( ( l * l ) != a ) { t . push ( a ) ; }
print top element of t	cout << t . top ( ) << endl ;
let INF be a constant integer with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
let i , j , k be integers	int i , j , k ;
let n , m , t be integers	int n , m , t ;
a = array of integers of length 1005	int a [ 1005 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort the values a and a + n	sort ( a , a + n ) ;
let x be a integer with x = 0	int x = 0 ;
for i is equal to n - 1 , i greater than or equal to 0 , decrement i by 1	for ( i = n - 1 ; i >= 0 ; i -- )
if a [ i ] is less than 0 , stop	if ( a [ i ] < 0 ) break ;
if i is less than 0	if ( i < 0 )
the value of x is equal to 0	x = 0 ;
else do the following	else
the value of x is equal to i	x = i ;
for i is equal to n - 1 , i greater than x , decrement i by 1	for ( i = n - 1 ; i > x ; i -- )
if square root of a [ i ] - floor of square root of a [ i ] is greater than 0 . 000001	if ( sqrt ( a [ i ] ) - floor ( sqrt ( a [ i ] ) ) > 0.000001 )
print a [ i ] and newline	cout << a [ i ] << endl ;
stop	break ;
if i < = x , print a [ x ] and newline	if ( i <= x ) { cout << a [ x ] << endl ; }
create integers n , i , j , x , ans	int n , i , j , x , ans ;
create vector of integers vec	vector < int > vec ;
while read n is not 0	while ( cin >> n )
for i = 0 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read n	cin >> x ;
add x to the end of vec	vec . push_back ( x ) ;
sort vec	sort ( vec . begin ( ) , vec . end ( ) ) ;
let flag be an int = 0	int flag = 0 ;
for i = n - 1 to i 0 inclusive decrement 1	for ( i = n - 1 ; i >= 0 ; i -- )
set ans to the square root of vec [ i ]	ans = sqrt ( vec [ i ] ) ;
set ans to ans squared	ans *= ans ;
if ans is different from vec [ i ]	if ( ans != vec [ i ] )
set flag to i	flag = i ;
exit loop	break ;
print vec [ flag ] and new line	cout << vec [ flag ] << endl ;
create const int maxn = 1010	const int maxn = 1010 ;
declare int n	int n ;
declare int array a with size maxn	int a [ maxn ] ;
read n	cin >> n ;
loop i from 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
for i from n - 1 to 0 inclusive counting down	for ( int i = n - 1 ; i >= 0 ; -- i )
if square root of a [ i ] * square root of a [ i ] ! = a [ i ]	if ( ( ( int ) ( sqrt ( a [ i ] ) ) ) * ( ( int ) ( sqrt ( a [ i ] ) ) ) != a [ i ] )
print a [ i ]	cout << a [ i ] << endl ;
stop the loop	break ;
n , i , x = integers , ans = integer = - 1000001	int n , i , x , ans = - 1000001 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read x	cin >> x ;
if the square root of x to the power of 2 is not x and x > ans , then ans = x	if ( ( int ) pow ( ( int ) sqrt ( x ) , 2 ) != x && x > ans ) ans = x ;
print ans	cout << ans << endl ;
maxn = const int with maxn = 1e3 + 5	const int maxn = 1e3 + 5 ;
arr = int array of size maxn	int arr [ maxn ] ;
n = int	int n ;
read n	cin >> n ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr from beginning to n	sort ( arr , arr + n ) ;
for i = n - 1 to 0 inclusive decrementing i	for ( int i = n - 1 ; i >= 0 ; i -- )
if arr [ i ] is less than 0	if ( arr [ i ] < 0 )
print arr [ i ]	cout << arr [ i ] << endl ;
temp = int with temp = arr [ i ]	int temp = arr [ i ] ;
if floor of sqrt of temp is sqrt of temp	if ( floor ( sqrt ( temp ) ) == sqrt ( temp ) )
continue	continue ;
else	else
print arr [ i ]	cout << arr [ i ] << endl ;
let t be integer	int t ;
let a be integer array with length 1005	int a [ 1005 ] ;
function cmp with integer argument a and b returns boolean	bool cmp ( int a , int b )
return a greater than b	return a > b ;
read t	cin >> t ;
for i = 1 to t inclusive read i element of array a	for ( int i = 1 ; i <= t ; i ++ ) { cin >> a [ i ] ; }
call sort function on a + 1 , a + 1 + t , and cmp	sort ( a + 1 , a + 1 + t , cmp ) ;
for i = 1 to t inclusive	for ( int i = 1 ; i <= t ; i ++ )
if ( ( int ) sqrt ( a [ i ] ) * ( int ) sqrt ( a [ i ] ) is not equal to i element of array a	if ( ( int ) sqrt ( a [ i ] ) * ( int ) sqrt ( a [ i ] ) != a [ i ] )
print i element of array a	cout << a [ i ] << endl ;
break	break ;
define Boolean function cmp , consuming pass - by - reference int constants A and B	bool cmp ( const int & A , const int & B )
return A > B	return A > B ;
define 1 , 005 - element int array num	int num [ 1005 ] ;
define int n	int n ;
read n	cin >> n ;
for i from 0 to n ( exclusive ) by 1 , read num [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }
sort ( num , num + n , cmp )	sort ( num , num + n , cmp ) ;
define int i and set it to 0	int i = 0 ;
for i from 0 to n ( exclusive ) by 1	for ( i = 0 ; i < n ; i ++ )
define int p , set to squareroot of num [ i ]	int p = sqrt ( num [ i ] ) ;
if p ^ 2 isn ' t num [ i ] , then break	if ( p * p != num [ i ] ) break ;
print num [ i ] and newline	cout << num [ i ] << endl ;
create integer t	int t ;
create integer array a with size 1005	int a [ 1005 ] ;
declare cmp with integers a , b as arguments , returning boolean	bool cmp ( int a , int b )
return a is greater than b from function	return a > b ;
read t	cin >> t ;
for i = 1 to t inclusive , read a [ i ]	for ( int i = 1 ; i <= t ; i ++ ) { cin >> a [ i ] ; }
sort elements from a + 1 to a + 1 + t using cmp to compare	sort ( a + 1 , a + 1 + t , cmp ) ;
for i = 1 to t inclusive	for ( int i = 1 ; i <= t ; i ++ )
if integer casted square root of a [ i ] * integer casted square root of a [ i ] is not a [ i ]	if ( ( int ) sqrt ( a [ i ] ) * ( int ) sqrt ( a [ i ] ) != a [ i ] )
print a [ i ] print newline	cout << a [ i ] << endl ;
break loop	break ;
create integer array nums with size 1001	int nums [ 1001 ] ;
declare compare_int with integer addresses lhs , rhs as arguments , returning boolean	bool compare_int ( int & lhs , int & rhs )
return lhs is greater than rhs from function	return lhs > rhs ;
create integer n	int n ;
read n	cin >> n ;
create integer max_num with max_num = 0	int max_num = 0 ;
for currnum = 0 to n exclusive , read nums [ currnum ]	for ( int currnum = 0 ; currnum < n ; ++ currnum ) { cin >> nums [ currnum ] ; }
sort elements from nums to nums + n using compare_int to compare	sort ( nums , nums + n , compare_int ) ;
create integer non_perfect with non_perfect = 0	int non_perfect = 0 ;
for currnum = 0 to n exclusive	for ( int currnum = 0 ; currnum < n ; ++ currnum )
create integer sqrtroot with sqrtroot = square root of nums [ currnum ]	int sqrtroot = sqrt ( nums [ currnum ] ) ;
if sqrtroot * sqrtroot is not nums [ currnum ]	if ( sqrtroot * sqrtroot != nums [ currnum ] )
set non_perfect to nums [ currnum ]	non_perfect = nums [ currnum ] ;
break loop	break ;
print non_perfect print newline	cout << non_perfect << endl ;
declare check taking in integer x and returning integer	int check ( int x )
if x is less than 0 , return 1	if ( x < 0 ) return 1 ;
create integer t = sqrt ( x )	int t = sqrt ( x ) ;
if t * t is equal to x	if ( t * t == x )
else	else
return 1	return 1 ;
create integer n	int n ;
read n	cin >> n ;
create integer a [ 1005 ]	int a [ 1005 ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort array a	sort ( a , a + n ) ;
for i = n - 1 to 0	for ( int i = n - 1 ; i >= 0 ; i -- )
if check ( a [ i ] ) returns truthy	if ( check ( a [ i ] ) )
print a [ i ]	cout << a [ i ] << endl ;
break loop	break ;
n = integer	int n ;
Read n	cin >> n ;
a = array of 1005 integers	int a [ 1005 ] ;
Read n values into array a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort array elements of a in ascending order	sort ( a , a + n ) ;
for i = n - 1 to 0 exclusive	for ( int i = n - 1 ; i >= 0 ; i -- )
t = integer , set to square root of a [ i ]	int t = sqrt ( a [ i ] ) ;
if t * t is not a [ i ]	if ( t * t != a [ i ] )
print a [ i ] and a new line	cout << a [ i ] << endl ;
a = array of integers of length 2000005	int a [ 2000005 ] ;
let n , tmp be integers	int n , tmp ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read tmp	cin >> tmp ;
increment a [ tmp + 1000000 ] by 1	a [ tmp + 1000000 ] ++ ;
let ans be integer with ans = 0	int ans = 0 ;
for i = 0 to 1000 inclusive , the value of a [ i * i + 1000000 ] is equal to 0	for ( int i = 0 ; i <= 1000 ; i ++ ) { a [ i * i + 1000000 ] = 0 ; }
for i = 0 to 2000005 exclusive	for ( int i = 0 ; i < 2000005 ; i ++ )
if a [ i ] is true , the value of ans = i - 1000000	if ( a [ i ] ) { ans = i - 1000000 ; }
print ans and newline	cout << ans << endl ;
create integer array sq with size 1001 with sq =	int sq [ 1001 ] =
0	0 ,
end statement	;
declare check with integer x as argument , returning integer	int check ( int x )
if not element between sq and sq + 1001 is x	if ( ! binary_search ( sq , sq + 1001 , x ) )
return 1 from function	return 1 ;
else	else
create integer n	int n ;
read n	cin >> n ;
create integer array a with size n	int a [ n ] ;
for i = 0 to 1000 inclusive , set sq [ i ] to i * i	for ( int i = 0 ; i <= 1000 ; i ++ ) { sq [ i ] = i * i ; }
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
create integer m with m = INT_MIN	int m = INT_MIN ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is greater than m and result of run check with a [ i ] as argument is true , set m to a [ i ]	if ( a [ i ] > m && check ( a [ i ] ) ) { m = a [ i ] ; }
print m print newline	cout << m << endl ;
create integer array a with size 10000	int a [ 10000 ] ;
for i = 0 to 1001 exclusive , set a [ i ] to i * i	for ( int i = 0 ; i < 1001 ; i ++ ) { a [ i ] = i * i ; }
create integer b create integer array c with size 10000	int b , c [ 10000 ] ;
read b	cin >> b ;
for i = 0 to b exclusive , read c [ i ]	for ( int i = 0 ; i < b ; i ++ ) { cin >> c [ i ] ; }
sort elements form c to c + b	sort ( c , c + b ) ;
for i = b - 1 to - 1 exclusive , decrementing i	for ( int i = b - 1 ; i > - 1 ; i -- )
for j = 0 to 1001 exclusive	for ( int j = 0 ; j < 1001 ; j ++ )
if c [ i ] is a [ j ] , go to jump point momo	if ( c [ i ] == a [ j ] ) { goto momo ; }
print c [ i ] print newline	cout << c [ i ] << endl ;
mark jump point momo	momo : ;
create integer array a with size 1005	int a [ 1005 ] ;
create map mp from integer to integer	map < int , int > mp ;
create constant double eps with eps = 1e - 8	const double eps = 1e-8 ;
declare init with no arguments , returning void	void init ( )
for i = 0 to 1000 inclusive , set mp [ i * i ] to 1	for ( int i = 0 ; i <= 1000 ; i ++ ) { mp [ i * i ] = 1 ; }
run init	init ( ) ;
create integer n	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort elements from a to a + n	sort ( a , a + n ) ;
for i = n - 1 to 0 inclusive , decrementing i	for ( int i = n - 1 ; i >= 0 ; i -- )
if not mp [ a [ i ] ]	if ( ! mp [ a [ i ] ] )
print a [ i ] print newline	cout << a [ i ] << endl ;
n = int	int n ;
read n	cin >> n ;
arr = vector of int	vector < int > arr ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
temp = int	int temp ;
read temp	cin >> temp ;
add temp at end of arr	arr . push_back ( temp ) ;
sort arr	sort ( arr . begin ( ) , arr . end ( ) ) ;
for i = n - 1 down to 0 inclusive	for ( int i = n - 1 ; i >= 0 ; -- i )
s = sqrt ( arr [ i ] )	int s = sqrt ( arr [ i ] ) ;
if s ^ 2 not equal arr [ i ]	if ( s * s != arr [ i ] )
print arr [ i ]	cout << arr [ i ] << endl ;
break	break ;
create int A , B , C , D	int A , B , C , D ;
read A , B , C , D	cin >> A >> B >> C >> D ;
if ( A * 2 + 3 > D and D + 1 > = A ) or ( B * 2 + 3 > C and C + 1 > = B )	if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) )
print YES	cout << " YES " << endl ;
otherwise	else
print NO and a new line	cout << " NO " << endl ;
let A , B , C , D be integers	int A , B , C , D ;
read A , B , C , D	cin >> A >> B >> C >> D ;
if ( ( A * 2 + 3 is greater than D and D + 1 is greater than or equal to A ) or ( B * 2 + 3 is greater than C and C + 1 is greater than or equal to B ) )	if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
let boolean solve ( int a , int b ) be a function which accepts integers a and b and returns integer values	bool solve ( int a , int b )
return the value of ( a is less than or equal to b + 1 and b is less than or equal to ( a + 1 ) * 2 )	return a <= b + 1 && b <= ( a + 1 ) * 2 ;
let la , ra , lb , rb be integers	int la , ra , lb , rb ;
read la , ra , lb , rb	cin >> la >> ra >> lb >> rb ;
if ( solve ( la , rb ) or solve ( ra , lb ) )	if ( solve ( la , rb ) || solve ( ra , lb ) )
print YES and newline	cout << " YES\n " ;
else do the following	else
print NO and newline	cout << " NO\n " ;
declare integers gl , gr , bl and br	int gl , gr , bl , br ;
read gl , gr , bl and br	cin >> gl >> gr >> bl >> br ;
if 2 * ( gl + 1 ) > = br & & gl - 1 < = br | | 2 * ( gr + 1 ) > = bl & & gr < = bl	if ( 2 * ( gl + 1 ) >= br && gl - 1 <= br || 2 * ( gr + 1 ) >= bl && gr <= bl )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create integers a , s , z , x	int a , s , z , x ;
read a read s read z read x	cin >> a >> s >> z >> x ;
create boolean cek with cek = false	bool cek = false ;
if ( x is greater than or equal to a - 1 and x is less than or equal to a * 2 + 2 ) or ( z is greater than or equal to s - 1 and z is less than or equal to s * 2 + 2 ) , set cek to true	if ( ( x >= ( a - 1 ) && x <= ( a * 2 ) + 2 ) || ( z >= ( s - 1 ) && z <= ( s * 2 ) + 2 ) ) cek = true ;
if cek is true	if ( cek )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
declare integers l , r , ml and mr	int l , r , ml , mr ;
judge is a boolean function with integer arguments g and b	bool judge ( int g , int b )
if b is less than g - 1	if ( b < g - 1 )
return false	return false ;
else if b is greater than 2 * g + 2	else if ( b > 2 * g + 2 )
return false	return false ;
else	else
return true	return true ;
read l , r , ml and mr	cin >> l >> r >> ml >> mr ;
if judge ( l , mr ) or judge ( r , ml ) are true	if ( judge ( l , mr ) || judge ( r , ml ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
let a , b , c , d be long integers	long long a , b , c , d ;
while ( read the values a , b , c , d )	while ( cin >> a >> b >> c >> d )
let ck be a long integer with value as 0	long long ck = 0 ;
let a1 be a long integer with value as a1 is equal to a * 2 + 2	long long a1 = a * 2 + 2 ;
let a2 be a long integer with value a2 is equal to a - 1	long long a2 = a - 1 ;
if ( d is greater than or equal to a2 and d is less than or equal to a1 ) , ck is equal to 1	if ( d >= a2 && d <= a1 ) ck = 1 ;
let a1 is equal to ( b * 2 + 2 )	a1 = b * 2 + 2 ;
let a2 is equal to b - 1	a2 = b - 1 ;
if ( c is greater than or equal to a2 and c is less than or equal to a1 ) , ck is equal to 1	if ( c >= a2 && c <= a1 ) ck = 1 ;
if ( ck is equal to 1 )	if ( ck == 1 )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
create long longs gl , gr , bl , br	long long gl , gr , bl , br ;
read gl read gr read bl read br	cin >> gl >> gr >> bl >> br ;
if br is greater than or equal to gl - 1 and br is less than or equal to 2 * ( gl + 1 )	if ( br >= gl - 1 && br <= 2 * ( gl + 1 ) )
print " YES " print newline	cout << " YES " << endl ;
if bl is greater than or equal to gr - 1 and bl is less than or equal to 2 * ( gr + 1 )	if ( bl >= gr - 1 && bl <= 2 * ( gr + 1 ) )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create integers gl , gr , bl , br	int gl , gr , bl , br ;
read gl read gr read bl read br	cin >> gl >> gr >> bl >> br ;
if gl - 1 is less than or equal to br and br is less than or equal to 2 * gl + 2	if ( gl - 1 <= br && br <= 2 * gl + 2 )
print " YES " print ' \ n '	cout << " YES " << ' \n ' ;
else if gr - 1 is less than or equal to bl and bl is less than or equal to 2 * gr + 2	else if ( gr - 1 <= bl && bl <= 2 * gr + 2 )
print " YES " print ' \ n '	cout << " YES " << ' \n ' ;
else	else
print " NO " print ' \ n '	cout << " NO " << ' \n ' ;
create integers A , B , C , D	int A , B , C , D ;
read A read B read C read D	cin >> A >> B >> C >> D ;
if ( A * 2 + 3 is greater than D and D + 1 is greater than or equal to A ) or ( B * 2 + 3 is greater than C and C + 1 is greater than or equal to B )	if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create integers a1 , a2 , a11 , a12 , b1 , b2 , b11 , b12	int a1 , a2 , a11 , a12 , b1 , b2 , b11 , b12 ;
read b1 read b2 read a1 read a2	cin >> b1 >> b2 >> a1 >> a2 ;
if a1 % 2 is 0	if ( a1 % 2 == 0 )
set a11 to a1 / 2 - 1	a11 = a1 / 2 - 1 ;
else	else
set a11 to a1 / 2	a11 = a1 / 2 ;
if a2 % 2 is 0	if ( a2 % 2 == 0 )
set a12 to a2 / 2 - 1	a12 = a2 / 2 - 1 ;
else	else
set a12 to a2 / 2	a12 = a2 / 2 ;
set b11 to b1 - 1	b11 = b1 - 1 ;
set b12 to b2 - 1	b12 = b2 - 1 ;
if b12 is less than or equal to a1 and a11 is less than or equal to b2 or a12 is less than or equal to b1 and b11 is less than or equal to a2	if ( b12 <= a1 && a11 <= b2 || a12 <= b1 && b11 <= a2 )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create integers vl , vr , ml and mr	int vl , vr , ml , mr ;
boolean function judge with integer arguments g and b	bool judge ( int g , int b )
if b is less than g - 1	if ( b < g - 1 )
return false	return false ;
else if b is greater than 2 * g + 2	else if ( b > 2 * g + 2 )
return false	return false ;
else	else
return true	return true ;
read vl , vr , ml and mr	cin >> vl >> vr >> ml >> mr ;
if either judge ( vl , mr ) or judge ( vr , ml ) is true	if ( judge ( vl , mr ) || judge ( vr , ml ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create integers b , bb , g , gg , yes , with yes = 0	int b , bb , g , gg , yes = 0 ;
read g read gg read b read bb	cin >> g >> gg >> b >> bb ;
if g is less than or equal to bb + 1 and bb is less than or equal to ( g + 1 ) * 2 , set yes to 1	if ( g <= bb + 1 && bb <= ( g + 1 ) * 2 ) { yes = 1 ; }
if gg is less than or equal to b + 1 and b is less than or equal to ( gg + 1 ) * 2 , set yes to 1	if ( gg <= b + 1 && b <= ( gg + 1 ) * 2 ) { yes = 1 ; }
if yes is true	if ( yes )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create integers A , B , C , D	int A , B , C , D ;
read A read B read C read D	cin >> A >> B >> C >> D ;
if ( A * 2 + 3 is greater than D and D + 1 is greater than or equal to A ) or ( B * 2 + 3 is greater than C and C + 1 is greater than or equal to B )	if ( ( A * 2 + 3 > D && D + 1 >= A ) || ( B * 2 + 3 > C && C + 1 >= B ) )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
M = constant integer = 1000 + 5	const int M = 1000 + 5 ;
create int gl , gr	int gl , gr ;
read gl and gr	cin >> gl >> gr ;
bl , br = integers	int bl , br ;
read bl and br	cin >> bl >> br ;
create boolean ok = false	bool ok = false ;
if gr - 1 is equal to or less than bl and bl is equal to or less than 2 * ( gr + 1 ) , set ok = true	if ( gr - 1 <= bl && bl <= 2 * ( gr + 1 ) ) { ok = true ; }
if gl - 1 is equal to or less than br and br is equal to or less than 2 * ( gl + 1 ) , set ok = true	if ( gl - 1 <= br && br <= 2 * ( gl + 1 ) ) { ok = true ; }
if ok is true	if ( ok )
print YES	cout << " YES " << endl ;
otherwise	else
print NO	cout << " NO " << endl ;
declare integers vl , vr , ml and mr	int vl , vr , ml , mr ;
boolean function judge with integer arguments g and b	bool judge ( int g , int b )
if b is less than g - 1	if ( b < g - 1 )
return false	return false ;
else if b is greater than 2 * g + 2	else if ( b > 2 * g + 2 )
return false	return false ;
else	else
return true	return true ;
read vl , vr , ml and mr	cin >> vl >> vr >> ml >> mr ;
if judge ( vl , mr ) or judge ( vr , ml )	if ( judge ( vl , mr ) || judge ( vr , ml ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
declare check with integers d , m as arguments , returning boolean	bool check ( int d , int m )
if m is less than or equal to 2 * ( d + 1 ) and ( m is greater than or equal to d - 1 ) , return 1 from function	if ( m <= 2 * ( d + 1 ) && ( m >= d - 1 ) ) return 1 ;
create integers l1 , r1 , l2 , r2	int l1 , r1 , l2 , r2 ;
read l1 read r1 read l2 read r2	cin >> l1 >> r1 >> l2 >> r2 ;
if result of run check with l1 , r2 as arguments or result of run check with r1 , l2 as arguments	if ( check ( l1 , r2 ) || check ( r1 , l2 ) )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
let INF be a constant integer with value as INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
let i , j , k be integers	int i , j , k ;
let n , m be integers	int n , m ;
let a , b , c , d be integers	int a , b , c , d ;
read a , b , c , d	cin >> a >> b >> c >> d ;
if ( ( c - ( b - 1 ) ) is less than 5 and c - b + 1 is greater than or equal to 0 )	if ( ( c - ( b - 1 ) ) < 5 && c - b + 1 >= 0 )
print YES and newline	cout << " YES " << endl ;
if ( ( d - ( a - 1 ) ) is less than 5 and d - a + 1 is greater than or equal to 0 )	if ( ( d - ( a - 1 ) ) < 5 && d - a + 1 >= 0 )
print YES and newline	cout << " YES " << endl ;
if ( ( c - ( b - 1 ) * 2 ) is less than 5 and c - ( b - 1 ) is greater than or equal to 0 )	if ( ( c - ( b - 1 ) * 2 ) < 5 && c - ( b - 1 ) >= 0 )
print YES and newline	cout << " YES " << endl ;
if ( ( d - ( a - 1 ) * 2 ) is less than 5 and d - ( a - 1 ) is greater than or equal to 0 )	if ( ( d - ( a - 1 ) * 2 ) < 5 && d - ( a - 1 ) >= 0 )
print YES and newline	cout << " YES " << endl ;
print NO and newline	cout << " NO " << endl ;
create integers gl , gr , bl , br	int gl , gr , bl , br ;
create boolean verdict	bool verdict ;
read gl read gr read bl read br	cin >> gl >> gr >> bl >> br ;
if 2 * ( gl + 1 ) is greater than or equal to br and gl - 1 is less than or equal to br or 2 * ( gr + 1 ) is greater than or equal to bl and gr is less than or equal to bl	if ( 2 * ( gl + 1 ) >= br && gl - 1 <= br || 2 * ( gr + 1 ) >= bl && gr <= bl )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
integer function pan with integer arguments x and y	int pan ( int x , int y )
if x = 0 return true if y < 2 or false otherwise	if ( x == 0 ) return y < 2 ;
if y = 0 return true if x < 3 or false otherwise	if ( y == 0 ) return x < 3 ;
if x = y return 1	if ( x == y ) return 1 ;
if x is less than y	if ( x < y )
if y - x < = 1 return 1	if ( y - x <= 1 ) return 1 ;
else	else
if x / ( y + 1 ) < = 2	if ( x / ( y + 1 ) <= 2 )
if x / ( y + 1 ) = 1 return 1	if ( x / ( y + 1 ) == 1 ) return 1 ;
if x / ( y + 1 ) = 2	if ( x / ( y + 1 ) == 2 )
if x modulo ( y + 1 ) is less than 1 return 1	if ( x % ( y + 1 ) < 1 ) return 1 ;
declare integers a , b , x and y	int a , b , x , y ;
read a , b , x and y	cin >> a >> b >> x >> y ;
if pan ( x , b ) or pan ( y , a ) is not 0	if ( pan ( x , b ) || pan ( y , a ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
function fp with long long arguments n and p that returns long long	long long fp ( long long n , long long p )
if p is 0 , return 1	if ( p == 0 ) return 1 ;
if p is 1 , return n	if ( p == 1 ) return n ;
create long long res	long long res ;
res = fp ( n , p / 2 ) % int ( 1e9 + 7 )	res = fp ( n , p / 2 ) % int ( 1e9 + 7 ) ;
res = ( res * res ) % int ( 1e9 + 7 )	res = ( res * res ) % int ( 1e9 + 7 ) ;
if p % 2 > 0 , set res = ( res * n ) % int ( 1e9 + 7 )	if ( p % 2 ) res = ( res * n ) % int ( 1e9 + 7 ) ;
return res % int ( 1e9 + 7 )	return res % int ( 1e9 + 7 ) ;
function get with integer arguments a and b that returns integer	int get ( int a , int b )
while b < = 2011	while ( b <= 2011 )
declare integer variables dif = 0 , t = b and tt = a	int dif = 0 , t = b , tt = a ;
while a > 0 and dif < 2	while ( a > 0 && dif < 2 )
increment dif if a % 10 ! = b % 10	if ( a % 10 != b % 10 ) dif ++ ;
divide a and b by 10	a /= 10 , b /= 10 ;
set b = t , a = tt	b = t , a = tt ;
return bif dif is less than 2	if ( dif < 2 ) return b ;
increment b	b ++ ;
return 1e5	return 1e5 ;
create integers a , b , c and d	int a , b , c , d ;
read a , b , c and d	cin >> a >> b >> c >> d ;
if a - 2 < d and d < 2 * a + 3 or b - 2 < c and c < 2 * b + 3	if ( a - 2 < d && d < 2 * a + 3 || b - 2 < c && c < 2 * b + 3 )
print " YES " and ' \ n '	cout << " YES " << ' \n ' ;
else	else
print " NO " and ' \ n '	cout << " NO " << ' \n ' ;
create long longs gl , gr , bl , br	long long gl , gr , bl , br ;
read gl read gr read bl read br	cin >> gl >> gr >> bl >> br ;
if br is greater than or equal to gl - 1 and br is less than or equal to 2 * ( gl + 1 )	if ( br >= gl - 1 && br <= 2 * ( gl + 1 ) )
print " YES " print newline	cout << " YES " << endl ;
if bl is greater than or equal to gr - 1 and bl is less than or equal to 2 * ( gr + 1 )	if ( bl >= gr - 1 && bl <= 2 * ( gr + 1 ) )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
a , b , c , d = integers	int a , b , c , d ;
read a , b , c , d	cin >> a >> b >> c >> d ;
if ( d > = a - 1 and d < = 2 * ( a + 1 ) ) or ( c > = b - 1 and c < = 2 * ( b + 1 ) )	if ( ( d >= a - 1 && d <= 2 * ( a + 1 ) ) || ( c >= b - 1 && c <= 2 * ( b + 1 ) ) )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
n is a new integer variable	int n ;
read standard input to n	cin >> n ;
create new vector of integers v with 2 * n elements	vector < int > v ( 2 * n ) ;
read all elements from the input to the vector v	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> v [ i ] ; }
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
if v [ n - 1 ] is less than v [ n ]	if ( v [ n - 1 ] < v [ n ] )
print " YES \ n " to the standard output	cout << " YES\n " ;
else	else
print " NO \ n " to the standard output	cout << " NO\n " ;
let n be an int	int n ;
let arr be an int vector of size 210	vector < int > arr ( 210 ) ;
read n	cin >> n ;
for i = 1 to 2 * n inclusive , increment i , read arr [ i ]	for ( int i = 1 ; i <= 2 * n ; ++ i ) { cin >> arr [ i ] ; }
sort form arr + 1 to arr + 2 * n + 1 using greater < int >	sort ( arr . begin ( ) + 1 , arr . begin ( ) + 2 * n + 1 , greater < int > ( ) ) ;
if arr [ n ] > arr [ n + 1 ]	if ( arr [ n ] > arr [ n + 1 ] )
print YES and	cout << " YES "
new line	<< " \n " ;
else	else
print NO and	cout << " NO "
new line	<< " \n " ;
declare integer n	int n ;
read n	cin >> n ;
declare integer array a size n + n	int a [ n + n ] ;
for i = 0 to 2 * n exclusive , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }
sort from a to a + n * 2	sort ( a , a + n * 2 ) ;
if a [ n ] is greater than a [ n - 1 ]	if ( a [ n ] > a [ n - 1 ] )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
function read that returns inline integer	inline int read ( )
declare new integers x = 0 and f = 1	int x = 0 , f = 1 ;
ch is a new character variable read from the user input	char ch = getchar ( ) ;
while ch is not a digit character	while ( ch < ' 0 ' || ch > ' 9 ' )
if ch is equal to ' - ' , change f to - 1	if ( ch == ' - ' ) f = - 1 ;
set ch to char from the input	ch = getchar ( ) ;
while c is a digit character	while ( ch >= ' 0 ' && ch <= ' 9 ' )
change x to x * 10 + ch - ' 0 '	x = x * 10 + ch - ' 0 ' ;
change ch to char from the input	ch = getchar ( ) ;
return x multiplied by f	return x * f ;
create int n and an array of ints a with size 1005	int n , a [ 1005 ] ;
change n to the result of read ( ) * 2	n = read ( ) * 2 ;
in a for loop , change i from 1 to n inclusive , changing a [ i ] to the result of read ( ) on each loop	for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = read ( ) ;
sort a from position 1 to n + 1	sort ( a + 1 , a + n + 1 ) ;
if a [ n > > 1 ] is less than a [ ( n > > 1 ) + 1 ] , return 0 * puts ( " YES " )	if ( a [ n >> 1 ] < a [ ( n >> 1 ) + 1 ] ) return 0 * puts ( " YES " ) ;
print " NO " to stdout	puts ( " NO " ) ;
declare integer n	int n ;
create vector of integers arr with 210 elements	vector < int > arr ( 210 ) ;
read variable n from the input	cin >> n ;
start for loop from i = 1 to 2 * n inclusive , read input to arr [ i ] on each loop iteration	for ( int i = 1 ; i <= 2 * n ; ++ i ) { cin >> arr [ i ] ; }
sort arr from index 1 to 2 * n + 1 , using greater < int > ( ) as a comparator	sort ( arr . begin ( ) + 1 , arr . begin ( ) + 2 * n + 1 , greater < int > ( ) ) ;
if arr [ n ] is greater than arr [ n + 1 ]	if ( arr [ n ] > arr [ n + 1 ] )
print " YES "	cout << " YES "
print " \ n "	<< " \n " ;
else	else
print " NO " to the standard output	cout << " NO "
print " \ n "	<< " \n " ;
declare an array of integers named a of size 204	int a [ 2 * 102 ] ;
declare an integer named n	int n ;
read in n	cin >> n ;
loop through the code 2 multiplied by n times and input a value into a every time	for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort the inputted values in the array in ascending order	sort ( a , a + 2 * n ) ;
if the value of position n in a is greater than the value of position n - 1 in a	if ( a [ n - 1 ] < a [ n ] )
print YES	cout << " YES " << endl ;
or else	else
print NO	cout << " NO " << endl ;
let int n	int n ;
create int array arr of size 210	int arr [ 210 ] ;
read n	cin >> n ;
for i = 1 to 2 * n , read arr [ i ]	for ( int i = 1 ; i <= 2 * n ; ++ i ) { cin >> arr [ i ] ; }
sort arr + 1 using argument arr + n + n + 1	sort ( arr + 1 , arr + n + n + 1 ) ;
print " YES " if arr [ n ] < arr [ n + 1 ] is true or " NO " if not	puts ( ( arr [ n ] < arr [ n + 1 ] ? " YES " : " NO " ) ) ;
n = integer , a = integer array of size 210	int n , a [ 210 ] ;
read n	cin >> n ;
for i = 0 to 2 * n exlusive , then read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }
sort a in asecnding order	sort ( a , a + 2 * n ) ;
if a [ n - 1 ] > = a [ n ]	if ( a [ n - 1 ] >= a [ n ] )
print NO	puts ( " NO " ) ;
else	else
print YES	puts ( " YES " ) ;
n = long long , a = long long array of size 205	long long n , a [ 205 ] ;
in function solve that returns nothing	void solve ( )
read n	cin >> n ;
for i = 1 to 2 * n + 1 exclusive , read a [ i ]	for ( __typeof ( ( 2 * n + 1 ) ) i = ( 1 ) ; i < ( 2 * n + 1 ) ; i ++ ) cin >> a [ i ] ;
sort a for all elements that contain a value	sort ( a + 1 , a + 2 * n + 1 ) ;
if a [ n ] is not a [ n + 1 ]	if ( a [ n ] != a [ n + 1 ] )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
in function prep that returns nothing	void prep ( ) { }
t = integer = 1	int t = 1 ;
call prep	prep ( ) ;
any output to the user is in fixed - point notation and is precise to 10 decimal points	cout << fixed << setprecision ( 10 ) ;
while looping decrease t by 1 , the contents of the loop is to call solve	while ( t -- ) solve ( ) ;
declare integer a	int a ;
read a	cin >> a ;
declare integer arrays b size 10000 , c size a , d size a	int b [ 10000 ] , c [ a ] , d [ a ] ;
for i = 0 to a * 2 exclusive , read b [ i ]	for ( int i = 0 ; i < a * 2 ; i ++ ) { cin >> b [ i ] ; }
sort from b to b + a * 2	sort ( b , b + a * 2 ) ;
for i = 0 to a exclusive , let c [ i ] be b [ i ]	for ( int i = 0 ; i < a ; i ++ ) { c [ i ] = b [ i ] ; }
for i = a to a * 2 exclusive , let d [ i - a ] be b [ i ]	for ( int i = a ; i < a * 2 ; i ++ ) { d [ i - a ] = b [ i ] ; }
for i = 0 to a exclusive	for ( int i = 0 ; i < a ; i ++ )
for j = 0 to a exclusive	for ( int j = 0 ; j < a ; j ++ )
if c [ j ] is greater than or equal to d [ i ]	if ( c [ j ] >= d [ i ] )
print " NO " , newline	cout << " NO " << endl ;
print " YES " , newline	cout << " YES " << endl ;
declare integer array a size 205	int a [ 205 ] ;
declare integer n	int n ;
read n	cin >> n ;
for i = 1 to 2 * n inclusive , read a [ i ]	for ( int i = 1 ; i <= 2 * n ; ++ i ) cin >> a [ i ] ;
sort elements from a to a + 2 * n + 1	sort ( a , a + 2 * n + 1 ) ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
for j = n + 1 to 2 * n inclusive	for ( int j = n + 1 ; j <= 2 * n ; ++ j )
if a [ i ] is greater than or equal to a [ j ]	if ( a [ i ] >= a [ j ] )
print " NO " , newline	cout << " NO " << endl ;
print " YES " , newline	cout << " YES " << endl ;
make integer n	int n ;
create int array a of size 1001	int a [ 1001 ] ;
let int array b of size 1001	int b [ 1001 ] ;
read n	cin >> n ;
for i = 1 to 2 * n , read a [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) { cin >> a [ i ] ; }
make int max = 1	int max = 1 ;
for i = 1 to 2 * n	for ( int i = 1 ; i <= 2 * n ; i ++ )
for j = 1 to 2 * n	for ( int j = 1 ; j <= 2 * n ; j ++ )
if a [ max ] is less than a [ j ] , set max to j	if ( a [ max ] < a [ j ] ) { max = j ; }
set b [ i ] to a [ max ]	b [ i ] = a [ max ] ;
set a [ max ] to - 1	a [ max ] = - 1 ;
if b [ n ] is greater than b [ n + 1 ]	if ( b [ n ] > b [ n + 1 ] )
print " YES "	cout << " YES " << endl ;
else do	else
print " NO "	cout << " NO " << endl ;
n = integer	int n ;
a = integer array of size 210	int a [ 210 ] ;
read n	cin >> n ;
for i = 0 to 2 * n , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort a and a + 2 * n	sort ( a , a + 2 * n ) ;
if a [ n ] > a [ n - 1 ]	if ( a [ n ] > a [ n - 1 ] )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
n = integer	int n ;
read n	cin >> n ;
a = integer array of size 2 * n	int a [ 2 * n ] ;
for i = 0 to 2 * n exclusive , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort a in ascending order	sort ( a , a + 2 * n ) ;
if a [ n ] is a [ n - 1 ]	if ( a [ n ] == a [ n - 1 ] )
print NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
create new array of 4 integers dx with values 0 , 0 , - 1 , 1	int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;
dy is a new array of 4 integers with elements 1 , - 1 , 0 , 0	int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;
declare integer variable n	int n ;
read n from the input	cin >> n ;
a is an array of integers with size 2 * n	int a [ 2 * n ] ;
for integer i = 0 to 2 * n exclusive increasing i by 1 , read user input to a [ i ]	for ( int i = 0 ; i < 2 * n ; i += 1 ) cin >> a [ i ] ;
sort all elements of a	sort ( a , a + 2 * n ) ;
declare integer variable with name x = a [ n ]	int x = a [ n ] ;
for i = 0 to n exclusive increasing i by 1	for ( int i = 0 ; i < n ; i += 1 )
if x < = a [ i ]	if ( x <= a [ i ] )
print " NO \ n "	cout << " NO\n " ;
print " YES \ n "	cout << " YES\n " ;
a = int array of size 205 with all values set to 0	int a [ 205 ] = { 0 } ;
N = int	int N ;
read N	cin >> N ;
set N to N * 2	N *= 2 ;
read N values into a	for ( int i = 0 ; i < N ; i ++ ) { cin >> a [ i ] ; }
sort a from position 0 to N	sort ( a , a + N ) ;
set N to N / 2	N /= 2 ;
decrement N	N -= 1 ;
if a [ N ] > = a [ N + 1 ]	if ( a [ N ] >= a [ N + 1 ] )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
n = int and a = int array of size 10000	int n , a [ 10000 ] ;
read n	cin >> n ;
for i = 1 to 2 * n inclusive read a [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
sort a from position 1 to 2 * n + 1	sort ( a + 1 , a + 2 * n + 1 ) ;
if a [ n ] is a [ n + 1 ]	if ( a [ n ] == a [ n + 1 ] )
print " NO "	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
create new integer called n	int n ;
x is an array of integers with size 200001	int x [ 200001 ] ;
read n from the user input	cin >> n ;
for i = 1 to 2 * n inclusive , read user input to x [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> x [ i ] ;
sort x from position 1 to 1 + 2 * n	sort ( x + 1 , x + 1 + 2 * n ) ;
if x [ n ] is less than x [ n + 1 ]	if ( x [ n ] < x [ n + 1 ] )
print " YES " to the standard output	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
n = int	int n ;
read n	cin >> n ;
vet = int array of size 2 * n	int vet [ 2 * n ] ;
read 2 * n values into vet	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> vet [ i ] ; }
sort vet	sort ( vet , vet + ( 2 * n ) ) ;
if vet [ n - 1 ] < vet [ n ]	if ( vet [ n - 1 ] < vet [ n ] )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create long long integer variable with name n	long long int n ;
read n from the input	cin >> n ;
create new vector of long long integers v	vector < long long int > v ;
for i = 0 to 2 * n exclusive incrementing i	for ( long long int i = 0 ; i < 2 * n ; i ++ )
declare new long long integer x	long long int x ;
read variable x from the input	cin >> x ;
push x to the end of vector v	v . push_back ( x ) ;
sort vector v	sort ( v . begin ( ) , v . end ( ) ) ;
if v [ n ] is greater than v [ n - 1 ]	if ( v [ n ] > v [ n - 1 ] )
print " YES "	cout << " YES " ;
else	else
print " NO " to the standard output	cout << " NO " ;
print new line to the output	cout << endl ;
create constant int N = 210	const int N = 210 ;
let integer n	int n ;
make int array in of size N	int in [ N ] ;
read n and while n is truthy	while ( cin >> n )
for i = 0 to 2 * n exclusive , read in [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> in [ i ] ; }
sort in using argument in + 2 * n	sort ( in , in + 2 * n ) ;
if in [ n ] is greater than in [ n - 1 ]	if ( in [ n ] > in [ n - 1 ] )
print " YES "	cout << " YES " << endl ;
else do	else
print " NO "	cout << " NO " << endl ;
declare integer n	int n ;
read n	cin >> n ;
let n be n * 2	n *= 2 ;
declare integer array a size 1005	int a [ 1005 ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort from a to a + n	sort ( a , a + n ) ;
if a [ n / 2 - 1 ] is not a [ n / 2 ]	if ( a [ n / 2 - 1 ] != a [ n / 2 ] )
print " YES " , newline	cout << " YES " << endl ;
else	else
print " NO " , newline	cout << " NO " << endl ;
create integer n	int n ;
read n	cin >> n ;
create int vector v of size 2 * n	vector < int > v ( 2 * n ) ;
for i = 0 to 2 * n exclusive , read v [ i ]	for ( int i = 0 ; i < 2 * n ; ++ i ) cin >> v [ i ] ;
sort vector v	sort ( v . begin ( ) , v . end ( ) ) ;
print ( v [ n ] > v [ n - 1 ] ? " YES \ n " : " NO \ n " )	cout << ( v [ n ] > v [ n - 1 ] ? " YES\n " : " NO\n " ) ;
n is a new long long variable	long long n ;
read standard input to n	cin >> n ;
p is a new long long with value 2 * n	long long p = 2 * n ;
create new array of long longs arr with p elements	long long arr [ p ] ;
start for loop from i = 0 to 2 * n exclusive , read input to arr [ i ] on each loop	for ( long long i = 0 ; i < 2 * n ; i ++ ) { cin >> arr [ i ] ; }
sort arr	sort ( arr , arr + p ) ;
if arr [ n - 1 ] = arr [ n ]	if ( arr [ n - 1 ] == arr [ n ] )
print " NO " to the standard output	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
create integer N	int N ;
declare string variable S	string S ;
read N and S	cin >> N >> S ;
sort array S	sort ( S . begin ( ) , S . end ( ) ) ;
print S and ' \ n '	cout << S << ' \n ' ;
MaxN = constant long long equal to 301002	const long long MaxN = 301002 ;
create long long n	long long n ;
create string s	string s ;
read n	cin >> n ;
read s	cin >> s ;
call sort on s	sort ( s . begin ( ) , s . end ( ) ) ;
print s and a new line	cout << s << " \n " ;
create integer n	int n ;
read n	cin >> n ;
create string a	string a ;
read a	cin >> a ;
sort a from beginning to end	sort ( a . begin ( ) , a . end ( ) ) ;
print a and a new line	cout << a << endl ;
const is keyword for declaration of function then integer oo = 1e9	const int oo = 1e9 ;
integer = n	int n ;
read n	cin >> n ;
string = s	string s ;
read s	cin >> s ;
sort the function begin to end in descending order	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << ' \n ' ;
n = integer	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s and a new line	cout << s << " \n " ;
create integer n	int n ;
read n	cin >> n ;
create string str	string str ;
read str	cin >> str ;
sort elements from beginning of str to end of str	sort ( str . begin ( ) , str . end ( ) ) ;
print str print newline	cout << str << endl ;
create constant integer inf 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
create long long a	long long a ;
create string s	string s ;
create integer n	int n ;
read n	cin >> n ;
read s	cin >> s ;
sort elements from beginning of s to end of s	sort ( s . begin ( ) , s . end ( ) ) ;
print s print newline	cout << s << endl ;
let v be a vector of ints	vector < int > v ;
let n be an int	int n ;
read n	cin >> n ;
let s be a string	string s ;
read s	cin >> s ;
sort ( s . begin ( ) , s . end ( ) )	sort ( s . begin ( ) , s . end ( ) ) ;
print s and a newline	cout << s << " \n " ;
create integer n	int n ;
create string s	string s ;
read n read s	cin >> n >> s ;
sort elements from beginning of s to end of s	sort ( s . begin ( ) , s . end ( ) ) ;
print s print newline	cout << s << endl ;
create integer n	int n ;
read n	cin >> n ;
create string str	string str ;
read str	cin >> str ;
sort elements from beginning of str to end of str	sort ( str . begin ( ) , str . end ( ) ) ;
print str print newline	cout << str << endl ;
n = integer	int n ;
s = string	string s ;
Read n and s	cin >> n >> s ;
sort strings in alphabetical order	sort ( s . begin ( ) , s . end ( ) ) ;
print s and a new line	cout << s << endl ;
create integer n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
sort elements from beginning of s to end of s	sort ( s . begin ( ) , s . end ( ) ) ;
print s print " \ n "	cout << s << " \n " ;
create string s	string s ;
create integer n	int n ;
read n and s	cin >> n >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << endl ;
create integer n	int n ;
create string s	string s ;
read n read s	cin >> n >> s ;
sort elements from beginning of s to end of s	sort ( s . begin ( ) , s . end ( ) ) ;
print s print newline	cout << s << endl ;
n = integer	int n ;
read n	cin >> n ;
s = string	string s ;
read s	cin >> s ;
sort string s	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << endl ;
a = int	int a ;
read a	cin >> a ;
s = string	string s ;
read s	cin >> s ;
arr = int array of size 26 with each value set to 0	int arr [ 26 ] = { 0 } ;
for i = 0 to a increment arr [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < a ; i ++ ) arr [ s [ i ] - ' a ' ] ++ ;
for i = 0 to 26	for ( int i = 0 ; i < 26 ; i ++ )
for j = 0 to arr [ i ] print ' a ' + i as char	for ( int j = 0 ; j < arr [ i ] ; j ++ ) cout << ( char ) ( ' a ' + i ) ;
print a newline	cout << endl ;
n = integer	int n ;
read n	cin >> n ;
s = string	string s ;
read s	cin >> s ;
sort the elements of s	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << endl ;
create long long n	long long n ;
read n	cin >> n ;
declare string variable s	string s ;
read s	cin >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s and " \ n "	cout << s << " \n " ;
create constant double PI with PI = 2 . 0 * acosign of 0 . 0	const double PI = 2.0 * acos ( 0.0 ) ;
create constant integer MOD with MOD = 1e9 + 7	const int MOD = 1e9 + 7 ;
create constant integer oo with oo = 2 * MOD + 1e3	const int oo = 2 * MOD + 1e3 ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
return a if not b , else return result of run gcd with b , a % b as arguments from function	return ! b ? a : gcd ( b , a % b ) ;
create integer n	int n ;
create string str	string str ;
read n read str	cin >> n >> str ;
sort elements from beginning of str to end of str	sort ( str . begin ( ) , str . end ( ) ) ;
print str print ' \ n '	cout << str << ' \n ' ;
declare integer variable n	int n ;
declare string variable s	string s ;
read n and s	cin >> n >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << endl ;
create int64_t variable n	int64_t n ;
create string s	string s ;
read n and s	cin >> n >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << endl ;
declare constant integer mod = 1000000007	const int mod = 1000000007 ;
declare constant long long inf = 1000000000000	const long long inf = 1000000000000 ;
declare integer variable n	int n ;
read n	cin >> n ;
declare string variable s	string s ;
read s	cin >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s and ' \ n '	cout << s << ' \n ' ;
int the function fpow that takes long long n , k , p with p = 1000000007 and returns long long	long long fpow ( long long n , long long k , long long p = 1000000007 )
r = 1	long long r = 1 ;
for k > > = 1 if k	for ( ; k ; k >>= 1 )
if k & 1 r = r * n % p	if ( k & 1 ) r = r * n % p ;
n = n * n % p	n = n * n % p ;
return r	return r ;
in the function inv that takes long long a , p with p = 1000000007 and returns long long	long long inv ( long long a , long long p = 1000000007 )
return fpow with a , p - 2 and p as arguments	return fpow ( a , p - 2 , p ) ;
n = integer	int n ;
read n	cin >> n ;
s = string	string s ;
read s	cin >> s ;
sort s . begin ( ) and s . end ( )	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << endl ;
create character array a with size 100005	char a [ 100005 ] ;
create integer n	int n ;
read n	cin >> n ;
read character	getchar ( ) ;
read string into a	gets ( a ) ;
sort elements from a to a + n	sort ( a , a + n ) ;
print a	puts ( a ) ;
declare integer variable n	int n ;
read n	cin >> n ;
declare string variable second	string second ;
read second	cin >> second ;
sort second	sort ( ( second ) . begin ( ) , ( second ) . end ( ) ) ;
print second	cout << second << endl ;
vis = array of 100005 boolean values	bool vis [ 100005 ] ;
define comp which takes a = pair from int to char , b = pair int to char as parameters	bool comp ( pair < int , char > a , pair < int , char > b )
return a . first > b . first	return a . first > b . first ;
let n be an int	int n ;
read n	cin >> n ;
let s be a string	string s ;
read s	cin >> s ;
execute sort with s . begin ( ) , s . end ( ) as arguments	sort ( s . begin ( ) , s . end ( ) ) ;
print s and one newline	cout << s << endl ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
return result of run gcd with b % a , a as arguments if a is true , else b	return a ? gcd ( b % a , a ) : b ;
declare swap with character points a , b as arguments , returning void	void swap ( char * a , char * b )
create character temmp with temp = value of a	char temp = * a ;
set value of a to value of b	* a = * b ;
set value of b to temp	* b = temp ;
declare maxPrimeFactors with long long n as argument , returning long long	long long maxPrimeFactors ( long long n )
create long long maxPrime with maxPrime = - 1	long long maxPrime = - 1 ;
while n % 2 is 0	while ( n % 2 == 0 )
set maxPrime to 2	maxPrime = 2 ;
set n to n bitshift right 1	n >>= 1 ;
for i = 3 to square root of n inclusive , incrementing i by 2	for ( int i = 3 ; i <= sqrt ( n ) ; i += 2 )
while n % i is 0	while ( n % i == 0 )
set maxPrime to i	maxPrime = i ;
set n to n / i	n = n / i ;
if n is greater than 2 , set maxPrime to n	if ( n > 2 ) maxPrime = n ;
return maxPrime	return maxPrime ;
declare bin_gen with ulong longs n , num , returning string	string bin_gen ( ulong long n , ulong long num )
create string bin with bin = " "	string bin = "  " ;
while decrement n is true	while ( n -- )
if num % 2	if ( num % 2 )
increment bin by " 1 "	bin += " 1 " ;
else	else
increment bin by " 0 "	bin += " 0 " ;
set num to num / 2	num /= 2 ;
return bin from function	return bin ;
create long long n	long long n ;
read n	cin >> n ;
create character array arr with size n	char arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
sort elements from arr to arr + n	sort ( arr , arr + n ) ;
fo ri = 0 to n exclusive , print arr [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cout << arr [ i ] ; }
print newline	cout << endl ;
mod = unsigned long long const with mod = 1000000007	unsigned long long const mod = 1000000007 ;
md = unsigned long long const with md = 998244353	unsigned long long const md = 998244353 ;
in function mypow taking two unsigned long longs a and b and returning an unsigned long long	unsigned long long mypow ( unsigned long long a , unsigned long long b )
res = unsigned long long with res = 1	unsigned long long res = 1 ;
set a to a modulo mod	a %= mod ;
call assert on b is greater or equal to 0	assert ( b >= 0 ) ;
loop while b is not 0 bitshifting b right by 1 each time	for ( ; b ; b >>= 1 )
if b bitwise - and 1 is not 0 then set res to res * a modulo mod	if ( b & 1 ) res = res * a % mod ;
set a to a * a modulo mod	a = a * a % mod ;
return res	return res ;
in = ifstream on " txt . in "	ifstream in ( " txt.in " ) ;
out = ofstream on " txt . out "	ofstream out ( " txt.out " ) ;
call fixed and setprecision of 12 on cout	cout << fixed << setprecision ( 12 ) ;
n = unsigned long long	unsigned long long n ;
read n	cin >> n ;
s = string	string s ;
read s	cin >> s ;
sort s	sort ( s . begin ( ) , s . end ( ) ) ;
print s	cout << s << ' \n ' ;
declare int variable N	int N ;
read N	cin >> N ;
declare string variable S	string S ;
read S	cin >> S ;
sort S	sort ( ( S ) . begin ( ) , ( S ) . end ( ) ) ;
print S and " \ n "	cout << S << " \n " ;
create int n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
sort array s	sort ( s . begin ( ) , s . end ( ) ) ;
print s and a newline	cout << s << " \n " ;
create float A and C	float A , C ;
create float max , min	float max , min ;
read A and C	cin >> A >> C ;
if A and C equal to 0	if ( A == 0 && C == 0 )
max = 0	max = 0 ;
assign 0 to min	min = 0 ;
else if A = 0	else if ( A == 0 )
print Impossible	cout << " Impossible " << endl ;
else if C = 0	else if ( C == 0 )
max = A	max = A ;
set min equal to A	min = A ;
else if C less than A	else if ( C < A )
min = A	min = A ;
set max to A + C - 1	max = A + ( C - 1 ) ;
else	else
set max = A + C - q	max = A + ( C - 1 ) ;
assign C / A * A to min	min = C / A * A ;
print min , " " , max and a newline	cout << min << "   " << max << endl ;
declare const int N = 1e6	const int N = 1e6 ;
declare integers n and m	int n , m ;
declare ints mx and mn	int mx , mn ;
read input to n and m	cin >> n >> m ;
if n = 0 and m > 0	if ( n == 0 && m > 0 )
print " Impossible "	cout << " Impossible " << endl ;
if m is equal to 0	if ( m == 0 )
print n , " " and n	cout << n << "   " << n << endl ;
change mx to n + m - 1	mx = n + m - 1 ;
if n > = m	if ( n >= m )
change mn to n	mn = n ;
else	else
change mn to m	mn = m ;
print mn , " " and mx	cout << mn << "   " << mx << endl ;
define integers n and m	long long int n , m ;
read n , m	cin >> n >> m ;
if n is 0 and m is nonzero	if ( n == 0 and m != 0 )
print Impossible	puts ( " Impossible " ) ;
otherwise	else
print n + maximum of 0LL and m - n , " " , n + maximum of 0LL and m - 1 , and a newline	cout << ( n + max ( 0LL , m - n ) ) << "   " << ( n + max ( 0LL , m - 1 ) ) << endl ;
;	;
n , m = long long	long long n , m ;
read n , m	cin >> n >> m ;
if n is 0 and m is 0	if ( ! n && ! m )
print 0 0	cout << " 0 0\n " ;
if n is 0	if ( ! n )
print Impossible	cout << " Impossible\n " ;
mx = long long = n + m	long long mx = n + m ;
if m carries a nonzero value , decrease mx by 1	if ( m ) mx -- ;
mn = long long = n + m	long long mn = n + m ;
mn = mn = lowest number between n and m	mn -= min ( n , m ) ;
print mn mx	cout << mn << "   " << mx << endl ;
n , m = integers	long long n , m ;
Read n and m	cin >> n >> m ;
if n is equal to 0	if ( n == 0 )
if m is equal to 0	if ( m == 0 )
print 0 , 0 and a new line	cout << 0 << "   " << 0 << endl ;
else do the following	else
print Impossible and a new line	cout << " Impossible " << endl ;
else do the following	else
mn , mx , a , b , c , d = integers	long long mn , mx , a , b , c , d ;
if m is equal to 0	if ( m == 0 )
set mx to n	mx = n ;
else do the following	else
set mx to m + n - 1	mx = m + ( n - 1 ) ;
set mn to n - 1	mn = ( n - 1 ) ;
set m to m - n - 1	m = m - ( n - 1 ) ;
if m is greater than 0	if ( m > 0 )
set mn to mn + m	mn = mn + m ;
else do the following	else
set mn to mn + 1	mn = mn + 1 ;
print mn , mx and a new line	cout << mn << "   " << mx << endl ;
let mn be a long integer	long long mn ;
let a , b be integers	int a , b ;
read a and b	cin >> a >> b ;
if a is equal to 0 and b is equal to 0	if ( a == 0 && b == 0 )
print 0 and space and 0 and newline	cout << 0 << '   ' << 0 << endl ;
if a is equal to 0	if ( a == 0 )
print Impossible and newline	cout << " Impossible " << endl ;
semicolumn	;
if b is equal to 0	if ( b == 0 )
print a and space and a and newline	cout << a << '   ' << a << endl ;
let mx be a long integer	long long mx ;
if b > = a	if ( b >= a )
the value of mn = a + ( b - a )	mn = a + ( b - a ) ;
else do the following	else
the value of mn is equal to a	mn = a ;
the value of mx is equal to a + ( b - 1 )	mx = a + ( b - 1 ) ;
print mn and space and mx and newline	cout << mn << '   ' << mx << endl ;
create integers n , m	int n , m ;
read n read m	cin >> n >> m ;
if n is 0 and m is greater than 0	if ( n == 0 && m > 0 )
print " Impossible " print newline	cout << " Impossible " << endl ;
create integers mn , mx	int mn , mx ;
set mn to n + ( maximum of ( 0 and m - n ) )	mn = n + ( max ( 0 , m - n ) ) ;
set mx to n + maximum of ( m - 1 )	mx = n + max ( 0 , m - 1 ) ;
print mn print " " print mx print newline	cout << mn << "   " << mx << endl ;
declare integer variables n and m	int n , m ;
read n and m and keep looping	while ( cin >> n >> m )
create integer mx = n + max of m - 1 and 0	int mx = n + max ( m - 1 , 0 ) ;
create integer mn = n + max of 0 and m - n	int mn = n + max ( 0 , m - n ) ;
if mn is greater than mx	if ( mn > mx )
print " Impossible "	cout << " Impossible " << endl ;
else	else
print mn , " " and mx	cout << mn << "   " << mx << endl ;
ch , ad = integers	int ch , ad ;
read ch , ad	cin >> ad >> ch ;
if ad is 0 and ch > 0	if ( ad == 0 && ch > 0 )
print Impossible	cout << " Impossible " << endl ;
else	else
print ad + ch - min ( ad , ch ) , " " , ad + max ( ch - 1 , 0 )	cout << ad + ch - min ( ad , ch ) << "   " << ad + max ( ch - 1 , 0 ) << endl ;
create long longs n , m	long long n , m ;
read n read m	cin >> n >> m ;
create long longs x , y	long long x , y ;
if n is 0	if ( n == 0 )
if m is true	if ( m )
print " Impossible \ n "	cout << " Impossible\n " ;
else	else
print " 0 0 \ n "	cout << " 0 0\n " ;
else	else
if m is true	if ( m )
set y to ( n - 1 ) + m	y = ( n - 1 ) + m ;
set x to n	x = n ;
if m is greater than n , increment x by ( m - n )	if ( m > n ) x += ( m - n ) ;
else	else
set x to y to n	x = y = n ;
print x print " " print y print " \ n "	cout << x << "   " << y << " \n " ;
n , m = integers	int n , m ;
read n , m	cin >> n >> m ;
if n is 0 and m is 0	if ( n == 0 && m == 0 )
print 0 , " " , 0	cout << 0 << "   " << 0 << endl ;
else if n is 0	else if ( n == 0 )
print Impossible	cout << " Impossible " << endl ;
else	else
print if n > m , n else m , " " , if m > 0 , n + m - 1 else n	cout << ( n > m ? n : m ) << "   " << ( m > 0 ? n + m - 1 : n ) << endl ;
create integers n , m	int n , m ;
read n read m	cin >> n >> m ;
if n is 0 and m is greater than 0	if ( n == 0 && m > 0 )
print " Impossible " print newline	cout << " Impossible " << endl ;
else	else
print n + m - minimum of n and m print " " print n + maximum of m - 1 and 0 , print newline	cout << n + m - min ( n , m ) << "   " << n + max ( m - 1 , 0 ) << endl ;
n , m , mn , mx = integers	int n , m , mn , mx ;
Read n and m	cin >> n >> m ;
if n is equal to 0	if ( n == 0 )
if m is equal to 0	if ( m == 0 )
print 0 0 and a new line	cout << " 0 0 " << endl ;
else do the following	else
print Impossible and a new line	cout << " Impossible " << endl ;
if m is equal to 0	if ( m == 0 )
print n , " " , n and a new line	cout << n << "   " << n << endl ;
set mx to n + m - 1	mx = n + m - 1 ;
if n is greater than or equal to m	if ( n >= m )
set mn to n	mn = n ;
else do the following	else
set mn to n	mn = m ;
print mn , " " , mx and a new line	cout << mn << "   " << mx << endl ;
n , m = long long int	long long int n , m ;
read n then m	cin >> n >> m ;
if n is 0 and m is greater than 0	if ( n == 0 && m > 0 )
print " Impossible "	cout << " Impossible\n " ;
else	else
if n is greater or equal to m	if ( n >= m )
print n and ' '	cout << n << '   ' ;
else	else
print ( m / n ) * n + ( m % n ) and ' '	cout << ( m / n ) * n + ( m % n ) << '   ' ;
if m is greater than 0	if ( m > 0 )
print ( n - 1 ) + m	cout << ( n - 1 ) + m << endl ;
else	else
print n	cout << n << endl ;
declare integers n and m	int n , m ;
read n and m	cin >> n >> m ;
if n = 0 and m > 0	if ( n == 0 && m > 0 )
print " Impossible "	cout << " Impossible " << endl ;
declare int variables mn and mx	int mn , mx ;
set mn to n	mn = n ;
if m = 0	if ( m == 0 )
assign n to mx	mx = n ;
else	else
set mx to n + ( m - 1 )	mx = n + ( m - 1 ) ;
if m is greater than n , increase mn by m - n	if ( m > n ) mn += ( m - n ) ;
print mn , " " and mx	cout << mn << "   " << mx << endl ;
n , m = long long	long long n , m ;
read n , m	cin >> n >> m ;
if n is 0 and m is not 0	if ( n == 0 && m != 0 )
print Impossible	cout << " Impossible " << endl ;
if n is 0 and m is 0	if ( n == 0 && m == 0 )
print 0 , " " , 0	cout << 0 << "   " << 0 << endl ;
if n is not 0 and m is 0	if ( n != 0 && m == 0 )
print n , " " , n	cout << n << "   " << n << endl ;
if n < = m	if ( n <= m )
print m , " " , n - 1 + m	cout << m << "   " << n - 1 + m << endl ;
else	else
print n , " " , n + m - 1	cout << n << "   " << n + m - 1 << endl ;
let n , m , c , d be integers	int n , m , c , d ;
while read n , m	while ( cin >> n >> m )
if n is equal to 0 and m is equal to 0	if ( n == 0 && m == 0 )
print 0 and space and 0 and newline	cout << 0 << "   " << 0 << endl ;
else do the following	else
if n is equal to 0	if ( n == 0 )
print Impossible and newline	cout << " Impossible " << endl ;
else do the following	else
if n is equal to 1	if ( n == 1 )
if m is equal to 0	if ( m == 0 )
print n and space and n and newline	cout << n << "   " << n << endl ;
else do the following	else
print m and space and m and newline	cout << m << "   " << m << endl ;
else do the following	else
if n > = m	if ( n >= m )
if m is equal to 0	if ( m == 0 )
print n and space and n and newline	cout << n << "   " << n << endl ;
else do the following	else
c is equal to m + n - 1	c = m + n - 1 ;
print n and space and c and newline	cout << n << "   " << c << endl ;
else do the following	else
d is equal to m + n - 1	d = m + n - 1 ;
print m and space and d and newline	cout << m << "   " << d << endl ;
declare int variables n and m	int n , m ;
read input to n and m	cin >> n >> m ;
if n = 0 and m ! = 0	if ( n == 0 and m != 0 )
print " Impossible "	cout << " Impossible " << endl ;
else if n = 0 and m = 0	else if ( n == 0 and m == 0 )
print 0 , " " and 0	cout << 0 << "   " << 0 << endl ;
else	else
declare integer mx = n + ( max of 0 and m - 1 )	int mx = n + max ( 0 , m - 1 ) ;
declare integer mn = n + ( max of 0 and m - n )	int mn = n + max ( 0 , m - n ) ;
print mn , " " and mx	cout << mn << "   " << mx << endl ;
create integer array dx with dx = { - 1 , 0 , 1 , 0 }	int dx [ ] = { - 1 , 0 , 1 , 0 } ;
create integer array dy with dy = { 0 , 1 , 0 , - 1 }	int dy [ ] = { 0 , 1 , 0 , - 1 } ;
create long longs n , m	long long n , m ;
read n read m	cin >> n >> m ;
if m is 0 and n is greater than or equal to 0	if ( m == 0 && n >= 0 )
print n print " " print n print newline	cout << n << "   " << n << endl ;
if n is 0 and m is greater than 0	if ( n == 0 && m > 0 )
print " Impossible " print newline	cout << " Impossible " << endl ;
create long long maxsum with maxsum = m + n - 1	long long maxsum = m + n - 1 ;
create long long minsum with minsum = n + maximum of ( m - n and 0LL )	long long minsum = n + max ( m - n , 0LL ) ;
print minsum print " " print maxsum print newline	cout << minsum << "   " << maxsum << endl ;
create int t , s , q	int t , s , q ;
cnt = 0	int cnt = 0 ;
read t , s and q	cin >> t >> s >> q ;
while s < t	while ( s < t )
set s to s * q	s = s * q ;
increment cnt	cnt ++ ;
print cnt	cout << cnt << endl ;
declare integers t , s , q	int t , s , q ;
read t , s , q	cin >> t >> s >> q ;
declare integer ans = 1	int ans = 1 ;
declare integer temp = s * q	int temp = s * q ;
while temp is less than t	while ( temp < t )
increment ans	++ ans ;
let temp be temp * q	temp *= q ;
print ans , newline	cout << ans << endl ;
create long long ints a , b , c , and coun = 0	long long a , b , c , coun = 0 ;
read a , b , and c	cin >> a >> b >> c ;
while a is greater than b	while ( a > b )
set b to b * c	b *= c ;
add 1 to coun	coun ++ ;
show coun	cout << coun << endl ;
the constant double value of PI = acos ( - 1 )	const long double PI = acos ( - 1 ) ;
let mod be a inline function that accepts long long n , long long m and returns a long integer value	inline long long mod ( long long n , long long m )
the long integer value of ret = n modulo m	long long ret = n % m ;
if ret is less than 0 , increment ret by m	if ( ret < 0 ) ret += m ;
return the value of ret	return ret ;
let gcd be a function that accepts long long a , long long b and returns a long integer	long long gcd ( long long a , long long b )
if a equals 0	if ( a == 0 )
return the value of b	return b ;
else do the following	else
return the value of gcd of b modulo a and a	return gcd ( b % a , a ) ;
let q , s , t be long integers	long long q , s , t ;
read t , s , q	cin >> t >> s >> q ;
the long integer value of ans = 0	long long ans = 0 ;
while s is less than t	while ( s < t )
s is equal to s * q	s *= q ;
increment ans by 1	ans ++ ;
print ans and newline	cout << ans << ' \n ' ;
declare constant integer MAXN = 1e4 + 4	const int MAXN = 1e4 + 4 ;
declare integers n , a , b	int n , a , b ;
read n , a , b	cin >> n >> a >> b ;
declare integer ans = 0	int ans = 0 ;
while a is less than n	while ( a < n )
let a be a * b	a *= b ;
increment ans	ans ++ ;
print ans and " \ n "	cout << ans << " \n " ;
let t , s , q , c be long integers with c = 0	long int t , s , q , c = 0 ;
read t , s , q	cin >> t >> s >> q ;
while t is greater than s	while ( t > s )
s is equal to s * q	s *= q ;
increment c by 1	c ++ ;
print c and newline	cout << c << endl ;
let t , s , q be integers	int t , s , q ;
while read t , s , q	while ( cin >> t >> s >> q )
let ans be integer 0	int ans = 0 ;
while s is less than t	while ( s < t )
increment ans by 1	ans ++ ;
multiply s by q	s *= q ;
print ans and newline	cout << ans << endl ;
create new integer constant called maxn with value 2e3 + 10	const int maxn = 2e3 + 10 ;
create constant integer eps = 1e - 14	const int eps = 1e-14 ;
mod is a new constant integer with value 1e9 + 7	const int mod = 1e9 + 7 ;
declare long long constant inf = 1e18	const long long inf = 1e18 ;
define integers t , s and p	int t , s , p ;
read standard input to t , s and p	cin >> t >> s >> p ;
cnt is a new integer with value 0	int cnt = 0 ;
while s < t	while ( s < t )
multiply s by p	s *= p ;
add 1 to cnt	++ cnt ;
print cnt	cout << cnt << endl ;
create ints t , s , and q	int t , s , q ;
make integer ans = 1	int ans = 1 ;
read t , s , and q	cin >> t >> s >> q ;
make long double now = 0	long double now = 0 ;
create long double last = s	long double last = s ;
while last is less than t	while ( last < t )
make long double tmp = ( last - now ) * q	long double tmp = ( last - now ) * q ;
if last + tmp * ( q - 1 ) / 2 is greater than or equal to t , break loop	if ( last + tmp * ( q - 1 ) / q >= t ) break ;
set last to last + ceil ( tmp ) * ( q - 1 ) / q	last += ceil ( tmp ) * ( q - 1 ) / q ;
add ceil ( tmp ) to now	now += ceil ( tmp ) ;
subtract last from now	now -= last ;
increment ans	ans ++ ;
show ans	cout << ans << endl ;
create long long int s , t , and q	long long s , t , q ;
read t , s , and q	cin >> t >> s >> q ;
make long long ans = 0	long long ans = 0 ;
while s is less than t	while ( s < t )
set s to s * q	s *= q ;
increment ans	ans ++ ;
show ans	cout << ans << endl ;
declare integers t , s and q	int t , s , q ;
read from the input to t , s and q	cin >> t >> s >> q ;
ans is a new integer variable = 1	int ans = 1 ;
while s * q < t	while ( s * q < t )
increment ans by one	ans ++ ;
set s to s multiplied by q	s *= q ;
print ans	cout << ans << endl ;
declare new integers t , s and q	int t , s , q ;
read variables t , s and q from the input	cin >> t >> s >> q ;
create new integer variable ans = 0	int ans = 0 ;
while s < t	while ( s < t )
set s to s multiplied by q	s *= q ;
increment ans	ans ++ ;
print ans	cout << ans << endl ;
declare new int variables t , s and q	int t , s , q ;
read input to t , s and q	cin >> t >> s >> q ;
define integer ans = 1	int ans = 1 ;
define new integer x with value s * q	int x = s * q ;
while x < t	while ( x < t )
increment ans	ans ++ ;
change the value of x to x multiplied by q	x *= q ;
print ans	cout << ans << endl ;
declare integers n , m	int n , m ;
declare integer array b size 200007	int b [ 200007 ] ;
declare integer arrays a size 200007 , c size 200007	int a [ 200007 ] , c [ 200007 ] ;
declare integer vector v	vector < int > v ;
declare integers i , j , l , h , t = 0	int i , j , l , h , t = 0 ;
declare strings s , s1 , s2 , s3	string s , s1 , s2 , s3 ;
declare long longs RE , DE , HE	long long RE , DE , HE ;
read RE and DE and HE	cin >> RE >> DE >> HE ;
while DE * HE is less than RE	while ( DE * HE < RE )
increment t	t ++ ;
let DE be DE * HE	DE *= HE ;
print t + 1 and newline	cout << t + 1 << endl ;
declare integer variables a , b and c	int a , b , c ;
declare integer variable ans = 0	int ans = 0 ;
read variables a , b and c from the input	cin >> a >> b >> c ;
while b < a	while ( b < a )
change the value of b to b multiplied by c	b *= c ;
increment ans	ans ++ ;
print ans	cout << ans << endl ;
create ints t , s , and q	int t , s , q ;
make int count = 0	int count = 0 ;
read t , s , and q	cin >> t >> s >> q ;
while s is less than t	while ( s < t )
set s to s * q	s = s * q ;
set count to count + 1	count += 1 ;
show count	cout << count << endl ;
declare doubles t , s , q , c and ans with c and ans = 0	double t , s , q , c = 0 , ans = 0 ;
read user input to t , s and q	cin >> t >> s >> q ;
while s < t	while ( s < t )
change s to the product of s and q	s = s * q ;
increment ans by one	ans ++ ;
print ans to the standard output	cout << ans << endl ;
create const int maxn = 1e5 + 5	const int maxn = 1e5 + 5 ;
create long long ints t , s , q , and ans = 0	long long t , s , q , ans = 0 ;
read t , s , and q	cin >> t >> s >> q ;
while s is less than t	while ( s < t )
set s to s * q	s *= q ;
add 1 to ans	ans ++ ;
show ans	cout << ans << endl ;
t , s , q = int , ans = 0	int t , s , q , ans = 0 ;
read t , s , q	cin >> t >> s >> q ;
downloaded = s	int downloaded = s ;
while downloaded < t	while ( downloaded < t )
add s * ( q - 1 ) to downloaded	downloaded += s * ( q - 1 ) ;
s = downloaded	s = downloaded ;
increment ans	ans ++ ;
print ans	cout << ans << endl ;
let MOD be a integer constant which equals 1e9 + 7	const int MOD = 1e9 + 7 ;
let INF be a integer constant which equals INT_MAX	const int INF = INT_MAX ;
let LINF be a long long constant which equals LLONG_MAX	const long long LINF = LLONG_MAX ;
let ans be integer	int ans ;
let t , s , q be long double values	long double t , s , q ;
read t , s , q	cin >> t >> s >> q ;
let x , z , y be long integers with x , z equals 0 and y equals s	long double x = 0 , z = 0 , y = s ;
while s is less than t	while ( s < t )
multiply s by q	s *= q ;
increase ans by 1	ans ++ ;
print ans and endline	cout << ans << endl ;
declare integer variables ans , t , s and q	int ans , t , s , q ;
set ans to 0	ans = 0 ;
read standard input to t , s and q	cin >> t >> s >> q ;
while s < t	while ( s < t )
multiply s by q	s *= q ;
increment ans by one	ans ++ ;
print ans to the standard output	cout << ans << endl ;
let a , b , c be integers	int a , b , c ;
read a	cin >> a ;
read b	cin >> b ;
read c	cin >> c ;
let s ( b ) , x ( 0 ) be integers	int s ( b ) , x ( 0 ) ;
while s is less than a	while ( s < a )
s is equal to s * c	s *= c ;
increment x by 1	++ x ;
print x and newline	cout << x << endl ;
create long longs t , s and q	long long t , s , q ;
new integer cnt = 1	int cnt = 1 ;
read input to t , s and q	cin >> t >> s >> q ;
in the infinite loop	while ( 1 )
if s * q > = t	if ( s * q >= t )
stop the loop	break ;
else	else
set s to s * q	s = s * q ;
increment cnt	cnt ++ ;
print cnt to the standard output	cout << cnt << endl ;
declare integers n , s , q	int n , s , q ;
declare integers t , w , i , j , k , cnt , ans = 0	int t , w , i , j , k , cnt , ans = 0 ;
read n , s , q	cin >> n >> s >> q ;
while s is less than n	while ( s < n )
increment ans	ans ++ ;
let s be s * q	s *= q ;
print ans , newline	cout << ans << endl ;
integer as t , s , q , cnt = 0	int t , s , q , cnt = 0 ;
read t , s , q	cin >> t >> s >> q ;
if s is less than t then do the following	while ( s < t )
add one to cnt	cnt ++ ;
multiply s by q	s *= q ;
output cnt	cout << cnt << endl ;
create integers t , s and q	int t , s , q ;
read t , s and q and keep looping	while ( cin >> t >> s >> q )
declare integer variable with name ans = 0	int ans = 0 ;
while s < t	while ( s < t )
increment ans by one	ans ++ ;
multiply s by q	s *= q ;
print ans to the standard output	cout << ans << endl ;
let T , S , q be integers	int T , S , q ;
read T , S , q	cin >> T >> S >> q ;
print ( int ) ceil ( log ( T * 1 . 0 / S ) / log ( q ) ) and newline	cout << ( int ) ceil ( log ( T * 1.0 / S ) / log ( q ) ) << endl ;
create long long t , s , q	long long t , s , q ;
read t , s and q	cin >> t >> s >> q ;
ans = 0	long long ans = 0 ;
while s < t	while ( s < t )
s = s * q	s *= q ;
increment ans	ans ++ ;
print ans	cout << ans << endl ;
n , m and a are long long integers	long long int n , m , a ;
read n , m and a	cin >> n >> m >> a ;
n = n % 10000000000	n = n % 10000000000 ;
m = m % 10000000000	m = m % 10000000000 ;
a = a % 10000000000	a = a % 10000000000 ;
let int ans be long longs	long long int ans ;
if a > n and a > m	if ( a > n && a > m )
assign value of 1 to the ans	ans = 1 ;
else	else
if n % a is greater than 0	if ( ( n % a ) > 0 )
n = n / a + 1	n = n / a + 1 ;
else	else
n = n / a	n = n / a ;
if m % a is greater than 0	if ( m % a > 0 )
m = m / a + 1	m = m / a + 1 ;
else	else
m = m / a	m = m / a ;
ans = n * m	ans = n * m ;
print ans and a new line	cout << ans << endl ;
create integers n , m and a	int n , m , a ;
read n , m and a	cin >> n >> m >> a ;
print 1ll * ( n + a - 1 ) / a * ( ( m + a - 1 ) / a ) and a new line	cout << 1ll * ( n + a - 1 ) / a * ( ( m + a - 1 ) / a ) << endl ;
create integers m , n , a	int m , n , a ;
read m	cin >> m ;
read n	cin >> n ;
read a	cin >> a ;
create integer l with l = round up ( n / ( a * 1 . 0 ) )	int l = ceil ( n / ( a * 1.0 ) ) ;
create integer w with w = round up ( m / ( a * 1 . 0 ) )	int w = ceil ( m / ( a * 1.0 ) ) ;
print long long casted l * long long casted w print newline	cout << ( long long ) l * ( long long ) w << endl ;
m , n and a = integers	int m , n , a ;
read m	cin >> m ;
read n	cin >> n ;
read a	cin >> a ;
int l = ceil of n / ( a * 1 . 0 )	int l = ceil ( n / ( a * 1.0 ) ) ;
int w = ceil of m / ( a * 1 . 0 )	int w = ceil ( m / ( a * 1.0 ) ) ;
print l * w and a new line	cout << ( long long ) l * ( long long ) w << endl ;
declare long longs called a , b and c	long long a , b , c ;
read a , b and c	cin >> a >> b >> c ;
print ( ( ( a + c - 1 ) / c ) * ( ( b + c - 1 ) / c ) ) and " \ n "	cout << ( ( ( a + c - 1 ) / c ) * ( ( b + c - 1 ) / c ) ) << " \n " ;
create doubles n , m and a	double n , m , a ;
read n , m and a	cin >> n >> m >> a ;
print ( n / a * 1 . 0 ) rounded upward * ( m / a * 1 . 0 ) rounded upward , and a new line	cout << ( long long ) ceil ( n / a * 1.0 ) * ( long long ) ceil ( m / a * 1.0 ) << endl ;
n , m , a , x and y are long longs	long long n , m , a , x , y ;
read n , m and a	cin >> n >> m >> a ;
if n % a ! = 0 and m % a ! = 0	if ( n % a != 0 and m % a != 0 )
x = n / a + 1	x = n / a + 1 ;
y = m / a + 1	y = m / a + 1 ;
else if n % a = 0 and m % a ! = 0	else if ( n % a == 0 and m % a != 0 )
x = n / a	x = n / a ;
y = m / a + 1	y = m / a + 1 ;
else if n % a ! = 0 and m % a = 0	else if ( n % a != 0 and m % a == 0 )
x = n / a + 1	x = n / a + 1 ;
y = m / a	y = m / a ;
else	else
x = n / a	x = n / a ;
y = m / a	y = m / a ;
print x * y and a new line	cout << x * y << endl ;
create long longs n , m , a , x , y	long long n , m , a , x , y ;
read n read m read a	cin >> n >> m >> a ;
if a % a is not 0 and m % a is not 0	if ( n % a != 0 and m % a != 0 )
set x to n / a + 1	x = n / a + 1 ;
set y to m / a + 1	y = m / a + 1 ;
else if n % a is 0 and m % a is not 0	else if ( n % a == 0 and m % a != 0 )
set x to n / a	x = n / a ;
set y to m / a + 1	y = m / a + 1 ;
else if n % a is not 0 and m % a is 0	else if ( n % a != 0 and m % a == 0 )
set x to n / a + 1	x = n / a + 1 ;
set y to m / a	y = m / a ;
else	else
set x to n / a	x = n / a ;
set y to m / a	y = m / a ;
print x * y print newline	cout << x * y << endl ;
declare long longs i , j , c1 , c2 , n , m and a	long long i , j , c1 , c2 , n , m , a ;
read n , m and a	cin >> n >> m >> a ;
if n % a = 0	if ( n % a == 0 )
c1 = n / a	c1 = n / a ;
else	else
c1 = n / a + 1	c1 = n / a + 1 ;
if m % a = 0	if ( m % a == 0 )
c2 = m / a	c2 = m / a ;
else	else
c2 = m / a + 1	c2 = m / a + 1 ;
print c1 * c2 and a new line	cout << c1 * c2 << endl ;
create long longs n , m and a	long long n , m , a ;
read n , m and a	cin >> n >> m >> a ;
long long stones = ( n / a ) * ( m / a )	long long stones = ( n / a ) * ( m / a ) ;
if n % a ! = 0 add m / a to stones	if ( n % a != 0 ) { stones += m / a ; }
if m % a ! = 0 add n / a to stones	if ( m % a != 0 ) { stones += n / a ; }
if m % a ! = 0 & & n % a ! = 0 add 1 to stones	if ( m % a != 0 && n % a != 0 ) { ++ stones ; }
print stones and a new line	cout << stones << endl ;
let n , m and a be long longs	long long n , m , a ;
read n , m and a	cin >> n >> m >> a ;
set long long ans to 0	long long ans = 0 ;
if n % a is equal to 0	if ( n % a == 0 )
n = n / a	n = n / a ;
else	else
n = n / a + 1	n = n / a + 1 ;
if m % a is equal to 0	if ( m % a == 0 )
m = m / a	m = m / a ;
else	else
m = m / a + 1	m = m / a + 1 ;
print m * n and a new line	cout << m * n << endl ;
m , n and a are integers	int m , n , a ;
read m , n and a	cin >> m >> n >> a ;
int l = n / ( a * 1 . 0 ) rounded down	int l = ceil ( n / ( a * 1.0 ) ) ;
int w = m / ( a * 1 . 0 ) rounded down	int w = ceil ( m / ( a * 1.0 ) ) ;
print l * w and a new line	cout << ( ( long long ) l * ( long long ) w ) << endl ;
n , m and a = doubles	double n , m , a ;
read n , m and a	cin >> n >> m >> a ;
print ( n / a ) rounded up * ( m / a ) rounded up , and a new line	cout << ( long long ) ceil ( n / a ) * ( long long ) ceil ( m / a ) << endl ;
let n , m and a be long longs	long long n , m , a ;
i and j are long longs with i = 0 and j = 0	long long i = 0 , j = 0 ;
while car rean n , m and a	while ( cin >> n >> m >> a )
if n % a is 1	if ( n % a )
i = n / a + 1	i = n / a + 1 ;
else	else
i = n / a	i = n / a ;
if m % a is 1	if ( m % a )
j = m / a + 1	j = m / a + 1 ;
else	else
j = m / a	j = m / a ;
print i * j and a new line	cout << i * j << endl ;
create long longs n , m , a	long long n , m , a ;
create long longs i , j , with i = 0 , j = 0	long long i = 0 , j = 0 ;
while read n read m read a is true	while ( cin >> n >> m >> a )
if n % a is true	if ( n % a )
set i to n / a + 1	i = n / a + 1 ;
else	else
set i to n / a	i = n / a ;
if m % a	if ( m % a )
set j to m / a + 1	j = m / a + 1 ;
else	else
set j to m / a	j = m / a ;
print i * j print newline	cout << i * j << endl ;
n = long long	long long n ;
m = long long	long long m ;
a = long long	long long a ;
read n , m and a	cin >> n >> m >> a ;
print ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) and a new line	cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;
create long long n	long long n ;
create long long m	long long m ;
create long long a	long long a ;
read n read m read a	cin >> n >> m >> a ;
print ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) print newline	cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;
int n , m , a and ans = long longs	long long int n , m , a , ans ;
read n , m and a in a loop	while ( cin >> n >> m >> a )
if a > and a > m	if ( a > n && a > m )
print " 1 " and a new line	cout << " 1 " << endl ;
else	else
if n % a is greater than 0	if ( n % a > 0 )
n = ( n / a ) + 1	n = ( n / a ) + 1 ;
else	else
n = ( n / a )	n = ( n / a ) ;
if m % a is greater than 0	if ( m % a > 0 )
m = ( m / a ) + 1	m = ( m / a ) + 1 ;
else	else
m = ( m / a )	m = ( m / a ) ;
ans = n * m	ans = n * m ;
print ans and a new line	cout << ans << endl ;
create long longs x , y and a	long long x , y , a ;
read x , y and a	cin >> x >> y >> a ;
declare long longs xx = x / a and yy = y / a	long long xx = x / a , yy = y / a ;
if x % a ! = 0 increment xx	if ( x % a != 0 ) xx ++ ;
if y % a ! = 0 increment yy	if ( y % a != 0 ) yy ++ ;
print xx * yy and a new line	cout << xx * yy << endl ;
create long longs x , y , a	long long x , y , a ;
read x read y read a	cin >> x >> y >> a ;
create long longs xx , yy , with xx = x / a , yy = y / a	long long xx = x / a , yy = y / a ;
if x % a is not 0 , increment xx	if ( x % a != 0 ) xx ++ ;
if y % a is not 0 , increment yy	if ( y % a != 0 ) yy ++ ;
print xx * yy print newline	cout << xx * yy << endl ;
declare long longs called n , m and a	long long n , m , a ;
read n , m and a	cin >> n >> m >> a ;
create long long rows = ( n + a - 1 ) / a	long long rows = ( n + a - 1 ) / a ;
create long long cols = ( m + a - 1 ) / a	long long cols = ( m + a - 1 ) / a ;
print rows * cols and a new line	cout << rows * cols << endl ;
let n , m , a be long integers	long long n , m , a ;
read n , m , a	cin >> n >> m >> a ;
if n modulo a is equal to 0	if ( n % a == 0 )
the value of n = n / a	n /= a ;
else do the following	else
the value of n = n / a + 1	n = n / a + 1 ;
if m modulo a is equal to 0	if ( m % a == 0 )
the value of m = m / a	m /= a ;
else do the following	else
the value of m = m / a + 1	m = m / a + 1 ;
print n * m and newline	cout << n * m << endl ;
create long longs a , b , c	long long a , b , c ;
while read a read b read c	while ( cin >> a >> b >> c )
create long longs d , e	long long d , e ;
if a % c is not 0 , set d to a / c + 1	if ( a % c != 0 ) d = a / c + 1 ;
if b % c is not 0 , set e to b / c + 1	if ( b % c != 0 ) e = b / c + 1 ;
if a % c is 0 , set d to a / c	if ( a % c == 0 ) d = a / c ;
if b % c is 0 , set e to b / c	if ( b % c == 0 ) e = b / c ;
create long long f with f = d * e	long long f = d * e ;
print f print newline	cout << f << endl ;
n , m , a = long lon	long long n , m , a ;
while reading n then m then a print ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a )	while ( cin >> n >> m >> a ) cout << ( ( n + a - 1 ) / a ) * ( ( m + a - 1 ) / a ) << endl ;
create long long x , y and a	long long x , y , a ;
read x , y and a	cin >> x >> y >> a ;
set xx to x / a and yy = y / a	long long xx = x / a , yy = y / a ;
if x mod a different from 0 , increment xx	if ( x % a != 0 ) xx ++ ;
if y mod a different from 0 , add 1 to yy	if ( y % a != 0 ) yy ++ ;
print xx * yy	cout << xx * yy << endl ;
create long longs n , m , a	long long n , m , a ;
read n read m read a	cin >> n >> m >> a ;
create long longs nN , nM	long long nN , nM ;
set nN to n / a	nN = n / a ;
set nM to m / a	nM = m / a ;
if n % a is not 0 , increment nN	if ( n % a != 0 ) { nN ++ ; }
if m % a is not 0 , increment nM	if ( m % a != 0 ) { nM ++ ; }
print nN * nM print newline	cout << nN * nM << endl ;
a , b , c , d = integers	long long a , b , c , d ;
Read a , b , c	cin >> a >> b >> c ;
if c is greater than or equal to a and c is greater than or equal to b	if ( c >= a && c >= b )
print 1 and a new line	cout << " 1 " << endl ;
if c is less than a and c is greater than or equal to b	if ( c < a && c >= b )
if a modulo c is 0	if ( a % c == 0 )
print a / c and a new line	cout << a / c << endl ;
else do the following	else
print a / c + 1 and a new line	cout << a / c + 1 << endl ;
if c is greater than or equal to a and c is less than b	if ( c >= a && c < b )
if b modulo c is 0	if ( b % c == 0 )
print b / c and a new line	cout << b / c << endl ;
else do the following	else
print b / c + 1 and a new line	cout << b / c + 1 << endl ;
if c is less than a and c is less than b	if ( c < a && c < b )
if b modulo c is 0 and a modulo c is 0	if ( b % c == 0 && a % c == 0 )
print ( a * b ) / ( c * c ) and a new line	cout << ( a * b ) / ( c * c ) << endl ;
else if b modulo c is not 0 and a modulo c is 0	else if ( b % c != 0 && a % c == 0 )
print ( a / c ) * ( b / c + 1 ) and a new line	cout << ( a / c ) * ( b / c + 1 ) << endl ;
else if b modulo c is 0 and a modulo c is not 0	else if ( b % c == 0 && a % c != 0 )
print ( b / c ) * ( a / c + 1 ) and a new line	cout << ( b / c ) * ( a / c + 1 ) << endl ;
else do the following	else
print ( a / c + 1 ) * ( b / c + 1 ) and a new line	cout << ( a / c + 1 ) * ( b / c + 1 ) << endl ;
noOfOranges , Orange , maxSize , maxWaste , Waste , cnt = integers with Waste = 0 , cnt = 0	int noOfOranges , Orange , maxSize , maxWaste , Waste = 0 , cnt = 0 ;
read noOfOranges , maxSize , maxWaste	cin >> noOfOranges >> maxSize >> maxWaste ;
for i = 0 to noOfOranges exclusive	for ( int i = 0 ; i < noOfOranges ; i ++ )
read Orange	cin >> Orange ;
if ( Orange > maxSize )	if ( Orange > maxSize )
continue next itereation	continue ;
else	else
Waste = Waste + Orange	Waste += Orange ;
if ( Waste > maxWaste )	if ( Waste > maxWaste )
increment cnt	cnt ++ ;
Waste = 0	Waste = 0 ;
print cnt	cout << cnt << endl ;
let n , b , d , v , sum , c be integers with sum = 0 , c = 0	int n , b , d , v , sum = 0 , c = 0 ;
read n , b , d	cin >> n >> b >> d ;
for x = 0 to n exclusive	for ( int x = 0 ; x < n ; x ++ )
read v	cin >> v ;
if v < = b , increment sum by v	if ( v <= b ) sum += v ;
if sum is greater than d	if ( sum > d )
sum is equal to 0	sum = 0 ;
increment c by 1	c ++ ;
print c and endline	cout << c << endl ;
new constant integer N = 1e5 + 100	const int N = 1e5 + 100 ;
define constant double PI with value 3 . 14159	const double PI = 3.14159 ;
create vector of booleans v	vector < bool > v ;
declare integers n , m , now , ans , b and d , and an array of integers a with N elements	int n , m , a [ N ] , now , ans , b , d ;
st is a set of integers	set < int > st ;
define strings s and t	string s , t ;
read n , b and d	cin >> n >> b >> d ;
in a for loop , change i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ] from the input	cin >> a [ i ] ;
go to the start of the loop if a [ i ] is greater than b	if ( a [ i ] > b ) continue ;
change now to now + a [ i ]	now += a [ i ] ;
if now is greater than d	if ( now > d )
increment ans by one	ans ++ ;
change the value of now to 0	now = 0 ;
print ans to the standard output	cout << ans << endl ;
n , b , d , a , c , c2 = integers	int n { } , b { } , d { } , a { } , c { } , c2 { } ;
read n , b , d	cin >> n >> b >> d ;
while decrement n	while ( n -- )
read a	cin >> a ;
if ( a < = b ) , c = c + a	if ( a <= b ) { c += a ; } ;
if ( c > d )	if ( c > d )
increment c2	c2 ++ ;
c = 0	c = 0 ;
print c2	cout << c2 << endl ;
create integer n , b , d , result , counter with result = 0 , counter = 0	int n , b , d , result = 0 , counter = 0 ;
read n , b , d	cin >> n >> b >> d ;
create integer array oranges with size n	int oranges [ n ] ;
for integer i = 0 to n - 1 with increment i	for ( int i = 0 ; i < n ; i ++ )
read oranges [ i ]	cin >> oranges [ i ] ;
if oranges [ i ] less than or equal to b then add oranges [ i ] to counter	if ( oranges [ i ] <= b ) { counter += oranges [ i ] ; }
if counter greater than d then	if ( counter > d )
increment result	result ++ ;
set counter to 0	counter = 0 ;
print result	cout << result << endl ;
n = integer	int n ;
Read n	cin >> n ;
b = integer	int b ;
Read b	cin >> b ;
d = integer	int d ;
Read d	cin >> d ;
orange , volume , counter = integers with volume = 0 , counter = 0	int orange , volume = 0 , counter = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
Read orange	cin >> orange ;
if orange is less than or equal to b , set volume to volume + orange	if ( orange <= b ) volume += orange ;
if volume is greater than d	if ( volume > d )
set volume to 0	volume = 0 ;
increment counter	counter ++ ;
print counter and a new line	cout << counter << endl ;
n , b , d = integers	int n , b , d ;
Read n , b , d	cin >> n >> b >> d ;
temp , ans = integers with ans = 0	int temp , ans = 0 ;
cont = integer with 0	long long cont = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
Read temp	cin >> temp ;
if temp is less than or equal to b	if ( temp <= b )
set cont to cont + temp	cont += temp ;
if cont is greater than d	if ( cont > d )
increment ans	ans ++ ;
set cont to 0	cont = 0 ;
print ans and new line	cout << ans << ' \n ' ;
n = long double with value of 0	long double n = 0 ;
s = long double with value of 0	long double s = 0 ;
b = long double with value of 0	long double b = 0 ;
d = long double with value of 0	long double d = 0 ;
e = long double with value of 0	long double e = 0 ;
output = integer with value of 0	int output = 0 ;
read n , b and d	cin >> n >> b >> d ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read s	cin >> s ;
if s is greater than b	if ( s > b )
continue	continue ;
else	else
increase e by s	e += s ;
if e is greater than d	if ( e > d )
add 1 to output	++ output ;
set e to 0	e = 0 ;
print output	cout << output << endl ;
create long long ints n , b , d , and i	long long int n , b , d , i ;
read n , b , and d and while they ' re truthy	while ( cin >> n >> b >> d )
create long long ints sum = 0 and c = 0 and int array a of size n + 5	long long int a [ n + 5 ] , sum = 0 , c = 0 ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is less than or equal to b , set sum to sum + a [ i ]	if ( a [ i ] <= b ) { sum += a [ i ] ; }
if sum is greater than d	if ( sum > d )
set sum to 0	sum = 0 ;
add 1 to c	c ++ ;
display c	cout << c << endl ;
let n , b , d , v , sum and c be unsigned long integers with sum and c = 0	unsigned long int n , b , d , v , sum = 0 , c = 0 ;
read from the input to n , b and d	cin >> n >> b >> d ;
start a loop from x = 0 to n exclusive incrementing x	for ( int x = 0 ; x < n ; x ++ )
read standard input to v	cin >> v ;
if v < = b , change sum to sum + v	if ( v <= b ) sum += v ;
if sum is greater than d	if ( sum > d )
assign 0 to sum	sum = 0 ;
increment c by one	c ++ ;
print c	cout << c << endl ;
create integers n , b , d , i , cnt and tmp with cnt and tmp = 0 ; create an array of integers a with 100001 element	int n , b , d , i , cnt = 0 , a [ 100001 ] , tmp = 0 ;
read n , b and d from the input	cin >> n >> b >> d ;
read elements of a from the input n times in a loop	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
start for loop from i = 0 to n exclusive incrementing i	for ( i = 0 ; i < n ; i ++ )
if a [ i ] < = b and cnt < = d , add a [ i ] to cnt	if ( a [ i ] <= b and cnt <= d ) cnt += a [ i ] ;
if cnt is greater than d	if ( cnt > d )
assign 0 to cnt	cnt = 0 ;
increment tmp by one	tmp ++ ;
print tmp to the standard output	cout << tmp << endl ;
create int int n , b , d , , set result and temp to 0	int n , b , d , result = 0 , temp = 0 ;
read n , b and d	cin >> n >> b >> d ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create int size	int size ;
read size	cin >> size ;
if size < = b , set temp to temp + size	if ( size <= b ) { temp += size ; }
if temp > d	if ( temp > d )
increment result	result ++ ;
set temp to 0	temp = 0 ;
print result	cout << result << endl ;
n , b , d = integers	int n , b , d ;
read n , b , d	cin >> n >> b >> d ;
ans , cnt = integers with ans = 0 , cnt = 0	int ans = 0 , cnt = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
x = integer	int x ;
read x	cin >> x ;
if ( x < = b )	if ( x <= b )
cnt = cnt + x	cnt += x ;
if ( cnt > d )	if ( cnt > d )
increment ans	ans ++ ;
cnt = 0	cnt = 0 ;
print ans	cout << ans << " \n " ;
n , b , d , sum and ans are integers where sum and ans = 0	int n , b , d , sum = 0 , ans = 0 ;
read input to n , b and d	cin >> n >> b >> d ;
for integer i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
t is a new integer variable	int t ;
read t	cin >> t ;
if t < = b	if ( t <= b )
increase sum by t	sum += t ;
if sum is greater than d	if ( sum > d )
assign 0 to sum	sum = 0 ;
increment ans	ans ++ ;
print ans to the output stream	cout << ans << endl ;
let n , b , d be integers	int n , b , d ;
read n , b , d	cin >> n >> b >> d ;
let integer value of sum = 0	int sum = 0 ;
let integer value of count = 0	int count = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let a be a integer	int a ;
read a	cin >> a ;
if a < = b , increment sum by a	if ( a <= b ) { sum += a ; }
if sum is greater than d	if ( sum > d )
increment count by 1	count ++ ;
sum is equal to 0	sum = 0 ;
print count and newline	cout << count << endl ;
s is a new array of integers with 100000 + 5 elements	int s [ 100000 + 5 ] ;
create integers n , b , d , ans and sum with ans and sum = 0	int n , b , d , ans = 0 , sum = 0 ;
read n , b and d from the user input	cin >> n >> b >> d ;
start for loop from i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read s [ i ] from the input	cin >> s [ i ] ;
if s [ i ] is greater than b	if ( s [ i ] > b )
skip the rest of the loop	continue ;
else	else
increase sum by s [ i ]	sum += s [ i ] ;
if sum is greater than d	if ( sum > d )
change sum to 0	sum = 0 ;
increment ans by one	ans ++ ;
print ans to the standard output	cout << ans << endl ;
create long n , b , d , c , set c to 0	long n , b , d , c = 0 ;
read n , b and d	cin >> n >> b >> d ;
create long orange [ n ]	long orange [ n ] ;
out = 0	long long out = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read orange [ i ]	cin >> orange [ i ] ;
if orange [ i ] > b	if ( orange [ i ] > b )
continue	continue ;
else	else
set out to out + orange [ i ]	out += orange [ i ] ;
if out > d	if ( out > d )
increment c	c ++ ;
out = 0	out = 0 ;
print c	cout << c << endl ;
let n , b , d be long integers	long long int n , b , d ;
a = array of long integers of length 100007	long long int a [ 100007 ] ;
read n , b , d	cin >> n >> b >> d ;
for long integer $ i = 0 to n - 1 inclusive , read a [ $ i ]	for ( long long int $i = 0 ; $i <= n - 1 ; $i ++ ) cin >> a [ $i ] ;
let c be a long integer with c = 0	long long int c = 0 ;
let s be a long integer with s = 0	long long int s = 0 ;
for long integer i = 0 to n - 1 inclusive	for ( long long int i = 0 ; i <= n - 1 ; i ++ )
if a [ i ] < = b	if ( a [ i ] <= b )
increment s by a [ i ]	s += a [ i ] ;
if s is greater than d	if ( s > d )
increment c by 1	c ++ ;
s is equal to 0	s = 0 ;
print c and newline	cout << c << " \n " ;
let n , b , d be integers	int n , b , d ;
read n , b , d	cin >> n >> b >> d ;
ret , tot = integers with value of 0	int tot = 0 , ret = 0 ;
for int i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
a = int	int a ;
read a	cin >> a ;
if a > b , continue	if ( a > b ) continue ;
add a to tot	tot += a ;
if tot > d	if ( tot > d )
add one to ret	ret ++ ;
let tot = 0	tot = 0 ;
print ret	cout << ret << endl ;
x , y , a , b = integers	int x , y , a , b ;
read x , y , a , b	cin >> x >> y >> a >> b ;
x = ( x * y ) / the result of calling __gcd with arguments of x and y	x = ( x * y ) / __gcd ( x , y ) ;
print the result of b / x - ( a - 1 ) / x	cout << b / x - ( a - 1 ) / x << " \n " ;
let gcd be a long integer function which accepts long integers a , b	long long gcd ( long long a , long long b )
if a is equal to 0 or b is equal to 0 , return 0	if ( a == 0 || b == 0 ) return 0 ;
if a is equal to b , return a	if ( a == b ) return a ;
if a is greater than b , return gcd of a - b , b	if ( a > b ) return gcd ( a - b , b ) ;
return gcd of a , b - a	return gcd ( a , b - a ) ;
let f , l , x , y , a , b , i , cnt be long integers with cnt = 0	long long f , l , x , y , a , b , i , cnt = 0 ;
read x , y , a , b	cin >> x >> y >> a >> b ;
let lcm be a long integer with lcm is equal to ( x * y ) / gcd of x , y	long long lcm = ( x * y ) / gcd ( x , y ) ;
print ( ( b / lcm ) - ( ( a - 1 ) / lcm ) ) and newline	cout << ( ( b / lcm ) - ( ( a - 1 ) / lcm ) ) << endl ;
declare x , y , a , b as integers	int x , y , a , b ;
read x read y read a read b	cin >> x >> y >> a >> b ;
declare val = ( x * y ) / ( run __gcd ( x , y ) ) as integer	int val = ( x * y ) / ( __gcd ( x , y ) ) ;
declare integer ans	int ans ;
if a % val is 0	if ( a % val == 0 )
let ans be b / val - a / val + 1	ans = b / val - a / val + 1 ;
else	else
let ans be b / val - a / val	ans = b / val - a / val ;
print ans , " \ n "	cout << ans << " \n " ;
declare long long integers a , b , x , y	long long int a , b , x , y ;
read x , y , a , b	cin >> x >> y >> a >> b ;
declare long long integer g = run __gcd ( x , y )	long long int g = __gcd ( x , y ) ;
let x be ( x * y ) / g	x = ( x * y ) / g ;
if a % x is 0	if ( a % x == 0 )
print b / x - a / x + 1	cout << b / x - a / x + 1 ;
else	else
print b / x - a / x	cout << b / x - a / x ;
print newline	cout << endl ;
create new integers x , y , a and b	int x , y , a , b ;
read standard input to x , y , a and b	cin >> x >> y >> a >> b ;
create integer variable with name lcm = x * y / __gcd ( x , y )	int lcm = x * y / __gcd ( x , y ) ;
declare integer ans with value b / lcm - ( a - 1 ) / lcm	int ans = b / lcm - ( a - 1 ) / lcm ;
print ans	cout << ans << endl ;
in function gcd with arguments integer a and integer b that returns an integer	int gcd ( int a , int b )
return the result of calling gcd with arguments of b and a modulo b if b is nonzero else return a	return ( b ? gcd ( b , a % b ) : a ) ;
x , y , a , b , v , k = integers	int x , y , a , b , v , k ;
read x , y , a , b	cin >> x >> y >> a >> b ;
v = x * y / the result of calling gcd with arguments of x and y	v = x * y / gcd ( x , y ) ;
k = b / v - ( a - 1 ) / v	k = b / v - ( a - 1 ) / v ;
print k	cout << k << endl ;
integer function gcd with int arguments a and b	int gcd ( int a , int b )
return a if b = 0 , or gcd ( b , a % b ) otherwise	return b == 0 ? a : gcd ( b , a % b ) ;
function lcm with int arguments a and b that returns integer	int lcm ( int a , int b )
return a * ( b / gcd ( a , b ) )	return a * ( b / gcd ( a , b ) ) ;
declare integers x , y , a and b	int x , y , a , b ;
read variables x , y , a and b from the input	cin >> x >> y >> a >> b ;
declare integer variable MCM with value = result of lcm ( x , y )	int MCM = lcm ( x , y ) ;
print ( b / MCM ) - ( ( a - 1 ) / MCM ) to the standard output	cout << ( b / MCM ) - ( ( a - 1 ) / MCM ) << endl ;
in function gcd taking int a , int b and returning int	int gcd ( int a , int b )
if b is 0 return a	if ( b == 0 ) return a ;
return gcd of b , a mod b	return gcd ( b , a % b ) ;
in function LCM taking int a , int b and returning int	int LCM ( int a , int b )
return ( a * b ) / gcd of a , b	return ( a * b ) / gcd ( a , b ) ;
ans , x , y , aa , bb , m = int	int ans , x , y , aa , bb , m ;
read x then y then aa then bb	cin >> x >> y >> aa >> bb ;
set m to LCM of max of x , y , min of x , y	m = LCM ( max ( x , y ) , min ( x , y ) ) ;
set ans to ( bb / m ) - ( aa - 1 ) / m	ans = ( bb / m ) - ( aa - 1 ) / m ;
print ans	cout << ans << endl ;
x , y , a , b , m , n = int	int x , y , a , b , m , n ;
read x then y then a then b	cin >> x >> y >> a >> b ;
p , q = int with p = x and q = y	int p = x , q = y ;
loop while q	while ( q )
set n to q	n = q ;
set q to p mod q	q = p % q ;
set p to n	p = n ;
set n to ( x * y ) / n	n = ( x * y ) / n ;
set m to not ( a mod n )	m = a % n ? 0 : 1 ;
print ( b / n - a / n + m )	cout << ( b / n - a / n + m ) << endl ;
declare integer f with integers a , b as arguments	int f ( int a , int b )
declare integers t , x = a , y = b	int t , x = a , y = b ;
if x is less than y	if ( x < y )
let t be x	t = x ;
let x be y	x = y ;
let y be t	y = t ;
while x % y is not 0	while ( x % y != 0 )
let t be y	t = y ;
let y be x % y	y = x % y ;
let x be t	x = t ;
return a * b / y	return a * b / y ;
declare integers x , y , a , b	int x , y , a , b ;
while read x , y , a , b is true	while ( cin >> x >> y >> a >> b )
declare integer t = result of run f ( x , y )	int t = f ( x , y ) ;
declare integer p = b / t - a / t + 1 if a % t is 0 , else b / t - a / t	int p = ( a % t == 0 ) ? b / t - a / t + 1 : b / t - a / t ;
print p , newline	cout << p << endl ;
declare function GCD taking int a , int b and returning int	int GCD ( int a , int b ) ;
x , y = int	int x , y ;
a , b = int	int a , b ;
read x then y then a then b	cin >> x >> y >> a >> b ;
set x to x * y / GCD of x , y	x = x * y / GCD ( x , y ) ;
print b / x - ( a - 1 ) / x	cout << b / x - ( a - 1 ) / x << endl ;
in function GCD taking int a , int b and returning int	int GCD ( int a , int b )
n = int with n = a mod b	int n = a % b ;
loop while n is not 0	while ( n != 0 )
set a to b	a = b ;
set b to n	b = n ;
set n to a mod b	n = a % b ;
return b	return b ;
function gcd ( gets two ints a and b , return int )	int gcd ( int a , int b )
if a is 0 return b	if ( a == 0 ) return b ;
return gcd ( b modulo a , a )	return gcd ( b % a , a ) ;
x , y = int	int x , y ;
a , b = int	int a , b ;
read x	cin >> x ;
read y	cin >> y ;
read a	cin >> a ;
read b	cin >> b ;
M = x / gcd ( x , y ) * y	int M = x / gcd ( x , y ) * y ;
l = a / M	int l = a / M ;
r = b / M	int r = b / M ;
if l * M < a increment l	if ( l * M < a ) { l ++ ; }
print r - l + 1	cout << r - l + 1 << endl ;
let x , y , a , b be integers	int x , y , a , b ;
let ans be a integer	int ans ;
it is a function which returns Greatest Common Divisor of two integers k , l	int GCD ( int k , int l )
if l is equal to 0	if ( l == 0 )
return the value of k	return k ;
else do the following	else
return the Greatest Common Divisor of l , k modulo l	return GCD ( l , k % l ) ;
it is a function which returns Least Common Multiple of two integers m , n	int LCM ( int m , int n )
return the value of ( m * n ) / Greatest Common Divisor of m , n	return ( m * n ) / GCD ( m , n ) ;
ans is equal to 0	ans = 0 ;
read x , y , a , b	cin >> x >> y >> a >> b ;
let kpk be a integer	int kpk ;
kpk is equal to Least Common Multiple of x , y	kpk = LCM ( x , y ) ;
ans is equal to floor ( b / kpk ) - floor ( ( a - 1 ) / kpk )	ans = floor ( b / kpk ) - floor ( ( a - 1 ) / kpk ) ;
print ans and newline	cout << ans << endl ;
let x , y , a , b , p , ans , u , v , gcd , lcm be int	int x , y , a , b , p , ans , u , v , gcd , lcm ;
read x , y , a , b	cin >> x >> y >> a >> b ;
set p to the __gcd of x and y	p = __gcd ( x , y ) ;
set lcm to x * y / p	lcm = ( x * y ) / p ;
set u = a / lcm	u = a / lcm ;
set v = b / lcm	v = b / lcm ;
set ans = v - u	ans = v - u ;
if a mod lcm is 0 then increment ans	if ( ( a % lcm ) == 0 ) { ans = ans + 1 ; }
print ans	cout << ans << endl ;
declare integer gcd with integers a , b as arguments	int gcd ( int a , int b )
return a if b is 0 , else gcd ( b , a % b )	return b == 0 ? a : gcd ( b , a % b ) ;
declare lcm as integer with integers a , b as arguments	int lcm ( int a , int b )
return a / result of run gcd with a , b as arguments * b	return a / gcd ( a , b ) * b ;
declare x , y , a , b as integers	int x , y , a , b ;
read x and y and a and b	cin >> x >> y >> a >> b ;
declare LCM = run lcm ( x , y )	int LCM = lcm ( x , y ) ;
print ( b / LCM ) - ( ( a - 1 ) / LCM ) , newline	cout << ( b / LCM ) - ( ( a - 1 ) / LCM ) << endl ;
declare gcd with integers x , y as arguments , returning integer	int gcd ( int x , int y )
if y is 0 , return x	if ( y == 0 ) return x ;
return result of run gcd with y , x % y as arguments from function	return gcd ( y , x % y ) ;
declare lcm with integers x , y as arguments , returning integer	int lcm ( int x , int y )
return ( x * y ) / run gcd ( x , y )	return ( x * y ) / gcd ( x , y ) ;
declare x , y , a , b , ans = 0 as integers	int x , y , a , b , ans = 0 ;
read x , y , a , b	cin >> x >> y >> a >> b ;
let ans be - a / result of run lcm ( x , y ) + b / result of run lcm ( x , y )	ans = - a / lcm ( x , y ) + b / lcm ( x , y ) ;
if a % result of run lcm ( x , y ) is 0 , increment ans by 1	if ( a % lcm ( x , y ) == 0 ) ans += 1 ;
print ans , newline	cout << ans << endl ;
declare x , y , a , b , p as integers	int x , y , a , b , p ;
read x read y read a read b	cin >> x >> y >> a >> b ;
let b be result of run __gcd ( x , y )	p = __gcd ( x , y ) ;
let x be x * y	x = x * y ;
let x be x / p	x = x / p ;
if a % x is 0	if ( a % x == 0 )
let a be a / x	a /= x ;
decrement a	a -- ;
else	else
let a be a / x	a = a / x ;
let b be b / x	b = b / x ;
print b - a print newline	cout << b - a << endl ;
integer function gcd with int arguments a and b	int gcd ( int a , int b )
while b > 0	while ( b > 0 )
declare new integer tmp with value b	int tmp = b ;
set b to a % b	b = a % b ;
change a to tmp	a = tmp ;
return a	return a ;
int function lcm with int arguments a and b	int lcm ( int a , int b )
return a * b / gcd of a and b	return a * b / gcd ( a , b ) ;
set output decimal precision to 12	cout << setprecision ( 12 ) ;
declare new integer called x	int x ;
read from the input to x	cin >> x ;
create new integer variable y	int y ;
read the input to y	cin >> y ;
create new integer a	int a ;
read user input to a	cin >> a ;
declare new integer called b	int b ;
read variable b from the input	cin >> b ;
print b / lcm ( x , y ) - ( a - 1 ) / lcm ( x , y )	cout << b / lcm ( x , y ) - ( a - 1 ) / lcm ( x , y ) << endl ;
create int a , b , c , x , y , z	int a , b , c , x , y , z ;
read x , y , a and b	cin >> x >> y >> a >> b ;
set z to ( x * y ) / __gcd ( x , y )	z = ( x * y ) / __gcd ( x , y ) ;
assign b / z to c	c = b / z ;
set c to c - ( a - 1 ) / z	c -= ( a - 1 ) / z ;
print c and a newline	cout << c << " \n " ;
let gcd be a integer function which accepts integers x and y	int gcd ( int x , int y )
if x is equal to y , return the value of x	if ( x == y ) return x ;
while x is not equal to 0 and y is not equal to 0	while ( x != 0 && y != 0 )
if x is greater than y	if ( x > y )
x is equal to x modulo y	x %= y ;
else do the following	else
y is equal to y modulo x	y %= x ;
return y if x is less than y else return x	return x < y ? y : x ;
let x , y , a , b be integers	int x , y , a , b ;
read x , y , a , b	cin >> x >> y >> a >> b ;
let z be a integer with z is equal to x * y / gcd of x , y	int z = x * y / gcd ( x , y ) ;
print b / z - ( a - 1 ) / z and newline	cout << b / z - ( a - 1 ) / z << endl ;
declare constant integer INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
declare gcd with integers a , b as arguments , returning integer	int gcd ( int a , int b )
if a is less than b , swap values between a and b	if ( a < b ) swap ( a , b ) ;
if not b , return a	if ( ! b ) return a ;
return run gcd ( b , a % b )	return gcd ( b , a % b ) ;
declare i , j , k as integers	int i , j , k ;
declare n , m , a , b , c , d as integers	int n , m , a , b , c , d ;
read a , b , c , d	cin >> a >> b >> c >> d ;
let k be run gcd ( a , b )	k = gcd ( a , b ) ;
let k be a / k * b ;	k = a / k * b ;
let m be d / k - c / k	m = d / k - c / k ;
if c % k is 0 , increment m	if ( c % k == 0 ) m ++ ;
print m and newline	cout << m << endl ;
let gcd be a function which accepts long integers a and b	long long gcd ( long long a , long long b )
if b is equal to 0	if ( b == 0 )
return the value of a	return a ;
else do the following	else
return value gcd of b , a modulo b	return gcd ( b , a % b ) ;
let x , y , a , b be long integers	long long x , y , a , b ;
read x , y , a , b	cin >> x >> y >> a >> b ;
let g be a long integer with g = gcd of maximum of x , y and minimum of x , y	long long g = gcd ( max ( x , y ) , min ( x , y ) ) ;
let lcm be a long integer with lcm = ( x * y ) / g	long long lcm = ( x * y ) / g ;
let r be a long integer with r = b / lcm	long long r = b / lcm ;
let l be a long integer with l = ( a - 1 ) / lcm	long long l = ( a - 1 ) / lcm ;
print r - l and newline	cout << r - l << endl ;
let cns , cnt be integers with cns is equal to 0 , cnt is equal to 0x3f3f3f3f	int cns = 0 , cnt = 0x3f3f3f3f ;
let n , strength be integers with strength is equal to array of integers of length 100001	int n , strength [ 100001 ] ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read ith element of array strength	cin >> strength [ i ] ;
if ( ith element of array strength is greater than cns ) , cns is equal to ith element of array strength	if ( strength [ i ] > cns ) cns = strength [ i ] ;
if ( ith element of array strength is less than cnt ) , cnt is equal to ith element of array strength	if ( strength [ i ] < cnt ) cnt = strength [ i ] ;
let vis be a integer with value is equal to 0	int vis = 0 ;
for ( i = 0 to n exclusive )	for ( int i = 0 ; i < n ; i ++ )
if ( ith element of array strength is equal to cns or ith element of array strength is equal to cnt ) , increase vis by 1	if ( strength [ i ] == cns || strength [ i ] == cnt ) vis ++ ;
print n - vis and newline	cout << n - vis << endl ;
size , maior , menor c = int with maior = - 0x3f3f3f3f and menor = 0x3f3f3f3f and c = 0	int size , maior = - 0x3f3f3f3f , menor = 0x3f3f3f3f , c = 0 ;
read size	cin >> size ;
vector = int vector of size size	vector < int > vetor ( size ) ;
for i = 0 to size	for ( int i = 0 ; i < size ; i ++ )
read vctor [ i ]	cin >> vetor [ i ] ;
set maior to max of maior and vetor [ i ] then set menor to min of menor and vetor [ i ]	maior = max ( maior , vetor [ i ] ) , menor = min ( menor , vetor [ i ] ) ;
for i = 0 to size	for ( int i = 0 ; i < size ; i ++ )
increment c if vetor [ i ] is greater then menor and less than maior	if ( vetor [ i ] > menor && vetor [ i ] < maior ) c ++ ;
print c	cout << c << ' \n ' ;
n = int	int n ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
cnt = int with cnt = 0	int cnt = 0 ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
call sort on a + 1 and a + 1 + n	sort ( a + 1 , a + 1 + n ) ;
if n equals 1 or 2	if ( n == 1 || n == 2 )
print 0	cout << 0 << endl ;
else if n is greater than 2	else if ( n >= 3 )
minn = int with minn = a [ 1 ]	int minn = a [ 1 ] ;
mixx = int with mixx = a [ n ]	int mixx = a [ n ] ;
for i = 2 to n - 1 inclusive	for ( int i = 2 ; i <= n - 1 ; i ++ )
if a [ i ] is between minn and mixx then increment cnt	if ( a [ i ] > minn && a [ i ] < mixx ) cnt ++ ;
print cnt	cout << cnt << endl ;
n = int and a = int array of size 100010	int a [ 100010 ] , n ;
read n	cin >> n ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort all n elements in array a starting at a + 1	sort ( a + 1 , a + n + 1 ) ;
b , c = int with b = a [ 1 ] and c = a [ n ]	int b = a [ 1 ] , c = a [ n ] ;
ans = int with ans = 0	int ans = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] is between b and c then increment ans	if ( b < a [ i ] && a [ i ] < c ) ans ++ ;
print ans	cout << ans << endl ;
MAX = 100005	const int MAX = 1e5 + 5 ;
n , cnt , ans = int , arr = array of MAX int	int n , arr [ MAX ] , cnt , ans ;
dict = set of int	set < int > dict ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
insert arr [ i ] into dict	dict . insert ( arr [ i ] ) ;
cnt = 0	cnt = 0 ;
iterate on dict incrementing cnt	for ( set < int > :: iterator it = dict . begin ( ) ; it != dict . end ( ) ; ++ it ) cnt ++ ;
if cnt < 3	if ( cnt < 3 )
print " 0 "	cout << " 0 " << endl ;
sort first n elements of arr	sort ( arr , arr + n ) ;
ans = n	ans = n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if arr [ i ] = = arr [ 0 ] or arr [ n - 1 ] decrement ans	if ( ( arr [ i ] == arr [ 0 ] ) || ( arr [ i ] == arr [ n - 1 ] ) ) ans -- ;
print ans	cout << ans << endl ;
i , n , cnt = integers with cnt = 0 and a = array of 100001 integers	long long int i , n , cnt = 0 , a [ 100001 ] ;
Read n	cin >> n ;
Read n values into array a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
mx = integer , set to a [ 0 ]	int mx = a [ 0 ] ;
mn = integer , set to a [ 0 ]	int mn = a [ 0 ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is greater than mx , set mx to a [ i ]	if ( a [ i ] > mx ) mx = a [ i ] ;
if a [ i ] is less than mn , set mn to a [ i ]	if ( a [ i ] < mn ) mn = a [ i ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is greater than mn and a [ i ] is less than mx	if ( a [ i ] > mn && a [ i ] < mx ) cnt ++ ;
print cnt and a new line	cout << cnt << endl ;
n = int	int n ;
read n	cin >> n ;
arr = int array of size n	int arr [ n ] ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort array arr	sort ( arr , arr + n ) ;
a , b = int with a = arr [ 0 ] and b = arr [ n - 1 ]	int a = arr [ 0 ] , b = arr [ n - 1 ] ;
x = int with x = value of upper_bound of arr , arr + n and a - arr	int x = upper_bound ( arr , arr + n , a ) - arr ;
y = int with y = value of lower_bound of arr , arr + n and a - arr	int y = lower_bound ( arr , arr + n , b ) - arr ;
if y is 0	if ( y == 0 )
print 0	cout << 0 << endl ;
else	else
print y - x	cout << y - x << endl ;
create integer s	int s ;
read s	cin >> s ;
let a be integer array with size s	int a [ s ] ;
for i = 0 to s exclusive read a [ i ]	for ( int i = 0 ; i < s ; i ++ ) cin >> a [ i ] ;
sort a	sort ( a , a + s ) ;
if s = 1 | | s = 2	if ( s == 1 || s == 2 )
print " 0 "	cout << " 0 " << endl ;
declare integer variable t = s - 2	int t = s - 2 ;
for integer i = 1 to s - 1 exclusive	for ( int i = 1 ; i < s - 1 ; i ++ )
if a [ i ] > a [ 0 ] and a [ i ] < a [ s - 1 ]	if ( a [ i ] > a [ 0 ] && a [ i ] < a [ s - 1 ] )
skip the rest of the loop	continue ;
else	else
decrease t by one	t -- ;
print t	cout << t << endl ;
create integer n	int n ;
read n	cin >> n ;
create integer t	int t ;
create integer vector a	vector < int > a ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read t	cin >> t ;
add element t to end of a	a . push_back ( t ) ;
if size of a is less than 3	if ( a . size ( ) < 3 )
print 0 print newline	cout << 0 << endl ;
sort elements from beginning of a to end of a	sort ( a . begin ( ) , a . end ( ) ) ;
create integer cnt with cnt = 0	int cnt = 0 ;
for i = 1 to n - 2 inclusive	for ( int i = 1 ; i <= n - 2 ; i ++ )
if a [ i ] is greater than a [ 0 ] and a [ i ] is less than a [ n - 1 ] , increment cnt	if ( a [ i ] > a [ 0 ] && a [ i ] < a [ n - 1 ] ) { cnt ++ ; }
print cnt print newline	cout << cnt << endl ;
create integers n , sum with sum = 0 , create integer array a with size 100000	int n , a [ 100000 ] , sum = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
create integers max , min with max = a [ 0 ] , min = a [ 0 ]	int max = a [ 0 ] , min = a [ 0 ] ;
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
if max is less than a [ j ] , set max to a [ j ]	if ( max < a [ j ] ) max = a [ j ] ;
if min is greater than a [ j ] , set min to a [ j ]	if ( min > a [ j ] ) min = a [ j ] ;
for t = 0 to n exclusive	for ( int t = 0 ; t < n ; t ++ )
if a [ t ] is less than max and a [ t ] is greater than min , increment sum	if ( a [ t ] < max && a [ t ] > min ) sum ++ ;
print sum print newline	cout << sum << endl ;
let a be integer array with size 100005	int a [ 100005 ] ;
declare integer variables n , c1 , c2 , maxx and minn with c1 , c2 and maxx = 0 and minn = 1000000007	int n , c1 = 0 , c2 = 0 , maxx = 0 , minn = 1000000007 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
maxx = max of maxx and a [ i ] , minn = min of minn and a [ i ]	maxx = max ( maxx , a [ i ] ) , minn = min ( minn , a [ i ] ) ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
increment c1 if a [ i ] = maxx	if ( a [ i ] == maxx ) c1 ++ ;
increment c2 if a [ i ] = minn	if ( a [ i ] == minn ) c2 ++ ;
if maxx = minn	if ( maxx == minn )
print 0	cout << 0 << endl ;
else	else
print n - c1 - c2	cout << n - c1 - c2 << endl ;
n = int	int n ;
read n	cin >> n ;
arr = int array of size n	int arr [ n ] ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
if n is less than 3	if ( n < 3 )
print 0	cout << 0 << endl ;
sort array arr	sort ( arr , arr + n ) ;
cnt = int with cnt = 0	int cnt = 0 ;
for i = 1 to n - 1	for ( int i = 1 ; i < n - 1 ; i ++ )
if arr [ i ] is between the first and last value of arr then increment cnt	if ( arr [ i ] > arr [ 0 ] && arr [ i ] < arr [ n - 1 ] ) cnt ++ ;
print cnt	cout << cnt << endl ;
n , b , s , ans = integers with ans = 0	int n , b , s , ans = 0 ;
read n	cin >> n ;
arr = integer array of n	int arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }
b = arr [ 0 ]	b = arr [ 0 ] ;
s = arr [ 0 ]	s = arr [ 0 ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if arr [ i ] > b , b = arr [ i ]	if ( arr [ i ] > b ) b = arr [ i ] ;
if arr [ i ] < s , s = arr [ i ]	if ( arr [ i ] < s ) s = arr [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if arr [ i ] is b or arr [ i ] is s , continue next iteration	if ( arr [ i ] == b || arr [ i ] == s ) continue ;
increment ans	ans ++ ;
print ans	cout << ans << endl ;
create int array a of length 100005	int a [ 100005 ] ;
create n and m	int n , m ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort a + 1 , a + n + 1	sort ( a + 1 , a + n + 1 ) ;
t = n	int t = n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] = a [ 1 ] or a [ i ] = a [ n ] , decrement t	if ( a [ i ] == a [ 1 ] || a [ i ] == a [ n ] ) t -- ;
print t	cout << t << endl ;
n , count = integer with count = 0	int n , count = 0 ;
read n	cin >> n ;
a = integer array of size n	int a [ n ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a and a + n	sort ( a , a + n ) ;
mx = integer with mx = pointer max_element ( a , a + n )	int mx = * max_element ( a , a + n ) ;
mn = integer with mn = pointer min_element ( a , a + n )	int mn = * min_element ( a , a + n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] > mn and a [ i ] < mx , increment count	if ( a [ i ] > mn && a [ i ] < mx ) { count ++ ; }
print count	cout << count << endl ;
declare long long variables n and cnt where cnt = 0	long long n , cnt = 0 ;
read n	cin >> n ;
x is vector of long longs with n elements	vector < long long > x ( n ) ;
y is a set of long longs	set < long long > y ;
loop i from 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read x [ i ]	cin >> x [ i ] ;
insert x [ i ] into y	y . insert ( x [ i ] ) ;
if n < = 2 or size of y < = 2	if ( n <= 2 || y . size ( ) <= 2 )
print " 0 "	cout << " 0 " << endl ;
else	else
sort x	sort ( x . begin ( ) , x . end ( ) ) ;
loop i from 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
if x [ i ] ! = x [ 0 ] and x [ i ] ! = x [ n - 1 ] , increment cnt by one	if ( x [ i ] != x [ 0 ] && x [ i ] != x [ n - 1 ] ) cnt ++ ;
print cnt	cout << cnt << endl ;
n = int	int n ;
read n	cin >> n ;
se = int vector	vector < int > se ;
answer = int with answer = 0	int answer = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
x = int	int x ;
read x	cin >> x ;
append x to se	se . push_back ( x ) ;
sort se	sort ( se . begin ( ) , se . end ( ) ) ;
min = int with min = se [ 0 ]	int min = se [ 0 ] ;
max = int with max = last value of se	int max = se [ n - 1 ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if se [ i ] is between min and max then increment answer	if ( se [ i ] > min && se [ i ] < max ) { ++ answer ; }
print answer	cout << answer << endl ;
create integer array a with size 100000 , create integers n , c1 , c2 , mx , mn with c1 = 0 , c2 = 0 , mx = 0 , mn = 1000000000	int a [ 100000 ] , n , c1 = 0 , c2 = 0 , mx = 0 , mn = 1000000000 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set mx to maximum of mx and a [ i ]	mx = max ( mx , a [ i ] ) ;
set mn to minimum of mn and a [ i ]	mn = min ( mn , a [ i ] ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is mx , increment c1	if ( a [ i ] == mx ) c1 ++ ;
if a [ i ] is mn , increment c2	if ( a [ i ] == mn ) c2 ++ ;
if mx is mn	if ( mx == mn )
print 0 print newline	cout << 0 << endl ;
else	else
print ( n - c1 - c2 ) print newline	cout << ( n - c1 - c2 ) << endl ;
n , res , mn , mx = integers with res = 0 , mn = INT_MAX , mx = INT_MIN	int n , res = 0 , mn = INT_MAX , mx = INT_MIN ;
a = integer array of size 100001	int a [ 100001 ] ;
b1 , b2 = bool with b1 = 0 , b2 = 0	bool b1 = 0 , b2 = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
mn = min of a [ i ] and mn	mn = min ( a [ i ] , mn ) ;
mx = max of a [ i ] and mx	mx = max ( a [ i ] , mx ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] > mn and a [ i ] < mx , increment res	if ( a [ i ] > mn && a [ i ] < mx ) ++ res ;
print res	cout << res << endl ;
create integer t , integer array a with dimension 105	int t , a [ 105 ] ;
read t	cin >> t ;
for integer i = 0 to t - 1 with increment i do read a [ i ]	for ( int i = 0 ; i < t ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + t ) ;
print a [ t - 1 ] and a blank space	cout << a [ t - 1 ] << "   " ;
for integer i = 1 to t - 2 with increment i do print a [ i ] and a blank space	for ( int i = 1 ; i <= t - 2 ; i ++ ) cout << a [ i ] << "   " ;
print a [ 0 ]	cout << a [ 0 ] << " \n " ;
create integer array a of size 101	int a [ 101 ] ;
create int n	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;
sort a + 1 using argument a + n + 1	sort ( a + 1 , a + n + 1 ) ;
print a [ n ] and ' '	cout << a [ n ] << '   ' ;
for i = 2 to n - 1 , print a [ i ] and ' '	for ( int i = 2 ; i <= n - 1 ; ++ i ) cout << a [ i ] << '   ' ;
print a [ 1 ]	cout << a [ 1 ] << endl ;
declare constant integer mod with value 1e9 + 7	const int mod = 1e9 + 7 ;
max i a new constant integer with value 110	const int maxn = 110 ;
create new constant int inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
p is an array of integers with maxn elements	int p [ maxn ] ;
declare new array of integers q with size maxn	int q [ maxn ] ;
create new integer variable t	int t ;
read t and loop further	while ( cin >> t )
for i from 1 to t inclusive , read from the input to p [ i ]	for ( int i = 1 ; i <= t ; i ++ ) { cin >> p [ i ] ; }
sort p	sort ( p + 1 , p + 1 + t ) ;
print p [ t ] and ' '	cout << p [ t ] << '   ' ;
in a for loop , change i from 2 to t exclusive , printing p [ i ] and ' ' on each loop iteration	for ( int i = 2 ; i < t ; i ++ ) { cout << p [ i ] << '   ' ; }
print p [ 1 ]	cout << p [ 1 ] << endl ;
a is a new array of integers with size 105	int a [ 105 ] ;
inf is a new constant integer = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
create integer variable n	int n ;
loop , reading n from the input	while ( cin >> n )
declare integer variables ma with value - inf and mi = inf	int ma = - inf , mi = inf ;
for i from 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read variable a [ i ] from the input	cin >> a [ i ] ;
change the value of ma to max of ma and a [ i ]	ma = max ( ma , a [ i ] ) ;
assign the new value = min of mi and a [ i ] to mi	mi = min ( mi , a [ i ] ) ;
sort a	sort ( a , a + n ) ;
print ma and ' '	cout << ma << '   ' ;
print elements of a from the index 1 to n - 1 exclusive with ' ' after each one	for ( int i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << '   ' ; }
print mi	cout << mi << endl ;
declare new constant integer INF with value 100000000	const int INF = 100000000 ;
a is a new array of integers with size 150	int a [ 150 ] ;
create integer n	int n ;
read n and loop further	while ( cin >> n )
read standard input to a from the index i to n inclusive	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a + 1 , a + n + 1 ) ;
create integer variable t with value a [ 1 ]	int t = a [ 1 ] ;
assign a [ n ] to a [ 1 ]	a [ 1 ] = a [ n ] ;
change a [ n ] to t	a [ n ] = t ;
print a [ 1 ]	cout << a [ 1 ] ;
start for loop from i = 2 to n inclusive , print ' ' and a [ i ] on each loop	for ( int i = 2 ; i <= n ; i ++ ) cout << '   ' << a [ i ] ;
print new line	cout << endl ;
n , j , i , r = int and a = int array of size 200	int n , j , i , r , a [ 200 ] ;
read n	cin >> n ;
read n values into a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n - 1	for ( i = 0 ; i < n - 1 ; i ++ )
for j = 0 to n - 1 - i	for ( j = 0 ; j < n - 1 - i ; j ++ )
if a [ j ] > a [ j + 1 ]	if ( a [ j ] > a [ j + 1 ] )
set r to a [ j ]	r = a [ j ] ;
set a [ j ] to a [ j + 1 ]	a [ j ] = a [ j + 1 ] ;
set a [ j + 1 ] to r	a [ j + 1 ] = r ;
print a [ n - 1 ]	cout << a [ n - 1 ] << "   " ;
for i = 1 to n - 1 print a [ i ] then " "	for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << "   " ; }
print a [ 0 ]	cout << a [ 0 ] << endl ;
function qo with bool argument x that returns boolean	bool qo ( bool x )
return 0 if x is true and qo ( ! x ) othersiwe	return ( x ? 0 : qo ( ! x ) ) ;
mnx is a new constant integer = 1e7 + 9	const int mnx = 1e7 + 9 ;
declare new constant called mod with value 1e9 + 7 and type int	const int mod = 1e9 + 7 ;
create new long long n	long long n ;
declare new array of long longs x with mnx elements	long long x [ mnx ] ;
create new array of long longs u with size mnx	long long u [ mnx ] ;
k is a new array of long longs with size mnx	long long k [ mnx ] ;
declare new long long variables cnt and c	long long cnt , c ;
read n from the user input	cin >> n ;
read n elements from the input to x [ i ] starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> x [ i ] ; }
sort x from position 1 to n + 1	sort ( x + 1 , x + n + 1 ) ;
print x [ n ] and ' '	cout << x [ n ] << '   ' ;
start for loop from i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if i = n or i = 1 , go to the start of the loop	if ( i == n || i == 1 ) continue ;
print x [ i ] and ' '	cout << x [ i ] << '   ' ;
print x [ 1 ] and ' \ n ' to the standard output	cout << x [ 1 ] << ' \n ' ;
declare constant integer N = 1e6 + 5	const int N = 1e6 + 5 ;
declare integers n , a , c = 2 , ans	int n , a , c = 2 , ans ;
declare integer vector v	vector < int > v ;
read n	cin >> n ;
while decrement n is true , read a , add a to end of v	while ( n -- ) cin >> a , v . push_back ( a ) ;
sort from beginning of v to end of v	sort ( v . begin ( ) , v . end ( ) ) ;
if size of v is 2	if ( v . size ( ) == 2 )
print back of v , " " , v [ 0 ] , newline	cout << v . back ( ) << "   " << v [ 0 ] << endl ;
print back of v , " "	cout << v . back ( ) << "   " ;
for i = 1 to size of v - 1 exclusive , print v [ i ] , " "	for ( int i = 1 ; i < v . size ( ) - 1 ; i ++ ) cout << v [ i ] << "   " ;
print v [ 0 ] and newline	cout << v [ 0 ] << endl ;
mod is a new constant long long = 1e9 + 7	const long long mod = 1e9 + 7 ;
create new constant integer N = 1e5 + 5	const int N = 1e5 + 5 ;
long long function gcd with long long arguments a and b	long long gcd ( long long a , long long b )
return gcd ( b , a % b ) if b ! = 0 or a otherwise	return b ? gcd ( b , a % b ) : a ;
empty long long function pwr with long long arguments x and y	long long pwr ( long long x , long long y ) ;
isprime is an empty boolean function with long long argument x	bool isprime ( long long x ) ;
create vector of integers v	vector < int > v ;
create integers n and x	int n , x ;
read standard input to n	cin >> n ;
loop , decrementing n , while it is not 0	while ( n -- )
read user input to x	cin >> x ;
push x to the back of v	v . push_back ( x ) ;
sort v from start to end	sort ( v . begin ( ) , v . end ( ) ) ;
print v [ length of v - 1 ] and ' ' to the standard output	cout << v [ v . size ( ) - 1 ] << '   ' ;
in a for loop , change i from 1 to length of v - 1 exclusive ; print v [ i ] and ' ' on each iteration	for ( int i = 1 ; i < v . size ( ) - 1 ; i ++ ) { cout << v [ i ] << '   ' ; }
print v [ 0 ]	cout << v [ 0 ] << endl ;
pwr is a long long function with long long arguments x and y	long long pwr ( long long x , long long y )
declare new long long variable ans with value 1	long long ans = 1 ;
change x to x % mod	x = x % mod ;
while y > 0	while ( y > 0 )
if y & 1 ! = 0 , assign the value = ( x * ans ) % mod to ans	if ( y & 1 ) ans = ( x * ans ) % mod ;
change x to x squared modulo mod	x = ( x * x ) % mod ;
change y to y / 2	y = y / 2 ;
return ans	return ans ;
boolean function isprime with long long argument x	bool isprime ( long long x )
if x is less than 2 , return false	if ( x < 2 ) return false ;
if x is less than 4 , return true	if ( x < 4 ) return true ;
if x is even or x % 3 is equal to 0 , return false	if ( x % 2 == 0 || x % 3 == 0 ) return false ;
start a loop from i = 5 , while i * i < = x , increasing i by 6	for ( long long i = 5 ; i * i <= x ; i += 6 )
if x % i or x % ( i + 2 ) is equal to 0 , return false	if ( x % i == 0 || x % ( i + 2 ) == 0 ) return false ;
return true	return true ;
create int array a of size 101	int a [ 101 ] ;
create int n	int n ;
read n and while it ' s truthy	while ( cin >> n )
create int i	int i ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort a	sort ( a , a + n ) ;
print a [ n - 1 ] and ' '	cout << a [ n - 1 ] << '   ' ;
for i = 1 to n - 1 exclusive , print a [ i ] and ' '	for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << '   ' ; }
print a [ 0 ]	cout << a [ 0 ] << endl ;
n , i = int	int n , i ;
while read n	while ( cin >> n )
arr and res = array of 110 int filled with 0 , max = - 10000 , min = 10000 , p_max , p_min and k = int	int arr [ 110 ] = { 0 } , max = - 10000 , min = 10000 , p_max , p_min , res [ 110 ] = { 0 } , k ;
read arr [ 0 ]	cin >> arr [ 0 ] ;
max = min = arr [ 0 ]	max = min = arr [ 0 ] ;
p_max = p_min = 0	p_max = p_min = 0 ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
if arr [ i ] < min	if ( arr [ i ] < min )
min = arr [ i ]	min = arr [ i ] ;
p_min = i	p_min = i ;
else if arr [ i ] > max	else if ( arr [ i ] > max )
max = arr [ i ]	max = arr [ i ] ;
p_max = i	p_max = i ;
k = 0	k = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if i is p_min or p_max continue	if ( i == p_min || i == p_max ) continue ;
res [ k ] = arr [ i ] , increment k	res [ k ++ ] = arr [ i ] ;
sort first k items of res	sort ( res , res + k ) ;
if p_max is not p_min print max , space	if ( p_max != p_min ) cout << max << "   " ;
for i = 0 to k exclusive print res [ i ] , space	for ( i = 0 ; i < k ; i ++ ) cout << res [ i ] << "   " ;
print min	cout << min << endl ;
n is a new integer	int n ;
a is a new array of integers with size 1000	int a [ 1000 ] ;
read n and keep looping	while ( cin >> n )
declare new integers b and c	int b , c ;
read n elements from the input stream into a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
assign the new value = a [ 0 ] to b	b = a [ 0 ] ;
assign a [ n - 1 ] to c	c = a [ n - 1 ] ;
print c to the standard output	cout << c ;
in a for loop , change i from 1 to n - 1 exclusive , print " " and a [ i ] on each iteration	for ( int i = 1 ; i < n - 1 ; i ++ ) { cout << "   " << a [ i ] ; }
print " " and b to the standard output	cout << "   " << b << endl ;
let cmp be a boolean function which accepts integers a , b	bool cmp ( int a , int b )
return a greater than b	return a > b ;
cc = array of integers of length 105	int cc [ 105 ] ;
let n , res , flag , f be integers with res = 0 , flag = 0	int n , res = 0 , flag = 0 , f ;
read n	cin >> n ;
for i = 1 to n inclusive , read cc [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> cc [ i ] ; }
sort the values cc + 1 and cc + 1 + n	sort ( cc + 1 , cc + 1 + n ) ;
swap the values cc [ 1 ] , cc [ n ]	swap ( cc [ 1 ] , cc [ n ] ) ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if i is equal to n	if ( i == n )
print cc [ i ] and newline	cout << cc [ i ] << endl ;
else do the following	else
print cc [ i ] and space	cout << cc [ i ] << "   " ;
INF = const integer with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
T = const integer with T = 103	const int T = 100 + 3 ;
row = integer array of size T	int row [ T ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read row [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> row [ i ] ;
sort row and row + n	sort ( row , row + n ) ;
print row [ n - 1 ]	cout << row [ n - 1 ] << "   " ;
for i = 1 to n - 1 exclusive , print row [ i ]	for ( int i = 1 ; i < n - 1 ; i ++ ) cout << row [ i ] << "   " ;
print row [ 0 ]	cout << row [ 0 ] << endl ;
declare new array of integers p with size 500	int p [ 500 ] ;
declare integer n	int n ;
read n and keep looping	while ( cin >> n )
set values of first sizeof ( p ) bytes at the pointer p to 0	memset ( p , 0 , sizeof ( p ) ) ;
for integer i = 0 to n exclusive , read p [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }
sort p from index 0 to n	sort ( p , p + n ) ;
print p [ n - 1 ] to the standard output	cout << p [ n - 1 ] ;
print " " and p [ i ] to the standard output on a loop for i from 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ ) { cout << "   " << p [ i ] ; }
print " " and p [ 0 ]	cout << "   " << p [ 0 ] << endl ;
let A an int array of length 100010	int A [ 100010 ] ;
let n an int	int n ;
read n	cin >> n ;
read the first n values of A	for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;
sort the first n values of A	sort ( A , A + n ) ;
reverse the first n values of A	reverse ( A , A + n ) ;
let ans be a vector of ints	vector < int > ans ;
print A [ 0 ]	cout << A [ 0 ] << "   " ;
for i from n - 2 down to 1 , print A [ i ]	for ( int i = n - 2 ; i >= 1 ; i -- ) cout << A [ i ] << "   " ;
print A [ n - 1 ]	cout << A [ n - 1 ] << ' \n ' ;
a = integer array of size 110	int a [ 110 ] ;
n = integer	int n ;
read n	cin >> n ;
i = integer	int i ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort a and a + n	sort ( a , a + n ) ;
print a [ n - 1 ]	cout << a [ n - 1 ] << "   " ;
for i = 1 to n - 1 exclusive , print a [ i ]	for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << "   " ; }
print a [ 0 ]	cout << a [ 0 ] << endl ;
v = vector of integer	vector < int > v ;
n , a = integers	int n , a ;
read n	cin >> n ;
while decrement n	while ( n -- )
read a	cin >> a ;
append a in v	v . push_back ( a ) ;
sort v . begin ( ) and v . end ( )	sort ( v . begin ( ) , v . end ( ) ) ;
print v [ v . size ( ) - 1 ]	cout << v [ v . size ( ) - 1 ] << "   " ;
for i = 1 to i + 1 < v . size ( ) , print v [ i ]	for ( int i = 1 ; i + 1 < v . size ( ) ; i ++ ) { cout << v [ i ] << "   " ; }
print v [ 0 ]	cout << v [ 0 ] << endl ;
let n , i be integers	int n , i ;
read n	cin >> n ;
a = array of integers of length n + 1	int a [ n + 1 ] ;
for i = 1 to n inclusive , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort the values a + 1 , a + n + 1	sort ( a + 1 , a + n + 1 ) ;
print a [ n ] and space	cout << a [ n ] << "   " ;
for i = 2 to n exclusive , print a [ i ] and space	for ( i = 2 ; i < n ; i ++ ) cout << a [ i ] << "   " ;
print a [ 1 ] and newline	cout << a [ 1 ] << endl ;
declare string a	string a ;
read a	cin >> a ;
declare integer s = 0	int s = 0 ;
for i = 0 to a [ i ] , incrementing i	for ( int i = 0 ; a [ i ] ; i ++ )
if a [ i ] is ' a ' or a [ i ] is ' e ' or a [ i ] is ' i ' or a [ i ] is ' o ' or a [ i ] is ' u '	if ( a [ i ] == ' a ' || a [ i ] == ' e ' || a [ i ] == ' i ' || a [ i ] == ' o ' || a [ i ] == ' u ' )
increment s	s ++ ;
else if a [ i ] is greater than or equal to ' 0 ' and a [ i ] is less than or equal to ' 9 ' and ( a [ i ] - 48 ) % 2 is not 0	else if ( a [ i ] >= ' 0 ' && a [ i ] <= ' 9 ' && ( a [ i ] - 48 ) % 2 != 0 )
increment s	s ++ ;
print s and newline	cout << s << endl ;
create string a	string a ;
read a	cin >> a ;
num = 0	int num = 0 ;
b = aeiou13579	string b = " aeiou13579 " ;
for i = 0 to size of a exclusive	for ( int i = 0 ; i < a . size ( ) ; i ++ )
for j = 0 to size of b exclusive	for ( int j = 0 ; j < b . size ( ) ; j ++ )
if a [ i ] = b [ j ] increment num	if ( a [ i ] == b [ j ] ) num ++ ;
print num	cout << num << endl ;
function isVowel takes a character a and returns a boolean value	bool isVowel ( char a )
return the value of ( a is equal to a or a is equal to e or a is equal to i or a is equal to o or a is equal to u )	return ( a == ' a ' || a == ' e ' || a == ' i ' || a == ' o ' || a == ' u ' ) ;
function isOdd takes a character a and returns a boolean value	bool isOdd ( char a )
return the value of ( a is equal to 1 or a is equal to 3 or a is equal to 5 or a is equal to 7 or a is equal to 9 )	return ( a == ' 1 ' || a == ' 3 ' || a == ' 5 ' || a == ' 7 ' || a == ' 9 ' ) ;
text is a string	string text ;
read text	cin >> text ;
num is an integer and equals 0	int num = 0 ;
for integer i = 0 to text . length ( ) exclusive	for ( int i = 0 ; i < text . length ( ) ; i ++ )
if isVowel ( text [ i ] ) or isOdd ( text [ i ] is true , increase num by 1	if ( isVowel ( text [ i ] ) || isOdd ( text [ i ] ) ) num ++ ;
print num and newline	cout << num << endl ;
s = string	string s ;
num = integer = 0	int num = 0 ;
while s is read as a valid string	while ( cin >> s )
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] contians a , e , i , o , u , 1 , 3 , 5 , 7 , or 9 , then increase num by 1	if ( strchr ( " aeiou13579 " , s [ i ] ) ) num ++ ;
print num	cout << num << endl ;
make a map called t using character and integer	map < char , int > t ;
set t [ a ] to 1	t [ ' a ' ] = 1 ;
set t [ e ] to 1	t [ ' e ' ] = 1 ;
set t [ i ] to 1	t [ ' i ' ] = 1 ;
set t [ o ] to 1	t [ ' o ' ] = 1 ;
set t [ u ] to 1	t [ ' u ' ] = 1 ;
set t [ 1 ] to 1	t [ ' 1 ' ] = 1 ;
set t [ 3 ] to 1	t [ ' 3 ' ] = 1 ;
set t [ 5 ] to 1	t [ ' 5 ' ] = 1 ;
set t [ 7 ] to 1	t [ ' 7 ' ] = 1 ;
set t [ 9 ] to 1	t [ ' 9 ' ] = 1 ;
integers = ans = 0	int ans = 0 ;
s = string array	string s ;
read s	cin >> s ;
for i = 0 to less than s . size ( ) then add one to t [ s [ i ] ]	for ( int i = 0 ; i < s . size ( ) ; i ++ ) { ans += t [ s [ i ] ] ; }
output ans	cout << ans << endl ;
declare integer variable with name res = 0	int res = 0 ;
create new string a = " aeiou13579 "	string a = " aeiou13579 " ;
create string variable str	string str ;
read str from the input	cin >> str ;
in a for loop , change i from 0 to exclusive	for ( int i = 0 ; str [ i ] ; i ++ )
if there is part , that equals to str [ i ] , in a , increment res	if ( a . find ( str [ i ] ) != - 1 ) res ++ ;
print res	cout << res << endl ;
s = string	string s ;
read s	cin >> s ;
a = string = aeiou13579	string a = " aeiou13579 " ;
cnt = integer = 0	int cnt = 0 ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
for j = 0 to size of a exclusive	for ( int j = 0 ; j < a . size ( ) ; j ++ )
if s [ i ] is a [ j ] , then increase cnt by 1	if ( s [ i ] == a [ j ] ) { cnt ++ ; }
print cnt	cout << cnt << " \n " ;
vowel is a bool function with char argument ch	bool vowel ( char ch )
if ch is one of : ' a ' , ' e ' , ' i ' , ' o ' or ' u '	if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' )
return true	return true ;
else	else
return false	return false ;
boolean function even with char argument ch	bool even ( char ch )
if ch is an odd digit character	if ( ch == ' 1 ' || ch == ' 3 ' || ch == ' 5 ' || ch == ' 7 ' || ch == ' 9 ' )
return true	return true ;
else	else
return false	return false ;
declare new string s	string s ;
read user input to s	cin >> s ;
create integer variable with name len	int len = s . size ( ) ;
count is a new integer with value 0	int count = 0 ;
for i from 0 to len exclusive incrementing i	for ( int i = 0 ; i < len ; i ++ )
create new character called ch with value s [ i ]	char ch = s [ i ] ;
if vowel ( ch ) returns true , increment count by one	if ( vowel ( ch ) ) { count ++ ; }
if even ( ch ) returns true , increment count by one	if ( even ( ch ) ) { count ++ ; }
print count	cout << count << endl ;
declare string s	string s ;
read s	cin >> s ;
declare integers i and j	int i , j ;
declare integer len = length of s	int len = s . length ( ) ;
declare integer cnt = 0	int cnt = 0 ;
for i = 0 to len exclusive	for ( i = 0 ; i < len ; i ++ )
if s [ i ] is greater than or equal to ' a ' and s [ i ] is less than or equal to ' z '	if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )
if s [ i ] is ' a ' or s [ i ] is ' e ' or s [ i ] is ' i ' or s [ i ] is ' o ' or s [ i ] is ' u ' , increment cnt	if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' o ' || s [ i ] == ' u ' ) cnt ++ ;
if s [ i ] is greater than or equal to ' 0 ' and s [ i ] is less than or equal to ' 9 '	if ( s [ i ] >= ' 0 ' && s [ i ] <= ' 9 ' )
if ( s [ i ] - ' 0 ' ) % 2 is 1 , increment cnt	if ( ( s [ i ] - ' 0 ' ) % 2 == 1 ) cnt ++ ;
print cnt and newline	cout << cnt << endl ;
let i , j , k , l , m , n be integers	int i , j , k , l , m , n ;
let s be a string	string s ;
read s	cin >> s ;
m is equal to 0	m = 0 ;
for i = 0 to length of s exclusive	for ( i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] is equal to a or s [ i ] is equal to e or s [ i ] is equal to i or s [ i ] is equal to o or s [ i ] is equal to u	if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' o ' || s [ i ] == ' u ' )
increment m by 1	m ++ ;
else if s [ i ] > = 0 and s [ i ] < = 9	else if ( s [ i ] >= ' 0 ' && s [ i ] <= ' 9 ' )
if ( s [ i ] - 0 ) modulo 2 is not equal to 0 , increment m by 1	if ( ( s [ i ] - ' 0 ' ) % 2 != 0 ) m ++ ;
print m and newline	cout << m << endl ;
s = string	string s ;
read s	cin >> s ;
dic = string = 13579aeiou	string dic = " 13579aeiou " ;
cont = integer = 0	int cont = 0 ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if i s [ i ] is in dic , the increase cont by 1	if ( dic . find ( s [ i ] ) != string :: npos ) { ++ cont ; }
print cont	cout << cont << endl ;
s = set of char	set < char > s ;
insert ' a ' into s	s . insert ( ' a ' ) ;
insert ' e ' into s	s . insert ( ' e ' ) ;
insert ' i ' into s	s . insert ( ' i ' ) ;
insert ' o ' into s	s . insert ( ' o ' ) ;
insert ' u ' into s	s . insert ( ' u ' ) ;
for i = 1 to 10 by 2 exclusive insert i + ' 0 ' into s	for ( int i = 1 ; i < 10 ; i += 2 ) { s . insert ( i + ' 0 ' ) ; }
k = string	string k ;
ans = 0	int ans = 0 ;
read k	cin >> k ;
len = length of k	int len = k . length ( ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if k [ i ] is present in s increment ans	if ( s . count ( k [ i ] ) ) { ans ++ ; }
print ans	cout << ans << endl ;
dict = array of 15 char filled with " 13579aeiou "	char dict [ 15 ] = " 13579aeiou " ;
s = array of 55 char	char s [ 55 ] ;
sum , i = 0	int sum = 0 , i = 0 ;
read s	cin >> s ;
while s [ i ] is not null byte	while ( s [ i ] != ' \0 ' )
flag = 1	int flag = 1 ;
for j = 0 to 10 exclusive	for ( int j = 0 ; j < 10 ; j ++ )
if s [ i ] is dict [ j ] flag = 0	if ( s [ i ] == dict [ j ] ) flag = 0 ;
if flag is 0 increment sum	if ( flag == 0 ) sum ++ ;
increment i	i ++ ;
print sum	cout << sum << endl ;
ans = int	int ans ;
s = string	string s ;
read s	cin >> s ;
for i = 0 to size of s	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if isalpha of s [ i ]	if ( isalpha ( s [ i ] ) )
if s [ i ] is ' a ' or ' e ' or ' o ' or ' i ' or ' u ' increment ans	if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' o ' || s [ i ] == ' i ' || s [ i ] == ' u ' ) ans ++ ;
else if s [ i ] is uneven	else if ( s [ i ] % 2 != 0 )
increment ans	ans ++ ;
print ans	cout << ans << endl ;
s = string	string s ;
read s	cin >> s ;
c = int with c = 0	int c = 0 ;
for i = 0 to length of s	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is ' a ' or ' e ' E or ' i ' or ' o ' or ' u '	if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' o ' || s [ i ] == ' u ' )
increment c	c ++ ;
else if ( s [ i ] < ' a ' or s [ i ] > ' z ' ) and ( s [ i ] - ' 0 ' ) mod 2 is not 0	else if ( ( s [ i ] < ' a ' || s [ i ] > ' z ' ) && ( s [ i ] - ' 0 ' ) % 2 != 0 )
increment c	c ++ ;
print c	cout << c << endl ;
declare character set s	set < char > s ;
insert ' a ' into s	s . insert ( ' a ' ) ;
insert ' e ' into s	s . insert ( ' e ' ) ;
insert ' i ' into s	s . insert ( ' i ' ) ;
insert ' o ' into s	s . insert ( ' o ' ) ;
insert ' u ' into s	s . insert ( ' u ' ) ;
for i = 1 to 10 exclusive , incrementing i by 2 , insert ( i + ' 0 ' ) into s	for ( int i = 1 ; i < 10 ; i += 2 ) { s . insert ( i + ' 0 ' ) ; }
declare string k	string k ;
declare ans = 0 as integer	int ans = 0 ;
read k	cin >> k ;
deeclare len = length of k as integer	int len = k . length ( ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if count of k [ i ] in s , increment ans	if ( s . count ( k [ i ] ) ) { ans ++ ; }
print ans and newline	cout << ans << endl ;
a = array of 55 char	char a [ 55 ] ;
read a	gets ( a ) ;
i , cnt = 0	int i = 0 , cnt = 0 ;
while a [ i ] is not null byte increment i	for ( ; a [ i ] != ' \0 ' ; i ++ )
if a [ i ] is a digit	if ( a [ i ] <= ' 9 ' && a [ i ] >= ' 0 ' )
if a [ i ] - ' 0 ' is odd increment cnt	if ( ( a [ i ] - ' 0 ' ) % 2 != 0 ) { cnt ++ ; }
if a [ i ] is one of ' a ' , ' e ' , ' i ' , ' o ' , ' u ' increment cnt	if ( a [ i ] == ' a ' || a [ i ] == ' e ' || a [ i ] == ' i ' || a [ i ] == ' o ' || a [ i ] == ' u ' ) { cnt ++ ; }
print cnt	cout << cnt << endl ;
in the function isvowel that takes character c and returns bool	bool isvowel ( char c )
if ( c is a or c is e or c is i or c is o or c is u ) , return true	if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) return true ;
return false	return false ;
str = string	string str ;
read str	cin >> str ;
siz = integer with siz = str . length ( )	int siz = str . length ( ) ;
cnt = integer with cnt = 0	int cnt = 0 ;
for i = 0 to siz exclusive	for ( int i = 0 ; i < siz ; i ++ )
if ( isvowel ( str [ i ] ) )	if ( isvowel ( str [ i ] ) )
increment cnt	cnt ++ ;
else if ( not isalpha ( str [ i ] ) and ( str [ i ] - 0 ) bitwise and 1 )	else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) & 1 )
increment cnt	cnt ++ ;
print cnt	cout << cnt << endl ;
let exa be a array of characters of length 10 with its elements as a , e , i , o , u , 1 , 3 , 5 , 7 , 9	char exa [ 10 ] = { ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' 1 ' , ' 3 ' , ' 5 ' , ' 7 ' , ' 9 ' } ;
a = array of characters of length 55	char a [ 55 ] ;
read a	cin >> a ;
let len be a integer with len = string length of a	int len = strlen ( a ) ;
let ans be a integer with ans = 0	int ans = 0 ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
for j = 0 to 10 exclusive	for ( int j = 0 ; j < 10 ; j ++ )
if a [ i ] is equal to exa [ j ] , increment ans by 1	if ( a [ i ] == exa [ j ] ) ans ++ ;
print ans and new line	cout << ans << endl ;
s = string	string s ;
read s	cin >> s ;
ans = 0	int ans = 0 ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is ' a ' or ' e ' or ' i ' or ' o ' or ' u '	if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' o ' || s [ i ] == ' u ' )
increment ans	ans ++ ;
else if s [ i ] > ' 0 ' and < = ' 9 ' and ( s [ i ] - ' 0 ' ) is odd	else if ( s [ i ] > ' 0 ' && s [ i ] <= ' 9 ' && ( s [ i ] - ' 0 ' ) % 2 == 1 )
increment ans	ans ++ ;
print ans	cout << ans << endl ;
make string s	string s ;
create integer c = 0	int c = 0 ;
read s	cin >> s ;
make integer len = s . size ( )	int len = s . size ( ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if strchr ( " aeiou13579 " , s [ i ] ) is truthy , increment c	if ( strchr ( " aeiou13579 " , s [ i ] ) ) { c ++ ; }
output c	cout << c << endl ;
set const int INF to 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
set const int maxn to 5005	const int maxn = 5005 ;
integers = arr as an array of maxn	int arr [ maxn ] ;
integers = n	int n ;
read n	cin >> n ;
if n modulo 10 > = 0 and n modulo 10 is less than or equal to 5 then do the following	if ( n % 10 >= 0 && n % 10 <= 5 )
output n / 10 * 10	cout << n / 10 * 10 << endl ;
else	else
if n modulo 10 is true do then add 1 to n	while ( n % 10 ) { n ++ ; }
output n	cout << n << endl ;
in the function func that takes long long x	void func ( long long x )
if ( ( x modulo 10 ) > 5 ) print ( x / 10 + 1 ) * 10	if ( ( x % 10 ) > 5 ) cout << ( x / 10 + 1 ) * 10 << endl ;
if ( ( x modulo 10 ) < = 5 ) print ( x / 10 ) * 10	if ( ( x % 10 ) <= 5 ) cout << ( x / 10 ) * 10 << endl ;
x = long long	long long x ;
while ( print x ) , call func on x	while ( cin >> x ) func ( x ) ;
create integer n	int n ;
read n	cin >> n ;
if n % 10 is greater than 5	if ( n % 10 > 5 )
set n to n - n % 10 + 10	n = n - n % 10 + 10 ;
else	else
set n to n - n % 10	n = n - n % 10 ;
print n print newline	cout << n << endl ;
create int n	int n ;
read n	cin >> n ;
if n mod 10 < = 5	if ( n % 10 <= 5 )
print n / 10 * 10	cout << ( n / 10 ) * 10 << endl ;
else	else
print ( n / 10 + 1 ) * 10 and a newline	cout << ( n / 10 + 1 ) * 10 << endl ;
n = integer	long long n ;
Read n	cin >> n ;
t = integer , set to n modulo 10	int t = n % 10 ;
if t is greater than or equal to 6	if ( t >= 6 )
set n to n - t + 10	n = n - t + 10 ;
else do the following	else
set n to n - t	n = n - t ;
print n and a new line	cout << n << endl ;
n = long long integers	long long n ;
read n	cin >> n ;
integer t = n modulo 10	int t = n % 10 ;
if t is greater than or equal to 6 then do the following	if ( t >= 6 )
set n to n - t + 10	n = n - t + 10 ;
else	else
set n to n - t	n = n - t ;
output n	cout << n << endl ;
t , s , a , b , c = integers	int t , s , a , b , c ;
Read t	cin >> t ;
print 1LL * ( ( t + 4 ) / 10 ) * 10 and a new line	cout << 1LL * ( ( t + 4 ) / 10 ) * 10 << endl ;
x , n = integer	int x , n ;
read n	cin >> n ;
if n modulo 10 < = 5	if ( n % 10 <= 5 )
x = 0	x = 0 ;
else	else
x = 1	x = 1 ;
print ( n / 10 + x ) * 10	cout << ( n / 10 + x ) * 10 << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n mod 10 greater than 5	if ( n % 10 > 5 )
print n + ( 10 - n % 10 )	cout << n + ( 10 - n % 10 ) << endl ;
else	else
print n - ( n % 10 ) and a newline	cout << n - ( n % 10 ) << endl ;
declare long long n	long long n ;
read n	cin >> n ;
create int num = n modulo 10	int num = n % 10 ;
if num = 0	if ( num == 0 )
print n	cout << n << endl ;
else if num < = 5	else if ( num <= 5 )
print n - num	cout << ( n - num ) << endl ;
else	else
print n - num + 10	cout << ( n - num + 10 ) << endl ;
create long long integer n	long long int n ;
read n	cin >> n ;
create long long integer m with m = n % 10	long long int m = n % 10 ;
create long integer d with d = n / 10	long int d = n / 10 ;
if m is 0	if ( m == 0 )
print n print newline	cout << n << endl ;
else if m is less than or equal to 5	else if ( m <= 5 )
print n - m print newline	cout << n - m << endl ;
else if m is greater than 5	else if ( m > 5 )
print n + 10 - m print newline	cout << n + 10 - m << endl ;
let n , m and ans be integers	int n , m , ans ;
read n while it is not 0	while ( cin >> n )
set m to n modulo 10	m = n % 10 ;
if m < = 5	if ( m <= 5 )
assign n / 10 * 10 to ans	ans = n / 10 * 10 ;
else	else
assign ( n / 10 + 1 ) * 10 to ans	ans = ( n / 10 + 1 ) * 10 ;
print ans	cout << ans << endl ;
set pi to 3 . 1415926535	const double pi = 3.1415926535 ;
set mod to 998244353	const long long mod = 998244353 ;
assign 5e5 + 10 to maxn	const int maxn = 5e5 + 10 ;
create int n	int n ;
while read n	while ( cin >> n )
if n mod 10 < = 5	if ( n % 10 <= 5 )
print n - n mod 10	cout << n - ( n % 10 ) << endl ;
else	else
print n + 10 - n mod 10 and a newline	cout << n + ( 10 - n % 10 ) << endl ;
declare const int N = 1e6 + 10	const int N = 1e6 + 10 ;
declare const int mod = 998244353	const int mod = 998244353 ;
create long long x	long long x ;
read x	cin >> x ;
if x % 10 is equal to 0	if ( x % 10 == 0 )
print x	cout << x << endl ;
else if x % 10 < = 5	else if ( x % 10 <= 5 )
print ( x / 10 ) * 10	cout << ( x / 10 ) * 10 << endl ;
else	else
print ( x / 10 ) * 10 + 10	cout << ( x / 10 ) * 10 + 10 << endl ;
integers = n	int n ;
read n	cin >> n ;
if n modulo 10 is less than or equal to 5 then do the following	if ( n % 10 <= 5 )
output ( n / 10 ) * 10	cout << ( n / 10 ) * 10 << endl ;
else	else
output ( n / 10 + 1 ) * 10	cout << ( n / 10 + 1 ) * 10 << endl ;
n = long long	long long n ;
read n	cin >> n ;
if n / 10 is 0	if ( n / 10 == 0 )
if n is less than 6	if ( n <= 5 )
print " 0 "	cout << " 0\n " ;
else	else
print " 10 "	cout << " 10\n " ;
else	else
if n mod 10 is less than 6	if ( n % 10 <= 5 )
print n / 10 then 0	cout << n / 10 << 0 << ' \n ' ;
else	else
print n / 10 + 1 then 0	cout << n / 10 + 1 << 0 << ' \n ' ;
create long long n	long long n ;
create long long x	long long x ;
read n	cin >> n ;
x = n	x = n ;
if n mod 10 = 0	if ( n % 10 == 0 )
print n	cout << n << endl ;
while x greater than 10 , set x to x mod 10	while ( x > 10 ) { x %= 10 ; }
if x < = 5	if ( x <= 5 )
print n - x	cout << n - x << endl ;
else	else
print n + 10 - x and a newline	cout << n + ( 10 - x ) << endl ;
create int n , result and c	int n , result , c ;
read n	cin >> n ;
c = n mod 10	c = n % 10 ;
if c < = 5	if ( c <= 5 )
assign n - c to result	result = n - c ;
else	else
set result = n + 10 - c	result = n + ( 10 - c ) ;
print result	cout << result << endl ;
create long long int n , m , k , l , j , p	long long int n , m , k , l , j , p ;
read n	cin >> n ;
if n less than 10	if ( n < 10 )
if n < = 5	if ( n <= 5 )
print 0	cout << 0 << endl ;
else	else
p = n + ( 10 - n )	p = n + ( 10 - n ) ;
print p	cout << p << endl ;
else	else
assign n mod 10 to k	k = n % 10 ;
if k = 0	if ( k == 0 )
print n	cout << n << endl ;
else	else
if k < = 5	if ( k <= 5 )
set l to n - k	l = n - ( k ) ;
print l	cout << l << endl ;
else	else
j = n + ( 10 - k )	j = n + ( 10 - k ) ;
print j and a newline	cout << j << endl ;
a , b , c , d , e , f = integers	int a , b , c , d , e , f ;
while read a	while ( cin >> a )
if a mod 10 equals 0	if ( a % 10 == 0 )
print a	cout << a << endl ;
else if a mod 10 equals 5	else if ( a % 10 == 5 )
print a - 5	cout << a - 5 << endl ;
else if a mod 10 is less than 5	else if ( a % 10 < 5 )
set b to a mod 10	b = a % 10 ;
print a - b	cout << a - b << endl ;
else	else
set b to a mod 10	b = a % 10 ;
set b to 10 - b	b = 10 - b ;
print a + b	cout << a + b << endl ;
define four - element int array dx and set them to 0 , 0 , - 1 , 1	int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;
define 4 - element integral array dy , setting it to 1 , - 1 , 0 , and 0	int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;
define int n	int n ;
read n	cin >> n ;
if n modulo 10 is < = 5	if ( n % 10 <= 5 )
if n / 10 ! = 0	if ( n / 10 )
print n / 10 , 0 , and newline	cout << n / 10 << 0 << ' \n ' ;
else	else
print 0 and a newline	cout << 0 << ' \n ' ;
else	else
print n / 10 + 1 , 0 , newline	cout << ( n / 10 ) + 1 << 0 << ' \n ' ;
declare integer variable n	int n ;
read input to n	cin >> n ;
declare integer variables k , a , l and m where l and m = 0	int k , a , l = 0 , m = 0 ;
set k to n	k = n ;
assign n to a	a = n ;
if n is even and n modulo 5 is 0	if ( n % 2 == 0 && n % 5 == 0 )
print n	cout << n << endl ;
else	else
loop i from 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
increment l by one	l ++ ;
if k is even and k modulo 5 = 0 , stop the loop	if ( k % 2 == 0 && k % 5 == 0 ) { break ; }
decrement k	k -- ;
loop j from 0 to 8 exclusive	for ( int j = 0 ; j < 8 ; j ++ )
increment m by one	m ++ ;
if a is even and a modulo 5 = 0 , break the loop	if ( a % 2 == 0 && a % 5 == 0 ) { break ; }
increment a	a ++ ;
if l is equal to m	if ( l == m )
print k	cout << k << endl ;
else if l is greater than m	else if ( l > m )
print a	cout << a << endl ;
else	else
print k	cout << k << endl ;
n , x = integers with x = 0	long long int n , x = 0 ;
Read n	cin >> n ;
set x to n modulo 10	x = n % 10 ;
if x is greater than 5 , then set n to n - x + 10	if ( x > 5 ) n = n - x + 10 ;
if x is less than 5 , then set n to n - x	if ( x <= 5 ) n = n - x ;
print n and a new line	cout << n << endl ;
create long long n	long long n ;
read n	cin >> n ;
t = n mod 10	int t = n % 10 ;
if t > = 6	if ( t >= 6 )
n = n - t + 10	n = n - t + 10 ;
else	else
assign n - t to n	n = n - t ;
print n	cout << n << endl ;
create int n	int n ;
read n	cin >> n ;
declare array of integers of size n and integer count = 0	int a [ n ] , count = 0 ;
populate array a with n values	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
set max to highest value in array a	int max = * max_element ( a , a + n ) ;
for i = 0 to n exclusive set count to count + max - a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { count += max - a [ i ] ; }
print count	cout << count << endl ;
create integer array a with size 1000 , create integers i , n , ans with ans = 0	int a [ 1000 ] , i , n , ans = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort elements from a + 1 to a + n + 1	sort ( a + 1 , a + n + 1 ) ;
for i = 1 to n exclusive , increment ans by a [ n ] - a [ i ]	for ( i = 1 ; i < n ; i ++ ) { ans += a [ n ] - a [ i ] ; }
print ans print newline	cout << ans << endl ;
integers = t integer N = 1e5 + 50	const int N = 1e5 + 50 ;
integers = t integer M = 1e6	const int M = 1e6 ;
oo = 1e18 = constant long long integers	const long long oo = 1e18 ;
integers = t integer mod = 1e9 + 7	const int mod = 1e9 + 7 ;
integers = n	int n ;
read n	cin >> n ;
sum = 0 , mx = 0 = long long integers	long long sum = 0 , mx = 0 ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
ong a = long long integers	long long a ;
read a	cin >> a ;
sum equals sum plus a	sum += a ;
set mx to max ( mx , a )	mx = max ( mx , a ) ;
output mx * n - sum	cout << mx * n - sum << endl ;
create ints n , cnt and sum with cnt and sum = 0	int n , cnt = 0 , sum = 0 ;
read n	cin >> n ;
let a be integer array with size n	int a [ n ] ;
for i from 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
declare int mx = a [ n - 1 ]	int mx = a [ n - 1 ] ;
loop i from 0 to n exclusive , add abs ( mx - a [ i ] ) to sum	for ( int i = 0 ; i < n ; i ++ ) { sum += abs ( mx - a [ i ] ) ; }
print sum	cout << sum << endl ;
n = integer	int n ;
read n	cin >> n ;
welfare = vector of integer	vector < int > welfare ;
welfare_input = integer	int welfare_input ;
while welfare . size ( ) < n	while ( welfare . size ( ) < n )
read welfare_input	cin >> welfare_input ;
append welfare in _inputwelfare	welfare . push_back ( welfare_input ) ;
sort welfare . rbegin ( ) and welfare . rend ( )	sort ( welfare . rbegin ( ) , welfare . rend ( ) ) ;
i = integer with i = 1	int i = 1 ;
total = integer with total = 0	int total = 0 ;
while welfare . size ( ) > i	while ( welfare . size ( ) > i )
if welfare [ 0 ] is not welfare [ i ]	if ( welfare [ 0 ] != welfare [ i ] )
increment welfare [ i ]	welfare [ i ] ++ ;
increment total	total ++ ;
else	else
increment i	i ++ ;
print total	cout << total << endl ;
n , a = integers with a = array of size 101	int n , a [ 101 ] ;
read n	cin >> n ;
s , max = integer with s = 0 , max = 0	int s = 0 , max = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
max = a [ 0 ]	max = a [ 0 ] ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if max < a [ i ] , max = a [ i ]	if ( max < a [ i ] ) { max = a [ i ] ; }
for i - 0 to n exclusive , s = s + abs ( max - a [ i ] )	for ( int i = 0 ; i < n ; i ++ ) { s = s + abs ( max - a [ i ] ) ; }
print s	cout << s << endl ;
create long long int mx , n , a [ 105 ] and sum , set mx to 0 and a to all 0	long long int mx = 0 , n , a [ 105 ] = { 0 } , sum ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] greater than mx , mx = a [ i ]	if ( a [ i ] > mx ) mx = a [ i ] ;
sum = 0	sum = 0 ;
for i = 0 to n exclusive , set sum to sum + mx - a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { sum += ( mx - a [ i ] ) ; }
print sum	cout << sum << endl ;
create integer n	int n ;
create integer array a with size 10000	int a [ 10000 ] ;
create integer maxn	int maxn ;
create integer ans with ans = 0	int ans = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is greater than maxn , set maxn to a [ i ]	if ( a [ i ] > maxn ) maxn = a [ i ] ;
for i = 1 to n inclusive , set ans to ans + maxn - a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + maxn - a [ i ] ; }
print ans print newline	cout << ans << endl ;
let n , arr , maxx , i , res be integers with arr = array of integers of length 109 , maxx = 0 , res = 0	int n , arr [ 109 ] , maxx = 0 , i , res = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read ith element of arr	cin >> arr [ i ] ;
if maxx is less than arr [ i ] , maxx is equal to arr [ i ]	if ( maxx < arr [ i ] ) maxx = arr [ i ] ;
for i = 0 to n exclusive , res is equal to res + ( maxx - arr [ i ] )	for ( i = 0 ; i < n ; i ++ ) { res = res + ( maxx - arr [ i ] ) ; }
print res and newline	cout << res << endl ;
a = array of 100 int	int a [ 100 ] ;
n , i , k , max = int	int n , i , k , max ;
k = 0	k = 0 ;
read n	cin >> n ;
max = - 1	max = - 1 ;
for i = 0 to n exclusive read a [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] > max max = a [ i ]	if ( a [ i ] > max ) { max = a [ i ] ; }
for i = 0 to n exclusive add max - a [ i ] to k	for ( i = 0 ; i < n ; i ++ ) { k = k + max - a [ i ] ; }
print k	cout << k << endl ;
set sum = 0	int sum = 0 ;
create int tc	int tc ;
create int array a of size 100	int a [ 100 ] ;
read tc	cin >> tc ;
for i = 0 to tc exclusive , read a [ i ]	for ( int i = 0 ; i < tc ; i ++ ) { cin >> a [ i ] ; }
create int max = a [ 0 ]	int max = a [ 0 ] ;
for i = 0 to tc exclusive	for ( int i = 0 ; i < tc ; i ++ )
if a [ i ] > max , set max to a [ i ]	if ( a [ i ] > max ) max = a [ i ] ;
for i = 0 to tc exclusive , set sum = sum + max - a [ i ]	for ( int i = 0 ; i < tc ; i ++ ) { sum += max - a [ i ] ; }
print sum	cout << sum << endl ;
integers = n , a [ 105 ] , i , s	int n , a [ 105 ] , i , s ;
while inputting n loop the following	while ( cin >> n )
set s to 0	s = 0 ;
read n values in array a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
if n is 1 then do the following	if ( n == 1 )
output s	cout << s << endl ;
else	else
sort the values of a to a + n	sort ( a , a + n ) ;
for = 0 to less than n - 1 add a [ n - 1 ] - a [ i ] to s	for ( i = 0 ; i < n - 1 ; i ++ ) { s += ( a [ n - 1 ] - a [ i ] ) ; }
output s	cout << s << endl ;
v = vector of integer	vector < int > v ;
n , x , hitung = integers with x = 0 , hitung = 0	int n , x = 0 , hitung = 0 ;
read n	cin >> n ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
m = integer	int m ;
read m	cin >> m ;
append m in v	v . push_back ( m ) ;
if m > = x , x = m	if ( m >= x ) { x = m ; }
for i = 0 to n exclusive , hitung = hitung + ( x - v [ i ] )	for ( int i = 0 ; i < n ; i ++ ) { hitung += ( x - v [ i ] ) ; }
print hitung	cout << hitung << endl ;
n , arr = integers with arr = array of size 100	int n , arr [ 100 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
sort arr and arr + n	sort ( arr , arr + n ) ;
biggest , res = integer with biggest = arr [ n - 1 ] , res = 0	int biggest = arr [ n - 1 ] , res = 0 ;
for i = 0 to n exclusive , res = res + ( biggest - arr [ i ] )	for ( int i = 0 ; i < n ; i ++ ) { res += ( biggest - arr [ i ] ) ; }
print res	cout << res << endl ;
Create n , i , s , and b as integers , set s to 0 , and create a as an integer array with size of 101	int n , a [ 101 ] , i , s = 0 , b ;
Set n to the input	cin >> n ;
Set a [ i ] to the input from i = 0 to i = n - 1	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
Sort the first n elements of a	sort ( a , a + n ) ;
Increase s by ( a [ n - i ] - a [ i ] ) from i = 0 to i = n - 1	for ( i = 0 ; i < n ; i ++ ) { s += ( a [ n - 1 ] - a [ i ] ) ; }
Output s	cout << s << endl ;
n and ans are ints with ans = 0	int n , ans = 0 ;
create long int array a with 100 elements	long int a [ 100 ] ;
read n	cin >> n ;
loop i from 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort n first elements of a	sort ( a , a + n ) ;
for i from 0 to n exclusive , increase ans by a [ n - 1 ] - a [ i ]	for ( int i = 0 ; i < n ; i ++ ) ans += a [ n - 1 ] - a [ i ] ;
print ans	cout << ans << endl ;
let n be a integer	int n ;
while read n	while ( cin >> n )
A = array of integers of length 111	int a [ 111 ] ;
let maxx be a integer with maxx = - 1	int maxx = - 1 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read ith element in a	cin >> a [ i ] ;
if a [ i ] is greater than maxx , initialize maxx = a [ i ]	if ( a [ i ] > maxx ) maxx = a [ i ] ;
set integer sum to 0	int sum = 0 ;
for i = 1 to n inclusive , increase sum by maxx - a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { sum += ( maxx - a [ i ] ) ; }
print sum and newline	cout << sum << endl ;
let e be int array with size 105	int e [ 105 ] ;
declare int variable n	int n ;
read n	cin >> n ;
create int m = 0	int m = 0 ;
loop i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create integer t	int t ;
read t	cin >> t ;
set e [ i ] to t	e [ i ] = t ;
set m t if t < = m	m = m > t ? m : t ;
declare integer ans = 0	int ans = 0 ;
for i from 1 to n inclusive , change ans to ans + m - e [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { ans = ans + m - e [ i ] ; }
print ans	cout << ans << endl ;
integers = n	int n ;
read n	cin >> n ;
a [ n ] = long long integers	long long a [ n ] ;
cnt = 0 , mx = 0 = long long integers	long long cnt = 0 , mx = 0 ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set mx to max ( a [ i ] , mx )	mx = max ( a [ i ] , mx ) ;
for i = 0 to less than n add mx - a [ i ] to cnt	for ( int i = 0 ; i < n ; i ++ ) { cnt += ( mx - a [ i ] ) ; }
output cnt	cout << cnt << endl ;
declare long ints n and ans where ans = 0	long int n , ans = 0 ;
read n	cin >> n ;
create integers vector v	vector < int > v ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integer x	int x ;
read x	cin >> x ;
push x to v	v . push_back ( x ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
for i from 0 to n - 1 exclusive , increase ans by v [ n - 1 ] - v [ i ]	for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += v [ n - 1 ] - v [ i ] ; }
print ans	cout << ans << endl ;
declare int variable n and int array x with size 105	int n , x [ 105 ] ;
read n	cin >> n ;
for i from 0 to n exclusive , read x [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }
sort x	sort ( x , x + n ) ;
Max and sum are integers with Max = x [ n - 1 ] and sum = 0	int Max = x [ n - 1 ] , sum = 0 ;
for i from 0 to n exclusive , add Max - x [ i ] to sum	for ( int i = 0 ; i < n ; i ++ ) { sum += Max - x [ i ] ; }
print sum	cout << sum << endl ;
n , max , c = int with max = 0 and c = 0	int n , max = 0 , c = 0 ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
read n values into a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if max is less than a [ i ] then set max to a [ i ]	if ( max < a [ i ] ) max = a [ i ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is less than max then set c to c + max - a [ i ]	if ( a [ i ] < max ) { c = c + max - a [ i ] ; }
print c	cout << c << endl ;
create int n , maxi , sum and x , set maxi to - 1 and sum = 0	int n , maxi = - 1 , sum = 0 , x ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
set maxi to max of maxi and x	maxi = max ( maxi , x ) ;
assign sum + x to sum	sum += x ;
print maxi * n - sum	cout << maxi * n - sum << endl ;
n , i , large and ans are integers where ans = 0 and a is an integer array with 100 elements	int n , i , a [ 100 ] , large , ans = 0 ;
read input to n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
change large to a [ 0 ]	large = a [ 0 ] ;
loop i from 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if large is less than a [ i ] , set large to a [ i ]	if ( large < a [ i ] ) large = a [ i ] ;
for i = 0 to n exclusive , add large - a [ i ] to ans	for ( i = 0 ; i < n ; i ++ ) { ans += large - a [ i ] ; }
print ans	cout << ans << endl ;
create int n and s	int n , s ;
read n and s	cin >> n >> s ;
print ( s + n - 1 ) / n	cout << ( s + n - 1 ) / n << endl ;
n , sum = long long integers	long long int n , sum ;
read n , sum	cin >> n >> sum ;
ans = long long integer with ans = 0	long long int ans = 0 ;
for i = n down to 1	for ( int i = n ; i >= 1 ; i -- )
ans = ans + sum / i	ans += sum / i ;
sum = sum - ( sum / i ) * i	sum -= ( sum / i ) * i ;
print ans	cout << ans << ' \n ' ;
x , y , z = integers	int x , y , z ;
read x and y	cin >> x >> y ;
set z = ( y - 1 ) / x	z = ( y - 1 ) / x ;
increment z	z ++ ;
print z	cout << z << endl ;
declare integers n , s	int n , s ;
read n , s	cin >> n >> s ;
print s / n + 1 if s % n , else n / n , newline	cout << ( s % n ? s / n + 1 : s / n ) << endl ;
let n and s ints	int n , s ;
read n and s	cin >> n >> s ;
let ans an int with value s / n plus ( 1 if s mod n , 0 otherwise )	int ans = s / n + ( s % n ? 1 : 0 ) ;
print ans	cout << ans << endl ;
n , s = integers	int n , s ;
Read n , s	cin >> n >> s ;
if s modulo n is 0	if ( s % n == 0 )
print s / n and a new line	cout << s / n << endl ;
else do the following	else
print ( s / n ) + 1 and a new line	cout << ( s / n ) + 1 << endl ;
declare constant integer maxn = 1e5 + 10	const int maxn = 1e5 + 10 ;
declare integers a , b	int a , b ;
while read a , b is true , print ( b - 1 ) / a + 1 and newline	while ( cin >> a >> b ) { cout << ( b - 1 ) / a + 1 << endl ; }
n , S = long long integers	long long int n , S ;
read n and S	cin >> n >> S ;
if S modulo n is equal to 0	if ( S % n == 0 )
print S / n	cout << S / n << endl ;
else	else
print S / n + 1	cout << S / n + 1 << endl ;
n , s = integers	int n , s ;
Read n , s	cin >> n >> s ;
if s modulo m is n	if ( s % n )
print s / n + 1 and a new line	cout << s / n + 1 << endl ;
else do the following	else
print s / n and a new line	cout << s / n << endl ;
let n , s be integers	int n , s ;
read values for n , s	cin >> n >> s ;
if s mod n is equal to 0 then	if ( s % n == 0 )
print s / n	cout << s / n << endl ;
else do the following	else
print ( s / n ) + 1	cout << ( s / n ) + 1 << endl ;
n , s = int	int n , s ;
loop while reading n then s	while ( cin >> n >> s )
cnt = int with cnt = 0	int cnt = 0 ;
for i = n to 0 decrementing i	for ( int i = n ; i > 0 ; i -- )
loop while s > = i	while ( s >= i )
decrement s by i	s -= i ;
increment cnt	cnt ++ ;
print cnt	cout << cnt << endl ;
create int n and s	int n , s ;
read n and s	cin >> n >> s ;
if s mod n = 0	if ( s % n == 0 )
print s / n	cout << s / n << endl ;
else	else
print s / n + 1	cout << s / n + 1 << endl ;
n = integer	int n ;
S = integer	long long S ;
Read n , S	cin >> n >> S ;
if S modulo s is n	if ( S % n )
print S / n + 1 and a new line	cout << S / n + 1 << endl ;
else do the following	else
print S / n and a new line	cout << S / n << endl ;
n , s = integers	int n , s ;
Read n and s	cin >> n >> s ;
print s / n + ( s modulo n is not 0 ) and a new line	cout << s / n + ( s % n != 0 ) << endl ;
n , s = integer	int n , s ;
read n and s	cin >> n >> s ;
if s remainder n = 0	if ( s % n == 0 )
print s / n	cout << s / n << endl ;
else	else
print s / n + 1	cout << s / n + 1 << endl ;
make ints n and m	int n , m ;
read m and n	cin >> m >> n ;
if n % m is equal to 0	if ( n % m == 0 )
print n / m	cout << n / m << endl ;
otherwise	else
output n / m + 1	cout << n / m + 1 << endl ;
n = int	int n ;
S = int	int S ;
read n , S	cin >> n >> S ;
if S is multiple of n	if ( S % n == 0 )
print S / n	cout << S / n << endl ;
else	else
print S / n + 1	cout << S / n + 1 << endl ;
create int n and s	int n , s ;
read n and s	cin >> n >> s ;
print ( n + s - 1 ) / n	cout << ( n + s - 1 ) / n << endl ;
declare long long integers n , sum	long long int n , sum ;
read n and sum	cin >> n >> sum ;
declare long long integer ans = sum / n + 1 if sum % n , else sum / n	long long int ans = ( sum % n ) ? sum / n + 1 : sum / n ;
print ans and ' \ n '	cout << ans << ' \n ' ;
create integers T , n and m	int T , n , m ;
read m and n from the user input	cin >> m >> n ;
print n / m + ( 1 if n modulo m is not 0 )	cout << ( n / m + ( n % m ? 1 : 0 ) ) << endl ;
ans = 0 = itn	int ans = 0 ;
n , s = int	int n , s ;
read n , s	cin >> n >> s ;
while s is strictly positive	while ( s > 0 )
decrement s by n	s -= n ;
increment ans	ans ++ ;
print ans	cout << ans << endl ;
x , y , z = long long	long long x , y , z ;
read x , y	cin >> x >> y ;
let z = ( y - 1 ) / x	z = ( y - 1 ) / x ;
add one to z	z ++ ;
print z	cout << z << endl ;
declare integer n , s	int n , s ;
read n and s	cin >> n >> s ;
declare integer sum = 0	int sum = 0 ;
while 1 is true	while ( 1 )
increment sum by s / n	sum += s / n ;
let s be s % n	s = s % n ;
decrement n	n -- ;
if n is 0 , end loop	if ( n == 0 ) break ;
print sum and newline	cout << sum << endl ;
n , m = integers	int n , m ;
read n , m	cin >> n >> m ;
if ( m modulo n is not 0 )	if ( m % n != 0 )
print ( m / n ) + 1	cout << ( m / n ) + 1 << endl ;
else	else
print ( m / n )	cout << ( m / n ) << endl ;
create int n and sum	int n , sum ;
read n and sum	cin >> n >> sum ;
if sum mod n different from 0	if ( sum % n != 0 )
print sum / n + 1	cout << sum / n + 1 << endl ;
else	else
print sum / n	cout << sum / n << endl ;
s , n , cn = integers with cn = 0	int s , n , cn = 0 ;
Read n , s	cin >> n >> s ;
while s is greater than s	while ( s > n )
set s to s - n	s = s - n ;
increment cn	cn ++ ;
print cn + 1 and a new line	cout << cn + 1 << endl ;
declare integers a , b	int a , b ;
read a , b	cin >> a >> b ;
declare integer ans = 0	int ans = 0 ;
let ans be b / a	ans = b / a ;
if b % a is not 0 , increment ans	if ( b % a != 0 ) ans ++ ;
print ans and newline	cout << ans << endl ;
declare integers n , m	int n , m ;
read n , m	cin >> n >> m ;
declare integer ans = 0	int ans = 0 ;
if m % n is 0	if ( m % n == 0 )
let ans be m / n	ans = m / n ;
else	else
increment ans by m / n + 1	ans += m / n + 1 ;
print ans and newline	cout << ans << endl ;
n , s = int	int n , s ;
read n then s	cin >> n >> s ;
ans = int with ans = 0	int ans = 0 ;
loop while s	while ( s )
if s is 0 break	if ( s == 0 ) break ;
if s > = n	if ( s >= n )
decrement s by n then increment ans	s -= n , ans ++ ;
else	else
decrement n	n -- ;
print ans	cout << ans << endl ;
n , s = integers	int n , s ;
Read n , s	cin >> n >> s ;
count = integer with 0	int count = 0 ;
for i = n to 0 exclusive	for ( int i = n ; i > 0 ; i -- )
a = integer , set to s / i	int a = s / i ;
set count to count + a	count = count + a ;
set s to s % i	s = s % i ;
if s is equal to 0 , then Terminate the loop	if ( s == 0 ) { break ; }
print count and a new line	cout << count << endl ;
n , s , temp , c = integers with c = 0	long int n , s , temp , c = 0 ;
Read n , s	cin >> n >> s ;
execute infinite loop	while ( 1 )
if s is equal to 0 , then Terminate the loop	if ( s == 0 ) { break ; }
set temp to s	temp = s ;
set s to s modulo minimum value of sand n	s %= min ( s , n ) ;
set c to c + temp / minimum value of temp and n	c += temp / min ( temp , n ) ;
print c and a new line	cout << c << endl ;
n , s = long long	long long n , s ;
read n , s	cin >> n >> s ;
ans = integer with ans = ( s + n - 1 ) / n	int ans = ( s + n - 1 ) / n ;
print ans	cout << ans << endl ;
n , S = long	long n , S ;
read n and S	cin >> n >> S ;
set coins = 0	int coins = 0 ;
set coins = coins + S / n	coins += S / n ;
set rem = S remainder n	int rem = S % n ;
if rem = 0	if ( rem == 0 )
print coins	cout << coins << endl ;
else	else
print increment coins	cout << ++ coins << endl ;
declare long long variables n , s and i	long long n , s , i ;
read variables n and s from the input	cin >> n >> s ;
if s modulo n ! = 0	if ( s % n != 0 )
print s / n + 1	cout << s / n + 1 << endl ;
else	else
print s / n	cout << s / n << endl ;
N = string	string N ;
Read N	cin >> N ;
if N [ 0 ] is greater than or equal to a and N [ 0 ] is less than z , set N [ 0 ] to N [ 0 ] - 32	if ( N [ 0 ] >= ' a ' && N [ 0 ] <= ' z ' ) { N [ 0 ] = N [ 0 ] - 32 ; }
print N and a new line	cout << N << endl ;
declare ch as character array of size 1000	char ch [ 1000 ] ;
gets ( ch )	gets ( ch ) ;
if ch [ 0 ] > = ' a ' and ch [ 0 ] < = ' z ' set ch [ 0 ] to ch [ 0 ] - 32	if ( ch [ 0 ] >= ' a ' && ch [ 0 ] <= ' z ' ) ch [ 0 ] = ch [ 0 ] - 32 ;
puts ( ch )	puts ( ch ) ;
m = string	string m ;
call getline on cin and m	getline ( cin , m ) ;
if m [ 0 ] > = 97 and m [ 0 ] < = 122 then m [ 0 ] = ( int ) m [ 0 ] - 32	if ( m [ 0 ] >= 97 && m [ 0 ] <= 122 ) m [ 0 ] = ( int ) m [ 0 ] - 32 ;
print m	cout << m << endl ;
input = string	string input ;
Read input	cin >> input ;
if input [ 0 ] is greater than or equal to a , set input [ 0 ] = input - 32	if ( input [ 0 ] >= ' a ' ) input [ 0 ] -= 32 ;
print input and a new line	cout << input << endl ;
create string word	string word ;
read word	cin >> word ;
set a to word [ 0 ]	int a = word [ 0 ] ;
if a > 99	if ( a > 90 )
a = a - 32	a = a - 32 ;
assign a to word [ 0 ]	word [ 0 ] = a ;
print word	cout << word << endl ;
else	else
print word and a new line	cout << word << endl ;
create character array s with length of 1001	char s [ 1001 ] ;
read s	cin >> s ;
convert first character of s to uppercase alphabet	s [ 0 ] = toupper ( s [ 0 ] ) ;
print out s	cout << s << endl ;
declare string variable s	string s ;
read s	cin >> s ;
change s [ 0 ] to upper case	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
create string s	string s ;
read s	cin >> s ;
set s [ 0 ] to upper case	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
create character array str with 1000 elements	char str [ 1000 ] ;
while read str	while ( cin >> str )
if ' a ' < = str [ 0 ] & & str [ 0 ] < = ' z ' , str [ 0 ] = 32	if ( ' a ' <= str [ 0 ] && str [ 0 ] <= ' z ' ) { str [ 0 ] -= 32 ; }
print str	cout << str << endl ;
word = string	string word ;
Read word	cin >> word ;
set word [ 0 ] to upper case of word [ 0 ]	word [ 0 ] = toupper ( word [ 0 ] ) ;
print word solution and a new line	cout << word << endl ;
s = string	string s ;
Read s	cin >> s ;
set s [ 0 ] to upper case of s [ 0 ]	s [ 0 ] = towupper ( s [ 0 ] ) ;
print s and a new line	cout << s << endl ;
let s = string	string s ;
set s from input	cin >> s ;
if islower called with s [ 0 ] is true then set s [ 0 ] to ( char ) ( ( int ) s [ 0 ] - 32 )	if ( islower ( s [ 0 ] ) ) s [ 0 ] = ( char ) ( ( int ) s [ 0 ] - 32 ) ;
print s	cout << s << endl ;
in the function toUpp that takes character s and returns character	char toUpp ( char s )
n = integer with n = s	int n = s ;
if n > = 97 and n < = 122 n = n - 32	if ( n >= 97 && n <= 122 ) n -= 32 ;
return ( char ) n	return ( char ) n ;
s = string	string s ;
read s	cin >> s ;
s [ 0 ] = call toUpp on s [ 0 ]	s [ 0 ] = toUpp ( s [ 0 ] ) ;
print s	cout << s << endl ;
declare integer variables n , i , t1 and t2	int n , i , t1 , t2 ;
declare string a	string a ;
read input into a	getline ( cin , a ) ;
if a [ 0 ] > 96 & & a [ 0 ] is less than 123 , decrease a [ 0 ] by 32	if ( a [ 0 ] > 96 && a [ 0 ] < 123 ) a [ 0 ] -= 32 ;
print a	cout << a << endl ;
create xay as string	string xay ;
input xay	cin >> xay ;
if call islower with xay [ 0 ] is true set xay [ 0 ] to xay [ 0 ] converted to uppercase	if ( islower ( xay [ 0 ] ) ) { xay [ 0 ] = toupper ( xay [ 0 ] ) ; }
print xay	cout << xay << endl ;
let a be an array of char of length 1100	char a [ 1100 ] ;
execute gets wich takes a as an argument	gets ( a ) ;
if a [ 0 ] > = ' A ' and a [ 0 ] < = ' Z ' then execute puts with a as an argument	if ( a [ 0 ] >= ' A ' && a [ 0 ] <= ' Z ' ) { puts ( a ) ; }
if a [ 0 ] > = ' a ' and a [ 0 ] < = ' z ' then	if ( a [ 0 ] >= ' a ' && a [ 0 ] <= ' z ' )
let a [ 0 ] = a [ 0 ] - 32	a [ 0 ] = a [ 0 ] - 32 ;
execute puts with a as an argument	puts ( a ) ;
ch = string	string ch ;
read ch	cin >> ch ;
capitalize first letter of ch	ch [ 0 ] = toupper ( ch [ 0 ] ) ;
print ch	cout << ch << endl ;
s = string	string s ;
read s	cin >> s ;
capitalize first letter of s	s [ 0 ] = towupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
in the function capitalize that takes string reference word and returns void	void capitalize ( string & word )
first = character with first = word . at ( 0 )	char first = word . at ( 0 ) ;
if first > = 97 and first < = 122 word . at ( 0 ) = word . at ( 0 ) - 32	if ( first >= 97 && first <= 122 ) word . at ( 0 ) -= 32 ;
input = string	string input ;
read input	cin >> input ;
capitalize on input	capitalize ( input ) ;
print input	cout << input << endl ;
create string s	string s ;
read s	cin >> s ;
set s [ 0 ] to uppercase letter of s [ 0 ]	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
create char array a with length 1000	char a [ 1000 ] ;
read from standard input and store in a	gets ( a ) ;
if ( a [ 0 ] is greater or equal to ' a ' and a [ 0 ] is smaller or equal to ' z ' ) set a [ 0 ] to a [ 0 ] - ( ' a ' - ' A ' )	if ( a [ 0 ] >= ' a ' && a [ 0 ] <= ' z ' ) { a [ 0 ] = a [ 0 ] - ( ' a ' - ' A ' ) ; }
print a	puts ( a ) ;
s = string	string s ;
Read s	cin >> s ;
set s [ 0 ] to upper case of s [ 0 ]	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s solution and a new line	cout << s << endl ;
s = string	string s ;
read s	cin >> s ;
if s [ 0 ] is greater than 96 and s [ 0 ] is less than 123 then subtract 32 from s [ 0 ]	if ( s [ 0 ] >= 97 && s [ 0 ] <= 122 ) s [ 0 ] -= 32 ;
print s	cout << s << endl ;
create string s	string s ;
read s	cin >> s ;
set s [ 0 ] to convert to uppercase s [ 0 ]	s [ 0 ] = towupper ( s [ 0 ] ) ;
print s print newline	cout << s << endl ;
s = string	string s ;
Read s	cin >> s ;
set s [ 0 ] to upper case of s [ 0 ]	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s and a new line	cout << s << endl ;
create string s	string s ;
read s	cin >> s ;
if s [ 0 ] > = a and s [ 0 ] < = z , set s [ 0 ] to s [ 0 ] - 32	if ( s [ 0 ] >= ' a ' && s [ 0 ] <= ' z ' ) s [ 0 ] -= 32 ;
print s	cout << s << endl ;
n = integer	long long int n ;
s = string	string s ;
Read s	cin >> s ;
set n to length of string s	n = s . length ( ) ;
if s [ 0 ] is greater than 96 and s [ 0 ] is less than 123 , then set s [ 0 ] to s [ 0 ] - 32	if ( s [ 0 ] > 96 && s [ 0 ] < 123 ) { s [ 0 ] = s [ 0 ] - 32 ; }
print s and a new line	cout << s << " \n " ;
create string x	string x ;
read x	cin >> x ;
if x [ 0 ] is lower case change x [ 0 ] to upper case	if ( islower ( x [ 0 ] ) ) { x [ 0 ] = toupper ( x [ 0 ] ) ; }
print x	cout << x << endl ;
create string word	string word ;
read word	cin >> word ;
set word [ 0 ] to upper case word [ 0 ]	word [ 0 ] = toupper ( word [ 0 ] ) ;
print word print newline	cout << word << endl ;
s = string	string s ;
Read s	cin >> s ;
set s [ 0 ] to upper case of s [ 0 ]	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s and a new line	cout << s << endl ;
declare string variable s	string s ;
read s	cin >> s ;
convert s [ 0 ] to the upper case	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
declare string variable s	string s ;
read s	cin >> s ;
if s [ 0 ] is a lowercase letter from a to z , change it to upper case	if ( s [ 0 ] >= ' a ' && s [ 0 ] <= ' z ' ) { s [ 0 ] = toupper ( s [ 0 ] ) ; }
print s	cout << s << endl ;
let str be a string	string str ;
read str	cin >> str ;
if ( ( ( int ) str [ 0 ] is less than or equal to ( int ) ' z ' ) and ( ( int ) str [ 0 ] is greater than or equal to a ) ) , the 0th element of array str is equal to ( char ) ( ( int ) str [ 0 ] - 32 )	if ( ( ( int ) str [ 0 ] <= ( int ) ' z ' ) && ( ( int ) str [ 0 ] >= ' a ' ) ) str [ 0 ] = ( char ) ( ( int ) str [ 0 ] - 32 ) ;
print str and newline	cout << str << endl ;
create string s	string s ;
read s	cin >> s ;
set value of s [ 0 ] to towupper ( s [ 0 ] )	s [ 0 ] = towupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
declare character array a with size 1000000	char a [ 1000000 ] ;
declare character array b with size 53 with elements " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ "	char b [ 53 ] = { " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ " } ;
read a	gets ( a ) ;
for integer i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if a [ 0 ] = b [ i ]	if ( a [ 0 ] == b [ i ] )
set value of a [ 0 ] to b [ i + 26 ]	a [ 0 ] = b [ i + 26 ] ;
stop the loop	break ;
print a	puts ( a ) ;
create string s	string s ;
read s	cin >> s ;
set s [ 0 ] to uppercase letter of s [ 0 ]	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s	cout << s << endl ;
create string word	string word ;
read word	cin >> word ;
if word [ 0 ] > = a and word [ 0 ] < = z , set word [ 0 ] = word [ 0 ] - 32	if ( word [ 0 ] >= ' a ' && word [ 0 ] <= ' z ' ) word [ 0 ] = word [ 0 ] - 32 ;
print word	cout << word << endl ;
let S be string	string S ;
read S	cin >> S ;
call toupper with s [ 0 ] as argument and assign it to element 0 of array S	S [ 0 ] = toupper ( S [ 0 ] ) ;
print S	cout << S << endl ;
declare string variable str	string str ;
read input to str	cin >> str ;
change str [ 0 ] to uppercase	str [ 0 ] = ( char ) toupper ( str [ 0 ] ) ;
print str	cout << str << endl ;
let s be a string	string s ;
read s	cin >> s ;
let the value of s [ 0 ] is equal to toupper ( s [ 0 ] )	s [ 0 ] = toupper ( s [ 0 ] ) ;
print s and newline	cout << s << " \n " ;
declare string variable a	string a ;
read line from the input to a	getline ( cin , a ) ;
if a [ 0 ] > = ' a ' and a [ 0 ] < = ' z ' , decrease a [ 0 ] by 32	if ( a [ 0 ] >= ' a ' && a [ 0 ] <= ' z ' ) a [ 0 ] -= 32 ;
print a	cout << a << endl ;
n , m = integers	int n , m ;
while read n , m	while ( cin >> n >> m )
cnt , ta , tb = integers with cnt = 0	int cnt = 0 , ta , tb ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read ta , tb	cin >> ta >> tb ;
if ( cnt > = ta ) , cnt = max of cnt and tb	if ( cnt >= ta ) cnt = max ( cnt , tb ) ;
print ( if cnt > = m , YES else NO )	cout << ( cnt >= m ? " YES\n " : " NO\n " ) ;
create ints n and m	int n , m ;
read n and m	cin >> n >> m ;
make int vector a of size 101 with values 0	vector < int > a ( 101 , 0 ) ;
make ints x and y	int x , y ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x and y	cin >> x >> y ;
increment a [ x ]	a [ x ] ++ ;
subtract 1 from a [ y ]	a [ y ] -- ;
make integer cs = 0	int cs = 0 ;
for i = 0 to m exclusive	for ( int i = 0 ; i < m ; i ++ )
set cs to cs + a [ i ]	cs += a [ i ] ;
if cs is less than or equal to 0	if ( cs <= 0 )
display " NO "	cout << " NO " << endl ;
display " YES "	cout << " YES " << endl ;
n , m = integer	int n , m ;
read n , m	cin >> n >> m ;
c = integer = 0	int c = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
a , b = integer	int a , b ;
read a , b	cin >> a >> b ;
if c > = a , then c = bigger value between c and b	if ( c >= a ) c = max ( c , b ) ;
if c > = m	if ( c >= m )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
declare constant integer MAX = 1e5	const int MAX = 1e5 ;
declare boolean array x size 150	bool x [ 150 ] ;
set bytes from x to size of x to value false	memset ( x , false , sizeof ( x ) ) ;
declare integers n , m	int n , m ;
declare integers l , r	int l , r ;
declare integers i , j	int i , j ;
read n and m	cin >> n >> m ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read l and r	cin >> l >> r ;
for j = l to r exclusive , let x [ j ] be true	for ( j = l ; j < r ; j ++ ) x [ j ] = true ;
for i = 0 to m exclusive	for ( i = 0 ; i < m ; i ++ )
if not x [ i ] , end loop	if ( ! x [ i ] ) break ;
if i is less than m	if ( i < m )
print " NO " and newline	cout << " NO " << endl ;
else	else
print " YES " and newline	cout << " YES " << endl ;
create integer array pos of size 110	int pos [ 110 ] ;
make integers n and m	int n , m ;
read n and m	cin >> n >> m ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
make integers a and b	int a , b ;
read a and b	cin >> a >> b ;
for j = a + 1 to b , set pos [ j ] to 1	for ( int j = a + 1 ; j <= b ; j ++ ) pos [ j ] = 1 ;
for i = 1 to m	for ( int i = 1 ; i <= m ; i ++ )
if pos [ i ] is falsy , print " NO \ n " and return 0	if ( ! pos [ i ] ) return cout << " NO\n " , 0 ;
display " YES \ n " and return 0	return cout << " YES\n " , 0 ;
declare integer array freq size 10000005	int freq [ 10000005 ] ;
declare integers n , m	int n , m ;
read n and m	cin >> n >> m ;
declare integer array mat size n by 2	int mat [ n ] [ 2 ] ;
set bytes from freq to size of freq to value 0	memset ( freq , 0 , sizeof freq ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read mat [ i ] [ 0 ] , mat [ i ] [ 1 ]	cin >> mat [ i ] [ 0 ] >> mat [ i ] [ 1 ] ;
for j = ( mat [ i ] [ 0 ] ) + 1 to mat [ i ] [ 1 ] inclusive , increment freq [ j ]	for ( int j = ( mat [ i ] [ 0 ] ) + 1 ; j <= mat [ i ] [ 1 ] ; j ++ ) freq [ j ] ++ ;
for i = 1 to m inclusive	for ( int i = 1 ; i <= m ; i ++ )
if not freq [ i ]	if ( ! freq [ i ] )
print " NO "	puts ( " NO " ) ;
print " YES "	puts ( " YES " ) ;
let n , m be integers	int n , m ;
read n and m	cin >> n >> m ;
let a , b be integers	int a , b ;
let t be a integer with t = 0	int t = 0 ;
while n is decremented by 1	while ( n -- )
read a , b	cin >> a >> b ;
if a < = t , t is equal to maximum of t and b	if ( a <= t ) t = max ( t , b ) ;
if t > = m	if ( t >= m )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
a is a new array of integers with 105 elements	int a [ 105 ] ;
create ints n , m , x , y , l and r where l = 0	int n , m , x , y , l = 0 , r ;
read standard input to n and m	cin >> n >> m ;
change i from 1 to n inclusive , incrementing i , in a loop	for ( int i = 1 ; i <= n ; i ++ )
read x and y	cin >> x >> y ;
if i = 1 and x ! = 0	if ( i == 1 && x != 0 )
print " NO "	cout << " NO " << endl ;
if i is equal to 1	if ( i == 1 )
set r to y	r = y ;
else if x < = r	else if ( x <= r )
assign the new value = max of r and y to r	r = max ( r , y ) ;
if r > = m	if ( r >= m )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
n , m , s = integers	int n , m , s ;
l , r = integers	int l , r ;
read n , m	cin >> n >> m ;
while decrement n	while ( n -- )
read l , r	cin >> l >> r ;
if ( l < = s ) , if s = r < s , s else r	if ( l <= s ) s = r < s ? s : r ;
if ( s < m )	if ( s < m )
print NO	cout << " NO\n " ;
else	else
print YES	cout << " YES\n " ;
create int n , m , rightMost , set rightMost to 0	int n , m , rightMost = 0 ;
read n and m	cin >> n >> m ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create int x and y	int x , y ;
read x and y	cin >> x >> y ;
if x < = rightMost and y > rightMost , rightMost = y	if ( x <= rightMost && y > rightMost ) rightMost = y ;
if rightMost > = m	if ( rightMost >= m )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
n , m = integers	int n , m ;
read n , m	cin >> n >> m ;
q = vector of integer with q on 1000 and 0	vector < int > q ( 1000 , 0 ) ;
q [ 0 ] = 1	q [ 0 ] = 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
a , b = integers	int a , b ;
read a , b	cin >> a >> b ;
if ( q [ a ] is 1 )	if ( q [ a ] == 1 )
while ( a < = b )	while ( a <= b )
q [ a ] = 1	q [ a ] = 1 ;
increment a	++ a ;
f = bool with f = true	bool f = true ;
for i = 0 to m , f = f bitwise and q [ i ]	for ( int i = 0 ; i <= m ; ++ i ) { f &= q [ i ] ; }
if ( f )	if ( f )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create ints N and M	int N , M ;
read N and M	cin >> N >> M ;
make integer vector A of size N and B of size N	vector < int > A ( N ) , B ( N ) ;
for i = 0 to N exclusive , read A [ i ] and B [ i ]	for ( int i = 0 ; i < ( int ) ( N ) ; ++ i ) { cin >> A [ i ] >> B [ i ] ; }
make integer max_ = 0	int max_ = 0 ;
for i = 0 to N exclusive	for ( int i = 0 ; i < ( int ) ( N ) ; ++ i )
if max_ is less than A [ i ] , break loop	if ( max_ < A [ i ] ) { break ; }
set max_ to max of max_ and B [ i ]	max_ = max ( max_ , B [ i ] ) ;
if max_ is equal to M	if ( max_ == M )
print " YES "	cout << " YES "
print new line	<< " \n " ;
otherwise do	else
display " NO "	cout << " NO "
print new line	<< " \n " ;
a = integer array of size 105	int a [ 105 ] ;
n , m , x , y , l , r = integers with l = 0	int n , m , x , y , l = 0 , r ;
read n , m	cin >> n >> m ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
read x , y	cin >> x >> y ;
if ( i is 1 and x is not 0 )	if ( i == 1 && x != 0 )
print NO	cout << " NO " << endl ;
if ( i is 1 )	if ( i == 1 )
r = y	r = y ;
else if ( x < = r )	else if ( x <= r )
r = max r and y	r = max ( r , y ) ;
if ( r > = m )	if ( r >= m )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
let freq be an integer array of size 10000005	int freq [ 10000005 ] ;
let n , m , x , to be integers	int n , m , x , to ;
read n , m	cin >> n >> m ;
for int i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read x , to	cin >> x >> to ;
for int j = x + 1 to to inclusive ,	for ( int j = x + 1 ; j <= to ; j ++ ) freq [ j ] = 1 ;
for int i = 1 to m inclusive	for ( int i = 1 ; i <= m ; i ++ )
if freq [ i ] = 0	if ( ! freq [ i ] )
print out NO	puts ( " NO " ) ;
print out YES	puts ( " YES " ) ;
n , m = int	int n , m ;
read n , m	cin >> n >> m ;
multiply m by 2	m *= 2 ;
v = array of 220 bool	bool v [ 2 * 110 ] ;
fill v with false	memset ( ( v ) , ( false ) , sizeof ( v ) ) ;
while decremented value of n is not 0	while ( n -- )
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
multiply a by 2	a *= 2 ;
multiply b by 2	b *= 2 ;
fill v from index a to b - a + 1 with true	memset ( v + a , true , b - a + 1 ) ;
ok = true	bool ok = true ;
for i = 0 to m inclusive	for ( int i = 0 ; i <= m ; ++ i )
if not v [ i ] ok = false	if ( ! v [ i ] ) ok = false ;
print YES if ok else NO	cout << ( ok ? " YES " : " NO " ) << " \n " ;
freq = integer array of size 10000005	int freq [ 10000005 ] ;
n , m , x , to = integers	int n , m , x , to ;
read n , m	cin >> n >> m ;
set all contents of freq to 0	memset ( freq , 0 , sizeof freq ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x , to	cin >> x >> to ;
for j = x + 1 to to , increment freq [ j ]	for ( int j = x + 1 ; j <= to ; j ++ ) freq [ j ] ++ ;
for i = 1 to m	for ( int i = 1 ; i <= m ; i ++ )
if ( not freq [ i ] )	if ( ! freq [ i ] )
print NO	puts ( " NO " ) ;
print YES	puts ( " YES " ) ;
getint is an inlined integer function	inline int getint ( )
declare ints r = 0 and k = 1	int r = 0 , k = 1 ;
defin new char c with value from the input	char c = getchar ( ) ;
read char from the input into c , while c is not a digit character	for ( ; c < ' 0 ' || c > ' 9 ' ; c = getchar ( ) )
if c = ' - ' , change k to - 1	if ( c == ' - ' ) k = - 1 ;
while is a digit character , read new value for the c from the input , then change r to r * 10 + c - ' 0 '	for ( ; c >= ' 0 ' && c <= ' 9 ' ; c = getchar ( ) ) r = r * 10 + c - ' 0 ' ;
return r * k	return r * k ;
new integer n with value from getint ( )	int n = getint ( ) ;
m is a new integer with value from getint ( )	int m = getint ( ) ;
define new integer maxx with value 0	int maxx = 0 ;
in a for loop , change i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare integer variable with name x = result of getint ( )	int x = getint ( ) ;
y is a new integer = value , returned from getint ( )	int y = getint ( ) ;
if maxx > = x , change maxx to max of maxx and y	if ( maxx >= x ) maxx = max ( maxx , y ) ;
if maxx > = m	if ( maxx >= m )
print " YES " to standard output	puts ( " YES " ) ;
else	else
print " NO " to stdout	puts ( " NO " ) ;
let x , y , n , c be long values	long long x , y , n , c ;
read n	cin >> n ;
x equals n - 1	x = n - 1 ;
y equals 1	y = 1 ;
c equals 1	c = 1 ;
while x is greater than 0	while ( x > 0 )
increase c by 1	c ++ ;
if x * x + y * y + 2 * y + 1 < n * n + 1	if ( x * x + y * y + 2 * y + 1 < n * n + 1 )
increase y by 1	y ++ ;
else	else
if x * x - 2 * x + y * y + 2 * y + 2 < n * n + 1	if ( x * x - 2 * x + y * y + 2 * y + 2 < n * n + 1 )
decrease x by 1	x = x - 1 ;
increase y by 1	y ++ ;
else	else
decrease x by 1	x = x - 1 ;
if n equals 0	if ( n == 0 )
print 1 and endline	cout << 1 << endl ;
else	else
print 4 * c and endline	cout << 4 * c << endl ;
n , x , y = long long	long long n , x , y ;
ny = long long	long long ny ;
wasOut = bool	bool wasOut ;
borderPoints = 0	long long borderPoints = 0 ;
nx = 0	long long nx = 0 ;
read n	cin >> n ;
if n is 0	if ( n == 0 )
print 1	cout << 1 << endl ;
else if n < 0	else if ( n < 0 )
subtract n from x	x = - n ;
while x < = 0	while ( x <= 0 )
wasOut = true	wasOut = true ;
ny = sqrt ( n * n - x * x ) + 1	ny = sqrt ( n * n - x * x ) + 1 ;
for y = - ny to 0 inclusive	for ( y = - ny ; y <= 0 ; y ++ )
if x * x + y * y < = n * n	if ( x * x + y * y <= n * n )
if wasOut is true	if ( wasOut == true )
wasOut = false	wasOut = false ;
increment borderPoints	borderPoints ++ ;
if x is 0 increment nx	if ( x == 0 ) { nx ++ ; }
else	else
if x < 0	if ( x < 0 )
if ( x - 1 ) ^ 2 + y ^ 2 > n ^ 2	if ( ( x - 1 ) * ( x - 1 ) + y * y > n * n )
increment borderPoints	borderPoints ++ ;
if x is 0 increment nx	if ( x == 0 ) { nx ++ ; }
else	else
y = n + 1	y = n + 1 ;
else if x > 0	else if ( x > 0 )
if ( x + 1 ) ^ 2 + y ^ 2 > n ^ 2	if ( ( x + 1 ) * ( x + 1 ) + y * y > n * n )
increment borderPoints	borderPoints ++ ;
if x is 0 increment nx	if ( x == 0 ) { nx ++ ; }
else	else
y = n + 1	y = n + 1 ;
increment x	x ++ ;
print 2 * ( borderPoints * 2 - nx ) - 2	cout << 2 * ( borderPoints * 2 - nx ) - 2 << endl ;
n , ans be long long values with ans being 0	long long n , ans = 0 ;
read n	cin >> n ;
double value R equals n	double R = n ;
tmp . k be long long values and tmp equals n	long long tmp = n , k ;
for long long i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
double value r equals i	double r = i ;
k equals square root of R * R - r * r	k = ( long long ) sqrt ( R * R - r * r ) ;
increase ans by tmp = = k ? 1 : tmp - k	ans += ( tmp == k ? 1 : tmp - k ) ;
tmp equals k	tmp = k ;
if n equals 0	if ( n == 0 )
print 1 and endline	cout << 1 << endl ;
else	else
print ans * 4 and endline	cout << ans * 4 << endl ;
declare new long long n	long long n ;
read n from the input	cin >> n ;
if 0 < n < 40000001	if ( 0 < n && n < 40000001 )
create new long longs x = n , y = 0 and k = 0	long long x = n , y = 0 , k = 0 ;
while x > 0	while ( x > 0 )
increment k by one	k ++ ;
increment y by one	y ++ ;
decrement x if x * x + y * y is greater than n squared	if ( x * x + y * y > n * n ) { x -- ; }
decrement y if x * x + y * y is greater than n squared	if ( x * x + y * y > n * n ) { y -- ; }
print 4 * k	cout << 4 * k << endl ;
else if n = 0	else if ( n == 0 )
print 1 to the standard output	cout << 1 << endl ;
declare long long n	long long n ;
while read n is true	while ( cin >> n )
declare long long x = n * square root of double casted 2	long long x = n * sqrt ( double ( 2 ) ) ;
if n is 0	if ( n == 0 )
print 1 , newline	cout << 1 << endl ;
else	else
print x * 4 , newline	cout << x * 4 << endl ;
Eu_distance is a function that returns a long value by taking in two long values	long long Eu_distance ( long long x , long long y )
return x * x + y * y	return x * x + y * y ;
n is a long integer	long long n ;
read n	cin >> n ;
if n equals 0	if ( n == 0 )
put string 1	puts ( " 1 " ) ;
else if n equals 1	else if ( n == 1 )
put string 4	puts ( " 4 " ) ;
else	else
x and y are long integers with y = n	long long x , y = n ;
res is a long integer 0	long long res = 0 ;
for x = 0 to n , y + 1 exclusive	for ( x = 0 ; x < n , x <= y ; x ++ )
while Eu_distance ( x , y ) is greater than n * n , decrease y by 1	while ( Eu_distance ( x , y ) > n * n ) { y -- ; }
if x is greater than y , stop	if ( x > y ) { break ; }
if x is not equal to y	if ( x != y )
increase res by 2	res += 2 ;
else	else
increase res by 1	res ++ ;
decrease res by 2	res -= 2 ;
res equals res * 4 + 4	res = res * 4 + 4 ;
print res and endline	cout << res << endl ;
let n be a long integer	long long n ;
let w be a long integer	long long w ;
let t be a long integer	long long t ;
the integer value of q = 1	int q = 1 ;
read n	cin >> n ;
if n equals 0	if ( n == 0 )
print q and newline	cout << q << endl ;
else do the following	else
the long integer value of r = int ( sqrt ( ( n * n ) / 2 ) ) * 2	long long int r = int ( sqrt ( ( n * n ) / 2 ) ) * 2 ;
w is equal to n * n	w = n * n ;
if ( r / 2 ) * ( r / 2 ) + ( r / 2 + 1 ) * ( r / 2 + 1 ) < = w , increment r by 1	if ( ( r / 2 ) * ( r / 2 ) + ( r / 2 + 1 ) * ( r / 2 + 1 ) <= w ) { r ++ ; }
print 4 * r and newline	cout << 4 * r << endl ;
create const ints Maxn = 3010 and INF = 0x3f3f3f3f	const int Maxn = 3010 , INF = 0x3f3f3f3f ;
let long long int n	long long n ;
read n	cin >> n ;
if n is equal to 0	if ( n == 0 )
print 1	cout << 1 << endl ;
else do	else
show ( ( long long ) ( n * sqrt ( 2 ) ) ) * 4	cout << ( ( long long ) ( n * sqrt ( 2 ) ) ) * 4 << endl ;
let n be a long integer	long long int n ;
read n	cin >> n ;
the long integer value of j = n - 1	long long int j = n - 1 ;
the long integer value of lim = n * n	long long lim = n * n ;
let t be a long integer	long long t ;
the long integer value of prevj = n	long long prevj = n ;
the long integer value of sum = 0	long long sum = 0 ;
if n equals 0	if ( n == 0 )
print 1 and newline	cout << 1 << " \n " ;
for long integer i = 1 to n + 1 exclusive	for ( long long int i = 1 ; i < n + 1 ; ++ i )
t is equal to i * i	t = i * i ;
while j is greater than 0 and j * j is greater than ( lim - t ) , decrement j by 1	while ( j > 0 && j * j > ( lim - t ) ) j -- ;
increment sum by 1	sum += 1 ;
if prevj is not equal to j , increment sum by ( prevj - j - 1 )	if ( prevj != j ) sum += ( prevj - j - 1 ) ;
prevj is equal to j	prevj = j ;
print 4 * sum and newline	cout << 4 * sum << " \n " ;
let n , max , save be long integers	long long int n , max , save ;
read n	cin >> n ;
if n equals 0	if ( n == 0 )
print 1 and newline	cout << 1 << endl ;
if n equals 1	if ( n == 1 )
print 4 and newline	cout << 4 << endl ;
for max is equal to 0 , 2 * ( max * max ) is less than n * n , increment max by 1 , save is equal to max	for ( max = 0 ; 2 * ( max * max ) < n * n ; max ++ ) { save = max ; }
if ( save + 1 ) * ( save + 1 ) + save * save < = n * n	if ( ( save + 1 ) * ( save + 1 ) + save * save <= n * n )
n is equal to ( save ) * 8 + 4	n = ( save ) * 8 + 4 ;
print n and newline	cout << n << endl ;
n is equal to ( save ) * 8	n = ( save ) * 8 ;
print n and newline	cout << n << endl ;
n = int	int n ;
while reading n	while ( cin >> n )
x = n * sqrt ( 2 to double )	int x = n * sqrt ( double ( 2 ) ) ;
if n = 0	if ( n == 0 )
print 1	cout << 1 << endl ;
else	else
print x * 4	cout << x * 4 << endl ;
integer as n	int n ;
read n	cin >> n ;
if n is false	if ( ! n )
output 1	cout << 1 << endl ;
else	else
output ( square root of 2 times n ) times 4	cout << ( int ) ( sqrt ( 2 ) * n ) * 4 << endl ;
create long long n	long long n ;
declare inside taking in long long ints x and y and returning long long	long long inside ( long long x , long long y )
if sqrt ( x * x + y * y ) is less than or equal to n , return 1	if ( sqrt ( x * x + y * y ) <= n ) return 1 ;
make long long num	long long num ;
read n	cin >> n ;
set num to n / 2	num = n / 2 ;
while ( num + 1 ) * sqrt ( 2 . 0 ) is less than or equal to n , increment num	while ( ( num + 1 ) * sqrt ( 2.0 ) <= n ) num ++ ;
if n is 1	if ( n == 1 )
print 4	cout << 4 << endl ;
else if n is equal to 0	else if ( n == 0 )
show 1	cout << 1 << endl ;
else if inside ( num , num + 1 ) is truthy	else if ( inside ( num , num + 1 ) )
display 8 * num + 4	cout << 8 * num + 4 << endl ;
else if inside ( num , num + 1 ) is falsy	else if ( ! inside ( num , num + 1 ) )
show 8 * num	cout << 8 * num << endl ;
EPS = 1e - 9	const double EPS = 1e-9 ;
qx = array of long long filled with 0 , - 1 , - 1	long long qx [ ] = { 0 , - 1 , - 1 } ;
qy = array of long long filled with 1 , 1 , 0	long long qy [ ] = { 1 , 1 , 0 } ;
movx = array of long long filled with 1 , 0 , - 1 , 0	long long movx [ ] = { 1 , 0 , - 1 , 0 } ;
movy = array of long long filled with 0 , - 1 , 0 , 1	long long movy [ ] = { 0 , - 1 , 0 , 1 } ;
function dist ( get long long y and x , return long long )	long long dist ( long long y , long long x )
return y * y + x * x	return ( y * y + x * x ) ;
n = long long	long long n ;
read n	cin >> n ;
if n is 0	if ( n == 0 )
print 1	cout << 1 << endl ;
tot = 0	long long tot = 0 ;
lasti = 0	long long lasti = 0 ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; ++ i )
valini = 2 * i * i	long long valini = 2 * i * i ;
if valini - n * n > 0 break	if ( valini - n * n > 0 ) break ;
lasti = i	lasti = i ;
posx = long long , posy = lasti	long long posx , posy = lasti ;
posx = lasti	posx = lasti ;
contador = 0	long long contador = 0 ;
for i = 0 to 4 exclusive	for ( long long i = 0 ; i < 4 ; ++ i )
if dist ( lasti + movx [ i ] , lasti + movy [ i ] ) - n * n > 0 contador = 1	if ( dist ( lasti + movx [ i ] , lasti + movy [ i ] ) - n * n > 0 ) contador = 1 ;
xx , yy = long long	long long xx , yy ;
resta = contador	long long resta = contador ;
while posx is not 0 or posy is not n	while ( posx != 0 || posy != n )
works = false	bool works = false ;
for j = 0 to 3 exclusive	for ( long long j = 0 ; j < 3 ; j ++ )
xx = posx + qx [ j ]	xx = posx + qx [ j ] ;
yy = posy + qx [ j ]	yy = posy + qy [ j ] ;
if n * n - dist ( yy , xx ) > = 0	if ( n * n - dist ( yy , xx ) >= 0 )
increment contador	contador ++ ;
posy = yy	posy = yy ;
posx = xx	posx = xx ;
works = true	works = true ;
break	break ;
multiply contador by 2	contador *= 2 ;
substract resta from contador	contador -= resta ;
multiply contador by 4	contador *= 4 ;
subtract 4 from contador	contador -= 4 ;
print contador	cout << contador << endl ;
declare integer array a size 3	int a [ 3 ] ;
while read a [ 0 ] , a [ 1 ] , a [ 2 ]	while ( cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] )
sort from a to a + 3	sort ( a , a + 3 ) ;
if a [ 0 ] + a [ 1 ] is greater than a [ 2 ]	if ( a [ 0 ] + a [ 1 ] > a [ 2 ] )
print ' 0 ' and ' \ n '	cout << ' 0 ' << ' \n ' ;
else	else
print a [ 2 ] + 1 - a [ 1 ] - a [ 0 ] and ' \ n '	cout << a [ 2 ] + 1 - a [ 1 ] - a [ 0 ] << ' \n ' ;
let a , b , c , res be integers with res = 0	int a , b , c , res = 0 ;
read a , b , c	cin >> a >> b >> c ;
if a > = b + c	if ( a >= b + c )
res is equal to a - ( b + c ) + 1	res = a - ( b + c ) + 1 ;
else if b > = a + c	else if ( b >= a + c )
res is equal to b - ( a + c ) + 1	res = b - ( a + c ) + 1 ;
else if c > = a + b	else if ( c >= a + b )
res is equal to c - ( b + a ) + 1	res = c - ( b + a ) + 1 ;
print res and newline	cout << res << endl ;
let compare be a function that accepts integers a , b and returns a boolean value	bool compare ( int a , int b )
return a is less than b	return ( a < b ) ;
arr = array of integers of length 3	int arr [ 3 ] ;
while read arr [ 0 ] , arr [ 1 ] , arr [ 2 ]	while ( cin >> arr [ 0 ] >> arr [ 1 ] >> arr [ 2 ] )
sort the values arr , arr + 3	sort ( arr , arr + 3 ) ;
if arr [ 0 ] + arr [ 1 ] is greater than arr [ 2 ]	if ( arr [ 0 ] + arr [ 1 ] > arr [ 2 ] )
print 0 and newline	cout << 0 << endl ;
else do the following	else
print ( arr [ 2 ] + 1 - arr [ 1 ] - arr [ 0 ] ) and newline	cout << ( arr [ 2 ] + 1 - arr [ 1 ] - arr [ 0 ] ) << endl ;
a = array of integers of length 3	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] , a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort the values a , a + 3	sort ( a , a + 3 ) ;
print ( maximum of a [ 2 ] - a [ 1 ] - a [ 0 ] + 1 and 0 ) and newline	cout << max ( a [ 2 ] - a [ 1 ] - a [ 0 ] + 1 , 0 ) << endl ;
create new array of integers a with size 3	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] and a [ 2 ] from the input	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort first 3 elements of a	sort ( a , a + 3 ) ;
print max of 0 and a [ 2 ] - a [ 1 ] + 1 - a [ 0 ] and " \ n "	cout << max ( 0 , a [ 2 ] - a [ 1 ] + 1 - a [ 0 ] ) << " \n " ;
declare integer array a size 3	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] , a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort from a to a + 3	sort ( a , a + 3 ) ;
print maximum of ( 0 and a [ 2 ] + 1 - ( a [ 0 ] + a [ 1 ] ) ) , newline	cout << max ( 0 , a [ 2 ] + 1 - ( a [ 0 ] + a [ 1 ] ) ) << endl ;
a , b , c , d , e , f , g are long long integers	long long int a , b , c , d , e , f , g ;
s and t are strings	string s , t ;
while reading a , b , c	while ( cin >> a >> b >> c )
set d = 0	d = 0 ;
while 1	while ( 1 )
if a + b > c and b + c > a and a + c > b	if ( a + b > c && b + c > a && a + c > b )
break	break ;
else	else
add 1 to d	d ++ ;
if a < = b and a < = c	if ( a <= b && a <= c )
add 1 to a	a ++ ;
else if b < = a and b < = c	else if ( b <= a && b <= c )
add 1 to b	b ++ ;
else	else
add 1 to c	c ++ ;
print d	cout << d << endl ;
lines is a new vector of integers with size 3	vector < int > lines ( 3 ) ;
read user input to lines [ 0 ] , lines [ 1 ] and lines [ 2 ]	cin >> lines [ 0 ] >> lines [ 1 ] >> lines [ 2 ] ;
sort vector lines	sort ( lines . begin ( ) , lines . end ( ) ) ;
define integer variable counter = 0	int counter = 0 ;
while lines [ 0 ] + lines [ 1 ] < = lines [ 2 ]	while ( lines [ 0 ] + lines [ 1 ] <= lines [ 2 ] )
increment lines [ 0 ]	lines [ 0 ] ++ ;
increment counter	counter ++ ;
print counter	cout << counter << endl ;
declare checkValidity with integers a , b , c as arguments , returning boolean	bool checkValidity ( int a , int b , int c )
if a + b is less than or equal to c or a + c is less than or equal to b or b + c is less than or equal to a	if ( a + b <= c || a + c <= b || b + c <= a )
return false from function	return false ;
else	else
return true from function	return true ;
declare long longs a , b , c	long long a , b , c ;
read a , b , c	cin >> a >> b >> c ;
declare integer counter = 100000	int counter = 100000 ;
for i = a to 100 inclusive	for ( int i = a ; i <= 100 ; i ++ )
for j = b to 100 inclusive	for ( int j = b ; j <= 100 ; j ++ )
for k = c to 100 inclusive	for ( int k = c ; k <= 100 ; k ++ )
if result of run checkValidity ( i , j , k ) is true	if ( checkValidity ( i , j , k ) )
declare integer temp = absolute value of ( i - a ) + ( j - b ) + ( k - c )	int temp = abs ( i - a ) + ( j - b ) + ( k - c ) ;
let counter be minimum of ( counter and temp )	counter = min ( counter , temp ) ;
print counter , newline	cout << counter << endl ;
create int a , b , c	int a , b , c ;
create int max , ans	int max , ans ;
read a and b and c	cin >> a >> b >> c ;
max = a	max = a ;
if ( max < b ) max = b	if ( max < b ) max = b ;
if ( max < c ) max = c	if ( max < c ) max = c ;
if ans ( 2 * max - ( a + b + c ) ) < 0 )	if ( ( ans = 2 * max - ( a + b + c ) ) < 0 )
print 0	cout << 0 << endl ;
esle	else
print ans + 1	cout << ans + 1 << endl ;
create int int a [ 3 ] , i	int a [ 3 ] , i ;
for i = 0 to 3 exclusive , read a [ i ]	for ( i = 0 ; i < 3 ; i ++ ) cin >> a [ i ] ;
sort elements between a and a + 3	sort ( a , a + 3 ) ;
if a [ 0 ] + a [ 1 ] > a [ 2 ]	if ( a [ 0 ] + a [ 1 ] > a [ 2 ] )
print 0	cout << 0 << endl ;
else	else
print a [ 2 ] + 1 - a [ 0 ] - a [ 1 ]	cout << a [ 2 ] + 1 - a [ 0 ] - a [ 1 ] << endl ;
a , b , c = int	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
flag = 0	int flag = 0 ;
while a + b < ( c + 1 )	while ( a + b < ( c + 1 ) )
increment flag	++ flag ;
increment a	++ a ;
while a + c < ( b + 1 )	while ( a + c < ( b + 1 ) )
increment flag	++ flag ;
increment a	++ a ;
while b + c < ( a + 1 )	while ( b + c < ( a + 1 ) )
increment flag	++ flag ;
increment b	++ b ;
print flag	cout << flag << " \n " ;
declare contant double pi = arc cosine of - 1	const double pi = acos ( - 1 ) ;
create array of integers a of size 3 and integer k = 0	int a [ 3 ] , k = 0 ;
read a [ 0 ] , a [ 1 ] and a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort array a	sort ( a , a + 3 ) ;
if a [ 1 ] + a [ 0 ] is greater than a [ 2 ] and a [ 2 ] - a [ 0 ] is less than a [ 1 ] then	if ( a [ 1 ] + a [ 0 ] > a [ 2 ] && a [ 2 ] - a [ 0 ] < a [ 1 ] )
print k	cout << k << endl ;
if a [ 1 ] + a [ 0 ] is less than or equal to a [ 2 ]	if ( a [ 1 ] + a [ 0 ] <= a [ 2 ] )
set k to a [ 2 ] - a [ 1 ] - a [ 0 ] + 1	k = a [ 2 ] - a [ 1 ] - a [ 0 ] + 1 ;
print k	cout << k << endl ;
let MAXP be a constant integer with MAXP = 55	const int MAXP = 55 ;
a = array of integers of length 3	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] , a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort the values a , a + 3	sort ( a , a + 3 ) ;
print maximum of 0 and a [ 2 ] - a [ 0 ] - a [ 1 ] + 1 and newline	cout << max ( 0 , a [ 2 ] - a [ 0 ] - a [ 1 ] + 1 ) << endl ;
create ints a , b , and c	int a , b , c ;
read a , b , and c	cin >> a >> b >> c ;
create integer min_cnt = 1e9	int min_cnt = 1e9 ;
for i = a to 100	for ( int i = a ; i <= 100 ; i ++ )
for j = b to 100	for ( int j = b ; j <= 100 ; j ++ )
for k = c to 100	for ( int k = c ; k <= 100 ; k ++ )
create double s = ( i + j + k ) / 2 . 0	double s = ( i + j + k ) / 2.0 ;
create double under_root = s * ( s - i ) * ( s - j ) * ( s - k )	double under_root = s * ( s - i ) * ( s - j ) * ( s - k ) ;
if under_root is greater than 0 . 0 , set min_cnt to min ( min_cnt , ( ( i - a ) + ( j - b ) + ( k - c ) ) )	if ( under_root > 0.0 ) { min_cnt = min ( min_cnt , ( ( i - a ) + ( j - b ) + ( k - c ) ) ) ; }
display min_cnt	cout << min_cnt << " \n " ;
maxn = 1e5 + 5	const int maxn = 1e5 + 5 ;
ans = 0	int ans = 0 ;
create int a [ 4 ]	int a [ 4 ] ;
whle read a [ 1 ] , a [ 2 ] , a [ 3 ]	while ( cin >> a [ 1 ] >> a [ 2 ] >> a [ 3 ] )
sort elements between a + 1 and a + 4	sort ( a + 1 , a + 4 ) ;
ans = 0	ans = 0 ;
while a [ 1 ] + a [ 2 ] < = a [ 3 ]	while ( a [ 1 ] + a [ 2 ] <= a [ 3 ] )
increment ans	ans ++ ;
add 1 to a [ 1 ]	a [ 1 ] ++ ;
print ans	cout << ans << endl ;
create int a [ 3 ]	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] , a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort elements between a and a + 3	sort ( a , a + 3 ) ;
if a [ 0 ] + a [ 1 ] > a [ 2 ]	if ( a [ 0 ] + a [ 1 ] > a [ 2 ] )
print 0	cout << 0 << endl ;
else	else
print a [ 2 ] + 1 - a [ 0 ] - a [ 1 ]	cout << a [ 2 ] + 1 - a [ 0 ] - a [ 1 ] << endl ;
a , b , c , s , m , d = int	int a , b , c , s , m , d ;
read a , b , c	cin >> a >> b >> c ;
s = a + b + c	s = a + b + c ;
m = max of max ( a , b ) and c	m = max ( max ( a , b ) , c ) ;
d = 2 * m - s + 1	d = 2 * m - s + 1 ;
if ( d < = 0 ) , d = 0	if ( d <= 0 ) d = 0 ;
print d	cout << d << endl ;
a , b , c , d and l are ints where l = 0	int a , b , c , d , l = 0 ;
read from the input to a , b and c	cin >> a >> b >> c ;
if a + b > c and b + c > a and a + c > b	if ( a + b > c && b + c > a && a + c > b )
change d to 0	d = 0 ;
print d	cout << d << endl ;
else	else
if a < = b or a < = c	if ( a <= b || a <= c )
looping infinitely	while ( true )
increment a	a ++ ;
increment l	l ++ ;
if a + b > c and b + c > a and a + c > b	if ( a + b > c && b + c > a && a + c > b )
print l	cout << l << endl ;
stop the loop	break ;
else	else
if b < = a or b < = c	if ( b <= a || b <= c )
looping infinitely	while ( true )
increment b	b ++ ;
increment l by one	l ++ ;
if a + b > c and b + c > a and a + c > b	if ( a + b > c && b + c > a && a + c > b )
print l	cout << l << endl ;
break the loop	break ;
a = array of integers of length 3	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] , a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort the values a , a + 3 , greater < int > ( )	sort ( a , a + 3 , greater < int > ( ) ) ;
if a [ 0 ] + a [ 1 ] is greater than a [ 2 ] and a [ 1 ] + a [ 2 ] is greater than a [ 0 ] and a [ 2 ] + a [ 1 ] is greater than a [ 0 ]	if ( a [ 0 ] + a [ 1 ] > a [ 2 ] && a [ 1 ] + a [ 2 ] > a [ 0 ] && a [ 2 ] + a [ 1 ] > a [ 0 ] )
print 0 and newline	cout << 0 << endl ;
else if a [ 0 ] + a [ 1 ] is greater than a [ 2 ] and a [ 0 ] + a [ 2 ] is greater than a [ 1 ] and a [ 2 ] + a [ 1 ] < = a [ 0 ]	else if ( a [ 0 ] + a [ 1 ] > a [ 2 ] && a [ 0 ] + a [ 2 ] > a [ 1 ] && a [ 2 ] + a [ 1 ] <= a [ 0 ] )
the integer value of num1 is equal to a [ 0 ] / 2	int num1 = a [ 0 ] / 2 ;
num1 is equal to a [ 0 ] - num1	num1 = a [ 0 ] - num1 ;
num1 is equal to num1 - a [ 2 ]	num1 = num1 - a [ 2 ] ;
the integer value of num2 is equal to a [ 0 ] / 2	int num2 = a [ 0 ] / 2 ;
num2 is equal to a [ 0 ] - num2	num2 = a [ 0 ] - num2 ;
num2 is equal to num2 - a [ 1 ]	num2 = num2 - a [ 1 ] ;
if a [ 0 ] modulo 2	if ( a [ 0 ] % 2 )
print num1 + num2 and newline	cout << num1 + num2 << endl ;
else do the following	else
print num1 + num2 + 1 and newline	cout << num1 + num2 + 1 << endl ;
create int a [ 3 ]	int a [ 3 ] ;
read a [ 0 ] , a [ 1 ] , a [ 2 ]	cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort elements between a and a + 3	sort ( a , a + 3 ) ;
increment a [ 2 ]	a [ 2 ] ++ ;
if a [ 0 ] + a [ 1 ] > = a [ 2 ]	if ( a [ 0 ] + a [ 1 ] >= a [ 2 ] )
print 0	cout << " 0 " << endl ;
else	else
print a [ 2 ] - ( a [ 0 ] + a [ 1 ] )	cout << a [ 2 ] - ( a [ 0 ] + a [ 1 ] ) << endl ;
create int A [ 3 ]	int A [ 3 ] ;
for i = 0 to 3 exclusive , read A [ i ]	for ( int i = 0 ; i < 3 ; i ++ ) { cin >> A [ i ] ; }
sort elements between A and A + 3	sort ( A , A + 3 ) ;
print max ( 0 , A [ 2 ] - A [ 1 ] - A [ 0 ] + 1 ) and a newline	cout << max ( 0 , A [ 2 ] - A [ 1 ] - A [ 0 ] + 1 ) << ' \n ' ;
create integer n	int n ;
read n	cin >> n ;
while decrement n is true	while ( n -- )
create integer a	int a ;
read a	cin >> a ;
if a is 1	if ( a == 1 )
print " HARD \ n "	cout << " HARD\n " ;
print " EASY \ n "	cout << " EASY\n " ;
let n , i , a , s = integers with s = 0	int n , i , a , s = 0 ;
set n to input	cin >> n ;
for int i = 0 and i must be less than n	for ( i = 0 ; i < n ; i ++ )
set a to input	cin >> a ;
add a to s	s += a ;
if s is not equal to 0	if ( s != 0 )
print out HARD and new line	cout << " HARD " << endl ;
else	else
print out EASY and new line	cout << " EASY " << endl ;
let a , n , sum be integers with a = array of integers of length 100	int a [ 100 ] , n , sum ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read ith element of array a	cin >> a [ i ] ;
the value of sum is equal to sum + ith element of array a	sum = sum + a [ i ] ;
if ( sum is equal to 0 )	if ( sum == 0 )
print EASY and newline	cout << " EASY " << endl ;
else , do the following	else
print HARD and newline	cout << " HARD " << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
declare integer array arr with size n	int arr [ n ] ;
create boolean ans = true	bool ans = true ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
if arr [ i ] = 1 , change ans to false	if ( arr [ i ] == 1 ) { ans = false ; }
if ans is true	if ( ans )
print " EASY "	cout << " EASY " << endl ;
else	else
print " HARD "	cout << " HARD " << endl ;
create integer array a with size 100 , create integers x , sum with sum = 0	int a [ 100 ] , x , sum = 0 ;
read x	cin >> x ;
for z = 0 to x exclusive	for ( int z = 0 ; z < x ; z ++ )
read a [ z ]	cin >> a [ z ] ;
set sum to sum + a [ z ]	sum = sum + a [ z ] ;
if sum is 0	if ( sum == 0 )
print " EASY " print newline	cout << " EASY " << endl ;
else	else
print " HARD " print newline	cout << " HARD " << endl ;
define function solve	void solve ( )
declare integer variable n	int n ;
read n	cin >> n ;
decrement n and loop further , while n > 0	while ( n -- )
declare integer a	int a ;
read a	cin >> a ;
if a = 1	if ( a == 1 )
print " HARD " and ' \ n '	cout << " HARD " << ' \n ' ;
return	return ;
print " EASY " and ' \ n '	cout << " EASY " << ' \n ' ;
invoke function solve	solve ( ) ;
n = integer	int n ;
Read n	cin >> n ;
while n is not equal to 0	while ( n -- )
r = integer	int r ;
Read r	cin >> r ;
if r is equal to 1	if ( r == 1 )
print HARD	cout << " HARD "
print a new line	<< " \n " ;
print EASY	cout << " EASY "
print a new line	<< " \n " ;
set n , x , z = 0	int n , x , z = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive increment i	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
if x > 0 increment z + +	if ( x > 0 ) { z ++ ; }
if z > 0	if ( z > 0 )
print HARD and new line	cout << " HARD " << endl ;
else	else
print EASY and new line	cout << " EASY " << endl ;
create integer n	int n ;
read n	cin >> n ;
create integer pointer arr with arr = new integer array with size n	int * arr = new int [ n ] ;
create integer sum with sum = 0	int sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
increment sum by arr [ i ]	sum += arr [ i ] ;
if sum is 0	if ( sum == 0 )
print " EASY " print newline	cout << " EASY " << endl ;
else	else
print " HARD " print newline	cout << " HARD " << endl ;
n = int	int n ;
read n	cin >> n ;
loop n times	while ( n -- )
a = int	int a ;
read a	cin >> a ;
if a is 1	if ( a == 1 )
print " HARD "	cout << " HARD\n " ;
call exit with 0	exit ( 0 ) ;
print " EASY "	cout << " EASY\n " ;
declare inline wa with no arguments , returning void	inline void wa ( )
print " HARD " print newline	cout << " HARD " << endl ;
declare inline ac with no arguments , returning void	inline void ac ( )
print " EASY " print newline	cout << " EASY " << endl ;
create integer n	int n ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create integer tmp	int tmp ;
read tmp	cin >> tmp ;
if tmp is true	if ( tmp )
run wa	wa ( ) ;
run ac	ac ( ) ;
let n be a integer	int n ;
the boolean value of cek is equal to 0	bool cek = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
let a be a integer	int a ;
read a	cin >> a ;
if ( a is equal to 1 ) , then cek is equal to 1	if ( a == 1 ) { cek = 1 ; }
if ( cek is equal to 0 )	if ( cek == 0 )
print EASY and newline	cout << " EASY " << endl ;
else do the following	else
print HARD and newline	cout << " HARD " << endl ;
n = integer	int n ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
e = integer	int e ;
read e	cin >> e ;
if e is 1	if ( e == 1 )
print HARD	cout << " HARD " << endl ;
print EASY	cout << " EASY " << endl ;
declare integer variables a , b and c	int a , b , c ;
create integer cnt = 0	int cnt = 0 ;
read a	cin >> a ;
for integer i = 1 to a inclusive	for ( int i = 1 ; i <= a ; i ++ )
read b	cin >> b ;
increment cnt if b = 1	if ( b == 1 ) cnt ++ ;
if cnt > = 1	if ( cnt >= 1 )
print " HARD "	cout << " HARD " << endl ;
else	else
print " EASY "	cout << " EASY " << endl ;
n = int	int n ;
read n	cin >> n ;
flag = bool with flag = false	bool flag = false ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
a = int	int a ;
read a	cin >> a ;
if a is not 0 set flag to true	if ( a ) flag = true ;
if flag is true	if ( flag )
print " HARD "	cout << " HARD " << endl ;
else	else
print " EASY "	cout << " EASY " << endl ;
n = int	int n ;
read n	cin >> n ;
s = int array of size n	int s [ n ] ;
for i = i to n read s [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }
count1 = int with count1 = 0	int count1 = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
increment count1 if s [ i ] is 1	if ( s [ i ] == 1 ) count1 ++ ;
if count1 is not 0	if ( count1 != 0 )
print " HARD "	cout << " HARD " << endl ;
else	else
print " EASY "	cout << " EASY " << endl ;
i , j , n = int and a = int array of size 101	int a [ 101 ] , i , j , n ;
read n	cin >> n ;
read n values into a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
if a [ n - 1 ] equals 1	if ( a [ n - 1 ] == 1 )
print " HARD "	cout << " HARD " << endl ;
else	else
print " EASY "	cout << " EASY " << endl ;
n , i = int	int n , i ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is 1	if ( a [ i ] == 1 )
print " HARD "	cout << " HARD " << endl ;
print " EASY "	cout << " EASY " << endl ;
a = array of 10000 integers	int a [ 10000 ] ;
n , i , k = integers	int n , i , k ;
k = 0	k = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] > 0 , increment k	if ( a [ i ] > 0 ) { k ++ ; }
if k > 0	if ( k > 0 )
print HARD	cout << " HARD " << endl ;
else	else
print EASY	cout << " EASY " << endl ;
create int n and a	int n , a ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a	cin >> a ;
if a equal to 1	if ( a == 1 )
print HARD	cout << " HARD " << endl ;
print EASY	cout << " EASY " << endl ;
Not is a char function with char argument x	char Not ( char x )
return ' 1 ' if x = ' 0 ' or ' 0 ' otherwise	return ( x == ' 0 ' ? ' 1 ' : ' 0 ' ) ;
create string s	string s ;
read variable s from the input	cin >> s ;
for integer i = 0 to length of s exclusive	for ( int i = 0 ; i < ( int ) s . size ( ) ; i ++ )
if s [ i ] = ' r ' , print i + 1 and ' \ n '	if ( s [ i ] == ' r ' ) { cout << i + 1 << ' \n ' ; }
loop through i from length of s - 1 to 0 , decrementing it	for ( int i = ( int ) s . size ( ) - 1 ; i >= 0 ; i -- )
if s [ i ] = ' l ' , print i + 1 and ' \ n ' to the standard output	if ( s [ i ] == ' l ' ) { cout << i + 1 << ' \n ' ; }
ss = string	string ss ;
read ss	cin >> ss ;
idx = integer with idx = ( cast to int ) ss . size ( ) - 1	int idx = ( int ) ss . size ( ) - 1 ;
ans = vector of integer with ans = ( ( cast to int ) ss . size ( ) )	vector < int > ans ( ( int ) ss . size ( ) ) ;
for i = 0 to ( cast to int ) ss . size ( ) exclusive	for ( int i = 0 ; i < ( int ) ss . size ( ) ; i ++ )
if ss [ i ] is r , continue next iteration	if ( ss [ i ] == ' r ' ) continue ;
ans [ idx ] = i	ans [ idx ] = i ;
decrement idx	idx -- ;
idx = 0	idx = 0 ;
for i = 0 to ( cast to int ) ss . size ( ) exclusive	for ( int i = 0 ; i < ( int ) ss . size ( ) ; i ++ )
if ss [ i ] is l , continue next iteration	if ( ss [ i ] == ' l ' ) continue ;
ans [ idx ] = i	ans [ idx ] = i ;
increment idx	idx ++ ;
for i = 0 to ans . size ( ) exclusive , print ans [ i ] + 1	for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] + 1 << ' \n ' ;
s = string	string s ;
read s	cin >> s ;
n = size of s = int	int n = s . size ( ) ;
let mas be a vector of int of size n	vector < int > mas ( n ) ;
let l = 0 = int	int l = 0 ;
r = n = int	int r = n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; )
if s at i is ' l '	if ( s [ i ] == ' l ' )
decrement r , increment i and set mas [ r ] = i	mas [ -- r ] = ++ i ;
else	else
increment i , set mas [ l ] to i , increment l	mas [ l ++ ] = ++ i ;
for i = 0 to n exclusive , increment i , print mas at i and new line	for ( int i = 0 ; i < n ; ++ i ) { cout << mas [ i ] << " \n " ; }
s = string	string s ;
r , l = int vector	vector < int > r , l ;
read s	cin >> s ;
n = int with n = size of s	int n = s . size ( ) ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] is ' r '	if ( s [ i ] == ' r ' )
append i + 1 to r	r . push_back ( i + 1 ) ;
else	else
append i + 1 to l	l . push_back ( i + 1 ) ;
sort r	sort ( r . begin ( ) , r . end ( ) ) ;
sort l	sort ( l . begin ( ) , l . end ( ) ) ;
reverse l	reverse ( l . begin ( ) , l . end ( ) ) ;
print all values of r	for ( int i = 0 ; i < r . size ( ) ; i ++ ) cout << r [ i ] << " \n " ;
print all values of l	for ( int i = 0 ; i < l . size ( ) ; i ++ ) cout << l [ i ] << " \n " ;
create string s	string s ;
read s	cin >> s ;
for i = 1 to size of s	for ( int i = 1 ; i <= s . size ( ) ; i ++ )
if s [ i - 1 ] is equal to ' r ' , print i	if ( s [ i - 1 ] == ' r ' ) cout << i << " \n " ;
for i = s . size ( ) to 1	for ( int i = s . size ( ) ; i >= 1 ; i -- )
if s [ i - 1 ] is equal to ' 1 ' , print i	if ( s [ i - 1 ] == ' l ' ) cout << i << " \n " ;
declare constant long long maxn = 2 * 1e6 + 2	const long long maxn = 2 * 1e6 + 2 ;
arr is a new array of long longs with size maxn	long long arr [ maxn ] ;
create string variable s	string s ;
read s from the input	cin >> s ;
declare new long long variables f = maxn / 2 , l = maxn / 2 - 1 and r = maxn / 2 + 1	long long f = maxn / 2 , l = maxn / 2 - 1 , r = maxn / 2 + 1 ;
assign 1 to arr [ f ]	arr [ f ] = 1 ;
for integer i = 1 to length of s exclusive incrementing i	for ( int i = 1 ; i < s . length ( ) ; i ++ )
if s [ i ] is equal to ' l '	if ( s [ i ] == ' l ' )
change the value of arr [ l ] to i + 1	arr [ l ] = i + 1 ;
decrement l	l -- ;
else	else
set arr [ r ] to i + 1	arr [ r ] = i + 1 ;
increment r by one	r ++ ;
if s [ 0 ] is equal to ' l '	if ( s [ 0 ] == ' l ' )
start for loop from i = f + 1 to maxn exclusive	for ( int i = f + 1 ; i < maxn ; i ++ )
if arr [ i ] ! = 0 , print arr [ i ] and " \ n "	if ( arr [ i ] != 0 ) cout << arr [ i ] << " \n " ;
start for loop from i = l to f inclusive	for ( int i = l ; i <= f ; i ++ )
if arr [ i ] ! = 0 , print arr [ i ] and " \ n "	if ( arr [ i ] != 0 ) cout << arr [ i ] << " \n " ;
else	else
in a for loop , change i from f to maxn exclusive	for ( int i = f ; i < maxn ; i ++ )
if arr [ i ] ! = 0 , print arr [ i ] and " \ n " to the output	if ( arr [ i ] != 0 ) cout << arr [ i ] << " \n " ;
in a for loop , change i from l to f exclusive incrementing i	for ( int i = l ; i < f ; i ++ )
if arr [ i ] ! = 0 , print arr [ i ] and " \ n "	if ( arr [ i ] != 0 ) cout << arr [ i ] << " \n " ;
MAX = const integer with MAX = 1e6 + 7	const int MAX = 1e6 + 7 ;
wynik = integer array of size MAX	int wynik [ MAX ] ;
s = string	string s ;
read s	cin >> s ;
n = integer with n = s . size ( )	int n = s . size ( ) ;
lewa = integer with lewa = 0	int lewa = 0 ;
prawa = integer with prawa = n - 1	int prawa = n - 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if s [ i ] is l	if ( s [ i ] == ' l ' )
wynik [ decrement prawa ] = i	wynik [ prawa -- ] = i ;
else	else
wynik [ increment lewa ] = i	wynik [ lewa ++ ] = i ;
for i = 0 to n exclusive , print wynik [ i ] + 1	for ( int i = 0 ; i < n ; ++ i ) { cout << wynik [ i ] + 1 << " \n " ; }
st = string	string st ;
let l , r be vectors of ints	vector < int > l , r ;
read st	cin >> st ;
let n = size of st be an int	int n = st . size ( ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] is ' l '	if ( st [ i ] == ' l ' )
push back i + 1 in l	l . push_back ( i + 1 ) ;
else	else
push back i + 1 in r	r . push_back ( i + 1 ) ;
reverse l	reverse ( l . begin ( ) , l . end ( ) ) ;
for r size times ( print r [ i ] and new line )	for ( int i = 0 ; i < r . size ( ) ; i ++ ) cout << r [ i ] << ' \n ' ;
for size of l time ( print l [ i ] and new line )	for ( int i = 0 ; i < l . size ( ) ; i ++ ) cout << l [ i ] << ' \n ' ;
create ints i = 0 , j = 0 , k , and n	int i = 0 , j = 0 , k , n ;
create string s	string s ;
let integer vector v	vector < int > v ;
read s	cin >> s ;
set n to s . size ( )	n = s . size ( ) ;
set k to n - 1	k = n - 1 ;
resize v to size n with value 0	v . resize ( n , 0 ) ;
if i is less than n , set ( ( s [ i + + ] = = ' r ' ) ? v [ j + + ] : v [ k - - ] ) to i	while ( i < n ) { ( ( s [ i ++ ] == ' r ' ) ? v [ j ++ ] : v [ k -- ] ) = i ; }
for i = 0 to n exclusive , print v [ i ]	for ( i = 0 ; i < n ; ++ i ) { cout << v [ i ] << ' \n ' ; }
let ints i = 0 and n	int i = 0 , n ;
create string s	string s ;
make integer list l1 and l2	list < int > l1 , l2 ;
make integer list iterator j	list < int > :: iterator j ;
let integer list reverse_iterator k	list < int > :: reverse_iterator k ;
read s	cin >> s ;
set n to size of s	n = s . size ( ) ;
while i is less than n , append i to l1 if s [ i + + ] = = ' r ' is true or append i to l2 if not	while ( i < n ) { ( ( s [ i ++ ] == ' r ' ) ? l1 . push_back ( i ) : l2 . push_back ( i ) ) ; }
for j = l1 . begin ( ) until j = l1 . end ( ) , print ( * j )	for ( j = l1 . begin ( ) ; j != l1 . end ( ) ; ++ j ) { cout << ( * j ) << ' \n ' ; }
for k = l2 . rbegin ( ) until k = l2 . rend ( ) , print ( * k )	for ( k = l2 . rbegin ( ) ; k != l2 . rend ( ) ; ++ k ) { cout << ( * k ) << ' \n ' ; }
let string s	string s ;
read s	cin >> s ;
for i = 0 to s . size ( ) exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] is equal to ' r ' , print i + 1	if ( s [ i ] == ' r ' ) cout << i + 1 << ' \n ' ;
for i = s . size ( ) - 1 to 0	for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- )
if s [ i ] is equal to ' 1 ' , print i + 1	if ( s [ i ] == ' l ' ) cout << i + 1 << ' \n ' ;
function pwr ( get long long base , p , mod = 1000000007 , return long long )	long long pwr ( long long base , long long p , long long mod = ( 1000000007LL ) )
ans = 1	long long ans = 1 ;
while p	while ( p )
if p and 1 ans = ( ans * base ) modulo mod	if ( p & 1 ) ans = ( ans * base ) % mod ;
base = ( base * base ) modulo mod	base = ( base * base ) % mod ;
divide p by 2	p /= 2 ;
return ans	return ans ;
function gcd ( get long long a , b , return long long )	long long gcd ( long long a , long long b )
if b is 0 return a	if ( b == 0 ) return a ;
return gcd ( b , a modulo b )	return gcd ( b , a % b ) ;
function nCr ( get long long n , r , return long long )	long long nCr ( long long n , long long r )
C = array of r + 1 long long	long long C [ r + 1 ] ;
fill C with 0	memset ( C , 0 , sizeof ( C ) ) ;
c [ 0 ] = 1	C [ 0 ] = 1 ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
for j = min ( i , r ) down to 0 exclusive add C [ j - 1 ] to C [ j ]	for ( long long j = min ( i , r ) ; j > 0 ; j -- ) C [ j ] = C [ j ] + C [ j - 1 ] ;
return C [ r ]	return C [ r ] ;
function isPrime ( get long long n , return bool )	bool isPrime ( long long n )
if n < = 1 return false	if ( n <= 1 ) return false ;
if n is 2 return true	if ( n == 2 ) return true ;
if n is even return false	if ( n % 2 == 0 ) return false ;
m = sqrt ( n )	long long m = sqrt ( n ) ;
for i = 3 to m inclusive by 2	for ( long long i = 3 ; i <= m ; i += 2 )
if n is even return false	if ( n % i == 0 ) return false ;
return true	return true ;
function M ( get long long a , return long long )	long long M ( long long a )
return a modulo 1000000007	return ( a % ( 1000000007LL ) ) ;
function isPowerOfTwo ( get long long x , return bool )	bool isPowerOfTwo ( long long x )
return x and ( not ( x and ( x - 1 ) ) )	return x && ( ! ( x & ( x - 1 ) ) ) ;
str = string	string str ;
read str	cin >> str ;
n = length of str	int n = str . length ( ) ;
start = 0 , end = n - 1	int start = 0 , end = n - 1 ;
v = vector of n int	vector < int > v ( n ) ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= ( long long ) ( n ) ; ++ i )
if str [ i - 1 ] is ' r '	if ( str [ i - 1 ] == ' r ' )
v [ start ] = i	v [ start ] = i ;
increment start	start ++ ;
else	else
v [ end ] = i	v [ end ] = i ;
decrement end	end -- ;
for i = 0 to n exclusive print v [ i ]	for ( long long i = 0 ; i < ( long long ) ( n ) ; ++ i ) { cout << v [ i ] << endl ; }
create new string variable st	string st ;
declare vector of integers l and r	vector < int > l , r ;
read user input to st	cin >> st ;
create new integer called n = length of st	int n = st . size ( ) ;
for i from 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
if st [ i ] = ' l '	if ( st [ i ] == ' l ' )
push i + 1 to l	l . push_back ( i + 1 ) ;
else	else
add i + 1 into r	r . push_back ( i + 1 ) ;
reverse vector l	reverse ( l . begin ( ) , l . end ( ) ) ;
print all elements of r one by one with ' \ n ' after each one	for ( int i = 0 ; i < r . size ( ) ; i ++ ) cout << r [ i ] << ' \n ' ;
print all elements of l one by one with ' \ n ' after each one	for ( int i = 0 ; i < l . size ( ) ; i ++ ) cout << l [ i ] << ' \n ' ;
let mod be a long integer with mod is equal to 1e9 + 7	long long mod = 1e9 + 7 ;
let x be a string	string x ;
read x	cin >> x ;
for i = 0 to length of x exclusive	for ( int i = 0 ; i < x . size ( ) ; i ++ )
if x [ i ] is equal to r , print i + 1 and newline	if ( x [ i ] == ' r ' ) cout << i + 1 << ' \n ' ;
for integer i is equal to length of x - 1 , i > = 0 , decrement i by 1	for ( int i = x . size ( ) - 1 ; i >= 0 ; i -- )
if x [ i ] is equal to l , print i + 1 and newline	if ( x [ i ] == ' l ' ) cout << i + 1 << ' \n ' ;
a = integer array of size 1000005	int a [ 1000005 ] ;
s = string	string s ;
read s	cin >> s ;
l = length of s	int l = s . length ( ) ;
beg = integer = 1 , end = integer = 1	int beg = 1 , end = l ;
for i = 0 to l exclusive , then if s [ i ] is l a [ decrease end by 1 at the end of the loop ] = i + 1 else a [ increase beg by 2 st the end of the loop ] = i + 1	for ( int i = 0 ; i < l ; i ++ ) s [ i ] == ' l ' ? a [ end -- ] = i + 1 : a [ beg ++ ] = i + 1 ;
for i = 0 to l exclusive , then print a [ i + 1 ]	for ( int i = 0 ; i < l ; i ++ ) cout << a [ i + 1 ] << " \n " ;
mod = const integer with mod = 1000000007	const int mod = 1000000007 ;
second = string	string second ;
read second	cin >> second ;
i = integer	int i ;
l , r = vector of integer	vector < int > l , r ;
for i = 0 to second . length ( ) exclusive	for ( i = 0 ; i < second . length ( ) ; i ++ )
if ( second [ i ] is l )	if ( second [ i ] == ' l ' )
append i + 1 in l	l . push_back ( i + 1 ) ;
else	else
append i + 1 in r	r . push_back ( i + 1 ) ;
for i = 0 to r . size ( ) exclusive , print r [ i ]	for ( i = 0 ; i < r . size ( ) ; i ++ ) { cout << r [ i ] << " \n " ; }
for i = l . size ( ) - 1 down to 00 , print l [ i ]	for ( i = l . size ( ) - 1 ; i >= 00 ; i -- ) { cout << l [ i ] << " \n " ; }
declare constant integer N = 1010	const int N = 1010 ;
declare constant integer MOD = integer casted 1e6 + 3	const int MOD = ( int ) 1e6 + 3 ;
declare long long integer n , long long integer arrays dp size N , twoPow size 2 * N	long long int n , dp [ N ] , twoPow [ 2 * N ] ;
declare init with no arguments , returning void	void init ( )
let twoPow [ 0 ] be 1	twoPow [ 0 ] = 1 ;
for i = 1 to 2 * N inclusive , let twoPow [ i ] be ( twoPow [ i - 1 ] * 2 ) % MOD	for ( int i = 1 ; i <= 2 * N ; i ++ ) twoPow [ i ] = ( twoPow [ i - 1 ] * 2 ) % MOD ;
set bytes from dp to size of dp to value - 1	memset ( dp , - 1 , sizeof ( dp ) ) ;
declare cookie with long long integer a as argument , returning long long integer	long long int cookie ( long long int a )
return ( twoPow [ a - 1 ] * ( twoPow [ a ] + 1 ) ) % MOD from function	return ( twoPow [ a - 1 ] * ( twoPow [ a ] + 1 ) ) % MOD ;
declare solve with long long integer a as argument , returning long long integer	long long int solve ( long long int a )
if a is less than or equal to 0 , return 0	if ( a <= 0 ) return 0 ;
if dp [ a ] is not - 1 , return dp [ a ]	if ( dp [ a ] != - 1 ) return dp [ a ] ;
let dp [ a ] be result of run cookie ( a ) % MOD	dp [ a ] = cookie ( a ) % MOD ;
for i = 1 to a - 1 is greater than 0 , let dp [ a ] be ( dp [ a ] + result of run solve ( a - i ) * twoPow [ i - 1 ] ) % MOD	for ( int i = 1 ; a - i > 0 ; i ++ ) { dp [ a ] = ( dp [ a ] + solve ( a - i ) * twoPow [ i - 1 ] ) % MOD ; }
return dp [ a ] from function	return dp [ a ] ;
run init	init ( ) ;
read n	cin >> n ;
print ( twoPow [ 2 * n ] - result of run solve ( n ) + MOD ) % MOD , newline	cout << ( twoPow [ 2 * n ] - solve ( n ) + MOD ) % MOD << endl ;
M = 1005	const int M = 1000 + 5 ;
a = array of M int	int a [ M ] ;
n = int	int n ;
read n	cin >> n ;
a [ 0 ] = 1	a [ 0 ] = 1 ;
a [ 1 ] = 1	a [ 1 ] = 1 ;
for i = 2 to n inclusive a [ i ] = ( 3 * a [ i - 1 ] ) modulo 1000003	for ( int i = 2 ; i <= n ; i ++ ) { a [ i ] = ( 3 * a [ i - 1 ] ) % ( 1000000 + 3 ) ; }
print a [ n ]	cout << a [ n ] << endl ;
mod = const integer with mod = 1000003	const int mod = 1000003 ;
a , n = long long with a = 1	long long a = 1 , n ;
read n	cin >> n ;
for i = 2 to n , a = ( a * 3 ) modulo mod	for ( int i = 2 ; i <= n ; i ++ ) a = ( a * 3 ) % mod ;
print a	cout << a << " \n " ;
pi = acos ( - 1 )	const double pi = acos ( - 1 ) ;
MODPRIMA = 1000000007	const long long MODPRIMA = ( long long ) 1e9 + 7 ;
MAXX = 10 ^ 18	const long long MAXX = ( long long ) 1e18 ;
MINN = - 10 ^ 18	const long long MINN = - ( long long ) 1e18 ;
EPS = 1e - 9	const double EPS = 1e-9 ;
N = int	int N ;
MOD = 1000003	const long long MOD = 1e6 + 3 ;
ans = long long	long long ans ;
read N	cin >> N ;
ans = 1	ans = 1 ;
if N is 0	if ( N == 0 )
print 1	cout << 1 << ' \n ' ;
else	else
for i = 1 to N - 1 inclusive	for ( int i = 1 ; i <= N - 1 ; i ++ )
multiply ans by 3	ans *= 3 ;
ans = ans modulo MOD	ans %= MOD ;
print ans	cout << ans << ' \n ' ;
define the new constant integer N with value 1e5 + 5	const int N = 1e5 + 5 ;
M is a new constant integer with value 1e6 + 3	const int M = 1e6 + 3 ;
ara is a new array of integers with size N	int ara [ N ] ;
rec is a integer function with int argument n	int rec ( int n )
return 1 if n is less than 2	if ( n < 2 ) return 1 ;
return ( 3 * rec ( n - 1 ) ) % M	return ( 3 * rec ( n - 1 ) ) % M ;
declare new integer variable n	int n ;
read input to n	cin >> n ;
print the result of rec ( n ) and " \ n " to the standard output	cout << rec ( n ) << " \n " ;
define integer variable n	int n ;
read input to n	cin >> n ;
define integer variable cnt = 1	int cnt = 1 ;
change i in a loop , starting from 1 to n exclusive , adding 1 on each loop and changing cnt to = ( cnt * 3 ) % 1000003	for ( int i = 1 ; i < n ; ++ i ) { cnt = ( cnt * 3 ) % 1000003 ; }
print cnt to the standard output	cout << cnt << endl ;
declare integer mod = 1e6 + 3	int mod = 1e6 + 3 ;
declare integer n	int n ;
read n	cin >> n ;
if n is 0	if ( n == 0 )
print " 1 \ n "	cout << " 1\n " ;
else	else
declare integer ans = 1	int ans = 1 ;
for i = 1 to n exclusive , let ans be ( ans * 3 ) % mod	for ( int i = 1 ; i < n ; ++ i ) { ans = ( ans * 3 ) % mod ; }
print ans and " \ n "	cout << ans << " \n " ;
n = int	int n ;
read n	cin >> n ;
ans = 1 = long long	long long ans = 1 ;
for i = 2 to n inclusive then set ans = ( ans * 3 ) modulo 1000003	for ( int i = 2 ; i <= n ; i ++ ) { ans = ( ans * 3 ) % 1000003 ; }
if n = 1	if ( n == 1 )
print 1	cout << " 1 " << endl ;
else	else
print ans	cout << ans << endl ;
create new array of integers dp with size 1005	int dp [ 1005 ] ;
define function precalc	void precalc ( )
change the values of dp [ 0 ] and dp [ 1 ] to 1	dp [ 0 ] = dp [ 1 ] = 1 ;
for i = 2 to 1001 exclusive , change dp [ i ] to ( dp [ i - 1 ] + ( dp [ i - 1 ] * 2 ) % 1000003 ) % 1000003	for ( int i = 2 ; i < 1001 ; ++ i ) { dp [ i ] = ( dp [ i - 1 ] + ( dp [ i - 1 ] * 2 ) % 1000003 ) % 1000003 ; }
call function precalc ( )	precalc ( ) ;
n is a new integer variable	int n ;
read user input to n	cin >> n ;
print dp [ n ] to the standard output	cout << dp [ n ] << endl ;
N = 1e5 + 5	const int N = 1e5 + 5 ;
M = 1e6 + 3	const int M = 1e6 + 3 ;
create int ara [ N ]	int ara [ N ] ;
create int n	int n ;
read n	cin >> n ;
ara [ 0 ] = 1	ara [ 0 ] = 1 ;
set ara [ 1 ] = 1	ara [ 1 ] = 1 ;
for i = 2 to n inclusive , set ara [ i ] = ( 3 * ara [ i - 1 ] ) mod M	for ( int i = 2 ; i <= n ; i ++ ) { ara [ i ] = ( 3 * ara [ i - 1 ] ) % M ; }
print ara [ n ] and a newline	cout << ara [ n ] << " \n " ;
n , r = integers	int n , r ;
set r to 1	r = 1 ;
Read n	cin >> n ;
if n is equal to 1000	if ( n == 1000 )
print 691074 and a new line	cout << " 691074 " << endl ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
set r to r * 3	r *= 3 ;
set r to r modulo 1000003	r %= 1000003 ;
print r and a new line	cout << r << endl ;
create int n	int n ;
read n	cin >> n ;
a = 1	int a = 1 ;
for i = 1 to n exclusive , set a = ( a * 3 ) % 1000003	for ( int i = 1 ; i < n ; i ++ ) { a = ( a * 3 ) % 1000003 ; }
print a	cout << a << endl ;
let fstexp be a function that accepts long long x , int n , int mod and returns a long integer value	long long fstexp ( long long x , int n , int mod )
the long integer value of res = 1	long long res = 1 ;
while n is greater than 0	while ( n > 0 )
if n & 1 , res is equal to ( res * x ) modulo mod	if ( n & 1 ) res = ( res * x ) % mod ;
n = n > > 1	n = n >> 1 ;
x is equal to ( x * x ) modulo mod	x = ( x * x ) % mod ;
return the value of res	return res ;
let n be a integer	int n ;
read n	cin >> n ;
the long integer value of ans = fstexp ( 3 , n - 1 , 1000003 )	long long ans = fstexp ( 3 , n - 1 , 1000003 ) ;
print ans and newline	cout << ans << endl ;
let n , m , a be long integers	long long n , m , a ;
let mod be a long integer with mod = ( 1000000 ) + 3	long long mod = ( 1000000 ) + 3 ;
let poww be a function that accepts long long x , long long y and returns a long integer value	long long poww ( long long x , long long y )
if y is equal to 0 , return 1	if ( y == 0 ) return 1 ;
if y is equal to 1 , return x	if ( y == 1 ) return x ;
if y modulo 2 , return the value of ( ( poww ( x , y / 2 ) modulo mod ) * ( poww ( x , y / 2 ) modulo mod ) * ( x modulo mod ) ) modulo mod	if ( y % 2 ) return ( ( poww ( x , y / 2 ) % mod ) * ( poww ( x , y / 2 ) % mod ) * ( x % mod ) ) % mod ;
return the value of ( ( poww ( x , y / 2 ) modulo mod ) * ( poww ( x , y / 2 ) modulo mod ) ) modulo mod	return ( ( poww ( x , y / 2 ) % mod ) * ( poww ( x , y / 2 ) % mod ) ) % mod ;
read n	cin >> n ;
if not n	if ( ! n )
print 1 and newline	cout << 1 << endl ;
else do the following	else
print poww ( 3 , n - 1 ) and newline	cout << poww ( 3 , n - 1 ) << endl ;
let fastMax be a function that accepts integers x , y and returns a integer	int fastMax ( int x , int y )
return the value of ( ( ( y - x ) > > ( 32 - 1 ) ) & ( x ^ y ) ) ^ y	return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ y ;
let fastMin be a function that accepts integers x , y and returns a integer	int fastMin ( int x , int y )
return the value of ( ( ( y - x ) > > ( 32 - 1 ) ) & ( x ^ y ) ) ^ x	return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ x ;
let MOD be a constant long integer with MOD = 1e6 + 3	const long long int MOD = 1e6 + 3 ;
let MAXN be a constant long integer with MAXN = 1001	const long long int MAXN = 1001 ;
first = array of long integers of length MAXN	long long int first [ MAXN ] ;
let n be a long integer	long long int n ;
let solve be a void function	void solve ( )
first [ 0 ] is equal to first [ 1 ] is equal to 1	first [ 0 ] = first [ 1 ] = 1 ;
for long integer i = 2 to MAXN exclusive , first [ i ] is equal to ( 3 * first [ i - 1 ] ) modulo MOD	for ( long long int i = 2 ; i < MAXN ; i ++ ) { first [ i ] = ( 3 * first [ i - 1 ] ) % MOD ; }
read n	cin >> n ;
print first [ n ] and newline	cout << first [ n ] << endl ;
let t be a long integer	long long int t ;
t is equal to 1	t = 1 ;
while t is decremented by 1 , call the solve function	while ( t -- ) solve ( ) ;
let pi be a constant double value with pi = acos ( - 1 )	const double pi = acos ( - 1 ) ;
let MODPRIMA be a constant long integer with MODPRIMA = ( long long ) 1e9 + 7	const long long MODPRIMA = ( long long ) 1e9 + 7 ;
let MAXX be a constant long integer with MAXX = ( long long ) 1e18	const long long MAXX = ( long long ) 1e18 ;
let MINN be a constant long integer with MINN = - ( long long ) 1e18	const long long MINN = - ( long long ) 1e18 ;
let EPS be a constant double value with EPS = 1e - 9	const double EPS = 1e-9 ;
let N be a integer	int N ;
let MOD be a constant long integer with MOD = 1e6 + 3	const long long MOD = 1e6 + 3 ;
let ans be a long integer	long long ans ;
read N	cin >> N ;
ans is equal to 1	ans = 1 ;
if N is equal to 0	if ( N == 0 )
print 1 and newline	cout << 1 << ' \n ' ;
else do the following	else
for integer i = 1 to N - 1 inclusive	for ( int i = 1 ; i <= N - 1 ; i ++ )
ans is equal to ans * 3	ans *= 3 ;
ans is equal to ans modulo MOD	ans %= MOD ;
print ans and newline	cout << ans << ' \n ' ;
declare new integers n , i and m with m = 1	int n , i , m = 1 ;
read input to n	cin >> n ;
change i in a loop from 0 to n - 1 exclusive , incrementing by 1	for ( i = 0 ; i < n - 1 ; i ++ )
multiply m by 3	m = ( m * 3 ) ;
set m to m % 1000003	m = m % 1000003 ;
print m	cout << m << endl ;
pi = acos of 1 )	const double pi = acos ( - 1 ) ;
set num [ 1005 ] to	int num [ 1005 ] =
1	1 ,
1	1 ,
3	3 ,
}	;
for i = 3 to 1005 exclusive , set num [ i ] = ( 3 * num [ i - 1 ] ) % 1000003	for ( int i = 3 ; i < 1005 ; i ++ ) { num [ i ] = ( 3 * num [ i - 1 ] ) % 1000003 ; }
create int n	int n ;
while read n , print num [ n ]	while ( cin >> n ) { cout << num [ n ] << endl ; }
let n , ans be integers with ans = 1	int n , ans = 1 ;
read n	cin >> n ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
ans is equal to ans * 3	ans *= 3 ;
ans is equal to ans % 1000003	ans %= 1000003 ;
print ans and newline	cout << ans << endl ;
let n be an integer	int n ;
read in n	cin >> n ;
let res be an integer , set res to 1	int res = 1 ;
for i = 0 to n - 1	for ( int i = 1 ; i <= n - 1 ; i ++ )
set res to res * 3	res *= 3 ;
set res to res % 1000003	res %= 1000003 ;
print res	cout << res << endl ;
INF = const integer with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
i , j , k = long long with k = 1	long long i , j , k = 1 ;
n , m = long long with m = 1	long long n , m = 1 ;
read n	cin >> n ;
if ( not n or n is 1 )	if ( ! n || n == 1 )
print 1	cout << 1 << endl ;
for i = 2 to n , m = m * 3 , m = m modulo 1000003	for ( i = 2 ; i <= n ; i ++ ) m *= 3 , m %= 1000000 + 3 ;
print m	cout << m << endl ;
integer as x , n , a [ 3 ] , b [ 3 ] , c [ 3 ]	int x , n , a [ 3 ] , b [ 3 ] , c [ 3 ] ;
read n	cin >> n ;
integer as sum = 0	int sum = 0 ;
set x to 0	x = 0 ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
for j = 0 to less than 3 do the following	for ( int j = 0 ; j < 3 ; j ++ )
read a [ j ]	cin >> a [ j ] ;
sum equals sum plus a [ j ]	sum += a [ j ] ;
if sum is greater than or equal to 2 then add one to x	if ( sum >= 2 ) x ++ ;
set sum to 0	sum = 0 ;
output x	cout << x << endl ;
n = 0	int n = 0 ;
validProblems = 0	int validProblems = 0 ;
create int p , v , set t to 0	int p , v , t = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read p , v and t	cin >> p >> v >> t ;
result = p + v + t	int result = p + v + t ;
if result > 1 , increment validProblems	if ( result > 1 ) validProblems ++ ;
print validProblems	cout << validProblems << endl ;
make integer n	int n ;
read n	cin >> n ;
create integer count = 0	int count = 0 ;
while n - - is not equal to 0	while ( n -- != 0 )
create ints x , y , and z	int x , y , z ;
read x , y , and z	cin >> x >> y >> z ;
if x + y + x is greater than 1 , increment count	if ( x + y + z > 1 ) count ++ ;
show count	cout << count << endl ;
define integer n	int n ;
read variable n from the input	cin >> n ;
declare new integer variable t = n	int t = n ;
create new integer variable g with value 0	int g = 0 ;
while t ! = 0 , decrement it and continue the loop	while ( t -- )
declare new array of integers a with size 3	int a [ 3 ] ;
read 3 elements from the input to a in a loop	for ( int i = 0 ; i < 3 ; i ++ ) { cin >> a [ i ] ; }
declare integer variable k = 0	int k = 0 ;
for integer i = 0 to 3 exclusive incrementing i	for ( int i = 0 ; i < 3 ; i ++ )
if a [ i ] is equal to 1 , increment k	if ( a [ i ] == 1 ) { k ++ ; }
if k > = 2 , change g to g + 1	if ( k >= 2 ) { g += 1 ; }
print g	cout << g << endl ;
declare integer n	int n ;
read n	cin >> n ;
declare integers a , b , c	int a , b , c ;
declare integer count = 0	int count = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a , b , c	cin >> a >> b >> c ;
if a + b + c is greater than or equal to 2 , increment count	if ( a + b + c >= 2 ) count ++ ;
print count , newline	cout << count << endl ;
create bool array snack of size 100009	bool snack [ 100009 ] ;
make int array arr of size 100000	int arr [ 100000 ] ;
create int array matrix of size 100000 with array of size 3	int matrix [ 100000 ] [ 3 ] ;
make integer count = 0	int count = 0 ;
make bool flag = false	bool flag = false ;
make ints n and x	int n , x ;
create char array s of size 1000	char s [ 1000 ] ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
make integer ones = 0	int ones = 0 ;
for i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
read x	cin >> x ;
if x is equal to 1 , add 1 to ones	if ( x == 1 ) ones ++ ;
if ones is greater than 1 , increment count	if ( ones > 1 ) count ++ ;
show count	cout << count << ' \n ' ;
declare integers n , p , v , t and count with count = 0	int n , p , v , t , count = 0 ;
read from the input to n	cin >> n ;
loop , decrementing n , while it is not 0	while ( n -- )
read from the input to p , v and t	cin >> p >> v >> t ;
if p = 1 and v = 1 or p = 1 and t = 1 or v = 1 and t = 1 , increment count by one	if ( p == 1 && v == 1 || p == 1 && t == 1 || v == 1 && t == 1 ) { count ++ ; }
print count to the standard output	cout << count << endl ;
declare integer variables n , i , j , d and e where e = 0 , and an array a with 3 elements	int n , a [ 3 ] , i , j , d , e = 0 ;
read n from the input	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
set the value of d to 0	d = 0 ;
increment j in a loop from 0 to 3 exclusive	for ( j = 0 ; j < 3 ; j ++ )
read user input to a [ j ]	cin >> a [ j ] ;
if a [ j ] is equal to 1 , increment d	if ( a [ j ] == 1 ) d ++ ;
if d > = 2 , increment e by one	if ( d >= 2 ) e ++ ;
print e	cout << e << endl ;
declare constant integer N = 2010	const int N = 2010 ;
declare constant long long MAX = 1e8 + 5	const long long MAX = 1e8 + 5 ;
declare integers n , a , ans , flag	int n , a , ans , flag ;
declare character array s size N	char s [ N ] ;
read n	cin >> n ;
let ans be 0	ans = 0 ;
while decrement n is true	while ( n -- )
let flag be 0	flag = 0 ;
for i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
read a	cin >> a ;
if a is true , increment flag	if ( a ) flag ++ ;
if flag is greater than or equal to 2 , increment ans	if ( flag >= 2 ) ans ++ ;
print ans , newline	cout << ans << endl ;
integer as t , k = 0	int t , k = 0 ;
read t	cin >> t ;
for i = 1 to less than or equal to t do the following	for ( int i = 1 ; i <= t ; i ++ )
integer as a , b , c	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
if the sum of a , b and c is greater than 1 then add one to k	if ( ( a + b + c ) > 1 ) k ++ ;
output k	cout << k << endl ;
integer as n	int n ;
read n	cin >> n ;
integer as x , y , z	int x , y , z ;
integer as sum = 0	int sum = 0 ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; i ++ )
read x , y , z	cin >> x >> y >> z ;
if is greater than or equal to 2 then add one to sum	if ( ( x + z + y ) >= 2 ) { sum ++ ; }
output sum	cout << sum << endl ;
make ints n , i , j , d , and e = 0 and int array a of size 3	int n , a [ 3 ] , i , j , d , e = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
set d to 0	d = 0 ;
for j = 0 to 3 exclusive	for ( j = 0 ; j < 3 ; j ++ )
read a [ j ]	cin >> a [ j ] ;
if a [ j ] is 1 , increment d	if ( a [ j ] == 1 ) d ++ ;
if d is greater than or equal to 2 , increment e	if ( d >= 2 ) e ++ ;
print e	cout << e << endl ;
n = int	int n ;
read n	cin >> n ;
ans = 0 = int	int ans = 0 ;
while decrementing n	while ( n -- )
a , b , c = int	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
is a + b + c > = 2 ? then increment ans	ans = ( a + b + c >= 2 ) ? ++ ans : ans ;
print ans	cout << ans << endl ;
declare integers n , temp	int n , temp ;
read n	cin >> n ;
declare integer count = 0	int count = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare integer votes = 0	int votes = 0 ;
for j = 1 to 3 inclusive	for ( int j = 1 ; j <= 3 ; j ++ )
read temp	cin >> temp ;
increment votes by temp	votes += temp ;
if votes is greater than or equal to 2 , increment count	if ( votes >= 2 ) count ++ ;
print count , newline	cout << count << endl ;
n , i , a , b , c , d be integers with d equals 0	int n , i , a , b , c , d = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read a , b , c	cin >> a >> b >> c ;
if a + b + c equals 2 or 3 , increase d by 1	if ( a + b + c == 2 || a + b + c == 3 ) d ++ ;
print d and endline	cout << d << endl ;
n and sum are integers with sum = 0	int n , sum = 0 ;
define new bools a , b and c	bool a , b , c ;
read standard input to n	cin >> n ;
start for loop from i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read from the input to a , b and c	cin >> a >> b >> c ;
if ( a and b ) or ( b and c ) or ( c and a ) , increment sum	if ( ( a and b ) or ( b and c ) or ( c and a ) ) { sum ++ ; }
print sum	cout << sum << endl ;
let n be a integer	int n ;
read n	cin >> n ;
the integer value of ctr = 0	int ctr = 0 ;
while n is decremented by 1	while ( n -- )
let x , y , z be integers	int x , y , z ;
read x , y , z	cin >> x >> y >> z ;
if x * y equals 1 or x * z equals 1 or y * z equals 1 , increment ctr by 1	if ( x * y == 1 || x * z == 1 || y * z == 1 ) ctr ++ ;
print ctr and newline	cout << ctr << endl ;
declare new int variables n , m and count1	int n , m , count1 ;
read variable n from the input	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
declare integer variable with name count with value 0	int count = 0 ;
for i from 0 to 3 exclusive incrementing i	for ( int i = 0 ; i < 3 ; i ++ )
read user input to m	cin >> m ;
if m is equal to 1 , increment count	if ( m == 1 ) count ++ ;
if count > = 2 , increment count1 by one	if ( count >= 2 ) count1 ++ ;
print count1	cout << count1 << endl ;
integer as n , temp	int n , temp ;
read n	cin >> n ;
integer as count = 0	int count = 0 ;
for i = 1 to less than or equal to n do the following	for ( int i = 1 ; i <= n ; i ++ )
integer as votes = 0	int votes = 0 ;
for j = 1 to less than or equal to 3 do the following	for ( int j = 1 ; j <= 3 ; j ++ )
read temp	cin >> temp ;
votes equals votes plus temp	votes += temp ;
if votes is greater than or equal to 2 then do the following add one to count	if ( votes >= 2 ) count ++ ;
output count	cout << count << endl ;
declare int variables n , Petya , Vasya , Tonya and number	int n , Petya , Vasya , Tonya , number ( 0 ) ;
read n	cin >> n ;
decrement n and loop further , while n ! = 0	while ( n -- )
read Petya , Vasya and Tonya from the user input	cin >> Petya >> Vasya >> Tonya ;
if Petya + Vasya + Tonya > = 2 , add 1 to number	if ( Petya + Vasya + Tonya >= 2 ) { number += 1 ; }
print number	cout << number << endl ;
declare integer n	int n ;
read n	cin >> n ;
declare integers i , j , k , cnt1 , cnt = 0	int i , j , k , cnt1 , cnt = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
let cnt1 be 0	cnt1 = 0 ;
for j = 0 to 3 exclusive	for ( j = 0 ; j < 3 ; j ++ )
read k	cin >> k ;
if k is 1 , increment cnt1	if ( k == 1 ) cnt1 ++ ;
if cnt1 is greater than 1 , increment cnt	if ( cnt1 > 1 ) cnt ++ ;
print cnt , newline	cout << cnt << endl ;
in function find taking an int x and an int array father	int find ( int x , int father [ ] )
return x if father [ x ] is x	if ( father [ x ] == x ) return x ;
set father [ x ] to find of father [ x ] and father then return father [ x ]	return father [ x ] = find ( father [ x ] , father ) ;
n = int	int n ;
read n	cin >> n ;
s = string	string s ;
read s	cin >> s ;
yes = int with yes = 0	int yes = 0 ;
for i = 0 to length of s - 1	for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )
if s [ i ] is not s [ i + 1 ]	if ( s [ i ] != s [ i + 1 ] )
set yes to 1	yes = 1 ;
print " YES "	cout << " YES\n " ;
print s [ i ] and s [ i + 1 ]	cout << s . substr ( i , 2 ) << " \n " ;
print " NO "	cout << " NO\n " ;
s = array of 1005 integers	char s [ 1005 ] ;
n = integer	int n ;
Read n	cin >> n ;
Read s	cin >> s ;
bj = integer with 1	int bj = 1 ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if s [ i + 1 ] is not s [ i ]	if ( s [ i + 1 ] != s [ i ] )
print YES and a new line	cout << " YES " << endl ;
print s [ i ] , s [ i + 1 ] and a new line	cout << s [ i ] << s [ i + 1 ] << endl ;
set bj to 0	bj = 0 ;
Terminate the loop	break ;
if bj is not 0 , then print NO and a new line	if ( bj ) { cout << " NO " << endl ; }
create int n	int n ;
read n	cin >> n ;
create string x	string x ;
read x	cin >> x ;
for i = 1 to size of x exclusive	for ( int i = 1 ; i < x . size ( ) ; i ++ )
if x [ i ] different from x [ i - 1 ]	if ( x [ i ] != x [ i - 1 ] )
print YES	cout << " YES " << endl ;
print x [ i - 1 ] and x [ i ]	cout << x [ i - 1 ] << x [ i ] << endl ;
print NO and a newline	cout << " NO " << endl ;
create int n	int n ;
read input to n	cin >> n ;
declare string g	string g ;
read g	cin >> g ;
for i from 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if g [ i ] ! = g [ i + 1 ]	if ( g [ i ] != g [ i + 1 ] )
print " YES "	cout << " YES " << endl ;
print substring of g from position i with length 2	cout << g . substr ( i , 2 ) << endl ;
print " NO "	cout << " NO " << endl ;
set maxn = 2e5 + 5	const int maxn = 2e5 + 5 ;
create long long array a of length maxn	long long a [ maxn ] ;
create long long b [ maxn ]	long long b [ maxn ] ;
let str be string	string str ;
create int n	int n ;
read n	cin >> n ;
read str	cin >> str ;
set flag to true	bool flag = true ;
for i = 1 to length of str	for ( int i = 1 ; i < str . length ( ) ; i ++ )
if str [ i - 1 ] different from str [ i ]	if ( str [ i - 1 ] != str [ i ] )
print YES	cout << " YES " << endl ;
flag = false	flag = false ;
print str [ i - 1 ] and str [ i ]	cout << str [ i - 1 ] << str [ i ] << endl ;
break the loop	break ;
if flaf different from 0 , print NO	if ( flag ) cout << " NO " << endl ;
create int n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; ++ i )
if s [ i ] different from s [ i + 1 ]	if ( s [ i ] != s [ i + 1 ] )
print YES	cout << " YES " << endl ;
print substring of s of length 2 starting from i	cout << s . substr ( i , 2 ) << endl ;
print NO and a newline	cout << " NO " << endl ;
inf function max taking two ints a and b and returning an int	int max ( int a , int b )
return a if it is greater than b else return b	return a > b ? a : b ;
n = int	int n ;
s = string	string s ;
loop while reading n	while ( cin >> n )
read s	cin >> s ;
if n equals 1	if ( n == 1 )
print " NO "	cout << " NO " << endl ;
continue loop	continue ;
for i = 1 to size of s	for ( int i = 1 ; i < s . size ( ) ; i ++ )
if s [ i ] does not equal s [ i - 1 ]	if ( s [ i ] != s [ i - 1 ] )
print " YES "	cout << " YES " << endl ;
print s [ i - 1 ] then s [ i ]	cout << s [ i - 1 ] << s [ i ] << endl ;
call exit with 0	exit ( 0 ) ;
print " NO "	cout << " NO " << endl ;
n = int	int n ;
str = string	string str ;
read n then str	cin >> n >> str ;
for i = 1 to n - 1 inclusive	for ( int i = 1 ; i <= n - 1 ; i ++ )
if str [ i ] is not s [ i - 1 ]	if ( str [ i ] != str [ i - 1 ] )
print " YES "	cout << " YES " << endl ;
print str [ i - 1 ] then str [ i ]	cout << str [ i - 1 ] << str [ i ] << endl ;
print " NO "	cout << " NO " << endl ;
n = int	int n ;
str = string	string str ;
read n then str	cin >> n >> str ;
for i = 1 to n	for ( int i = 1 ; i < n ; i ++ )
if str [ i ] is not str [ i - 1 ]	if ( str [ i ] != str [ i - 1 ] )
print " YES "	cout << " YES " << endl ;
print str [ i - 1 ] then str [ i ]	cout << str [ i - 1 ] << str [ i ] << endl ;
print " NO "	cout << " NO " << endl ;
str = string	string str ;
n = integer	int n ;
read n	cin >> n ;
read str	cin >> str ;
flag = integer with flag = 0	int flag = 0 ;
temp = integer	int temp ;
for i = 0 to str . length ( ) - 1 exclusive	for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ )
if str [ i ] is not str [ i + 1 ]	if ( str [ i ] != str [ i + 1 ] )
flag = 1	flag = 1 ;
temp = i	temp = i ;
break loop	break ;
if flag is 0	if ( flag == 0 )
print NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
print str [ temp ] and str [ temp + 1 ]	cout << str [ temp ] << str [ temp + 1 ] << endl ;
create int n	int n ;
create string s	string s ;
read n and s	cin >> n >> s ;
for i = 0 to length of s - 1 exclusive	for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )
if ss [ i ] different from s [ i + 1 ]	if ( s [ i ] != s [ i + 1 ] )
print YES , a newline , s [ i ] , s [ i + 1 ] and a newline	cout << " YES\n " << s [ i ] << s [ i + 1 ] << " \n " ;
print NO and a newline	cout << " NO\n " ;
create int n	int n ;
create string s	string s ;
read n and s	cin >> n >> s ;
for i = 0 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if s [ i ] different from s [ i - 1 ]	if ( s [ i ] != s [ i - 1 ] )
print YES and a newline , s [ i - 1 ] , s [ i ]	cout << " YES\n " << s [ i - 1 ] << s [ i ] << endl ;
print NO	cout << " NO " << endl ;
create integers t , cp , ck , with cp = 1 , ck = 0	int t , cp = 1 , ck = 0 ;
read t	cin >> t ;
create string s	string s ;
read s	cin >> s ;
if t is 1 , set cp to 0	if ( t == 1 ) cp = 0 ;
for i = 0 to t - 1 exclusive	for ( int i = 0 ; i < t - 1 ; i ++ )
if s [ i ] is not s [ i + 1 ]	if ( s [ i ] != s [ i + 1 ] )
set ck to 1	ck = 1 ;
print " YES " print newline	cout << " YES " << endl ;
print s [ i ] print s [ i + 1 ] print newline	cout << s [ i ] << s [ i + 1 ] << endl ;
break loop	break ;
else	else
set cp to 0	cp = 0 ;
if cp is 0 and ck is 0 , print " NO " print newline	if ( cp == 0 && ck == 0 ) cout << " NO " << endl ;
in function max that returns an integer and takes arguments a , b = integers	int max ( int a , int b )
return the greater of a and b	return a > b ? a : b ;
n = integer	int n ;
s = string	string s ;
while read n	while ( cin >> n )
read s	cin >> s ;
if n equals 1	if ( n == 1 )
print NO	cout << " NO " << endl ;
continue	continue ;
for i = 1 to the size of s exclusive	for ( int i = 1 ; i < s . size ( ) ; i ++ )
if s [ i ] does not equal s [ i - 1 ]	if ( s [ i ] != s [ i - 1 ] )
print YES	cout << " YES " << endl ;
print s [ i - 1 ] s [ i ]	cout << s [ i - 1 ] << s [ i ] << endl ;
exit program with success	exit ( 0 ) ;
print NO	cout << " NO " << endl ;
create integers N , x , i , with x = 0	int N , x = 0 , i ;
read N	cin >> N ;
create string s	string s ;
read s	cin >> s ;
for i = 0 to N - 1 exclusive	for ( i = 0 ; i < ( N - 1 ) ; i ++ )
if s [ i ] is not s [ i + 1 ]	if ( s [ i ] != s [ i + 1 ] )
print " YES " print newline	cout << " YES " << endl ;
print s [ i ] print s [ i + 1 ] print newline	cout << s [ i ] << s [ i + 1 ] << endl ;
increment x	x ++ ;
break loop	break ;
if x is 0 , print " NO " print newline	if ( x == 0 ) cout << " NO " << endl ;
declare solve with no arguments , returning void	void solve ( )
create long long n	long long n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
if n is 1	if ( n == 1 )
print " NO " print ' \ n '	cout << " NO " << ' \n ' ;
else	else
for i = 1 to n exclusive	for ( long long i = 1 ; i < n ; i ++ )
if s [ i ] is not s [ i - 1 ]	if ( s [ i ] != s [ i - 1 ] )
print " YES " print ' \ n '	cout << " YES " << ' \n ' ;
print s [ i - 1 ] print s [ i ] print ' \ n '	cout << s [ i - 1 ] << s [ i ] << ' \n ' ;
return from function	return ;
print " NO " print ' \ n '	cout << " NO " << ' \n ' ;
create long long TESTS with TESTS = 1	long long TESTS = 1 ;
while decrement TESTS , run solve	while ( TESTS -- ) { solve ( ) ; }
let MAX , mod be constant integers with MAX = 2e6 , mod = 998244353	const int MAX = 2e6 , mod = 998244353 ;
let n , m be integers	int n , m ;
read n , m	cin >> n >> m ;
if not n and not m	if ( ! n && ! m )
print NO and newline	puts ( " NO " ) ;
else if absolute of ( n - m ) < = 1	else if ( abs ( n - m ) <= 1 )
print YES and newline	puts ( " YES " ) ;
else do the following	else
print NO and newline	puts ( " NO " ) ;
a , b = integers	int a , b ;
Read a , b	cin >> a >> b ;
if a OR b and absolute value of ( a - b ) is less than or equal to 1	if ( ( a || b ) && abs ( a - b ) <= 1 )
print YES and a new line	cout << " YES\n " ;
else do the following	else
print NO and a new line	cout << " NO\n " ;
n , m = integers	int n , m ;
Read n	cin >> n ;
Read m	cin >> m ;
if n is 0 and m is 0	if ( n == 0 && m == 0 )
print NO and a new line	cout << " NO " << endl ;
else if absolute value of n - m is less than or equal to 1	else if ( abs ( n - m ) <= 1 )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
print YES and newline if absolute value of ( b - a ) < = 1 and ( b is not equal to 0 or a is not equal to 0 ) else print NO and newline	cout << ( abs ( b - a ) <= 1 && ( b != 0 || a != 0 ) ? " YES\n " : " NO\n " ) ;
declare constant integer MAX with value 100001	const int MAX = 100001 ;
declare integer arrays An and Bn with size MAX	int An [ MAX ] , Bn [ MAX ] ;
declare new int variables a and b	int a , b ;
read variables a and b from the input	cin >> a >> b ;
if abs ( a - b ) < = 1	if ( abs ( a - b ) <= 1 )
if a and b are both 0	if ( a == 0 && b == 0 )
print " NO "	cout << " NO " << endl ;
else	else
print " YES " to the output	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create ints n and m	int n , m ;
read n from the input	cin >> n ;
read user input to m	cin >> m ;
if n and m are 0	if ( n == 0 && m == 0 )
print " NO "	cout << " NO " << endl ;
else if abs ( n - m ) < = 1	else if ( abs ( n - m ) <= 1 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
N is a new constant integer = 2e5 + 12	const int N = 2e5 + 12 ;
new constant integer INF with value 1e9	const int INF = 1e9 ;
declare constant integer called MOD = 998244353	const int MOD = 998244353 ;
create new array of integers mas with N elements	int mas [ N ] ;
ind is a new set of unique integers	set < int > ind ;
declare new integer variables a and b	int a , b ;
read variables a and b from the input	cin >> a >> b ;
if abs ( a - b ) > 1 or a and b are both false	if ( abs ( a - b ) > 1 || ( ! a && ! b ) )
print " NO " to the standard output	cout << " NO " << endl ;
else	else
print " YES "	cout << " YES " << endl ;
n . m = int	int n , m ;
read n , m	cin >> n >> m ;
a = n - m = int	int a = n - m ;
if a is non zero negative the decrement a by a	if ( a < 0 ) a = - a ;
if a < = 1 and a isn ' 0 or m isn ' t 0	if ( a <= 1 && ( n || m ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
if absolute value of ( a - b ) < = 1 and ( a | b )	if ( abs ( a - b ) <= 1 && ( a | b ) )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
if a is equal to b and b is equal to 0	if ( a == 0 && b == 0 )
print NO	cout << " NO " << endl ;
otherwise	else
if abs is equal to 0 or abs is equal to 1	if ( abs ( a - b ) == 0 || abs ( a - b ) == 1 )
print YES	cout << " YES " << endl ;
otherwise	else
print NO	cout << " NO " << endl ;
create int a and b	int a , b ;
read a and b	cin >> a >> b ;
if abs ( a - b ) < = 1 and a or b different from 0	if ( ( abs ( a - b ) <= 1 ) && ( a != 0 || b != 0 ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create int a and b	int a , b ;
read a and b	cin >> a >> b ;
if a and b = 0	if ( a == 0 && b == 0 )
print NO	cout << " NO " << endl ;
else if and of ( a - b ) < 2	else if ( abs ( a - b ) < 2 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create int a and b	int a , b ;
read a and b	cin >> a >> b ;
if abs of b - a < = 1 and b or a different from 0	if ( abs ( b - a ) <= 1 && ( b != 0 || a != 0 ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
function esPosible ( get int a and b , return bool )	bool esPosible ( int a , int b )
if a is 0 and b is 0 return false	if ( a == 0 && b == 0 ) return false ;
if a - b > 1 return false	if ( a - b > 1 ) return false ;
if b - a > 1 return false	if ( b - a > 1 ) return false ;
return true	return true ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
if esPosible ( a , b )	if ( esPosible ( a , b ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
nEven , nOdd = integers	int nEven , nOdd ;
read nEven , nOdd	cin >> nOdd >> nEven ;
if ( nOdd is 0 and nEven is 0 )	if ( nOdd == 0 && nEven == 0 )
print NO	cout << " NO\n " ;
if ( nOdd - nEven > = - 1 and nOdd - nEven < = 1 )	if ( nOdd - nEven >= - 1 && nOdd - nEven <= 1 )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
declare new int variables a , b and x	int a , b , x ;
read user input to a and b	cin >> a >> b ;
if a or b = 0	if ( a == 0 && b == 0 )
print " NO "	cout << " NO " << endl ;
else	else
assign the absolute value of a - b to x	x = abs ( a - b ) ;
if x is 1 or 0	if ( x == 1 || x == 0 )
print " YES " to the standard output	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
let a , b be integers	int a , b ;
read a , b	cin >> a >> b ;
print YES and newline if absolute value of ( a - b ) < = 1 and a + b is greater than 0 else print NO and newline	cout << ( abs ( a - b ) <= 1 && a + b > 0 ? " YES\n " : " NO\n " ) ;
declare new int variables a and b	int a , b ;
read from the input to a and b	cin >> a >> b ;
if ( a = b or abs ( a - b ) = 1 ) and ( a and b are not 0 )	if ( ( a == b || abs ( a - b ) == 1 ) && ( a != 0 || b != 0 ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO " to the standard output	cout << " NO " << endl ;
a , b = integers	int a , b ;
Read a , b	cin >> a >> b ;
if absolute value of a - b is less than or equal to 1 and a is greater than 0 OR b is greater than 0	if ( abs ( a - b ) <= 1 && ( a > 0 || b > 0 ) )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
ev , od = int	int ev , od ;
loop while reading ev then od	while ( cin >> ev >> od )
if fabs of ( ev - od ) < = 1 and ( ev is not 0 or od is not 0 )	if ( fabs ( ev - od ) <= 1 && ( ev != 0 || od != 0 ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
a , b = int	int a , b ;
read a then b	cin >> a >> b ;
if not a and not b	if ( ! a && ! b )
print " NO "	cout << " NO\n " ;
else if absolute of a - b < = 1	else if ( abs ( a - b ) <= 1 )
print " YES "	cout << " YES\n " ;
else	else
print " NO "	cout << " NO\n " ;
n , m = integers	int n , m ;
while reading values n , m	while ( cin >> n >> m )
if n is 0 and m is 0	if ( n == 0 && m == 0 )
print NO and a new line	cout << " NO " << endl ;
else if absolute value of n - m is less than or equal to 1	else if ( abs ( n - m ) <= 1 )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
a , b = int	int a , b ;
read a and b	cin >> a >> b ;
if a = b and abs of a - b = 1 then	if ( a == b || abs ( a - b ) == 1 )
if a or b are both not 0	if ( a != 0 || b != 0 )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
else	else
print NO	cout << " NO " << endl ;
declare new integer variables a and b	int a , b ;
read a and b from the user input	cin >> a >> b ;
print " YES " if absolute value of ( a - b ) < = 1 and a + b ! = 0 or " NO " otherwise	cout << ( abs ( a - b ) <= 1 && a + b ? " YES " : " NO " ) << endl ;
create new integers a and b	int a , b ;
read variables a and b from the input	cin >> a >> b ;
if absolute value of a - b = 1	if ( abs ( a - b ) == 1 )
print " YES " to the standard output	cout << " YES " << endl ;
else if a = b and ( a and b ! = 0 )	else if ( a == b && ( a != 0 && b != 0 ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO " to the output stream	cout << " NO " << endl ;
a , b = short int	short int a , b ;
read a , b	cin >> a >> b ;
if a + b > 0 and abs ( a - b ) < = 1	if ( a + b > 0 && abs ( a - b ) <= 1 )
print YES	cout << " YES " << ' \n ' ;
else	else
print NO	cout << " NO " << ' \n ' ;
n = long long	long long n ;
read n	cin >> n ;
v = long long vector of size n	vector < long long > v ( n ) ;
read the first n elements of v	for ( long long i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;
ans = long long vector	vector < long long > ans ;
for long long i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
x = long long = v at i	long long x = v [ i ] ;
smallasn = 0 = lon glong	long long smallans = 0 ;
j = 0 = long long	long long j = 0 ;
for j = = to n exclusive	for ( j = 0 ; i + j < n ; j ++ )
if v [ i + j ] = x	if ( v [ i + j ] == x )
increment smallans	smallans ++ ;
else	else
exit loop	break ;
increment i by j - 1	i = i + j - 1 ;
push back smallans into ans	ans . push_back ( smallans ) ;
final = 0 = long long	long long final = 0 ;
for long long i = 0 to size of ans , increment final by ( ans [ i ] * ( ans [ i ] + 1 ) ) / 2	for ( long long i = 0 ; i < ans . size ( ) ; i ++ ) { final = final + ( ans [ i ] * ( ans [ i ] + 1 ) ) / 2 ; }
print final	cout << final << " \n " ;
make const long long int INF = ( 1ll < < 62 ) - 1	const long long INF = ( 1ll << 62 ) - 1 ;
create const int M = 1e5 + 5	const int M = 1e5 + 5 ;
create long long int array ar of size 100005	long long ar [ 100005 ] ;
make long long ints cnt = 1 , tot , and res	long long cnt = 1 , tot , res ;
make integer n	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read ar [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if ar [ i ] is equal to ar [ i - 1 ]	if ( ar [ i ] == ar [ i - 1 ] )
increment cnt	cnt ++ ;
else do	else
set tot to ( cnt * ( cnt + 1 ) ) / 2	tot = ( cnt * ( cnt + 1 ) ) / 2 ;
set res to res + tot	res += tot ;
set cnt to 1	cnt = 1 ;
add ( cnt * ( cnt + 1 ) ) / 2 to res	res += ( cnt * ( cnt + 1 ) ) / 2 ;
show res	cout << res << endl ;
n = int	int n ;
read n	cin >> n ;
a = array of n int	int a [ n ] ;
for i = 0 to n exclusive read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
v = vector of long long	vector < long long > v ;
cnt = 1	int cnt = 1 ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if a [ i ] is a [ i - 1 ]	if ( a [ i ] == a [ i - 1 ] )
increment cnt	cnt ++ ;
else	else
add cnt at end of v	v . push_back ( cnt ) ;
cnt = 1	cnt = 1 ;
add cnt at end of v	v . push_back ( cnt ) ;
ans = 0	long long ans = 0 ;
for i = 0 to size of v exclusive add v [ i ] * ( v [ i ] + 1 ) / 2 to ans	for ( int i = 0 ; i < v . size ( ) ; i ++ ) { ans += ( v [ i ] * ( v [ i ] + 1 ) / 2 ) ; }
print ans	cout << ans << endl ;
s = stack of int	stack < int > s ;
ans , cnt = 0	long long ans = 0 , cnt = 0 ;
n , x = int	int n , x ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
cnt = 0	cnt = 0 ;
while s it not empty and first item of s is not x	while ( ! s . empty ( ) && s . top ( ) != x )
increment cnt	cnt ++ ;
pop first item of s	s . pop ( ) ;
if s is empty or first item of s is x push x into s	if ( s . empty ( ) || s . top ( ) == x ) s . push ( x ) ;
add ( cnt - 1 ) * cnt / 2 to ans	ans += ( cnt - 1 ) * cnt / 2 ;
cnt = 0	cnt = 0 ;
while s is not empty	while ( ! s . empty ( ) )
increment cnt	cnt ++ ;
pop first item of s	s . pop ( ) ;
add ( cnt - 1 ) * cnt / 2 to ans	ans += ( cnt - 1 ) * cnt / 2 ;
add n to ans	ans += n ;
print ans	cout << ans << endl ;
create long long ints n , sum = 0 , and cnt = 1 and int array a of size 100005	long long n , a [ 100005 ] , sum = 0 , cnt = 1 ;
read n	cin >> n ;
for i = 1 to n	for ( long long i = 1 ; i <= n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ 1 ] is equal to 0 , set a [ 0 ] to 1	if ( a [ 1 ] == 0 ) a [ 0 ] = 1 ;
if a [ i ] is equal to a [ i - 1 ]	if ( a [ i ] == a [ i - 1 ] )
set sum to sum + cnt	sum += cnt ;
increment cnt	cnt ++ ;
else do	else
set cnt to 1	cnt = 1 ;
set n to n + sum	n = n + sum ;
print n	cout << n << endl ;
make long long int n	long long n ;
read n	cin >> n ;
create long long vector v of size n	vector < long long > v ( n ) ;
for i = 0 to n exclusive , read v [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }
create long long j = i	long long j = 1 ;
make long long int ans = n	long long ans = n ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; )
set j to i + 1	j = i + 1 ;
while j is less than n and v [ j ] is equal to v [ i ]	while ( j < n && v [ j ] == v [ i ] ) { j ++ ; }
make long long lon = j - i	long long lon = j - i ;
set ans to ans + long * ( long - 1 ) / 2	ans += lon * ( lon - 1 ) / 2 ;
set i to j	i = j ;
show ans	cout << ans << " \n " ;
abs = long long function taking long long , long long	long long abs ( long long , long long ) ;
in void function solve	void solve ( )
n = long long	long long n ;
read n	cin >> n ;
a [ n ] , ans = 0 be long long	long long a [ n ] , ans = 0 ;
read the first n elements of a	for ( long long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
t = 1 = long long	long long t = 1 ;
for long long i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
if i = n - 1	if ( i == n - 1 )
increment ans	ans ++ ;
else	else
if a [ i ] = a [ i + 1 ]	if ( a [ i ] == a [ i + 1 ] )
if i = n - 2	if ( i == n - 2 )
increment t	t ++ ;
increment ans by t * ( t + 1 ) / 2	ans += ( t * ( t + 1 ) ) / 2 ;
exit loop	break ;
increment t	t ++ ;
else	else
increment ans by	ans += ( t * ( t + 1 ) ) / 2 ;
t * ( t + 1 ) / 2	t = 1 ;
print ans	cout << ans << " \n " ;
TESTS = 1 = long long	long long TESTS = 1 ;
while decrementing TESTS , call solve	while ( TESTS -- ) { solve ( ) ; }
in long long function abs taking long long a and long long b	long long abs ( long long a , long long b )
if a > b	if ( a > b )
return a - b	return a - b ;
else	else
return b - a	return b - a ;
n , m , i , j , ans , c = long long int , a = array of 100005 long long int	long long int n , m , i , j , a [ 100005 ] , ans , c ;
read n	cin >> n ;
ans = n	ans = n ;
a [ n ] = 1000000005	a [ n ] = 1000000005 ;
for i = 0 to n exclusive read a [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
c = 1	c = 1 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is a [ i + 1 ]	if ( a [ i ] == a [ i + 1 ] )
increment c	c ++ ;
else	else
add c * ( c - 1 ) / 2 to ans	ans = ans + ( c * ( c - 1 ) ) / 2 ;
c = 1	c = 1 ;
print ans	cout << ans << endl ;
define empty function boost	void boost ( ) { }
n = int	int n ;
read n	cin >> n ;
arr = long long int array of size n	long long int arr [ n ] ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
ans = long long int with ans = 0	long long int ans = 0 ;
till = long long int with till = 0	long long int till = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if ( i + 1 < n ) and ( arr [ i ] is arr [ i + 1 ] )	if ( ( i + 1 < n ) && ( arr [ i ] == arr [ i + 1 ] ) )
increment till	till ++ ;
else	else
increment till	till ++ ;
increment ans by ( ( till * ( till + 1ll ) ) / 2ll )	ans += ( ( till * ( till + 1ll ) ) / 2ll ) ;
set till to 0	till = 0 ;
print ans	cout << ans << endl ;
new long long variable n	long long n ;
read n	cin >> n ;
create new vector of long longs v with size n filled with 0	vector < long long > v ( n , 0 ) ;
declare vector of long longs sum with n elements filled with 0	vector < long long > sum ( n , 0 ) ;
in a for loop , change i from 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read standard input to v [ i ]	cin >> v [ i ] ;
if i > 0 and v [ i - 1 ] = v [ i ] , change sum [ i ] to the sum of sum [ i ] and sum [ i - 1 ]	if ( i > 0 && v [ i - 1 ] == v [ i ] ) sum [ i ] += sum [ i - 1 ] ;
increment sum [ i ] by one	sum [ i ] ++ ;
create long long variable with name ans = 0	long long ans = 0 ;
start for loop from i = 0 to n exclusive incrementing i	for ( long long i = 0 ; i < n ; i ++ )
increment ans	ans ++ ;
if i > 0 and v [ i ] = v [ i - 1 ] , change ans to ans + sum [ i - 1 ]	if ( i > 0 && v [ i ] == v [ i - 1 ] ) { ans += sum [ i - 1 ] ; }
print ans	cout << ans << endl ;
declare constant integer INF with value 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
define an arrays of long longs a and b with 100000 + 5 elements	long long a [ 100000 + 5 ] , b [ 100000 + 5 ] ;
declare long long variables i , j , k and l with l = 0	long long i , j , k , l = 0 ;
declare new long longs n and m	long long n , m ;
read user input to n	cin >> n ;
read input to n new elements of a in a loop	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
change k to 0	k = 0 ;
declare new integer variable cou = 0	int cou = 0 ;
in a for loop , change i from 1 to n exclusive incrementing i	for ( i = 1 ; i < n ; i ++ )
if a [ i ] = a [ k ]	if ( a [ i ] == a [ k ] )
increment cou by one	cou ++ ;
else	else
if cou is true , change the value of b [ l ] to cou + 1 and increment l	if ( cou ) b [ l ++ ] = cou + 1 ;
assign the new value = 0 to cou	cou = 0 ;
change k to i	k = i ;
if i is equal to n - 1	if ( i == n - 1 )
if cou is true , set b [ l ] to cou + 1 and increment l	if ( cou ) b [ l ++ ] = cou + 1 ;
declare new long long variable s = n	long long s = n ;
start for loop from i = 0 to l exclusive , changing s to the sum of s and b [ i ] * ( b [ i ] - 1 ) / 2 on each loop	for ( i = 0 ; i < l ; i ++ ) s += b [ i ] * ( b [ i ] - 1 ) / 2 ;
print s	cout << s << endl ;
Fast_Read_Out is a void function	void Fast_Read_Out ( ) { }
void function Random	void Random ( )
seed is a new unsigned integer variable	unsigned int seed ;
asm ( " rdtsc " : " = A " ( seed ) )	asm ( " rdtsc " : " =A " ( seed ) ) ;
initialize random number generator with the value of seed	srand ( seed ) ;
unsigned integer function Time	unsigned int Time ( )
create new unsigned integer variable time = clock ( ) / 1000 . 00	unsigned int time = clock ( ) / 1000.00 ;
return time	return time ;
create constant integer inf with value 1e9 + 123	const int inf = int ( 1e9 ) + 123 ;
assign value 1e5 + 123 to the new constant integer N	const int N = int ( 1e5 ) + 123 ;
s is a set of integers	set < int > s ;
let d be a map from integers to integers	map < int , int > d ;
a is a new array of integers with N elements	int a [ N ] ;
Calc is a long long function with int argument x	long long Calc ( int x )
return ( x squared - x ) / 2	return ( x * x - x ) / 2 ;
call Random ( )	Random ( ) ;
call Fast_Read_Out ( )	Fast_Read_Out ( ) ;
declare integer n	int n ;
read from the input to n	cin >> n ;
read n elements into a starting from the index 1	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
declare new long long variables ans and res = 0	long long ans = 0 , res = 0 ;
for i from 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if a [ i ] = a [ i - 1 ]	if ( a [ i ] == a [ i - 1 ] )
increment res	res ++ ;
change ans to the sum of ans and res	ans += res ;
else	else
change the value of res to 0	res = 0 ;
print ans + n to the standard output	cout << ans + n << endl ;
n = integer	int n ;
s = string	string s ;
read n and s	cin >> n >> s ;
ans = string with value of " "	string ans = "  " ;
i = integer	int i ;
flag = integer with value of 1	int flag = 1 ;
for i = 0 to n - 1 exclusive	for ( i = 0 ; i < n - 1 ; i ++ )
if not flag break	if ( ! flag ) break ;
if s [ i + 1 ] is greater than or equal to s [ i ]	if ( s [ i + 1 ] >= s [ i ] )
increase ans by s [ i ]	ans += s [ i ] ;
else	else
set flag to 0	flag = 0 ;
if not flag	if ( ! flag )
for i to n exclusive increase ans by s [ i ]	for ( ; i < n ; i ++ ) { ans += s [ i ] ; }
print ans	cout << ans << endl ;
let n be a integer	int n ;
let s be a string	string s ;
let t , flag be integers with flag value as 0	int t , flag = 0 ;
read n , s	cin >> n >> s ;
for ( i = 0 to s . length ( ) ) , increase i value by 1	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if ( ith element in array s is greater than [ i + 1 ] th element of array s )	if ( s [ i ] > s [ i + 1 ] )
flag value is equal to 1	flag = 1 ;
t is equal to i	t = i ;
stop	break ;
if ( flag is equal to 0 )	if ( flag == 0 )
for ( integer i = 0 to s . length ( ) - 1 ) , print ith element in array s	for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { cout << s [ i ] ; }
print endline	cout << endl ;
else do the following	else
for ( integer i = 0 to s . length ( ) )	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if ( i is equal to t ) , proceed to next	if ( i == t ) continue ;
print ith element of array s	cout << s [ i ] ;
print newline	cout << endl ;
integer function find with integer arguments x and father	int find ( int x , int father [ ] )
if father [ x ] = x return x	if ( father [ x ] == x ) return x ;
return father [ x ] = find ( father [ x ] , father )	return father [ x ] = find ( father [ x ] , father ) ;
declare integer called n	int n ;
read n	cin >> n ;
declare string called s	string s ;
read s	cin >> s ;
let pos be integer = 0	int pos = 0 ;
for integer i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if s [ i ] is less than s [ i - 1 ]	if ( s [ i ] < s [ i - 1 ] )
set value of pos to i - 1	pos = i - 1 ;
break the loop	break ;
else	else
set value of pos to i	pos = i ;
erase 1 character at pos from s	s . erase ( pos , 1 ) ;
print s and " \ n "	cout << s << " \n " ;
create integer n	int n ;
create string s	string s ;
read n read s	cin >> n >> s ;
create integer pos with pos = n - 1	int pos = n - 1 ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; ++ i )
if s [ i ] is greater than s [ i + 1 ]	if ( s [ i ] > s [ i + 1 ] )
set pos to i	pos = i ;
break loop	break ;
print substring of s from 0 to pos + substring of s from pos + 1 print newline	cout << s . substr ( 0 , pos ) + s . substr ( pos + 1 ) << endl ;
declare inline MAX2 with long long a , long long integer b as arguments , returning long long	inline long long MAX2 ( long long a , long long int b )
return a if a is greater than b , else b , from function	return ( a ) > ( b ) ? ( a ) : ( b ) ;
declare inline MAX3 with long longs a , b , c as arguments , returning long long	inline long long MAX3 ( long long a , long long b , long long c )
return ( a ) is greater than ( b ) ternary ( ( a ) is greater than ( c ) ternary ( a ) : ( c ) ) : ( ( b ) is greater than ( c ) ternary ( b ) : ( c ) ) from function	return ( a ) > ( b ) ? ( ( a ) > ( c ) ? ( a ) : ( c ) ) : ( ( b ) > ( c ) ? ( b ) : ( c ) ) ;
declare inline MIN2 with long longs a , b as arguments , returning long long	inline long long MIN2 ( long long a , long long b )
return a if a is greater than b , else b , from function	return ( a ) < ( b ) ? ( a ) : ( b ) ;
declare inline MIN3 with long longs a , b , c as arguments , returning long long	inline long long MIN3 ( long long a , long long b , long long c )
( a ) is less than ( b ) ternary ( ( a ) is less than ( c ) ternary ( a ) : ( c ) ) : ( ( b ) is less than ( c ) ternary ( b ) : ( c ) )	return ( a ) < ( b ) ? ( ( a ) < ( c ) ? ( a ) : ( c ) ) : ( ( b ) < ( c ) ? ( b ) : ( c ) ) ;
create integer n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
create integers temp , result , with result = n - 1	int temp , result = n - 1 ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
set temp to integer casted s [ i ] - integer casted s [ i - 1 ]	temp = ( int ) s [ i ] - ( int ) s [ i - 1 ] ;
if temp is less than 0	if ( temp < 0 )
set result to i - 1	result = i - 1 ;
break loop	break ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if i is not result , print s [ i ]	if ( i != result ) cout << s [ i ] ;
print newline	cout << endl ;
create long long n	long long n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
create long long check = n - 1	long long check = n - 1 ;
for long long i = 0 to n - 1 exclusive	for ( long long i = 0 ; i < n - 1 ; i ++ )
if s [ i ] is greater than s [ i + 1 ]	if ( s [ i ] > s [ i + 1 ] )
assign value of i to check	check = i ;
stop the loop	break ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
if check ! = i , print s [ i ]	if ( check != i ) cout << s [ i ] ;
print new line	cout << endl ;
set stdout output decimal precision to 10	cout . precision ( 10 ) ;
set stdout floatfield format flag to fixed	cout << fixed ;
declare long long variable n	long long n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
declare long long variable pos = n - 1	long long pos = n - 1 ;
for i = 1 to n exclusive	for ( long long i = 1 ; i < n ; i ++ )
if s [ i ] is less than s [ i - 1 ] , set pos to min of pos and i - 1	if ( s [ i ] < s [ i - 1 ] ) { pos = min ( pos , i - 1 ) ; }
remove 1 character at position pos from s	s . erase ( pos , 1 ) ;
print s	cout << s << endl ;
create integer t	int t ;
read t	cin >> t ;
create string s	string s ;
read s	cin >> s ;
for i = 0 to t exclusive	for ( int i = 0 ; i < t ; i ++ )
if s [ i ] is greater than s [ i + 1 ]	if ( s [ i ] > s [ i + 1 ] )
set s [ i ] to 1	s [ i ] = 1 ;
break loop	break ;
for i = 0 to t exclusive	for ( int i = 0 ; i < t ; i ++ )
if s [ i ] is greater than or equal to ' a ' and s [ i ] is less than or equal to ' z ' , print s [ i ]	if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) cout << s [ i ] ;
print newline	cout << endl ;
s = string	string s ;
f = bool set f = 1	bool f = 1 ;
n = integer	int n ;
read n , s	cin >> n >> s ;
for i = 0 to ( n - 1 ) exclusive	for ( int i = 0 ; i < int ( n - 1 ) ; i ++ )
if s [ i ] > s [ i + 1 ] and f > 0	if ( s [ i ] > s [ i + 1 ] && f )
f = 0	f = 0 ;
else	else
print s [ i ]	cout << s [ i ] ;
if f = 0 print s [ n - 1 ]	if ( ! f ) cout << s [ n - 1 ] ;
print newline	cout << " \n " ;
declare integer variable n	int n ;
declare string variable ss	string ss ;
read n and ss	cin >> n >> ss ;
declare integer variable in = - 1	int in = - 1 ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if ss [ i ] is greater than ss [ i + 1 ]	if ( ss [ i ] > ss [ i + 1 ] )
assign value of i to in	in = i ;
stop the loop	break ;
decrement n if in = - 1	if ( in == - 1 ) n -- ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if i ! = in print ss [ i ]	if ( i != in ) cout << ss [ i ] ;
print new line	cout << endl ;
n = integer	int n ;
let s be a string	string s ;
read n and s	cin >> n >> s ;
set pos to n - 1	int pos = n - 1 ;
for i = 0 to n - 1 exclusive incrementing by 1 at the start of each iteration	for ( int i = 0 ; i < n - 1 ; ++ i )
if s [ i ] is greater than s [ i + 1 ]	if ( s [ i ] > s [ i + 1 ] )
assign i to pos	pos = i ;
break	break ;
print s . substr ( 0 , pos ) + s . substr ( pos + 1 )	cout << s . substr ( 0 , pos ) + s . substr ( pos + 1 ) << endl ;
declare integer n	int n ;
declare string str	string str ;
read n and str	cin >> n >> str ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if str [ i ] is greater than str [ i + 1 ]	if ( str [ i ] > str [ i + 1 ] )
remove 1 character from position i from str	str . erase ( i , 1 ) ;
break the loop	break ;
print str	cout << str << endl ;
declare integer variable n	int n ;
create string en	string en ;
read n	cin >> n ;
read en	cin >> en ;
declare integer variables i and j	int i , j ;
for i = 0 to n - 1 exclusive	for ( i = 0 ; i < n - 1 ; i ++ )
if en [ i ] is greater than en [ i + 1 ]	if ( en [ i ] > en [ i + 1 ] )
print i elements of en	for ( j = 0 ; j < i ; j ++ ) cout << en [ j ] ;
for j = i + 1 to n exclusive print en [ j ]	for ( j = i + 1 ; j < n ; j ++ ) cout << en [ j ] ;
break the loop	break ;
if i = n - 1	if ( i == n - 1 )
print i elements of en	for ( j = 0 ; j < i ; j ++ ) cout << en [ j ] ;
print new line	cout << endl ;
declare integer n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
create boolean p = 0	bool p = 0 ;
for integer i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if s [ i ] is greater than s [ i + 1 ]	if ( s [ i ] > s [ i + 1 ] )
p = 1	p = 1 ;
break the loop	break ;
if p is 0	if ( ! p )
for integer i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << s [ i ] ; }
print new line	cout << endl ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if s [ i ] is greater than s [ i + 1 ]	if ( s [ i ] > s [ i + 1 ] )
for integer j = i + 1 to n exclusive print s [ j ]	for ( int j = i + 1 ; j < n ; j ++ ) { cout << s [ j ] ; }
print new line	cout << endl ;
print s [ i ]	cout << s [ i ] ;
declare string s	string s ;
declare integer n	int n ;
read s	cin >> s ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] is ' 1 '	if ( s [ i ] == ' 1 ' )
for j = i to size of s exclusive	for ( int j = i ; j < s . size ( ) ; j ++ )
if s [ j ] is ' 0 ' , increment n	if ( s [ j ] == ' 0 ' ) { n ++ ; }
if n is greater than or equal to 6	if ( n >= 6 )
print " yes " , newline	cout << " yes " << endl ;
else	else
print " no " , newline	cout << " no " << endl ;
print " no " , newline	cout << " no " << endl ;
s = string array	string s ;
read s	cin >> s ;
integer as c = 0 , k = 0	int c = 0 , k = 0 ;
ans = no = string array	string ans = " no " ;
reverse the sequence of string s	reverse ( s . begin ( ) , s . end ( ) ) ;
if s . length is less than 7 then do the following	if ( s . length ( ) < 7 )
output ans	cout << ans << endl ;
else	else
for i = 0 to less than s . length ( ) do the following	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is 0 then do the following	if ( s [ i ] == ' 0 ' )
add one to c	c ++ ;
if c is 6 then do the following	if ( c == 6 )
set k to i	k = i ;
break	break ;
if k is not equal to 0 then do the following	if ( k != 0 )
for j = k + 1 to less than s . length ( ) do the following	for ( int j = k + 1 ; j < s . length ( ) ; j ++ )
if s [ j ] is 1 then do the following	if ( s [ j ] == ' 1 ' )
set ans to yes	ans = " yes " ;
break	break ;
else	else
continue	continue ;
output ans	cout << ans << endl ;
declare string s	string s ;
read s	cin >> s ;
declare string ans = " no "	string ans = " no " ;
if size of s is less than 7	if ( s . size ( ) < 7 )
print ans and newline	cout << ans << endl ;
else	else
declare integer k = 0	int k = 0 ;
reverse sort from beginning of s to end of s	reverse ( s . begin ( ) , s . end ( ) ) ;
declare integer count = 0 , i = 0	int count = 0 , i = 0 ;
while count is less than 6 and i is less than size of s	while ( count < 6 && i < s . size ( ) )
if s [ i ] is ' 0 '	if ( s [ i ] == ' 0 ' )
increment count	count ++ ;
let k be i	k = i ;
increment i	i ++ ;
if k is not 0 and count is 6	if ( k != 0 && count == 6 )
for i = k + 1 to size of s exclusive	for ( int i = k + 1 ; i < s . size ( ) ; i ++ )
if s [ i ] is ' 1 '	if ( s [ i ] == ' 1 ' )
let ans be " yes '	ans = " yes " ;
end loop	break ;
else	else
end current loop	continue ;
else	else
let ans be " no "	ans = " no " ;
print ans and newline	cout << ans << endl ;
make char array a of size 101	char a [ 101 ] ;
read a	cin >> a ;
make ints x = 0 and y = 0	int x = 0 , y = 0 ;
for i = 0 while a [ i ] is not ' \ 0 '	for ( int i = 0 ; a [ i ] != ' \0 ' ; i ++ )
make integer flag = 0	int flag = 0 ;
if a [ i ] is equal to ' 1 '	if ( a [ i ] == ' 1 ' )
for j = i + 1 while a [ j ] is not ' \ 0 '	for ( int j = i + 1 ; a [ j ] != ' \0 ' ; j ++ )
if a [ j ] is equal to ' 0 ' , increment x	if ( a [ j ] == ' 0 ' ) x ++ ;
if x is equal to 6 , break loop	if ( x == 6 ) break ;
set flag to 1	flag = 1 ;
if flag is equal to 1 , break loop	if ( flag == 1 ) { break ; }
is x is greater than or equal to 6	if ( x >= 6 )
print " yes "	cout << " yes " << endl ;
else	else
output " no "	cout << " no " << endl ;
declare string s	string s ;
while read s is true	while ( cin >> s )
while s [ 0 ] is ' 0 ' , remove from 0 to 1 from s	while ( s [ 0 ] == ' 0 ' ) s . erase ( 0 , 1 ) ;
while bitwise not first index of " 1 " in s is true , remove from first index of " 1 " in s to 1 in s	while ( ~ s . find ( " 1 " ) ) s . erase ( s . find ( " 1 " ) , 1 ) ;
if size of s is greater than or equal to 6	if ( s . size ( ) >= 6 )
print " yes " and newline	cout << " yes " << endl ;
else	else
print " no " and newline	cout << " no " << endl ;
create new string s	string s ;
read standard input to s	cin >> s ;
define integer n	int n = s . size ( ) ;
in a for loop , change i from 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
declare new integer called c = 0	int c = 0 ;
if s [ i ] - ' 0 ' is true	if ( s [ i ] - ' 0 ' )
for integer j = i + 1 to n exclusive incrementing j	for ( int j = i + 1 ; j < n ; j ++ )
if s [ j ] - ' 0 ' = 0 , increment c by one	if ( s [ j ] - ' 0 ' == 0 ) c ++ ;
if c > = 6	if ( c >= 6 )
print " yes "	cout << " yes " << endl ;
print " no " to the standard output	cout << " no " << endl ;
create character variable	char a ;
integer as n , b = 0	int n , b = 0 ;
set a to getchar ( )	a = getchar ( ) ;
if a is not equal to \ n then do the following	while ( a != ' \n ' )
set ( a = 1 ) and ( b to 1 )	( a == ' 1 ' ) && ( b = 1 ) ;
if b and a is 0 then do the following n + +	if ( b && a == ' 0 ' ) n ++ ;
set a to getchar ( )	a = getchar ( ) ;
if n is greater than or equal to 6 then return write yes to stdout	if ( n >= 6 ) return puts ( " yes " ) , 0 ;
write no to stdout	puts ( " no " ) ;
s = string	string s ;
read s	cin >> s ;
first_one = - 1	long long first_one = - 1 ;
for i = 0 to length of s exclusive	for ( long long i = 0 ; i < s . length ( ) ; ++ i )
if s [ i ] is ' 1 '	if ( s [ i ] == ' 1 ' )
first_one = i	first_one = i ;
break	break ;
if first_one is - 1	if ( first_one == - 1 )
print " no "	cout << " no\n " ;
total = 0	long long total = 0 ;
for i = first_one + 1 to length of s exclusive	for ( long long i = first_one + 1 ; i < s . length ( ) ; ++ i )
if s [ i ] is ' 0 ' increment total	if ( s [ i ] == ' 0 ' ) { total ++ ; }
if total > = 6	if ( total >= 6 )
print " yes "	cout << " yes\n " ;
else	else
print " no "	cout << " no\n " ;
create string s	string s ;
read from the input to s	cin >> s ;
define new integers len = length of s , ipos and cnt = 0	int len = s . length ( ) , ipos , cnt = 0 ;
start for loop from ipos = 0 to len exclusive	for ( ipos = 0 ; ipos < len ; ++ ipos )
if s [ ipos ] is equal to ' 1 ' , stop the loop	if ( s [ ipos ] == ' 1 ' ) break ;
if ipos = len , return puts ( " no " ) , 0	if ( ipos == len ) return puts ( " no " ) , 0 ;
increment ipos and start a loop , while ipos < len , incrementing ipos by 1 on each iteration	for ( ++ ipos ; ipos < len ; ++ ipos )
increment cnt if s [ ipos ] = ' 0 '	if ( s [ ipos ] == ' 0 ' ) ++ cnt ;
print " yes " if nt > = 6 or " no " otherwise	puts ( ( cnt >= 6 ) ? " yes " : " no " ) ;
a , n = integers	int a , n ;
p = character	char p ;
while reading p	while ( cin >> p )
if a is equal to 0	if ( a == 0 )
if p is equal to 1 , then set a to 1	if ( p == ' 1 ' ) a = 1 ;
else do the following	else
if p is equal to 0 , then increment n	if ( p == ' 0 ' ) n ++ ;
if n is greater than or equal to 6	if ( n >= 6 )
print yes and a new line	cout << " yes " << endl ;
else do the following	else
print no and a new line	cout << " no " << endl ;
p = string	string p ;
read p	cin >> p ;
y = 0 = int	int y = 0 ;
while p [ y ] is ' 0 ' increment y	while ( p [ y ] == ' 0 ' ) y ++ ;
rsp = 0 = int	int rsp = 0 ;
for i = y + 1 to size of p exclusive increment i after , increment rsp by ( p [ i ] = = ' 0 ' )	for ( int i = y + 1 ; i < p . size ( ) ; i ++ ) rsp += ( p [ i ] == ' 0 ' ) ;
if rsp > = 6	if ( rsp >= 6 )
print yes	cout << " yes " << endl ;
else	else
print no	cout << " no " << endl ;
make string s	string s ;
read s	cin >> s ;
for i = 0 to s . length ( ) exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is equal to ' 1 '	if ( s [ i ] == ' 1 ' )
make integer sum = 0	int sum = 0 ;
for j = i + 1 to s . length ( ) exclusive	for ( int j = i + 1 ; j < s . length ( ) ; j ++ )
if s [ j ] is equal to ' 0 ' , increment sum	if ( s [ j ] == ' 0 ' ) sum ++ ;
if sum is greater than or equal to 6	if ( sum >= 6 )
print " yes "	cout << " yes " << endl ;
break loop	break ;
show " no "	cout << " no " << endl ;
integer as array dx = 0 , 0 , - 1 , 1	int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;
integer as array dy = 1 , - 1 , 0 , 0	int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;
s = string array	string s ;
read s	cin >> s ;
integer as i0 = - 1 , i1 = - 1 , cnt = 0	int i0 = - 1 , i1 = - 1 , cnt = 0 ;
for i = s . size ( ) - 1 to greater than or equal to 0 do the following	for ( int i = s . size ( ) - 1 ; i >= 0 ; i -= 1 )
if s [ i ] is 0 then add one to cnt	if ( s [ i ] == ' 0 ' ) cnt ++ ;
if cnt is 6 then do	if ( cnt == 6 )
set i0 to i	i0 = i ;
break	break ;
for i = 0 to less than s . size do the following	for ( int i = 0 ; i < s . size ( ) ; i += 1 )
if s [ i ] is 1 then do the following	if ( s [ i ] == ' 1 ' )
set i1 to i	i1 = i ;
break	break ;
if i1 is - 1 or i0 then do the following	if ( i1 == - 1 || i0 == - 1 )
output no	cout << " no\n " ;
if i1 is greater than or equal to i0 then do the following	if ( i1 >= i0 )
output no	cout << " no\n " ;
output yes	cout << " yes\n " ;
n , k = integers	int n , k ;
Read n and k	cin >> n >> k ;
print maximum value of 0 and 3 * n - k and a new line	cout << max ( 0 , 3 * n - k ) << endl ;
TOLL be a constant double 1e - 9	const double TOLL = 1e-9 ;
memo is an integer array	int memo [ 51 ] [ 255 ] ;
recur is an integer function	int recur ( int n , int k )
if n , k both equal 0 , return 0	if ( n == 0 && k == 0 ) return 0 ;
if n equal 0 , return 1000	if ( n == 0 ) return 1000 ;
if k equal 0 , return 1000	if ( k == 0 ) return 1000 ;
if memo [ n ] [ k ] not equal - 1 , return memo [ n ] [ k ]	if ( memo [ n ] [ k ] != - 1 ) return memo [ n ] [ k ] ;
rv is integer 1000	int rv = 1000 ;
for integer i = 2 to 5 inclusive	for ( int i = 2 ; i <= 5 ; i ++ )
if i is less than or equal to k	if ( i <= k )
integer now equals recur ( n - 1 , k - i )	int now = recur ( n - 1 , k - i ) ;
if i equals 2 , increase now by 1	if ( i == 2 ) now ++ ;
rv = min ( now , rv )	rv = min ( now , rv ) ;
return memo [ n ] [ k ] equals rv	return memo [ n ] [ k ] = rv ;
memset ( memo , - 1 , sizeof memo )	memset ( memo , - 1 , sizeof memo ) ;
n , k be integers	int n , k ;
while read n , k , print recur ( n , k ) and newline	while ( cin >> n >> k ) { cout << recur ( n , k ) << endl ; }
dpis long long array of 52 rows , 252 columns	long long dp [ 52 ] [ 252 ] ;
f is a function of long long integer	long long f ( long long slot , long long n )
if slot equals 0	if ( slot == 0 )
if n equals 0	if ( n == 0 )
else	else
return 1e10	return 1e10 ;
if dp [ slot ] [ n ] not equals - 1 , return dp [ slot ] [ n ]	if ( dp [ slot ] [ n ] != - 1 ) return dp [ slot ] [ n ] ;
ans is a long long value equal to 1e10	long long ans = 1e10 ;
for integer i = 2 to 5 inclusive	for ( int i = 2 ; i <= 5 ; i ++ )
if i is 2	if ( i == 2 )
ans equals minimum of ans , 1 + f ( slot - 1 , n - i )	ans = min ( ans , 1 + f ( slot - 1 , n - i ) ) ;
else	else
ans equals minimum of ans , f ( slot - 1 , n - i )	ans = min ( ans , f ( slot - 1 , n - i ) ) ;
return dp [ slot ] [ n ] equals ans	return dp [ slot ] [ n ] = ans ;
n , k are long long values	long long n , k ;
read n , k	cin >> n >> k ;
memory set of dp , - 1 , sizeof ( dp )	memset ( dp , - 1 , sizeof ( dp ) ) ;
print f ( n , k ) and newline	cout << f ( n , k ) << endl ;
n , k are integers	int n , k ;
read n , k	cin >> n >> k ;
if n * 3 is greater than or equal to k	if ( n * 3 >= k )
print 0 and endline	cout << n * 3 - k << endl ;
else	else
print 0 and endline	cout << 0 << endl ;
n , k = int	int n , k ;
read n , k	cin >> n >> k ;
if 3 * n - k > 0	if ( 3 * n - k > 0 )
print 3 * n - k	cout << 3 * n - k << endl ;
else	else
print 0	cout << 0 << endl ;
n , k = int	int n , k ;
read n , k	cin >> n >> k ;
ex = vector of n int filled with 5	vector < int > ex ( n , 5 ) ;
idx = n - 1	int idx = n - 1 ;
while true	while ( 1 )
sum = 0	int sum = 0 ;
for i = 0 to n exclusive add ex [ i ] to sum	for ( int i = 0 ; i < n ; i ++ ) { sum += ex [ i ] ; }
if sum is k break	if ( sum == k ) break ;
if idx is - 1 idx = n - 1	if ( idx == - 1 ) { idx = n - 1 ; }
decrement ex [ idx ]	ex [ idx ] -- ;
decrement idx	idx -- ;
res = 0	int res = 0 ;
for i = 0 to n exclusive	for ( int ( i ) = 0 ; ( i ) < ( n ) ; ( i ) ++ )
if ex [ i ] is 2 increment res	if ( ex [ i ] == 2 ) res ++ ;
print res	cout << res << endl ;
declare new ints n and k	int n , k ;
read input to n and k	cin >> n >> k ;
if k / n = 2	if ( k / n == 2 )
print n - k % n	cout << n - k % n << endl ;
else	else
print 0	cout << 0 << endl ;
n , a , coun = int	int n , a , coun ;
read n , a	cin >> n >> a ;
if 3 * n < = a	if ( 3 * n <= a )
set coun to 0	coun = 0 ;
else	else
set coun to 3 * n - a	coun = 3 * n - a ;
print coun	cout << coun << endl ;
let n , k , ans be integers	int n , k , ans ;
while read n , k	while ( cin >> n >> k )
if k / n equals 2	if ( k / n == 2 )
ans is equal to k modulo n	ans = k % n ;
print n - ans and newline	cout << n - ans << endl ;
else do the following	else
print 0 and newline	cout << " 0 " << endl ;
n , k = int	int n , k ;
read n , k	cin >> n >> k ;
c = k / n	double c = double ( k ) / n ;
if c > = 3	if ( c >= 3 )
print 0	cout << 0 << endl ;
else	else
print n - k modulo n	cout << n - k % n << endl ;
create integers a and b	int a , b ;
read a and b from the input	cin >> a >> b ;
create new integer called x with value 3 * a	int x = 3 * a ;
if x < = b	if ( x <= b )
print " 0 "	cout << " 0 " << endl ;
else	else
print x - b	cout << x - b << endl ;
n , k = int	int n , k ;
read n the k	cin >> n >> k ;
ans = int with ans = - 1	int ans = - 1 ;
set ans to n	ans = n ;
set ans to ans * 3	ans *= 3 ;
decrement ans by k	ans -= k ;
if ans > = 0	if ( ans >= 0 )
print ans	cout << ans << ' \n ' ;
else	else
print 0	cout << 0 << ' \n ' ;
T = 1 = int	int T = 1 ;
in void function solve	void solve ( )
n , k = int	int n , k ;
read n , k	cin >> n >> k ;
is 0 > n - ( k - ( 2 * n ) ) then print 0 , else print n - ( k - ( 2 * n ) )	cout << ( ( ( 0 ) > ( n - ( k - ( 2 * n ) ) ) ) ? ( 0 ) : ( n - ( k - ( 2 * n ) ) ) ) << endl ;
while decrementing T , calls solve	while ( T -- ) { solve ( ) ; }
create const int N = 1e5 + 100	const int N = 1e5 + 100 ;
make ints n , k , and ans and int array a of size 55	int n , k , ans , a [ 55 ] ;
create integer vector v	vector < int > v ;
make bool flag	bool flag ;
declare check returning bool	bool check ( )
make integer sum = 0	int sum = 0 ;
for i = 0 to n exclusive , add a [ i ] to sum	for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; }
if sum is equal to k , return true	if ( sum == k ) return true ;
return false	return false ;
read n and k	cin >> n >> k ;
for i = 0 to n exclusive , set a [ i ] to 2	for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = 2 ; }
if check ( ) returns true	if ( check ( ) )
show n	cout << n << endl ;
for i = 2 to 5	for ( int i = 2 ; i <= 5 ; i ++ )
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
increment a [ j ]	a [ j ] ++ ;
if check ( ) is truthy	if ( check ( ) )
set flag to true	flag = true ;
break loop	break ;
if flag is truthy , break loop	if ( flag ) break ;
if flag is true	if ( flag )
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is equal to 2 , add 1 to ans	if ( a [ i ] == 2 ) ans ++ ;
display ans	cout << ans << endl ;
a , b = int	int a , b ;
read a , b	cin >> a >> b ;
x = 3 * a	int x = 3 * a ;
if x < = b	if ( x <= b )
print " 0 "	cout << " 0 " << endl ;
else	else
print x - b	cout << x - b << endl ;
n , k = int	int n , k ;
while reading n , k	while ( cin >> n >> k )
if k > = 3n	if ( k >= 3 * n )
print 0	cout << " 0 " << endl ;
else if k < = 2n	else if ( k <= 2 * n )
print n	cout << n << endl ;
else	else
print n - k + k / n * n	cout << n - k + k / n * n << endl ;
a , b are integers	int a , b ;
read a , b	cin >> a >> b ;
if b is greater than or equal to 3 * a	if ( b >= 3 * a )
print 0 and newline	cout << 0 << endl ;
else	else
print 3 * a - b and endline	cout << 3 * a - b << endl ;
create int n and k	int n , k ;
read n and k	while ( cin >> n >> k )
if k > = 3 * n	if ( k >= 3 * n )
print 0	cout << " 0 " << endl ;
else if k < = 2 * n	else if ( k <= 2 * n )
print n	cout << n << endl ;
else	else
print n - k + k / n * n	cout << n - k + k / n * n << endl ;
k , n = int	int k , n ;
read n then k	cin >> n >> k ;
print max of 0 , n - ( k / 2 - n ) * 2 - k mod 2	cout << max ( 0 , n - ( k / 2 - n ) * 2 - k % 2 ) << endl ;
n , m , ans = integers with ans = 0	int n , m , ans = 0 ;
Read n and m	cin >> n >> m ;
set ans to m - 2 * n	ans = m - 2 * n ;
set ans to n - ans	ans = n - ans ;
if ans is less than 0	if ( ans < 0 )
print 0 and a new line	cout << " 0 " << endl ;
else do the following	else
print ans and a new line	cout << ans << endl ;
maxn is a new constant integer variable = 1e5 + 7	const int maxn = 1e5 + 7 ;
counter is a integer function with int argument x	int counter ( int x )
create integer variable with name myAss = 0	int myAss = 0 ;
while x	while ( x )
change x to x > > 1	x >>= 1 ;
increment myAss	myAss ++ ;
return myAss	return myAss ;
declare integer variable n	int n ;
in a while loop , read n and print the result of counter ( n )	while ( cin >> n ) { cout << counter ( n ) << endl ; }
n = int , cnt = 0	int n , ct = 0 ;
read n	cin >> n ;
while n	while ( n )
increment ct	ct ++ ;
divide n by 2	n = n / 2 ;
print ct	cout << ct << endl ;
ans = integer with ans = 0	int ans = 0 ;
n = integer	int n ;
read n	cin >> n ;
while ( ( left shift ans 1 place ) - 1 < n ) , increment ans	while ( ( 1 << ans ) - 1 < n ) ans ++ ;
print ans	cout << ans << endl ;
n , ans = integers with ans = 0	int n , ans = 0 ;
Read n	cin >> n ;
while n is greater than 0	while ( n > 0 )
set n to n / 2	n /= 2 ;
increment ans	ans ++ ;
print ans and a new line	cout << ans << " \n " ;
n = int	int n ;
read n	cin >> n ;
print round upward log2 ( n + 1 )	cout << ceil ( log2 ( n + 1 ) ) << " \n " ;
n , c = integer	int n , c ;
read n	cin >> n ;
while n > 0	while ( n > 0 )
n = n / 2	n /= 2 ;
increase c by 1	c ++ ;
print c	cout << c << endl ;
let n be a integer	int n ;
read n	cin >> n ;
for i = 1 to 50 exclusive	for ( int i = 1 ; i < 50 ; i ++ )
shift n value to the right by 1	n >>= 1 ;
if n is equal to 0	if ( n == 0 )
print i and newline	cout << i << endl ;
create int a	int a ;
read a	cin >> a ;
let ans = 1 be an integer	int ans = 1 ;
loop while a is not 1	while ( a != 1 )
increment ans	ans ++ ;
set a to a shifted by one bit to the right	a >>= 1 ;
print ans	cout << ans << endl ;
let v be a vector of long integers	vector < long long > v ;
let n be a long integer	long long n ;
read n	cin >> n ;
let sum be a long integer with sum = 1	long long sum = 1 ;
push_back 1 into vector v	v . push_back ( 1 ) ;
while sum is less than n	while ( sum < n )
let cur be a long integer with v [ length of v - 1 ] < < 1	long long cur = v [ v . size ( ) - 1 ] << 1 ;
push_back cur into v	v . push_back ( cur ) ;
increment sum by cur	sum += cur ;
print length of v and newline	cout << v . size ( ) << endl ;
create long long n , num [ 1000000 ] ;	long long n , num [ 1000000 ] ;
read n	cin >> n ;
for i = 0 to num [ i - 1 ] < = 1e10 , set num [ i ] = num [ i - 1 ] + num [ i - 1 ] + 1	for ( long long i = 1 ; num [ i - 1 ] <= 1e10 ; i ++ ) num [ i ] = num [ i - 1 ] + num [ i - 1 ] + 1 ;
for i = 1 to num [ i ] < = 1e10	for ( long long i = 1 ; num [ i ] <= 1e10 ; i ++ )
if num [ i - 1 ] < n and num [ i ] > = n	if ( num [ i - 1 ] < n && num [ i ] >= n )
print i	cout << i << endl ;
create long long ints n , i , and x	long long int n , i , x ;
read n and while n is truthy	while ( cin >> n )
set i to 0	i = 0 ;
set x to n	x = n ;
while x is not 0	while ( x != 0 )
if x modulo 2 is 0	if ( x % 2 == 0 )
set x to x / 2	x = x / 2 ;
otherwise	else
set x to ( x - 1 ) / 2	x = ( x - 1 ) / 2 ;
add 1 to i	i ++ ;
show i	cout << i << endl ;
n , t , x = integers with t = 0 and x = 1	long long n , t = 0 , x = 1 ;
Read n	cin >> n ;
while x is less than or equal to n	while ( x <= n )
set x to x * 2	x *= 2 ;
increment t	t ++ ;
print t and a new line	cout << t << endl ;
n , k and has are long longs where k = 1	long long n , k = 1 , has ;
read from the input to n	cin >> n ;
while k - 1 < n	while ( k - 1 < n )
set k to k multiplied by 2	k *= 2 ;
increment has by one	has ++ ;
print has to the standard output	cout << has << endl ;
declare new long long variable n	long long n ;
read n from the user input	cin >> n ;
print log2 ( n ) casted to integer + 1	cout << ( int ) log2 ( n ) + 1 << endl ;
n = long long	long long n ;
read n	cin >> n ;
print ( cast to int ) log2 ( n ) + 1	cout << ( int ) log2 ( n ) + 1 << endl ;
n = integer	long n ;
Read n	cin >> n ;
cont = integer with 0	long cont = 0 ;
while n is greater than 0	while ( n > 0 )
set n to n / 2	n = n / 2 ;
increment cont	cont ++ ;
print cont and a new line	cout << cont << endl ;
declare new constant integer called INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create new constant double variable eps = 1e - 7	const double eps = 1e-7 ;
new long long constant mod with value 1e9 + 7	const long long mod = 1e9 + 7 ;
function CountNum with long long argument n that returns long long	long long CountNum ( long long n )
declare new integer variable ans with value 0	int ans = 0 ;
while n	while ( n )
increment ans by one	ans ++ ;
change the value of n to n divided by 2	n /= 2 ;
return ans	return ans ;
n is a new long long variable	long long n ;
read n from the input	cin >> n ;
print the result of CountNum ( n )	cout << CountNum ( n ) << endl ;
n = integer	int n ;
while n can be read as a valid integer	while ( cin >> n )
num = integer = 0	int num = 0 ;
while n is nonzero	while ( n )
increase num by 1	num ++ ;
n = n shifted 1 bit to the right	n = n >> 1 ;
print num	cout << num << endl ;
p = integer with 0	int p = 0 ;
n , x = integers with x = 1	long long n , x = 1 ;
Read n	cin >> n ;
while x is less than or equal to n	while ( x <= n )
set x to x * 2	x *= 2 ;
increment p	p ++ ;
if x - 1 is greater than or equal to n	if ( x - 1 >= n )
print p and a new line	cout << p << endl ;
in the function gcd that takes integer a , b and returns integer	int gcd ( int a , int b )
if ( b is 0 ) , return a	if ( b == 0 ) return a ;
return gcd ( b , a modulo b )	return gcd ( b , a % b ) ;
a = integer	int a ;
read a	cin >> a ;
ans = integer with ans = 1	int ans = 1 ;
while a modulo 1	while ( a != 1 )
increment ans	ans ++ ;
a = right shift a 1 place	a >>= 1 ;
print ans	cout << ans << endl ;
create new long longs n and num	long long n , num ;
read from the input to n	cin >> n ;
declare long long sum with value 1	long long sum = 1 ;
declare integer count = 0	int count = 0 ;
while sum - 1 < n	while ( sum - 1 < n )
change the value of sum to sum multiplied by 2	sum *= 2 ;
increment count by one	count ++ ;
print count	cout << count << endl ;
create long long int array a of size 100010 , b of size 100010 , and c of size 100010	long long a [ 100010 ] , b [ 100010 ] , c [ 100010 ] ;
make long long ints n , m , k , t , r , s , aux , and rta	long long n , m , k , t , r , s , aux , rta ;
read n and while n is truthy	while ( cin >> n )
set all contents of a to 0	memset ( a , 0 , sizeof ( a ) ) ;
create integer rta = 0	int rta = 0 ;
while n is truthy , set n to n / 2 and increment rta	while ( n ) { n /= 2 , rta ++ ; }
show rta	cout << rta << endl ;
declare integer variable with name n	int n ;
read input to n	cin >> n ;
print logarithm of n to the base 2 rounded down + 1 and ' \ n '	cout << floor ( log2 ( n ) ) + 1 << ' \n ' ;
create string s	string s ;
read lien from cin to s	getline ( cin , s ) ;
create character x	char x ;
create integer len with len = size of s - 1	int len = s . size ( ) - 1 ;
create integer flag with flag = 1	int flag = 1 ;
while flag is true	while ( flag )
create character temp with temp = s [ len ]	char temp = s [ len ] ;
if temp is greater than or equal to ' A ' and temp is less than or equal to ' Z '	if ( temp >= ' A ' && temp <= ' Z ' )
set x to temp	x = temp ;
set flag to 0	flag = 0 ;
else if temp is greater than or equal to ' a ' and temp is less then or equal to ' z '	else if ( temp >= ' a ' && temp <= ' z ' )
set x to temp	x = temp ;
set flag to 0	flag = 0 ;
decrement len	len -- ;
set x to lower case of x	x = tolower ( x ) ;
if x is ' a ' or x is ' e ' or x is ' i ' or x is ' o ' or x is ' u ' or x is ' y '	if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
let s be string	string s ;
read line from input into s	getline ( cin , s ) ;
x = character	char x ;
let len be integer = length of s - 1	int len = s . size ( ) - 1 ;
create integer flag with value 1	int flag = 1 ;
while flag is 1	while ( flag )
create character temp with value s [ len ]	char temp = s [ len ] ;
if temp is a capital letter character	if ( temp >= ' A ' && temp <= ' Z ' )
x = temp	x = temp ;
set value of flag to 0	flag = 0 ;
else if temp > = ' a ' & & temp < = ' z '	else if ( temp >= ' a ' && temp <= ' z ' )
set x to temp	x = temp ;
flag = 0	flag = 0 ;
decrease len by one	len -- ;
set value of x to lower case of x	x = tolower ( x ) ;
if x = ' a ' or x = ' e ' or x = ' i ' or x = ' o ' or x = ' u ' or x = ' y '	if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
array of characters vol filled with ' y ' , ' Y ' , ' o ' , ' O ' , ' i ' , ' I ' , ' a ' , ' A ' , ' e ' , ' E ' , ' u ' and ' U '	char vol [ ] = { ' y ' , ' Y ' , ' o ' , ' O ' , ' i ' , ' I ' , ' a ' , ' A ' , ' e ' , ' E ' , ' u ' , ' U ' } ;
let s be string	string s ;
read input into s	getline ( cin , s ) ;
for i = length of s - 1 to - 1 exclusive decrementing i	for ( int i = s . size ( ) - 1 ; i > - 1 ; i -- )
if s [ i ] ! = ' ? ' and s [ i ] ! = ' '	if ( s [ i ] != ' ? ' && s [ i ] != '   ' )
for integer j = 0 to 12 exclusive	for ( int j = 0 ; j < 12 ; j ++ )
if s [ i ] = vol [ j ] return cout < < " YES " < < ' \ n ' , 0	if ( s [ i ] == vol [ j ] ) return cout << " YES " << ' \n ' , 0 ;
return cout < < " NO " < < ' \ n ' , 0	return cout << " NO " << ' \n ' , 0 ;
create character array s with size 500	char s [ 500 ] ;
read s	gets ( s ) ;
create character c	char c ;
create integer len with len = string length of s	int len = strlen ( s ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
create character cc with cc = lower case s [ i ]	char cc = tolower ( s [ i ] ) ;
if cc is greater than or equal to ' a ' and cc is less than or equal to ' z ' , set c to cc	if ( cc >= ' a ' && cc <= ' z ' ) c = cc ;
if c is ' a ' or c is ' e ' or c is ' i ' or c is ' o ' or c is ' u ' or c is ' y '	if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
s = array of characters of size 500	char s [ 500 ] ;
get input into s	gets ( s ) ;
c = character	char c ;
set integer len to length of s	int len = strlen ( s ) ;
for integer i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
create character cc = character at s [ i ] converted to lower case	char cc = tolower ( s [ i ] ) ;
if cc > = ' a ' and cc < = ' z '	if ( cc >= ' a ' && cc <= ' z ' ) c = cc ;
if c is a vowel character	if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
create string vow with value " aeiouy "	string vow = " aeiouy " ;
let x be string	string x ;
read line and store it into x	getline ( cin , x ) ;
set boolean ok to false	bool ok = false ;
for integer i = 0 to length of x exclusive	for ( int i = 0 ; i < x . length ( ) ; ++ i )
if isalpha ( x [ i ] ) is true	if ( isalpha ( x [ i ] ) )
if lowercase x [ i ] can be found in vow	if ( vow . find ( tolower ( x [ i ] ) ) != - 1 )
set value of ok to true	ok = true ;
else	else
set ok to false	ok = false ;
print " YES " if ok is true or " NO " otherwise , and a new line	cout << ( ( ok ) ? " YES " : " NO " ) << endl ;
create string vow with vow = " aeiouy "	string vow = " aeiouy " ;
create string x	string x ;
read line from cin to x	getline ( cin , x ) ;
create boolean ok with ok = false	bool ok = false ;
for i = 0 to length of x exclusive	for ( int i = 0 ; i < x . length ( ) ; ++ i )
if x [ i ] is alphanumeric	if ( isalpha ( x [ i ] ) )
if first index of lower case x [ i ] in vow is not - 1	if ( vow . find ( tolower ( x [ i ] ) ) != - 1 )
set ok to true	ok = true ;
else	else
set ok to false	ok = false ;
print " YES " if ok is true , else " NO " , print newline	cout << ( ( ok ) ? " YES " : " NO " ) << endl ;
char array vocals with elements ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' y ' , ' A ' , ' E ' , ' I ' , ' O ' , ' U ' and ' Y '	char vocals [ ] = { ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' y ' , ' A ' , ' E ' , ' I ' , ' O ' , ' U ' , ' Y ' } ;
function contains with char argument vocal and boolean return type	bool contains ( char vocal )
for integer i = 0 to 12 exclusive	for ( int i = 0 ; i < 12 ; i ++ )
return true if vocals [ i ] = vocal	if ( vocals [ i ] == vocal ) return true ;
return false	return false ;
question = string	string question ;
read input into question	getline ( cin , question ) ;
for i = length of question - 2 to 0 inclusive counting down	for ( int i = question . size ( ) - 2 ; i >= 0 ; i -- )
if question [ i ] ! = ' '	if ( question [ i ] != '   ' )
if contains ( question [ i ] )	if ( contains ( question [ i ] ) )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
boolean function a with UNTYPED arguments char and c	bool a ( char c )
set value of c to lower case c	c = tolower ( c ) ;
if c is a vowel character return 1	if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ) return 1 ;
declare string variable s	string s ;
read input into s	getline ( cin , s ) ;
for integer i = length of s - 2 to 0 inclusive , decrementing i	for ( int i = s . size ( ) - 2 ; i >= 0 ; -- i )
if s [ i ] ! = ' '	if ( s [ i ] != '   ' )
if a ( s [ i ] ) is true	if ( a ( s [ i ] ) )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
declare a with character c as argument , returning boolean	bool a ( char c )
set c to lower case c	c = tolower ( c ) ;
if c is ' a ' or c is ' e ' or c is ' i ' or c is ' o ' or c is ' u ' or c is ' y ' , return 1 from function	if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ) return 1 ;
create string s	string s ;
read line from cin to s	getline ( cin , s ) ;
for i = size of s - 2 to 0 inclusive , decrementing i	for ( int i = s . size ( ) - 2 ; i >= 0 ; -- i )
if s [ i ] is not ' '	if ( s [ i ] != '   ' )
if result of run a with s [ i ] as argument is true	if ( a ( s [ i ] ) )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
let MOD be a constant long integer with MOD = 1e9 + 7	const long long MOD = 1e9 + 7 ;
let INF be a constant long integer with INF = 1e9 + 7	const long long INF = 1e9 + 7 ;
let isVowel be a function that accepts character a and returns a boolean value	bool isVowel ( char a )
if a is equal to a , return true	if ( a == ' a ' ) return true ;
if a is equal to i , return true	if ( a == ' i ' ) return true ;
if a is equal to u , return true	if ( a == ' u ' ) return true ;
if a is equal to e , return true	if ( a == ' e ' ) return true ;
if a is equal to o , return true	if ( a == ' o ' ) return true ;
if a is equal to y , return true	if ( a == ' y ' ) return true ;
return false	return false ;
let s be a string	string s ;
getline ( cin , s )	getline ( cin , s ) ;
let ans be a character	char ans ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
s [ i ] is equal to tolower ( s [ i ] )	s [ i ] = tolower ( s [ i ] ) ;
if isalpha ( s [ i ] ) ) , ans is equal to s [ i ]	if ( isalpha ( s [ i ] ) ) { ans = s [ i ] ; }
if isVowel ( ans )	if ( isVowel ( ans ) )
print YES and newline	cout << " YES " << ' \n ' ;
else do the following	else
print NO and newline	cout << " NO " << ' \n ' ;
declare string variable s	string s ;
inline bool function yy with char argument x	inline bool yy ( char x )
return 1 if x is one of ' a ' , ' e ' , ' i ' , ' o ' , ' u ' or ' y '	if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;
new register int i	register int i ;
read data from the input and put it into s	getline ( cin , s ) ;
change i from the length of s - 1 , while isalpha ( s [ i ] ) returns false , decrementing i	for ( i = s . length ( ) - 1 ; ! isalpha ( s [ i ] ) ; i -- )
set s [ i ] to the lower case	s [ i ] = tolower ( s [ i ] ) ;
if yy ( s [ i ] ) is true	if ( yy ( s [ i ] ) )
print " YES "	puts ( " YES " ) ;
else	else
print " NO " to stdout	puts ( " NO " ) ;
M = const integer with M = 105	const int M = 100 + 5 ;
s = string	string s ;
read line s	getline ( cin , s ) ;
c = character with c = s [ 0 ]	char c = s [ 0 ] ;
for i = 0 to s . length ( ) exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if ( ( s [ i ] > = a and s [ i ] < = z ) or ( s [ i ] > = A and s [ i ] < = Z ) ) , c = s [ i ]	if ( ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) || ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) ) { c = s [ i ] ; }
le = character array of size 12 with le = { ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' y ' , ' A ' , ' E ' , ' I ' , ' O ' , ' U ' , ' Y ' }	char le [ 12 ] = { ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' y ' , ' A ' , ' E ' , ' I ' , ' O ' , ' U ' , ' Y ' } ;
ok = bool with ok = false	bool ok = false ;
for i = 0 to 11	for ( int i = 0 ; i < 12 ; i ++ )
if ( c is le [ i ] )	if ( c == le [ i ] )
ok = true	ok = true ;
break loop	break ;
if ( ok )	if ( ok )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create int n , a , b	int n , a , b ;
read n , a , b	cin >> n >> a >> b ;
print min of n - a and b + 1	cout << min ( n - a , b + 1 ) << endl ;
let n , a , b be integers	int n , a , b ;
read n , a , b	cin >> n >> a >> b ;
print minimum of b + 1 , n - a and newline	cout << min ( b + 1 , n - a ) << endl ;
n , a , b = integers	int n , a , b ;
Read n , a , b	cin >> n >> a >> b ;
print n - maximum value of ( a + 1 ) and ( n - b ) + 1 and a new line	cout << n - max ( a + 1 , n - b ) + 1 << endl ;
create new ints a , b and n	int a , b , n ;
loop , reading n , a and b from the input	while ( cin >> n >> a >> b )
if a + b is greater than n	if ( ( a + b ) > n )
print n - a to the output	cout << ( n - a ) << endl ;
else	else
print b + 1 if n - ( a + b ) , else print b	cout << ( ( n - ( a + b ) ) ? ( b + 1 ) : b ) << endl ;
n , a , b and c are integers where c = 0	int n , a , b , c = 0 ;
read user input to n , a and b	cin >> n >> a >> b ;
for i from a to n - 1 inclusive	for ( int i = a ; i <= n - 1 ; i ++ )
if n - i > = 1 and n - i - 1 < = b , increment c by one	if ( n - i >= 1 && n - i - 1 <= b ) { c ++ ; }
print c	cout << c << endl ;
n , a , b , ans = integers	int n , a , b , ans ;
Read n , a , b , ans	cin >> n >> a >> b ;
print n - maximum value of ( a + 1 ) and ( n - b ) + 1 and a new line	cout << n - max ( a + 1 , n - b ) + 1 << endl ;
make ints n , a , and b	int n , a , b ;
read n , a , and b	cin >> n >> a >> b ;
make integer count = 0	int count = 0 ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if a is less than or equal to ( i - 1 ) and ( n - i ) is less than or equal to b , increment count	if ( a <= ( i - 1 ) and ( n - i ) <= b ) { count ++ ; }
print count	cout << count << endl ;
create int n , i , j , x , y , z	int n , i , j , x , y , z ;
read n , x and y	cin >> n >> x >> y ;
set z to x + y	z = ( x + y ) ;
if n - x = 1 and n differenf from z	if ( n - x == 1 && n != z )
print 1	cout << 1 << endl ;
else if n > z	else if ( n > z )
print y + 1	cout << y + 1 << endl ;
else if z > n and n - x > 1	else if ( z > n && ( n - x ) > 1 )
print n - x	cout << ( n - x ) << endl ;
else if n equal to z	else if ( n == z )
print y	cout << y << endl ;
let n , a , b be integers	int n , a , b ;
read n , a , b	cin >> n >> a >> b ;
let i , c be integers with i = a + 1 , c = 0	int i = a + 1 , c = 0 ;
while b > = 0 and i < = n	while ( b >= 0 && i <= n )
increment c by 1	c ++ ;
increment i by 1	i ++ ;
decrement b by 1	b -- ;
print c and newline	cout << c << endl ;
n , a , b = integers	int n , a , b ;
Read n , a , b	cin >> n >> a >> b ;
set x to n - b	int x = n - b ;
set y to a + 1	int y = a + 1 ;
set sum to n - maximum value of x and y + 1	int sum = n - max ( x , y ) + 1 ;
print sum and a new line	cout << sum << ' \n ' ;
declare new int variables n , a and b	int n , a , b ;
read variables n , a and b from the input	cin >> n >> a >> b ;
print min of n - a and b + 1	cout << min ( n - a , b + 1 ) << endl ;
declare integers n , a , b , X = 0	int n , a , b , X = 0 ;
read n and a and b	cin >> n >> a >> b ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if i - 1 is greater than or equal to a and n - i is less than or equal to b , increment X	if ( i - 1 >= a && n - i <= b ) X ++ ;
print X and newline	cout << X << endl ;
n , a , b = int	int n , a , b ;
read n , a , b	cin >> n >> a >> b ;
print min ( n - a , b + 1 )	cout << min ( n - a , b + 1 ) << endl ;
n , a , b = integer	int n , a , b ;
count = integer = 0	int count = 0 ;
read n , a , b	cin >> n >> a >> b ;
if a + b + 1 < n , then ans a = n - b - 1	if ( a + b + 1 < n ) a = n - b - 1 ;
count = n - a	count = n - a ;
print count	cout << count << endl ;
create int n , a and b	int n , a , b ;
read n , a and b	cin >> n >> a >> b ;
if a + b > = n	if ( a + b >= n )
print n - a	cout << n - a << endl ;
else	else
print b + 1	cout << b + 1 << endl ;
n , a , b = integers	int n , a , b ;
Read n , a , b	cin >> n >> a >> b ;
print minimum value of n - a and b + 1 and a new line	cout << min ( n - a , b + 1 ) << endl ;
declare integers n , a , b , i = 0 , c = 0	int n , a , b , i = 0 , c = 0 ;
read n , a , b	cin >> n >> a >> b ;
let i be n - a	i = n - a ;
let c be b + 11	c = b + 1 ;
if i is less than or equal to c	if ( i <= c )
print i and newline	cout << i << endl ;
else	else
print c and newline	cout << c << endl ;
declare new int variables a , b and n	int a , b , n ;
read n , a and b and loop , then print b + 1 if n - a > b , or n - a otherwise , then loop again	while ( cin >> n >> a >> b ) { cout << ( n - a > b ? b + 1 : n - a ) << endl ; }
n , a , b = integers	int n , a , b ;
Read n , a , b	cin >> n >> a >> b ;
print minimum value of b + 1 and n - a and a new line	cout << min ( b + 1 , n - a ) << endl ;
n , a , b = integers	int n , a , b ;
Read n , a , b	cin >> n >> a >> b ;
print minimum value of n - a and b + 1 and a new line	cout << min ( n - a , b + 1 ) << endl ;
n , l , r , i = int	int n , l , r , i ;
read n , l , r	cin >> n >> l >> r ;
print n - max ( l , n - r - 1 )	cout << ( n - max ( l , n - r - 1 ) ) << endl ;
declare new int variables n , a and b	int n , a , b ;
read from the input to n , a and b	cin >> n >> a >> b ;
declare integer variable called x = min of n - a and b + 1	int x = min ( n - a , b + 1 ) ;
print x	cout << x << endl ;
create integers n , a and b	int n , a , b ;
read n , a and b	cin >> n >> a >> b ;
print min of n - a and b + 1 to the standard output	cout << min ( n - a , b + 1 ) << endl ;
declare integers a , b , c	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
if a - b is greater than c + 1	if ( a - b > c + 1 )
print c + 1 and newline	cout << c + 1 << endl ;
else	else
print a - b and newline	cout << a - b << endl ;
declare res as integer	int res ;
declare n , a , b as integer	int n , a , b ;
read n and a and b	cin >> n >> a >> b ;
let res be maximum of ( a + 1 and n - b )	res = max ( a + 1 , n - b ) ;
print n - res + 1 and newline	cout << n - res + 1 << endl ;
declare integers n , a , b	int n , a , b ;
read n and a and b	cin >> n >> a >> b ;
declare long long c = 0	long long c = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if ( i is greater than a ) and ( n - i ) is less than or equal to b , increment c	if ( ( ( i > a ) && ( n - i ) <= b ) ) c ++ ;
print c and " \ n "	cout << c << " \n " ;
n , a , b = int , d and c = 0	int n , a , b , d = 0 , c = 0 ;
read n , a , b	cin >> n >> a >> b ;
d = n - a	d = n - a ;
c = b + 1	c = b + 1 ;
if d < = c	if ( d <= c )
print d	cout << d << endl ;
else	else
print c	cout << c << endl ;
n , a , b = int	int n , a , b ;
read n , a , b	cin >> n >> a >> b ;
k = n - a	int k = n - a ;
print min ( k , b + 1 )	cout << min ( k , b + 1 ) << endl ;
n , a , b = int	int n , a , b ;
while read n , a , b	while ( cin >> n >> a >> b )
cnt = 0	int cnt = 0 ;
subtract a from n	n -= a ;
if n < = b + 1	if ( n <= ( b + 1 ) )
print n	cout << n << endl ;
break	break ;
else	else
print b + 1	cout << b + 1 << endl ;
let a , b , c long long ints	long long int a , b , c ;
read a , b , and c	cin >> a >> b >> c ;
let k , g long long ints with k = 0 , g = b + 1	long long int k = 0 , g = b + 1 ;
while g at most a	while ( g <= a )
if a - g at most c , increment k	if ( a - g <= c ) { k ++ ; }
increment g	g ++ ;
print k	cout << k << ' \n ' ;
maxx = constant integer = 1e3 + 10	const int maxx = 1e3 + 10 ;
a = integer array of size maxx	int a [ maxx ] ;
n = integer	int n ;
while n is read with a valid integer	while ( cin >> n )
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort a in ascending order	sort ( a , a + n ) ;
sum = long long = 0	long long sum = 0 ;
for i = 1 to n exclusive , then sum = sum + ( a [ i ] - a [ i - 1 ] - 1 )	for ( int i = 1 ; i < n ; i ++ ) { sum += ( a [ i ] - a [ i - 1 ] - 1 ) ; }
print sum	cout << sum << endl ;
create ints n , x , max = 0 , and min = INT_MAX	int n , x , max = 0 , min = INT_MAX ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
if x is greater than or equal to max , set max to x	if ( x >= max ) max = x ;
if min is greater than x , set min to x	if ( min > x ) min = x ;
print max - min + 1 - n	cout << max - min + 1 - n << endl ;
n = int	int n ;
read n	cin >> n ;
a = int array of size n	int a [ n ] ;
read n values into a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort a	sort ( a , a + n ) ;
print a [ n - 1 ] - a [ 0 ] + 1 - n	cout << a [ n - 1 ] - a [ 0 ] + 1 - n << endl ;
n , result = integers and a = array of 1000 integers	long long int n , a [ 1000 ] , result ;
Read n	cin >> n ;
Read n values into array a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort array elements of a in ascending order	sort ( a , a + n ) ;
set result to a [ n - 1 ] - a [ 0 ] - n + 1	result = a [ n - 1 ] - a [ 0 ] - n + 1 ;
print result and a new line	cout << result << endl ;
n , i , j , l , r = integers with l = 1000000000000000 and r = 0	long long n , i , j , l = 1000000000000000 , r = 0 ;
Read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
Read j	cin >> j ;
set l to minimum value of l and j	l = min ( l , j ) ;
set r to minimum value of r and j	r = max ( r , j ) ;
print ( r - l + 1 ) - n and a new line	cout << ( r - l + 1 ) - n << endl ;
let inf = 0x3f3f3f3f = const int	const int inf = 0x3f3f3f3f ;
N = 1010 = int const	const int N = 1010 ;
let a be a long long array of length N	long long a [ N ] ;
m = int	int m ;
read m	cin >> m ;
read the first m elements of a	for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort the first m elements of a	sort ( a , a + m ) ;
ans = 0 = long long	long long ans = 0 ;
for i = 1 to m exclusive then increment ans by a [ i ] + a [ i - 1 ] - 1	for ( int i = 1 ; i < m ; i ++ ) ans += a [ i ] - a [ i - 1 ] - 1 ;
print ans	cout << ans << endl ;
let n and res be ints with res = 0	int n , res = 0 ;
read input to n	cin >> n ;
declare new array of long longs arr with n elements	long long arr [ n ] ;
read standard input to arr n times	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr	sort ( arr , arr + n ) ;
for integer i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if arr [ i ] ! = arr [ i - 1 ] + 1 , change res to the sum of res and arr [ i ] - arr [ i - 1 ] - 1	if ( arr [ i ] != ( arr [ i - 1 ] + 1 ) ) res += ( arr [ i ] - arr [ i - 1 ] - 1 ) ;
print res and " \ n "	cout << res << " \n " ;
create long long int arra [ 1100 ]	long long int arra [ 1100 ] ;
create long long int i , j , k , l , p , q , r , s , t , u , v , w , n , max_i , set max_i to 0	long long int i , j , k , l , p , q , r , s , t , u , v , w , n , max_i = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive , read arra [ i ]	for ( i = 1 ; i <= n ; i ++ ) { cin >> arra [ i ] ; }
sort elements between arra and arra + n + 1	sort ( arra , arra + n + 1 ) ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if arra [ i ] > = max_i , set max_i = arra [ i ]	if ( arra [ i ] >= max_i ) { max_i = arra [ i ] ; }
if n equal to 1	if ( n == 1 )
print 0 and a new line	cout << " 0 " << ' \n ' ;
else	else
set l to max_i - arra [ 1 ] + 1 - n	l = max_i - arra [ 1 ] + 1 - n ;
print l and a newline	cout << l << ' \n ' ;
n = int	int n ;
read n	cin >> n ;
mi , mx = int with mi = 1 bitshift left by 30 and mx = 0	int mi = 1 << 30 , mx = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
x = int	int x ;
read x	cin >> x ;
set mi to min of x , mi	mi = min ( x , mi ) ;
set mx to max of x , mx	mx = max ( x , mx ) ;
print mx - mi + 1 - n	cout << mx - mi + 1 - n << endl ;
set maxn to 1000010	const int maxn = 1000010 ;
assign 500000 to MAXM	const int MAXM = 500000 ;
create int n	int n ;
while read n	while ( cin >> n )
create int a [ 1005 ]	int a [ 1005 ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort elements between a and a + n	sort ( a , a + n ) ;
cnt = 0	int cnt = 0 ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if a [ i ] - a [ i - 1 ] > 1 , cnt = cnt + ( a [ i ] - a [ i - 1 ] ) - 1	if ( a [ i ] - a [ i - 1 ] > 1 ) { cnt += ( a [ i ] - a [ i - 1 ] ) - 1 ; }
print cnt	cout << cnt << endl ;
n = integer	int n ;
Read n	cin >> n ;
mx = integer with 0	int mx = 0 ;
mn = integer with 0	int mn = 1e9 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
t = integer	int t ;
Read t	cin >> t ;
set mx to maximum value of mx and t	mx = max ( mx , t ) ;
set mn to minimum value of mx and t	mn = min ( mn , t ) ;
print mx - mn + 1 - n and a new line	cout << mx - mn + 1 - n << ' \n ' ;
a = array of 1010 integers	int a [ 1010 ] ;
n = integer	int n ;
Read n	cin >> n ;
Read n values into array a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort array elements of a in ascending order	sort ( a , a + n ) ;
print a [ n - 1 ] - a [ 0 ] - n + 1 and a new line	cout << a [ n - 1 ] - a [ 0 ] - n + 1 << endl ;
create n and res = 0	int n , res = 0 ;
read n	cin >> n ;
make long long integer arr of size n	long long arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr using argument arr + n	sort ( arr , arr + n ) ;
for i = 1 to exclusive	for ( int i = 1 ; i < n ; i ++ )
if arr [ i ] is not equal to arr [ i - 1 ] + 1 , set res to res + arr [ i ] - arr [ i - 1 ] - 1	if ( arr [ i ] != ( arr [ i - 1 ] + 1 ) ) res += ( arr [ i ] - arr [ i - 1 ] - 1 ) ;
print res	cout << res << " \n " ;
maxn = const integer with maxn = 1e6	const int maxn = 1e6 ;
n , a , res = long long with a = array of size maxn	long long n , a [ maxn ] , res ;
read n	cin >> n ;
for i = cast to int ( 0 ) to cast to int ( n ) , read a [ i ]	for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ ) cin >> a [ i ] ;
sort a and a + n	sort ( a , a + n ) ;
res = a [ n - 1 ] - a [ 0 ] - n + 1	res = a [ n - 1 ] - a [ 0 ] - n + 1 ;
print res	cout << res << ' \n ' ;
create new integer variable n	int n ;
read n and loop further	while ( cin >> n )
a is a new array of integers with size 1005	int a [ 1005 ] ;
read n elements into a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
cnt is a new integer variable = 0	int cnt = 0 ;
for i from 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if a [ i ] - a [ i - 1 ] is greater than 1 , change cnt to cnt + ( a [ i ] - a [ i - 1 ] ) - 1	if ( a [ i ] - a [ i - 1 ] > 1 ) { cnt += ( a [ i ] - a [ i - 1 ] ) - 1 ; }
print cnt	cout << cnt << endl ;
declare long long variable with name n	long long n ;
read standard input to n	cin >> n ;
a is a new array of long longs with n elements	long long a [ n ] ;
read n elements into a	for ( long long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
declare new long long variable ans with value 0	long long ans = 0 ;
start for loop from i = 0 to n - 1 exclusive	for ( long long i = 0 ; i < n - 1 ; i ++ )
if a [ i + 1 ] - a [ i ] is greater than 1 , assign the new value = ans + ( ( a [ i + 1 ] - a [ i ] ) - 1 ) to ans	if ( ( a [ i + 1 ] - a [ i ] ) > 1 ) { ans = ans + ( ( a [ i + 1 ] - a [ i ] ) - 1 ) ; }
print ans	cout << ans << endl ;
create constant integer inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
make const int N = 1010	const int N = 1010 ;
make long long array a of size N	long long a [ N ] ;
make int m	int m ;
read m	cin >> m ;
for i = 0 to m exclusive , read a [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort a using argument a + m	sort ( a , a + m ) ;
create long long int ans = 0	long long ans = 0 ;
for i = 1 to m exclusive , add a [ i ] - a [ i - 1 ] - 1 to ans	for ( int i = 1 ; i < m ; i ++ ) ans += a [ i ] - a [ i - 1 ] - 1 ;
print ans	cout << ans << endl ;
create long long n	long long n ;
read n	cin >> n ;
create long long ar [ n + 1 ]	long long ar [ n + 1 ] ;
i = 0 to n exclusive , read ar [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }
sort elements between ar and ar + n	sort ( ar , ar + n ) ;
count = 0	long long count = 0 ;
set temp to n - 2	long long temp = n - 2 ;
count = ( ar [ n - 1 ] - ar [ 0 ] - 1 ) - temp	count = ( ar [ n - 1 ] - ar [ 0 ] - 1 ) - temp ;
print ( count ) and a newline	cout << ( count ) << " \n " ;
make int n	int n ;
read n	cin >> n ;
create long long array a of size 100001	long long a [ 100001 ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a using a + n	sort ( a , a + n ) ;
print a [ n - 1 ] - a [ 0 ] + 1 - n	cout << a [ n - 1 ] - a [ 0 ] + 1 - n << endl ;
inf = constant integer = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
N = constant integer = 1010	const int N = 1010 ;
a = long long array of size N	long long a [ N ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , then read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort a in ascending order	sort ( a , a + n ) ;
ans = long long = 0	long long ans = 0 ;
for i = 1 to n exclusive , then ans = ans + a [ i ] - a [ i - 1 ] - 1	for ( int i = 1 ; i < n ; i ++ ) ans += a [ i ] - a [ i - 1 ] - 1 ;
print ans	cout << ans << endl ;
declare long long variables i , j , k , n , t , m , x , z and ans and an array a with size 200007	long long i , j , k , n , t , m , x , z , ans , a [ 200007 ] ;
read n from the input	cin >> n ;
read n elements into a from the input	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + n ) ;
in a loop , change i from 1 to n exclusive , increasing ans by a [ i ] - a [ i - 1 ] - 1 on each loop	for ( i = 1 ; i < n ; i ++ ) { ans += a [ i ] - a [ i - 1 ] - 1 ; }
print ans	cout << ans << endl ;
declare integer n	int n ;
read n	cin >> n ;
if n % 2 is 0	if ( n % 2 == 0 )
print " 0 \ n "	cout << " 0\n " ;
else	else
print " 1 \ n "	cout << " 1\n " ;
n = int	int n ;
read n	cin >> n ;
if even	if ( n % 2 == 0 )
print 0	cout << " 0 " << endl ;
if not even	else if ( n % 2 != 0 )
print 1	cout << " 1 " << endl ;
i , j , m , n , x , y , k = int	int i , j , m , n , x , y , k ;
read n	cin >> n ;
print n modulo 2	cout << n % 2 << endl ;
create integer n	int n ;
read from the input to n	cin >> n ;
print 1 if n & 1 = 1 , or 0 , and ' \ n '	cout << ( n & 1 ? 1 : 0 ) << ' \n ' ;
a = int	int a ;
read a	cin >> a ;
if a is even	if ( a % 2 == 0 )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
declare integer n	int n ;
read n	cin >> n ;
print n % 2 and ' \ n '	cout << n % 2 << ' \n ' ;
declare constant integer maxn = 5001	const int maxn = 5001 ;
declare integer n	int n ;
read n	cin >> n ;
print n % 2 and newline	cout << n % 2 << endl ;
n = int	int n ;
read n	cin >> n ;
print remainder of n % 2	cout << n % 2 << ' \n ' ;
n = int	int n ;
read n	cin >> n ;
print remainder of n / 2	cout << n % 2 << endl ;
create integer variable a	int a ;
read standard input to a	cin >> a ;
if a is odd	if ( a % 2 != 0 )
print " 1 "	cout << " 1 " << endl ;
else	else
print " 0 " to the standard output	cout << " 0 " << endl ;
declare integer n	int n ;
read n	cin >> n ;
if n % 2 is 0	if ( n % 2 == 0 )
print " 0 " and newline	cout << " 0 " << endl ;
else	else
print " 1 " and newline	cout << " 1 " << endl ;
n = integer	int n ;
read n	cin >> n ;
if n % 2 = = 0	if ( n % 2 == 0 )
print 0	cout << " 0 " << endl ;
else	else
print 1	cout << " 1 " << endl ;
a = int	int a ;
read a	cin >> a ;
if a is even	if ( a % 2 == 0 )
print 0	cout << 0 << endl ;
else	else
print 1	cout << 1 << endl ;
a = int	int a ;
read a	cin >> a ;
print remainder of a / 2	cout << a % 2 << endl ;
INF = const int with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
n = int	int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print " 0 "	puts ( " 0 " ) ;
else	else
print " 1 "	puts ( " 1 " ) ;
let a = int	int a ;
read a	cin >> a ;
if remainder of a / 2 equals 1	if ( a % 2 == 1 )
print 1	cout << " 1 " << endl ;
else	else
print 0	cout << " 0 " << endl ;
create integer x	int x ;
read x	cin >> x ;
print x % 2	cout << x % 2 << endl ;
create long long int n	long long int n ;
read n	cin >> n ;
if n & 1 is truthy	if ( n & 1 )
print 1	cout << 1 << endl ;
else do	else
show 0	cout << 0 << endl ;
a = int	int a ;
read a	cin >> a ;
if a % 2	if ( a % 2 )
print 1 and new line	cout << " 1\n " ;
else	else
print 0 and new line	cout << " 0\n " ;
n = int	int n ;
read n	cin >> n ;
print n and 1	cout << ( n & 1 ) << endl ;
let n be a integer	int n ;
read n	cin >> n ;
if n modulo 2 equals 0	if ( n % 2 == 0 )
print 0 and newline	cout << 0 << endl ;
else do the following	else
print 1 and newline	cout << 1 << endl ;
n is a new integer variable	int n ;
read variable n from the input	cin >> n ;
print n & 1	cout << ( n & 1 ) << endl ;
create new integer variable n	int n ;
read n from the user input	cin >> n ;
print n % 2	cout << n % 2 << endl ;
let num be an integer	int num ;
read in num	cin >> num ;
if num is even	if ( num % 2 == 0 )
print 0	cout << 0 << endl ;
or else	else
print 1	cout << 1 << endl ;
new integer n	int n ;
read from the input to n	cin >> n ;
if n & 1 ! = 0	if ( n & 1 )
print " 1 "	cout << " 1 " << endl ;
else	else
print " 0 "	cout << " 0 " << endl ;
declare integer n	int n ;
read n	cin >> n ;
print n % 2 and newline	cout << n % 2 << endl ;
let n be a integer	int n ;
read n	cin >> n ;
if n modulo 2 is equal to 0	if ( n % 2 != 0 )
print 1 and newline	cout << 1 << endl ;
else do the following	else
print 0 and newline	cout << 0 << endl ;
n = int	int n ;
read n	cin >> n ;
print n modulo 2	cout << n % 2 << endl ;
n = int	int n ;
read n	cin >> n ;
if even	if ( n % 2 == 0 )
print 0	cout << " 0 " << endl ;
else	else
print 1	cout << " 1 " << endl ;
declare integer a	int a ;
read a	cin >> a ;
print a % 2 , " \ n "	cout << a % 2 << " \n " ;
n = int	int n ;
read n	cin >> n ;
if n bitwise and 1	if ( n & 1 )
print 1	cout << 1 << endl ;
else	else
print 0	cout << 0 << endl ;
x = int	int x ;
read x	cin >> x ;
print remainder of x / 2	cout << ( x % 2 ) << endl ;
create int in	int in ;
read in	cin >> in ;
print in % 2	cout << in % 2 << endl ;
a = int	int a ;
read a	cin >> a ;
print remainder of a / 2	cout << a % 2 << ' \n ' ;
declare long longs a , b , c	long long a , b , c ;
read a	cin >> a ;
read b	cin >> b ;
read c	cin >> c ;
print 2 * c * ( a + b - 2 ) - 8 * ( c * ( c - 1 ) ) and newline	cout << 2 * c * ( a + b - 2 ) - 8 * ( c * ( c - 1 ) ) << endl ;
declare integers w , h , k	int w , h , k ;
read w , h , k	cin >> w >> h >> k ;
print 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) ) and newline	cout << 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) ) << endl ;
let can be a function that accepts integers i , j , k and returns a boolean value	bool can ( int i , int j , int k )
if i + j is greater than k and j + k is greater than i and i + k is greater than j , return true	if ( i + j > k && j + k > i && i + k > j ) return true ;
return false	return false ;
let w , h , k be integers	int w , h , k ;
read w , h , k	cin >> w >> h >> k ;
let ans be a integer with ans = 0	int ans = 0 ;
while w is greater than 0 and h is greater than 0 and k is greater than 0	while ( w > 0 && h > 0 && k > 0 )
increment ans by 2 * ( w + h ) - 4	ans += 2 * ( w + h ) - 4 ;
decrement w by 4	w -= 4 ;
decrement h by 4	h -= 4 ;
decrement k by 1	k -- ;
print ans and newline	cout << ans << endl ;
create ints w , h , and k	int w , h , k ;
read w , h , and k	cin >> w >> h >> k ;
show the result of 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) )	cout << 2 * k * ( w + h - 2 ) - 8 * ( k * ( k - 1 ) ) << endl ;
let n , m , k be long long ints	long long n , m , k ;
let ans be a long long int with value 0	long long ans = 0 ;
read n and m and k	cin >> n >> m >> k ;
for longlong int i = 0 to k	for ( long long i = 0 ; i < k ; i ++ )
let len be a long long int with value n - ( i * 2 ) * 2	long long len = n - ( i * 2 ) * 2 ;
let win be a long long int with value m - ( i * 2 ) * 2	long long wid = m - ( i * 2 ) * 2 ;
set ans to ans + ( ( len + wid ) * 2 - 4 )	ans += ( ( len + wid ) * 2 - 4 ) ;
print ans and newline	cout << ans << " \n " ;
make ints w , h , i , and r = 0	int w , h , i , r = 0 ;
read w , h , and i	cin >> w >> h >> i ;
while i is greater than or equal to 1	while ( i >= 1 )
set r to r + ( w + h - 2 ) * 2	r = r + ( w + h - 2 ) * 2 ;
set w to ( w - 4 )	w = ( w - 4 ) ;
set h to ( h - 4 )	h = ( h - 4 ) ;
subtract 1 from i	i -- ;
print r	cout << r << endl ;
let x , y , z , and t ints with t = 0	int x , y , z , t = 0 ;
read x , y , and z	cin >> x >> y >> z ;
for i from 0 to z exclusive	for ( int i = 0 ; i < z ; i ++ )
set t to t + 2 * x + 2 * y - 4	t = t + 2 * x + 2 * y - 4 ;
subtract 4 from x	x = x - 4 ;
subtract 4 from y	y = y - 4 ;
print t	cout << t << endl ;
i , b , a , t , k , l , ans = long long	long long i , b , a , t , k , l , ans ;
read a	cin >> a ;
read b	cin >> b ;
read k	cin >> k ;
for i = 1 to k inclusive	for ( i = 1 ; i <= k ; i ++ )
set ans to ans + ( a + b ) * 2 - 4	ans = ans + ( a + b ) * 2 - 4 ;
decrement a by 4	a = a - 4 ;
decrement b by 4	b = b - 4 ;
print ans	cout << ans << endl ;
create ints w , h , and k	int w , h , k ;
read w , h , and k	cin >> w >> h >> k ;
make int cnt = 0	int cnt = 0 ;
for i = 1 to k	for ( int i = 1 ; i <= k ; i ++ )
create int size = ( w - 4 * ( i - 1 ) ) * ( h - 4 * ( i - 1 ) )	int size = ( w - 4 * ( i - 1 ) ) * ( h - 4 * ( i - 1 ) ) ;
if size is less than or equal to 0	if ( size <= 0 )
break loop	break ;
else do	else
set cnt to cnt + ( w - 4 * ( i - 1 ) ) * 2 + ( h - 4 * ( i - 1 ) - 2 ) * 2	cnt += ( w - 4 * ( i - 1 ) ) * 2 + ( h - 4 * ( i - 1 ) - 2 ) * 2 ;
display cnt	cout << cnt << endl ;
create ints w , h , and k	int w , h , k ;
make int ans = 0	int ans = 0 ;
read w , h , and k	cin >> w >> h >> k ;
for i = 1 to k	for ( int i = 1 ; i <= k ; i ++ )
create int _w = w - ( i - 1 ) * 4	int _w = w - ( i - 1 ) * 4 ;
let integer _h = h - ( i - 1 ) * 4	int _h = h - ( i - 1 ) * 4 ;
set ans to ans + 2 * ( _w + _h ) - 4	ans += 2 * ( _w + _h ) - 4 ;
display ans	cout << ans << endl ;
w , h , k = int , res and i = 0	int w , h , k , res = 0 , i = 0 ;
read w , h , k	cin >> w >> h >> k ;
while decremented value of k is not 0	while ( k -- )
add 2 * ( w - ( 4 * i ) + h - ( 4 * i ) ) - 4 to res	res += 2 * ( w - ( 4 * i ) + h - ( 4 * i ) ) - 4 ;
increment i	i ++ ;
print res	cout << res << endl ;
create ints w , h , k and counter_yello = 0	int w = 0 , h = 0 , k = 0 , counter_yello = 0 ;
read standard input to w , h and k	cin >> w >> h >> k ;
for i from 0 to k exclusive incrementing i	for ( size_t i = 0 ; i < k ; ++ i )
change counter_yello to counter_yello + 2 * w + 2 * h - 4	counter_yello += 2 * w + 2 * h - 4 ;
change w to w - 4	w -= 4 ;
change h to h - 4	h -= 4 ;
print counter_yello to the standard output	cout << counter_yello << endl ;
create long long integers a , b , c , r = 0	long long a , b , c , r = 0 ;
read a , b and c	cin >> a >> b >> c ;
for c iterations set r to r + ( ( ( ( a - ( 4 * i ) ) - 1 ) + ( ( b - ( 4 * i ) ) - 1 ) ) * 2 )	for ( long long i = 0 ; i < c ; i ++ ) r += ( ( ( ( a - ( 4 * i ) ) - 1 ) + ( ( b - ( 4 * i ) ) - 1 ) ) * 2 ) ;
print r	cout << r << " \n " ;
let w , h , k , count be integers with count = 0	int w , h , k , count = 0 ;
read w , h , k	cin >> w >> h >> k ;
while k is decremented by 1	while ( k -- )
increment count by 2 * ( w + h ) - 4	count += 2 * ( w + h ) - 4 ;
decrement w by 4	w -= 4 ;
decrement h by 4	h -= 4 ;
print count and newline	cout << count << endl ;
create long long ints w , h , and k	long long int w , h , k ;
read w , h , and k	cin >> w >> h >> k ;
make long long int _rs = 0	long long int _rs = 0 ;
while k - - is truthy	while ( k -- )
set _rs to _rs + 2 * ( w + h ) - 4	_rs = _rs + 2 * ( w + h ) - 4 ;
set w to w - 4	w -= 4 ;
set h to h - 4	h -= 4 ;
print _rs	cout << _rs << " \n " ;
declare new integer variables w , h and k = 0	int w = 0 , h = 0 , k = 0 ;
read w , h and k from the input	cin >> w >> h >> k ;
create new integer called cells = 0	int cells = 0 ;
while k ! = 0 , decrement it and continue the loop	while ( k -- )
set cells to cells + ( ( 2 * ( w + h ) ) - 4 )	cells = cells + ( ( 2 * ( w + h ) ) - 4 ) ;
subtract 4 from w	w -= 4 ;
decrease h by 4	h -= 4 ;
print cells and " \ n "	cout << cells << " \n " ;
declare new constant integer called maxn = 1e3 + 5	const int maxn = 1e3 + 5 ;
declare new int variables w , h and k	int w , h , k ;
read input to w , h and k	cin >> w >> h >> k ;
create integer variable total = 0	int total = 0 ;
declare integer variable sum with value 0	int sum = 0 ;
change the value of sum to ( w + h - 2 ) * 2	sum = ( w + h - 2 ) * 2 ;
in a for loop , change i from 1 to k inclusive	for ( int i = 1 ; i <= k ; i ++ )
a is a new integer with value sum - 16 * ( i - 1 )	int a = sum - 16 * ( i - 1 ) ;
assign total + a to total	total = total + a ;
print total	cout << total << endl ;
make ints w , h , and k	int w , h , k ;
read w , h , k and while they ' re truthy	while ( cin >> w >> h >> k )
make integer sum = 0	int sum = 0 ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; ++ i )
add 2 * ( w + h ) - 4 to sum	sum += 2 * ( w + h ) - 4 ;
substract 4 from w	w -= 4 ;
set h to h - 4	h -= 4 ;
print sum	cout << sum << ' \n ' ;
create integers w , h , k , and value = 0	int w , h , k , value = 0 ;
read w , h , and k	cin >> w >> h >> k ;
create integers deck = 0 and it = 2	int deck = 0 , it = 2 ;
for i = 1 to k	for ( int i = 1 ; i <= k ; i ++ )
set value to ( ( ( h - deck ) * 2 ) + ( ( w - it ) * 2 ) ) + value	value = ( ( ( h - deck ) * 2 ) + ( ( w - it ) * 2 ) ) + value ;
set deck to deck + 4	deck = deck + 4 ;
set it to it + 4	it = it + 4 ;
show value	cout << value << endl ;
let w , h , k , sum be integers with sum = 0	int w , h , k , sum = 0 ;
read w , h , k	cin >> w >> h >> k ;
for q = 0 to k exclusive	for ( int q = 0 ; q < k ; q ++ )
increment sum by ( 2 * w ) + ( 2 * h ) - 4	sum += ( ( 2 * w ) + ( 2 * h ) - 4 ) ;
decrement w by 4	w -= 4 ;
decrement h by 4	h -= 4 ;
if w < = 1 or h < = 1 , stop	if ( w <= 1 || h <= 1 ) break ;
print sum and new line	cout << sum << endl ;
let h , w , k be long integers	long long int h , w , k ;
read h , w , k	cin >> h >> w >> k ;
let g be a long integer with g = 0	long long int g = 0 ;
while k is greater than 0	while ( k > 0 )
increment g by h * 2 + ( w - 2 ) * 2	g += h * 2 + ( w - 2 ) * 2 ;
decrement k by 1	k -- ;
decrement h by 4	h -= 4 ;
decrement w by 4	w -= 4 ;
if h < = 0 , stop	if ( h <= 0 ) { break ; }
if w < = 0 , stop	if ( w <= 0 ) { break ; }
print g and newline	cout << g << ' \n ' ;
create int n , a , count , set count to 0	int n , a , count = 0 ;
read n and a	cin >> n >> a ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a mod i = 0 and ( a / i ) < = n , increment count	if ( a % i == 0 && ( a / i ) <= n ) { count ++ ; }
print count	cout << count << endl ;
let n and z be long long variables	long long n , x ;
get value of n and x	cin >> n >> x ;
let c be integer = 0	int c = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if x modulo i is zero and x less than or equal to n * i then increment c	if ( x % i == 0 and x <= n * i ) { c ++ ; }
print c	cout << c << endl ;
n = long long	long long n ;
x = long long	long long x ;
read n , x	cin >> n >> x ;
cnt = 0 = int	int cnt = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if x mod i = 0 and x < = i * n then increment cnt	if ( x % i == 0 && x <= i * n ) cnt ++ ;
print cnt	cout << cnt << endl ;
let n , x and r be ints where r = 0	int n , x , r = 0 ;
read from the input to n and x	cin >> n >> x ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
skip the rest of the loop if x % i is not 0	if ( x % i != 0 ) continue ;
create integer variable y with value x / i	int y = x / i ;
if y < = n , increment r by one	if ( y <= n ) r ++ ;
print r	cout << r << endl ;
let n , x and count = 0 be integers	int n , x , count = 0 ;
read n and x	cin >> n >> x ;
if x equal to 1	if ( x == 1 )
print 1	cout << 1 << endl ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if x modulo i is equal to 0 and x / i less then or equal to n then increment count	if ( x % i == 0 && x / i <= n ) count ++ ;
if x less than or equal to n print count + 1 or print count	cout << ( x <= n ? count + 1 : count ) << endl ;
let n , m be integers	long long n , m ;
while read n , m	while ( cin >> n >> m )
the integer value of flag = 0	int flag = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
the integer value of k = m / i	int k = m / i ;
if m modulo i is equal to 0 and k < = n , increment flag by 1	if ( m % i == 0 && k <= n ) flag ++ ;
print flag and newline	cout << flag << endl ;
let a , b , c be integers with c = 0	int a , b , c = 0 ;
read a , b	cin >> a >> b ;
if a is equal to 1 and b is equal to 1	if ( a == 1 && b == 1 )
print 1 and newline	cout << 1 << endl ;
if a is equal to 1 and b is equal to 0	if ( a == 1 && b == 0 )
print 0 and newline	cout << 0 << endl ;
for i = 1 to a inclusive	for ( int i = 1 ; i <= a ; i ++ )
if b modulo i is equal to 0 and b / i < = a	if ( b % i == 0 && b / i <= a ) { c ++ ; }
print c and newline	cout << c << endl ;
let tabeSize , num , i and cnt be long long ints with cnt = 0	long long int tabeSize , num , i , cnt = 0 ;
read input to tabeSize and num	cin >> tabeSize >> num ;
start for loop from i = 1 to tabeSize inclusive incrementing i	for ( i = 1 ; i <= tabeSize ; i ++ )
increment cnt if num % i = 0 and num / i < = tabeSize	if ( num % i == 0 && num / i <= tabeSize ) cnt ++ ;
print cnt	cout << cnt << endl ;
n , x , cnt = 0 be ints	long long int n , x , cnt = 0 ;
read n , x	cin >> n >> x ;
for i = 1 , until i ^ 2 < = x	for ( int i = 1 ; i * i <= x ; i ++ )
if x mod i = 0	if ( x % i == 0 )
if i = x / i and i < = n and x / i < = n then increment cnt	if ( i == x / i && i <= n && x / i <= n ) cnt ++ ;
if i isn ' t x / i and i < = n and x / i < = n then increment cnt by 2	if ( i != x / i && i <= n && x / i <= n ) cnt += 2 ;
print cnt	cout << cnt << endl ;
create long long n , x	long long n , x ;
read n and x	cin >> n >> x ;
c = 0	int c = 0 ;
if x < = n , increment c	if ( x <= n ) c ++ ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if x % i = 0 and x / i < = n , increment c	if ( x % i == 0 && x / i <= n ) { c ++ ; }
print c	cout << c << endl ;
let n , i , c , t , d be integers with d = 0	int n , i , c , t , d = 0 ;
read n , t	cin >> n >> t ;
c is equal to 0	c = 0 ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if t modulo i is equal to 0	if ( t % i == 0 )
d is equal to t / i	d = t / i ;
if d > = 1 and d < = n , increment c by 1	if ( d >= 1 && d <= n ) { c ++ ; }
print c and newline	cout << c << endl ;
declare long long ints a , b , c , d , e , f , g , h , i and j	long long int a , b , c , d , e , f , g , h , i , j ;
declare vectors of long long integers s v , x and u	vector < long long int > v , x , u ;
create new strings s and t	string s , t ;
read a and b and keep looping	while ( cin >> a >> b )
for c from 1 to a inclusive , add element = c to the end of v	for ( c = 1 ; c <= a ; c ++ ) { v . push_back ( c ) ; }
assign the new value = 0 to e	e = 0 ;
change f to a - 1	f = a - 1 ;
assign 0 to g	g = 0 ;
while e < = f	while ( e <= f )
if v [ e ] * v [ f ] = b and v [ e ] ! = v [ f ]	if ( v [ e ] * v [ f ] == b && v [ e ] != v [ f ] )
add 2 to g	g += 2 ;
decrement f by one	f -- ;
else if v [ e ] * v [ f ] = b and v [ e ] is equal to v [ f ]	else if ( v [ e ] * v [ f ] == b && v [ e ] == v [ f ] )
change g to g + 1	g += 1 ;
decrement f	f -- ;
else if v [ e ] * v [ f ] is less than b	else if ( v [ e ] * v [ f ] < b )
increment e by one	e ++ ;
else	else
decrement f by one	f -- ;
print g	cout << g << endl ;
clear vector v	v . clear ( ) ;
declare new integers n and x	int n , x ;
read n and x from the user input	cin >> n >> x ;
declare new integer called ans with value 0	int ans = 0 ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
increment ans if x modulo i = 0 and x / i < = n	if ( x % i == 0 && x / i <= n ) { ans ++ ; }
print ans	cout << ans << endl ;
create ints i , j , k , n , m , ans , mn and count with ans and count = 0	int i , j , k , n , m , ans = 0 , mn , count = 0 ;
read user input to n and m	cin >> n >> m ;
change the value of mn to min of n and m	mn = min ( n , m ) ;
in a for loop , change i from 1 to mn inclusive incrementing i	for ( i = 1 ; i <= mn ; i ++ )
if m % i = 0 and m / i < = n , increment count	if ( m % i == 0 && m / i <= n ) count ++ ;
print count to the standard output	cout << count << endl ;
create new ints n and k	int n , k ;
read standard input to n and k	cin >> n >> k ;
define integer cnt = 0	int cnt = 0 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
increment cnt if k % i = 0 and i * 1LL * n > = k	if ( k % i == 0 && i * 1LL * n >= k ) { cnt ++ ; }
print cnt	cout << cnt << endl ;
define long long ints n , x and occurances with occurances = 0	long long int n , x , occurances = 0 ;
read n and x	cin >> n >> x ;
in a for loop , change i from 1 to n inclusive incrementing i	for ( int i = 1 ; i <= n ; i ++ )
if x % i = 0 and x / i < = n , increment occurances	if ( x % i == 0 && x / i <= n ) { occurances ++ ; }
print occurances and " \ n "	cout << occurances << " \n " ;
i , j = int	int i , j ;
in function cnt taking int n and returning int	int cnt ( int n )
ans , res = int with ans = 1	int ans = 1 , res ;
iterate i from 2 while i * i < = n	for ( int i = 2 ; i * i <= n ; i ++ )
set res to 0	res = 0 ;
loop while n is a multiple of i	while ( n % i == 0 )
set n to n / i	n /= i ;
increment res	res ++ ;
set ans to ans * ( res + 1 )	ans *= res + 1 ;
return ans	return ans ;
n , x , ans = int with ans = 0	int n , x , ans = 0 ;
read n then x	cin >> n >> x ;
iterate i from 1 while i * i < = x and i < = n	for ( i = 1 ; i * i <= x && i <= n ; i ++ )
if x is not a multiple of i continue	if ( x % i ) continue ;
if x / i < = n increment ans by 2	if ( x / i <= n ) { ans += 2 ; }
if i * i is x decrement ans	if ( i * i == x ) ans -- ;
print ans	cout << ans << endl ;
create long long n , t , cont , set cont to 0	long long n , t , cont = 0 ;
read na dn t	cin >> n >> t ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if t mod i = 0	if ( t % i == 0 )
if t / i > = 1 and t / i < = n , increment cont	if ( t / i >= 1 && t / i <= n ) { cont ++ ; }
print cont	cout << cont << endl ;
create long long int n , x , i , cnt , set cnt to 0	long long int n , x , i , cnt = 0 ;
read n and x	cin >> n >> x ;
for i = 0 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if x mod i = 0 and x < = ( i * n ) , increment cnt	if ( x % i == 0 && x <= ( i * n ) ) cnt ++ ;
print cnt	cout << cnt << endl ;
declare ints n and k	int n , k ;
a is a new array of integers with 105 elements	int a [ 105 ] ;
read from the input to n and k	cin >> n >> k ;
create integer ans = 0	int ans = 0 ;
start for loop from i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read user input to a [ i ]	cin >> a [ i ] ;
if a [ i ] is equal to 0 , break	if ( a [ i ] == 0 ) break ;
if k is greater than 0	if ( k > 0 )
decrement k	k -- ;
increment ans by one	ans ++ ;
else if a [ i ] is equal to a [ i - 1 ]	else if ( a [ i ] == a [ i - 1 ] )
increment ans by one	ans ++ ;
else	else
stop the loop	break ;
print ans	cout << ans << endl ;
create int n and k	int n , k ;
read n and k	cin >> n >> k ;
create int prev , next , cnt , set cnt to 0	int prev , next , cnt = 0 ;
read prev	cin >> prev ;
set total_cnt = 0	int total_cnt = 0 ;
if prev different from 0	if ( prev )
total_cnt = 1	total_cnt = 1 ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
read next	cin >> next ;
if next = 0 , break	if ( ! next ) break ;
if prev different from next	if ( prev != next )
if total_cnt + 1 > k , break	if ( total_cnt + 1 > k ) break ;
increment total_cnt	total_cnt ++ ;
set prev to nect	prev = next ;
print total_cnt	cout << total_cnt << endl ;
create ints n , k , f , a , count and temp where count = 0 and f = 1	int n , k , f = 1 , a , count = 0 , temp ;
read input to n and k	cin >> n >> k ;
in a for loop , change i from 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read from the input to a	cin >> a ;
if f > k and temp ! = a	if ( f > k && temp != a )
break the loop	break ;
else if a is greater than 0	else if ( a > 0 )
increment count by one	count ++ ;
assign the new value = a to temp	temp = a ;
increment f by one	f ++ ;
print count	cout << count << endl ;
i , n , m , x = int	int i , n , m , x ;
read n then m	cin >> n >> m ;
a = int array of size n	int a [ n ] ;
for i = 1 to n inclusive read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
set x to 0	x = 0 ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if ( a [ i ] > = a [ m ] ) and ( a [ i ] > 0 ) increment x	if ( ( a [ i ] >= a [ m ] ) && ( a [ i ] > 0 ) ) x ++ ;
print x	cout << x << endl ;
let n , k be integers and 50th element of integer array a is 0	int n , k , a [ 50 ] = { 0 } ;
read n and k	cin >> n >> k ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
if a [ k - 1 ] is not equal to 0	if ( a [ k - 1 ] != 0 )
while a [ k - 1 ] is equal to a [ k ] , increment k by 1	while ( a [ k - 1 ] == a [ k ] ) { k ++ ; }
print k and newline	cout << k << endl ;
else do the following	else
if k is equal to 1	if ( k == 1 )
print 0 and newline	cout << 0 << endl ;
else do the following	else
k is decremented by 1	k -- ;
while a [ k - 1 ] is equal to 0 , decrement k by 1	while ( a [ k - 1 ] == 0 ) k -- ;
print k and newline	cout << k << endl ;
n , k , a , b = long long integers	int n , k , a , b ;
Read n and k	cin >> n >> k ;
for i = 0 to n exclusive	for ( int i = 0 ; i < k ; i ++ )
Read a	cin >> a ;
if a is 0	if ( a == 0 )
print i and a new line	cout << i << endl ;
for i = k to n exclusive	for ( int i = k ; i < n ; ++ i )
Read b	cin >> b ;
if b is not a	if ( b != a )
print i and a new line	cout << i << endl ;
print n and a new line	cout << n << endl ;
ara = integer array of size 10000	int ara [ 10000 ] ;
n , k = integers	int n , k ;
read n , k	cin >> n >> k ;
cnt = integer with cnt = 0	int cnt = 0 ;
for i = 0 to n exclusive , read ara [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> ara [ i ] ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if ( ara [ i ] > = ara [ k - 1 ] and ara [ i ] > 0 ) , increment cnt	if ( ara [ i ] >= ara [ k - 1 ] && ara [ i ] > 0 ) cnt ++ ;
print cnt	cout << cnt << endl ;
x = integer array of size 1000001	int x [ 1000001 ] ;
k , n , points = integers with points = 0	int k , n , points = 0 ;
read n , k	cin >> n >> k ;
for i = 0 to n exclusive , read x [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if ( x [ i ] > = x [ k - 1 ] and x [ i ] is not 0 ) increment points	if ( x [ i ] >= x [ k - 1 ] && x [ i ] != 0 ) points ++ ;
print points	cout << points << endl ;
n , k = int	int n , k ;
read n then k	cin >> n >> k ;
a = int array of size n	int a [ n ] ;
noop	;
i , 1 = int	int i , t1 ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
rad a [ i ]	cin >> a [ i ] ;
if k is i + 1 set t1 to a [ i ]	if ( k == i + 1 ) t1 = a [ i ] ;
sort a using greater of type int	sort ( a , a + n , greater < int > ( ) ) ;
c = int with c = 0	int c = 0 ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
if a [ i ] is not 0 and a [ i ] > = t1 increment c	if ( a [ i ] != 0 && a [ i ] >= t1 ) c ++ ;
if a [ 0 ] is 0	if ( a [ 0 ] == 0 )
print " 0 "	cout << " 0\n " ;
else	else
print c	cout << c << " \n " ;
declare integers n , k , i , c = 0 , integer array A size 110	int n , k , i , A [ 110 ] , c = 0 ;
read n and k	cin >> n >> k ;
for i = 1 to n inclusive , read A [ i ]	for ( i = 1 ; i <= n ; i ++ ) { cin >> A [ i ] ; }
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if A [ i ] is greater than or equal to A [ k ] ] and A [ i ] is greater than 0 , increment c	if ( A [ i ] >= A [ k ] && A [ i ] > 0 ) { c ++ ; }
print c and newline	cout << c << endl ;
create int n , k , i , a [ 100 ] , cnt . set cnt to 0	int n , k , i , a [ 100 ] , cnt = 0 ;
read n and k	cin >> n >> k ;
for i = 1 to n inclusive , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if a [ i ] > = a [ k ] and a [ i ] > 0 , increment cnt	if ( a [ i ] >= a [ k ] && a [ i ] > 0 ) cnt ++ ;
print cnt	cout << cnt << endl ;
create integers n , k and ans with ans = 0 ; create an array of integers a with size 1000 filled with 0	int n , k , a [ 1000 ] = { } , ans = 0 ;
read n and k	cin >> n >> k ;
read n elements into a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
change i in a loop from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
increment ans if a [ i ] > = a [ k - 1 ] and a [ i ] > 0	if ( a [ i ] >= a [ k - 1 ] and a [ i ] > 0 ) { ans ++ ; }
print ans to the standard output	cout << ans << endl ;
declare integer array a size 101 , integers n , c , s = 0	int a [ 101 ] , n , c , s = 0 ;
read n and c	cin >> n >> c ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is greater than 0 and a [ i ] is greater than or equal to a [ c - 1 ] , increment s by i	if ( a [ i ] > 0 && a [ i ] >= a [ c - 1 ] ) s += 1 ;
print s and newline	cout << s << endl ;
n , k = int	int n , k ;
read n and k	cin >> n >> k ;
let a pointer be a new int array of length n	int * a = new int [ n ] ;
output = 0 = int	int output = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a at i	cin >> a [ i ] ;
if i < = k - 1 and a [ i ] is positive	if ( i <= ( k - 1 ) && a [ i ] > 0 )
increment output	output ++ ;
else if i > k - 1 and a [ i ] is positive and a [ i ] = a [ k - 1 ]	else if ( i > ( k - 1 ) && a [ i ] > 0 && a [ i ] == a [ k - 1 ] )
increment output	output ++ ;
else	else
exit loop	break ;
print output	cout << output << endl ;
create new int variables n , k and sum with sum = 0 and a new int pointer * arr	int n , k , * arr , sum = 0 ;
read input to n and k	cin >> n >> k ;
set arr to point to the new integer array with n elements	arr = new int [ n ] ;
read n elements into arr	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
in a for loop , change i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if arr [ k - 1 ] = 0	if ( arr [ k - 1 ] == 0 )
if arr [ i ] is greater than arr [ k - 1 ] , add 1 to sum	if ( arr [ i ] > arr [ k - 1 ] ) { sum += 1 ; }
else	else
if arr [ i ] > = arr [ k - 1 ] , change sum to sum + 1	if ( arr [ i ] >= arr [ k - 1 ] ) sum += 1 ;
print sum	cout << sum << endl ;
create ints x and y and int array ar of size 100	int x , y , ar [ 100 ] ;
make integer c = 0	int c = 0 ;
read x and y	cin >> x >> y ;
for i = 0 to x exclusive	for ( int i = 0 ; i < x ; i ++ )
read ar [ i ]	cin >> ar [ i ] ;
if ar [ i ] is greater than or equal to ar [ y - 1 ] and ar [ i ] is greater than 0	if ( ar [ i ] >= ar [ y - 1 ] && ar [ i ] > 0 ) c ++ ;
print c	cout << c << endl ;
create long long n , k	long long n , k ;
read n and k	cin >> n >> k ;
if k mod n = 0	if ( k % n == 0 )
print k / n	cout << k / n << endl ;
else	else
print k / n + 1	cout << k / n + 1 << endl ;
n , k = long long	long long n , k ;
while read n , k	while ( cin >> n >> k )
ans = k / n	long long ans = k / n ;
if k is not multiple of n increment ans	if ( k % n ) ans ++ ;
print ans	cout << ans << endl ;
create new long longs n and m	long long n , m ;
read user input to n and m	cin >> n >> m ;
if m % n ! = 0	if ( m % n != 0 )
print m / n + 1 to the output	cout << m / n + 1 << endl ;
else	else
print m / n	cout << m / n << endl ;
create long long n , k , h	long long n , k , h ;
read n and k	cin >> n >> k ;
if k mod n = 0	if ( k % n == 0 )
print k / n	cout << k / n << endl ;
else	else
print k / n + 1	cout << k / n + 1 << endl ;
n , m = long long int	long long int n , m ;
read n then m	cin >> n >> m ;
if m < = n	if ( m <= n )
print " 1 "	cout << " 1 " << endl ;
else	else
if m is a multiple of n	if ( m % n == 0 )
print m / n	cout << m / n << endl ;
else	else
print m / n + 1	cout << m / n + 1 << endl ;
n , k , h = long long int	long long int n , k , h ;
read n , k	cin >> n >> k ;
if k < = n	if ( k <= n )
h = 1	h = 1 ;
else	else
if k is not multiple of n	if ( ( k % n ) != 0 )
h = k / n + 1	h = k / n + 1 ;
else	else
h = k / n	h = k / n ;
print h	cout << h << endl ;
n , k = long long	long long n , k ;
read n then k	cin >> n >> k ;
counts = long long with counts = 0	long long counts = 0 ;
if k is not a multiple of n increment counts	if ( k % n ) counts ++ ;
increment counts by k / n	counts += k / n ;
print counts	cout << counts << endl ;
MAXN = const int = 1e4 + 20	const int MAXN = 1e4 + 20 ;
const int = INF = 1e9 + 100	const int INF = 1e9 + 100 ;
MOD = const int = 1e9	const int MOD = 1e9 ;
n , k = long long	long long n , k ;
while read n and k , print ( k + n - 1 ) / n	while ( cin >> n >> k ) { cout << ( k + n - 1 ) / n << endl ; }
n , k , h = integers	long long int n , k , h ;
Read n and k	cin >> n >> k ;
set h to k / n	h = ( k / n ) ;
if h is not equal to 0	if ( h != 0 )
if k modulo n is equal to 0	if ( k % n == 0 )
print h and a new line	cout << h << endl ;
else do the following	else
print h + 1 and a new line	cout << h + 1 << endl ;
else do the following	else
print 1 and a new line	cout << 1 << endl ;
create new long longs n and k	long long n , k ;
loop , reading n and k from the input	while ( cin >> n >> k )
if k % n = 0	if ( k % n == 0 )
print k / n	cout << k / n << endl ;
else	else
print k / n + 1	cout << k / n + 1 << endl ;
n , k = integers	long long n , k ;
while reading values n , k	while ( cin >> n >> k )
if k modulo n is 0	if ( k % n == 0 )
print k / n and a new line	cout << k / n << endl ;
else do the following	else
print k / n + 1 and a new line	cout << k / n + 1 << endl ;
n , k , h = integers	long long int n , k , h ;
while reading values n , k , h	while ( cin >> n >> k )
if n is 0 OR k is 0 , then Terminate the loop	if ( n == 0 || k == 0 ) break ;
set h to k / n	h = k / n ;
if k modulo n is 0	if ( k % n == 0 )
print h and a new line	cout << h << endl ;
else do the following	else
print h + 1 and a new line	cout << h + 1 << endl ;
let n , k be long integers	long long n , k ;
read n , k	cin >> n >> k ;
if n > = k	if ( n >= k )
print 1 and newline	cout << " 1 " << endl ;
else if k modulo n equals 0	else if ( k % n == 0 )
print k / n and newline	cout << k / n << endl ;
else do the following	else
print k / n + 1 and newline	cout << k / n + 1 << endl ;
n , k = long long	long long n , k ;
read n then k	cin >> n >> k ;
if n > = k	if ( n >= k )
print 1	cout << 1 << endl ;
else	else
if k is a multiple of n	if ( k % n == 0 )
print k / n	cout << k / n << endl ;
else	else
print k / n + 1	cout << k / n + 1 << endl ;
define new long longs n and s	long long n , s ;
read n and s from the user input	cin >> n >> s ;
print ( s / n ) + ( 1 if s modulo n ! = 0 , or 0 otherwise )	cout << ( s / n ) + ( s % n != 0 ) << endl ;
a = int	int a ;
n , k = long long	long long n , k ;
read n , k	cin >> n >> k ;
if k < = n	if ( k <= n )
print 1	cout << 1 << endl ;
else	else
if k is multiple of n	if ( k % n == 0 )
print k / n	cout << k / n << endl ;
else	else
print k / n + 1	cout << k / n + 1 << endl ;
create long long n , k	long long n , k ;
while read n and k	while ( cin >> n >> k )
if k < = n	if ( k <= n )
print 1	cout << 1 << endl ;
else if k mod n = 0	else if ( k % n == 0 )
print k / n	cout << k / n << endl ;
else if k mod n different from 0	else if ( k % n != 0 )
print k / n + 1	cout << k / n + 1 << endl ;
n , l = long long	long long n , k ;
function c1 ( get long long n and k , return long long )	long long cl ( long long n , long long k )
if n is multiple of k return n / k	if ( n % k == 0 ) return n / k ;
return n / k + 1	return n / k + 1 ;
read n	cin >> n >> k ;
print cl ( k , n )	cout << cl ( k , n ) << " \n " ;
n , k = integers	long long n , k ;
while reading values n , k	while ( cin >> n >> k )
ans = integer , set to k / n	long long ans = k / n ;
if k modulo n , then increment ans	if ( k % n ) ans ++ ;
print ans and a new line	cout << ans << endl ;
create new long longs n and m	long long n , m ;
read n and m from the user input	cin >> n >> m ;
if n > = m	if ( n >= m )
print 1	cout << 1 << endl ;
else	else
if m % n = 0	if ( m % n == 0 )
print m / n	cout << m / n << endl ;
else	else
print m / n + 1	cout << m / n + 1 << endl ;
n , k = integers	long long n , k ;
Read n and k	for ( ; cin >> n >> k ; )
if k modulo n is 0	if ( k % n == 0 )
print k / n and a new line	cout << k / n << endl ;
else do the following	else
print k / n + 1 and a new line	cout << k / n + 1 << endl ;
n = integer	int n ;
read n	cin >> n ;
if ( ( n modulo 3 ) is 1 ) , decrement n	if ( ( n % 3 ) == 1 ) n -- ;
if ( ( n modulo 3 ) is 2 ) , increment n	if ( ( n % 3 ) == 2 ) n ++ ;
n = n / 3	n /= 3 ;
feet = integer with feet = n / 12	int feet = n / 12 ;
inch = integer with inch = n modulo 12	int inch = n % 12 ;
print feet , " " , inch	cout << feet << "   " << inch << endl ;
let n be a integer	int n ;
read n	cin >> n ;
let ans1 be a integer with ans1 = n / 3	int ans1 = n / 3 ;
n is equal to n modulo 3	n %= 3 ;
if n > = 2 , increment ans1 by 1	if ( n >= 2 ) { ans1 ++ ; }
let ans2 be a integer with ans2 = ans1 / 12	int ans2 = ans1 / 12 ;
ans1 is equal to ans1 modulo 12	ans1 %= 12 ;
print ans2 and space and ans1 and newline	cout << ans2 << "   " << ans1 << endl ;
let n an int	int n ;
read n	cin >> n ;
let inches an int with value n / 3	int inches = n / 3 ;
if n mod 3 is 2 , add 1 to inches	if ( n % 3 == 2 ) inches += 1 ;
print inches / 12 , followed by a space , followed by inches mod 12	cout << inches / 12 << "   " << inches % 12 << endl ;
let n be a integer	int n ;
read n	cin >> n ;
let k be a integer with k = ( n + 1 ) / 3	int k = ( n + 1 ) / 3 ;
print k / 12 and space and k modulo 12 and newline	cout << k / 12 << "   " << k % 12 << endl ;
create new integer called n	int n ;
read standard input to n	cin >> n ;
define new integer variable a = n / 36	int a = n / 36 ;
define new integer b with value ( n - 36 * a ) / 3	int b = ( n - 36 * a ) / 3 ;
c is a new integer variable with value n - 36 * a - b * 3	int c = n - 36 * a - b * 3 ;
if c = 2 , increase b by 1	if ( c == 2 ) b ++ ;
if b = 12	if ( b == 12 )
add 1 to a	a ++ ;
assign 0 to b	b = 0 ;
print a , " " and b	cout << a << "   " << b << endl ;
n is a new integer	int n ;
read user input to n	cin >> n ;
print ( n + 1 ) / 36 and " "	cout << ( n + 1 ) / 36 << "   " ;
change the value of n to n modulo 36	n %= 36 ;
if ( n + 1 ) / 36 < = n / 36	if ( ( n + 1 ) / 36 <= n / 36 )
print ( n + 1 ) / 3	cout << ( n + 1 ) / 3 << endl ;
else	else
print 0 to the standard output	cout << 0 << endl ;
n = integer	int n ;
read n	cin >> n ;
if ( ( n + 1 ) modulo 36 is 0 ) , increment n	if ( ( n + 1 ) % 36 == 0 ) n ++ ;
ft = integer with ft = n / 36	int ft = n / 36 ;
n = n modulo 36	n %= 36 ;
in = integer	int in ;
if ( n modulo 3 is 0 or ( n - 1 ) modulo 3 is 0 )	if ( n % 3 == 0 || ( n - 1 ) % 3 == 0 )
in = n / 3	in = n / 3 ;
else	else
in = n / 3 + 1	in = n / 3 + 1 ;
print ft , ' ' , in	cout << ft << '   ' << in << ' \n ' ;
create integer n	int n ;
read standard input to n	cin >> n ;
define new integer inches with value n / 3 + ( n modulo 3 > 1 )	int inches = n / 3 + ( n % 3 > 1 ) ;
print inches / 12 , " " , inches modulo 12 and " \ n "	cout << inches / 12 << "   " << inches % 12 << " \n " ;
n = integer	int n ;
Read n	cin >> n ;
c = integer , set to n / 3	int c = n / 3 ;
if n modulo 3 is 2 , then set c to c + 1	if ( n % 3 == 2 ) { c += 1 ; }
print c / 12 , c modulo 12 and a new line	cout << c / 12 << '   ' << c % 12 << endl ;
n , foot , inch , x = integers	int n , foot , inch , x ;
Read n	cin >> n ;
set foot to n / 36	foot = n / 36 ;
set x to n modulo 36	x = n % 36 ;
if x is equal to 35	if ( x == 35 )
increment foot	foot ++ ;
set inch to 0	inch = 0 ;
print foot , inch and a new line	cout << foot << '   ' << inch << endl ;
else do the following	else
set inch to x / 3	inch = x / 3 ;
if x modulo 3 is 2 , then increment inch	if ( x % 3 == 2 ) inch ++ ;
print foot , inch and a new line	cout << foot << '   ' << inch << endl ;
n = integer	int n ;
read n	cin >> n ;
k = integer with k = ( n + 1 ) / 3	int k = ( n + 1 ) / 3 ;
print k / 12 , ' ' , k modulo 12	cout << k / 12 << '   ' << k % 12 << endl ;
m = long long	long long m ;
n = double	double n ;
read n	cin >> n ;
m = round ( n / 3 )	m = ( long long ) round ( n / 3 ) ;
print m / 12 , space , m modulo 12	cout << m / 12 << "   " << m % 12 << endl ;
n = long long	long long n ;
read n	cin >> n ;
ft , cm = long long with ft = ( n / 36 ) and cm = n - ( 36 * ft )	long long ft = ( n / 36 ) , cm = n - ( 36 * ft ) ;
in = long long with in = cm / 3	long long in = cm / 3 ;
if cm mod 3 is 2 increment in	if ( cm % 3 == 2 ) in ++ ;
if in is 12 increment ft then set in to 0	if ( in == 12 ) ft ++ , in = 0 ;
print ft and in	cout << ft << "   " << in << endl ;
new integer variable n	int n ;
read n and keep looping	while ( cin >> n )
new integer variable inches with value ( n + 1 ) / 3	int inches = ( n + 1 ) / 3 ;
define new integer foot = inches / 12	int foot = ( inches ) / 12 ;
print foot and " "	cout << foot << "   " ;
if inches - foot * 12 < = 0	if ( inches - foot * 12 <= 0 )
print " 0 "	cout << " 0 " << endl ;
else	else
print inches - foot * 12	cout << inches - foot * 12 << endl ;
n , x , y = integers	int n , x , y ;
read n	cin >> n ;
set x to n / 36	x = n / 36 ;
set n to n - x * 36	n = n - x * 36 ;
if n mod 3 equals 2	if ( n % 3 == 2 )
set y to n / 3 + 1	y = n / 3 + 1 ;
else	else
set y to n / 3	y = n / 3 ;
if y equals 12	if ( y == 12 )
print x + 1 space 0	cout << x + 1 << "   " << 0 << endl ;
else	else
print x space y	cout << x << "   " << y << endl ;
create integer n	int n ;
read n	cin >> n ;
make int inch = 0	int inch = 0 ;
create integer feet = n / 36	int feet = n / 36 ;
subtract ( n / 36 ) * 36 from n	n -= ( n / 36 ) * 36 ;
if n is 35	if ( n == 35 )
increment feet	++ feet ;
else do	else
set inch to n / 3	inch = n / 3 ;
set n to n - ( n / 3 ) * 3	n -= ( n / 3 ) * 3 ;
if n is equal to 2 , increment inch	if ( n == 2 ) ++ inch ;
show feet , " " , and inch	cout << feet << "   " << inch << endl ;
define new integer constant INF with value 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
declare long long variables i , j and k	long long i , j , k ;
create new long longs n and m	long long n , m ;
read input to n	cin >> n ;
assign n modulo 3 to k	k = n % 3 ;
divide n by 3	n /= 3 ;
if k is equal to 2 , increment n	if ( k == 2 ) n ++ ;
print n / 12 , ' ' and n modulo 12 to the output	cout << n / 12 << '   ' << n % 12 << endl ;
declare new integer variable n	int n ;
read n from the user input	cin >> n ;
create new integer m = n / 36	int m = n / 36 ;
define integer q with value ( n % 36 ) / 3	int q = ( n % 36 ) / 3 ;
mo is a new integer with value n modulo 36 modulo 3	int mo = ( n % 36 ) % 3 ;
if mo is equal to 2 , add 1 to q	if ( mo == 2 ) q += 1 ;
assign 0 to q and increment m by one , if q = 12	if ( q == 12 ) q = 0 , m ++ ;
print m , " " and q	cout << m << "   " << q << endl ;
create long longs n , inches and feets	long long n , inches , feets ;
read variable n from the input	cin >> n ;
set inches to n / 3	inches = n / 3 ;
if n modulo 3 is 2 , add 1 to inches	if ( n % 3 == 2 ) inches += 1 ;
change feets to inches / 12	feets = inches / 12 ;
subtract feets * 12 from inches	inches -= feets * 12 ;
print feets , " " and inches	cout << feets << "   " << inches << endl ;
define ints n , ft , inch and r	int n , ft , inch , r ;
read variable n from the input	cin >> n ;
assign the new value = n / 36 to ft	ft = n / 36 ;
set inch to ( n modulo 36 ) / 3	inch = ( n % 36 ) / 3 ;
change the value of r to ( n % 36 ) % 3	r = ( n % 36 ) % 3 ;
increment inch if r is greater than 1	if ( r > 1 ) inch ++ ;
if inch is 12	if ( inch == 12 )
add one to ft	ft ++ ;
set inch to 0	inch = 0 ;
print ft , " " and inch to the standard output	cout << ft << "   " << inch << endl ;
let m be a map from integers to integers	map < int , int > m ;
create ints t , x , c and y with c and y = 1	int t , x , c = 1 , y = 1 ;
read t	cin >> t ;
create boolean variable hard with value false	bool hard = false ;
start for loop from i = 0 to t exclusive incrementing i	for ( int i = 0 ; i < t ; i ++ )
read variable x from the input	cin >> x ;
if m [ x ] > = c	if ( m [ x ] >= c )
increment m [ x ] by one	m [ x ] ++ ;
if m [ x ] is greater than y , assign the new value = m [ x ] to y	if ( m [ x ] > y ) y = m [ x ] ;
else	else
change the value of m [ x ] to c	m [ x ] = c ;
if m [ x ] is greater than y , set y to m [ x ]	if ( m [ x ] > y ) y = m [ x ] ;
print t - y	cout << t - y << endl ;
n = integer	int n ;
Read n	cin >> n ;
j , d , t = integers with all set to 0	int temp , j = 0 , d = 0 , t = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
Read temp	cin >> temp ;
if temp is equal to 1	if ( temp == 1 )
increment j	j ++ ;
else if temp is equal to 2	else if ( temp == 2 )
increment d	d ++ ;
else do the following	else
increment t	t ++ ;
set maximum value of ( maximum value of ( j and t ) and maximum value of ( j and d ) )	temp = max ( max ( j , t ) , max ( j , d ) ) ;
print n - temp and a new line	cout << n - temp << endl ;
v is a new array of integers with 5 elements	int v [ 5 ] ;
create new integer variable n	int n ;
read variable n from the input	cin >> n ;
incrementi i in a for loop , changing it from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create new integer called x	int x ;
read from the input to x	cin >> x ;
increment v [ x ] by one	v [ x ] ++ ;
maxi is a new integer variable = max of v [ 1 ] and max ( v [ 2 ] , v [ 3 ] )	int maxi = max ( v [ 1 ] , max ( v [ 2 ] , v [ 3 ] ) ) ;
print n - maxi	cout << n - maxi << endl ;
let n be a integer	int n ;
read n	cin >> n ;
a = array of integers of length 1000005	int a [ 1000005 ] ;
let n1 , n2 , n3 be integers	int n1 , n2 , n3 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is equal to 1	if ( a [ i ] == 1 )
increment n1 by 1	n1 ++ ;
else if a [ i ] is equal to 2	else if ( a [ i ] == 2 )
increment n2 by 1	n2 ++ ;
else do the following	else
increment n3 by 1	n3 ++ ;
if ( n1 > = n2 ) and ( n1 > = n3 )	if ( ( n1 >= n2 ) && ( n1 >= n3 ) )
print n - n1 and newline	cout << n - n1 << endl ;
else if ( n2 > = n1 ) and ( n2 > = n3 )	else if ( ( n2 >= n1 ) && ( n2 >= n3 ) )
print n - n2 and newline	cout << n - n2 << endl ;
else do the following	else
print n - n3 and newline	cout << n - n3 << endl ;
set num [ 4 ] = { 0 }	int num [ 4 ] = { 0 } ;
create int n	int n ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create int tmp	int tmp ;
read tmp	cin >> tmp ;
increment num [ tmp ]	num [ tmp ] ++ ;
if num [ 1 ] > = num [ 2 ] and num [ 1 ] > = num [ 3 ]	if ( num [ 1 ] >= num [ 2 ] && num [ 1 ] >= num [ 3 ] )
print num [ 2 ] + num [ 3 ]	cout << num [ 2 ] + num [ 3 ] << endl ;
else if num [ 2 ] > = num [ 1 ] and num [ 2 ] > = num [ 3 ]	else if ( num [ 2 ] >= num [ 1 ] && num [ 2 ] >= num [ 3 ] )
print num [ 1 ] + num [ 3 ]	cout << num [ 1 ] + num [ 3 ] << endl ;
else	else
print num [ 1 ] + num [ 2 ]	cout << num [ 1 ] + num [ 2 ] << endl ;
freq = array of 3 int	int freq [ 3 ] ;
a , b , mx = int	int a , b , mx ;
read a	cin >> a ;
for i = 0 to a exclusive	for ( int i = 0 ; i < a ; i ++ )
read b	cin >> b ;
increment freq [ b - 1 ]	freq [ b - 1 ] ++ ;
mx = max of freq items	mx = max ( max ( freq [ 0 ] , freq [ 1 ] ) , freq [ 2 ] ) ;
print a - mx	cout << a - mx << endl ;
let n be an integer	int n ;
read n	cin >> n ;
let a , b , c be integers with value of 0	int a = 0 , b = 0 , c = 0 ;
for int i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
let x be an integer	int x ;
read x	cin >> x ;
if x equals 1 , add one to a	if ( x == 1 ) a ++ ;
if x equals 2 , add one to b	if ( x == 2 ) b ++ ;
if x equals 3 , add one to c	if ( x == 3 ) c ++ ;
if a is greater or equal to b and a is greater or equal to c	if ( a >= b && a >= c )
print b + c	cout << b + c << endl ;
else if b is greater or equal to a and b is greater or equal to c	else if ( b >= a && b >= c )
print a + c	cout << a + c << endl ;
else if c is greater or equal to a and c is greater or equal to b	else if ( c >= a && c >= b )
print a + b	cout << a + b << endl ;
let n be integer	int n ;
read n	cin >> n ;
let freq be integer array of length 3 and initiate it to blank	int freq [ 3 ] = { } ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let x be integer	int x ;
read x	cin >> x ;
call freq with x - 1 and increment	freq [ x - 1 ] ++ ;
let m be integer and assign max ( freq [ 0 ] , max ( freq [ 1 ] , freq [ 2 ] ) ) to m	int m = max ( freq [ 0 ] , max ( freq [ 1 ] , freq [ 2 ] ) ) ;
print n - m	cout << n - m << endl ;
create int n , i , j , k , x	int n , i , j , k , x ;
crate vector int ct	vector < int > ct ( 4 , 0 ) ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read x	cin >> x ;
increment ct [ x ]	ct [ x ] ++ ;
print n - max of ct [ 1 ] and max ( ct [ 2 ] , ct [ 3 ] ) , and a newline	cout << n - max ( ct [ 1 ] , max ( ct [ 2 ] , ct [ 3 ] ) ) << " \n " ;
;	;
a = array of 11 integers	int a [ 11 ] ;
n , i , x = integers	int n , i , x ;
Read n	cin >> n ;
for i = 1 to n exclusive	for ( i = 1 ; i <= n ; i ++ )
Read x	cin >> x ;
increment a [ x ]	a [ x ] ++ ;
max = integer , set to - 1	int max = - 1 ;
for i = 1 to 3 exclusive	for ( i = 1 ; i <= 3 ; i ++ )
if a [ i ] is greater than max , set max to a [ i ]	if ( a [ i ] > max ) max = a [ i ] ;
print n - max and a new line	cout << n - max << endl ;
create int n	int n ;
read n	cin >> n ;
set a , b and c = 0	int a = 0 , b = 0 , c = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create int x	int x ;
read x	cin >> x ;
if x = 1 , increment a	if ( x == 1 ) a ++ ;
if x = 2 , increment b	if ( x == 2 ) b ++ ;
if x = 3 , add 1 to c	if ( x == 3 ) c ++ ;
if a > = b and a > = c	if ( a >= b && a >= c )
print b + c	cout << b + c << endl ;
else if b > = a and b > = c	else if ( b >= a && b >= c )
print a + c	cout << a + c << endl ;
else if c > = a and c > = b	else if ( c >= a && c >= b )
print a + b	cout << a + b << endl ;
a = integer array of size 1000005	int a [ 1000005 ] ;
in the function max that takes integer a , b and returns integer	int max ( int a , int b )
return if a > b , a else b	return a > b ? a : b ;
n = integer	int n ;
read n	cin >> n ;
x , y , z = integers x = 0 , y = 0 , z = 0	int x = 0 , y = 0 , z = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if ( a [ i ] is 1 ) , increment x	if ( a [ i ] == 1 ) { x ++ ; }
if ( a [ i ] is 2 ) , increment y	if ( a [ i ] == 2 ) { y ++ ; }
if ( a [ i ] is 3 ) , increment z	if ( a [ i ] == 3 ) { z ++ ; }
print x + y + z - max ( max ( x , y ) , z )	cout << x + y + z - max ( max ( x , y ) , z ) << endl ;
num = int array of length 4	int num [ 4 ] ;
n = int	int n ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
a = int	int a ;
read a	cin >> a ;
increment num at a	num [ a ] ++ ;
max_num = - 1 = int	int max_num = - 1 ;
for i = 1 to 3 inclusive	for ( int i = 1 ; i <= 3 ; i ++ )
if num [ i ] > max_num then set max_num to num at i	if ( num [ i ] > max_num ) { max_num = num [ i ] ; }
print n - max_num	cout << n - max_num << endl ;
create int A [ 4 ]	int A [ 4 ] ;
create int n and inp	int n , inp ;
read n	cin >> n ;
while read inp , pre increment A [ inp ]	while ( cin >> inp ) ++ A [ inp ] ;
print n - max ( A [ 1 ] , max ( A [ 2 ] , A [ 3 ] ) )	cout << n - max ( A [ 1 ] , max ( A [ 2 ] , A [ 3 ] ) ) << endl ;
create long long n and a	long long n , a ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
a = n / 2	a = n / 2 ;
else	else
set ( ( n + 1 ) / 2 ) * ( - 1 )	a = ( ( n + 1 ) / 2 ) * ( - 1 ) ;
print a	cout << a << endl ;
let n be a long integer	long long n ;
read n	cin >> n ;
if n modulo 2 is equal to 0	if ( n % 2 == 0 )
print n / 2 and newline	cout << n / 2 << endl ;
else do the following	else
print ( - n - 1 ) / 2 and newline	cout << ( - n - 1 ) / 2 << endl ;
in function MIN taking long long int a , long long int b and returning long long int	long long int MIN ( long long int a , long long int b )
if a > b	if ( a > b )
return b	return b ;
else	else
return a	return a ;
in function MAX taking long long int a , long long int b and returning long long int	long long int MAX ( long long int a , long long int b )
if a > b	if ( a > b )
return a	return a ;
else	else
return b	return b ;
in function MOD taking long long int x and returning long long int	long long int MOD ( long long int x )
if x > = 0	if ( x >= 0 )
return x	return x ;
else	else
return - x	return - x ;
n = long long int	long long int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
d = long long int with d = n / 2	long long int d = n / 2 ;
decrement d by n	d -= n ;
print d	cout << d << endl ;
n , a = long long	long long n , a ;
read n	cin >> n ;
set a to n / 2	a = n / 2 ;
if n is even	if ( n % 2 == 0 )
print a	cout << a << endl ;
else	else
print a - n	cout << a - n << endl ;
declare long longs a , b = 0	long long a , b = 0 ;
read a	cin >> a ;
declare integer i	int i ;
if a % 2 is not 0	if ( a % 2 != 0 )
let i be - 1	i = - 1 ;
else	else
let i be 0	i = 0 ;
let b be a / 2 * ( - 1 raised to power of a % 2 ) + i	b = a / 2 * powl ( - 1 , a % 2 ) + i ;
print b and newline	cout << b << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
print - ( n + 1 ) / 2	cout << - ( n + 1 ) / 2 << endl ;
create long long int n	long long int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
print - , ( n + 1 ) / 2	cout << " - " << ( n + 1 ) / 2 << endl ;
declare long longs n , a	long long n , a ;
read n	cin >> n ;
if n % 2 is 0	if ( n % 2 == 0 )
let a be n / 2	a = n / 2 ;
else	else
let a be ( ( n + 1 ) / 2 ) * ( - 1 )	a = ( ( n + 1 ) / 2 ) * ( - 1 ) ;
print a and newline	cout << a << endl ;
create long long int n	long long int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else if n = 1	else if ( n == 1 )
print - 1 and a newline	cout << " -1\n " ;
create long long int div	long long int div ;
div = n / 2	div = n / 2 ;
set n = ( n * ( - 1 ) ) + div	n = ( n * ( - 1 ) ) + div ;
print n	cout << n << endl ;
n = 0	long long int n = 0 ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
print - ( ( n + 1 ) / 2 )	cout << - ( ( n + 1 ) / 2 ) << endl ;
n = long long int	long long int n ;
read n	cin >> n ;
if ( ( n modulo 2 ) is 0 )	if ( ( n % 2 ) == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
print ( n / 2 ) - n	cout << ( n / 2 ) - n << endl ;
declare f with long long as argument , returning long long	long long f ( long long ) ;
declare long long n	long long n ;
read n	cin >> n ;
run f ( n )	f ( n ) ;
declare f with long long n as argument , returning long long	long long f ( long long n )
if n % 2 is 0	if ( n % 2 == 0 )
print ( n / 2 ) and newline	cout << ( n / 2 ) << endl ;
else	else
print ( n / 2 - n ) and newline	cout << ( n / 2 - n ) << endl ;
declare integer array dx = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 }	int dx [ ] = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;
declare integer array dy = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 }	int dy [ ] = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;
declare fast with no arguments , returning void	void fast ( ) { }
declare constant long long md = 1e9 + 7	const long long md = 1e9 + 7 ;
run fast	fast ( ) ;
declare long long n	long long n ;
read n	cin >> n ;
if n % 2 is 0	if ( n % 2 == 0 )
print n / 2 and " \ n "	cout << n / 2 << " \n " ;
else	else
print - ( n + 1 ) / 2 and " \ n "	cout << - ( n + 1 ) / 2 << " \n " ;
declare long long variable n	long long n ;
read n from the input	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
print - ( n + 1 ) / 2 to the output	cout << - ( n + 1 ) / 2 << endl ;
create long long variable n	long long n ;
read user input to n	cin >> n ;
define long long chk = 0	long long chk = 0 ;
assign n / 2 to chk	chk = n / 2 ;
if chk * 2 is equal to n	if ( chk * 2 == n )
print chk to the standard output	cout << chk ;
else	else
print chk - n to the standard output	cout << chk - n ;
print new line	cout << endl ;
n = long long ing	long long int n ;
read n	cin >> n ;
if n is even	if ( n % 2 == 0 )
print n / 2	cout << n / 2 << endl ;
else	else
ans = long long int with value of ( n - 1 ) / 2	long long int ans = ( n - 1 ) / 2 ;
print - 1 - ans	cout << - 1 - ans << endl ;
n , y = long long	long long n , y ;
x = double	double x ;
read n	cin >> n ;
if n % 2 = 0 & & n ! = 0m print n / 2	if ( n % 2 == 0 && n != 0 ) { cout << n / 2 << endl ; }
if n % 2 ! = 0 & & n ! = 0	if ( n % 2 != 0 && n != 0 )
let x = ceil ( 1 . * n / 2 )	x = ceil ( ( 1. * n ) / 2 ) ;
let y = x	y = x ;
print - y	cout << - y << endl ;
declare long long n	long long n ;
read n	cin >> n ;
declare long long k1 = ( ( 2 + ( n - 1 if n % 2 is 1 , else n ) ) / 2 ) * ( n / 2 )	long long k1 = ( ( 2 + ( n % 2 == 1 ? n - 1 : n ) ) / 2 ) * ( n / 2 ) ;
declare long long k2 = ( ( 1 + ( n if n % 2 is 1 , else n - 1 ) ) / 2 ) * ( ( n + 1 ) / 2 )	long long k2 = ( ( 1 + ( n % 2 == 1 ? n : n - 1 ) ) / 2 ) * ( ( n + 1 ) / 2 ) ;
print k1 - k2 and ' \ n '	cout << k1 - k2 << ' \n ' ;
num = char	char num ;
n = int , n = 0	int n = 0 ;
while num is not a new line	while ( num != ' \n ' )
let num = getchar	num = getchar ( ) ;
if n = 0 and num = 9	if ( n == 0 && num == ' 9 ' )
print num	cout << num ;
else if num > = 5	else if ( num >= ' 5 ' )
print 9	cout << ' 9 ' - num ;
else	else
print num	cout << num ;
add one to n	n ++ ;
function check with int arguments x and y that returns int	int check ( int x , int y )
if x < = y , return x	if ( x <= y ) return x ;
return y	return y ;
define strings s and p with p = " "	string s , p = "  " ;
declare int variables i and j	int i , j ;
read variable s from the input	cin >> s ;
assign the new value = s to p	p = s ;
for i = length of s - 1 to 0 counting down	for ( i = s . size ( ) - 1 ; i > 0 ; i -- )
change j to the result of check ( s [ i ] - ' 0 ' , 9 - ( s [ i ] - ' 0 ' ) )	j = check ( s [ i ] - ' 0 ' , 9 - ( s [ i ] - ' 0 ' ) ) ;
assign the new value = ( j + ' 0 ' ) casted to char , to p [ i ]	p [ i ] = ( char ) ( j + ' 0 ' ) ;
change j to 9 - ( s [ 0 ] - ' 0 ' )	j = 9 - ( s [ 0 ] - ' 0 ' ) ;
if j is not 0	if ( j )
assign the returned value of check ( s [ 0 ] - ' 0 ' , 9 - ( s [ 0 ] - ' 0 ' ) ) to j	j = check ( s [ 0 ] - ' 0 ' , 9 - ( s [ 0 ] - ' 0 ' ) ) ;
change p [ 0 ] to ( j + ' 0 ' ) casted to char	p [ 0 ] = ( char ) ( j + ' 0 ' ) ;
print p	cout << p << endl ;
declare string s	string s ;
new integer i	int i ;
read s and keep looping	while ( cin >> s )
change the value of i to 0	i = 0 ;
if s [ 0 ] is equal to ' 9 ' , increment i by one	if ( s [ 0 ] == ' 9 ' ) i ++ ;
while i < length of s , increment it by 1 in a loop	for ( ; i < s . size ( ) ; i ++ )
if s [ i ] is greater than ' 4 ' , assign the value = ' 9 ' - s [ i ] + ' 0 ' to s [ i ]	if ( s [ i ] > ' 4 ' ) { s [ i ] = ' 9 ' - s [ i ] + ' 0 ' ; }
print s to the standard output	cout << s << endl ;
declare new string s	string s ;
read variable s from the input	cin >> s ;
for integer i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] - ' 0 ' > = 5	if ( s [ i ] - ' 0 ' >= 5 )
create integer x with value = 9 - ( s [ i ] - ' 0 ' )	int x = 9 - ( s [ i ] - ' 0 ' ) ;
change s [ i ] to x + ' 0 '	s [ i ] = x + ' 0 ' ;
if s [ 0 ] is equal to ' 0 ' , set s [ 0 ] to ' 9 '	if ( s [ 0 ] == ' 0 ' ) { s [ 0 ] = ' 9 ' ; }
print s	cout << s << endl ;
define string s	string s ;
read from the input to s	cin >> s ;
for i from 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if i = 0 and s [ i ] is equal to ' 9 ' , go to the start of the loop	if ( i == 0 && s [ i ] == ' 9 ' ) continue ;
if s [ i ] > = ' 5 ' , change s [ i ] to ' 9 ' - s [ i ] + ' 0 '	if ( s [ i ] >= ' 5 ' ) { s [ i ] = ' 9 ' - s [ i ] + ' 0 ' ; }
print s	cout << s << endl ;
create new string s	string s ;
read standard input to s	cin >> s ;
for i = 0 to length of s exclusive	for ( long long int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] = ' 9 '	if ( s [ i ] == ' 9 ' )
if i is equal to 0	if ( i == 0 )
go to the start of the loop	continue ;
else	else
assign the new value = ' 0 ' to s [ i ]	s [ i ] = ' 0 ' ;
go to the start of the loop	continue ;
if s [ i ] - ' 0 ' is greater than 4 , set s [ i ] to 48 + 9 - ( s [ i ] - ' 0 ' )	if ( ( s [ i ] - ' 0 ' ) > 4 ) s [ i ] = 48 + 9 - ( s [ i ] - ' 0 ' ) ;
print s and " \ n " to the standard output	cout << s << " \n " ;
s = string	string s ;
read s	cin >> s ;
i = unsigned long long int with i = 0	unsigned long long int i = 0 ;
if s [ i ] is ' 9 '	if ( s [ i ] == ' 9 ' )
print s [ i ]	cout << s [ i ] ;
increment i	i ++ ;
continue iterating i while i < length of s print min of s [ i ] - ' 0 ' , 9 - ( s [ i ] - ' 0 ' )	for ( ; i < s . length ( ) ; i ++ ) { cout << min ( s [ i ] - ' 0 ' , 9 - ( s [ i ] - ' 0 ' ) ) ; }
print newline	cout << endl ;
let numero be a string	string numero ;
read numero	cin >> numero ;
let n be a integer with n is equal to length of numero	int n = numero . size ( ) ;
for i = 0 to n - 1 inclusive	for ( int i = 0 ; i <= n - 1 ; ++ i )
let x be a integer with x = numero [ i ] - 0	int x = numero [ i ] - ' 0 ' ;
if i is equal to 0	if ( i == 0 )
if 5 < = x and x < = 8 , numero [ i ] is equal to ( char ) ( 0 + 9 - x )	if ( 5 <= x and x <= 8 ) { numero [ i ] = ( char ) ( ' 0 ' + 9 - x ) ; }
else if 5 < = x	else if ( 5 <= x )
numero [ i ] is equal to ( char ) ( 0 + 9 - x )	numero [ i ] = ( char ) ( ' 0 ' + 9 - x ) ;
print numero and newline	cout << numero << endl ;
declare integer array a size 100010	int a [ 100010 ] ;
declare long long array cnt size 100010	long long cnt [ 100010 ] ;
declare character array c size 155	char c [ 155 ] ;
declare integer array num size 155	int num [ 155 ] ;
read c	cin >> c ;
declare integer len = string length of c	int len = strlen ( c ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if c [ i ] is greater than or equal to ' 5 ' and c [ i ] is less than or equal to ' 9 '	if ( c [ i ] >= ' 5 ' && c [ i ] <= ' 9 ' )
if c [ i ] is ' 9 ' and i is 0	if ( ( c [ i ] == ' 9 ' && i == 0 ) )
let num [ i ] be c [ i ] - ' 0 '	num [ i ] = c [ i ] - ' 0 ' ;
else	else
let num [ i ] be 9 - ( c [ i ] - ' 0 ' )	num [ i ] = 9 - ( c [ i ] - ' 0 ' ) ;
else	else
let num [ i ] be c [ i ] - ' 0 '	num [ i ] = c [ i ] - ' 0 ' ;
for i = 0 to len exclusive , print num [ i ]	for ( int i = 0 ; i < len ; i ++ ) cout << num [ i ] ;
print newline	cout << endl ;
declare character array x size 20	char x [ 20 ] ;
declare integer ok = 1	int ok = 1 ;
while read x is true	while ( cin >> x )
declare integer len = string length of x	int len = strlen ( x ) ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if i is 0	if ( i == 0 )
if x [ i ] is ' 9 '	if ( x [ i ] == ' 9 ' )
print x [ i ]	cout << x [ i ] ;
else if x [ i ] is greater than or equal to ' 5 '	else if ( x [ i ] >= ' 5 ' )
print ' 9 ' - x [ i ]	cout << ' 9 ' - x [ i ] ;
else	else
print x [ i ]	cout << x [ i ] ;
else	else
if x [ i ] is greater than or equal to ' 5 '	if ( x [ i ] >= ' 5 ' )
print ' 9 ' - x [ i ]	cout << ' 9 ' - x [ i ] ;
else	else
print x [ i ]	cout << x [ i ] ;
print newline	cout << endl ;
create string str	string str ;
read str	cin >> str ;
for i = 0 to size of str exclusive	for ( int i = 0 ; i < str . size ( ) ; i ++ )
if i = 0 and str [ i ] = 9 , continue	if ( i == 0 && str [ i ] == ' 9 ' ) { continue ; }
if str [ i ] > 4 , set str [ i ] = 9 - str [ i ] + 48	if ( str [ i ] > ' 4 ' ) { str [ i ] = ' 9 ' - str [ i ] + 48 ; }
print str	cout << str << endl ;
create string s	string s ;
read s	cin >> s ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] > 9 - s [ i ] + 0 , s [ i ] = 9 - s [ i ] + 0	if ( s [ i ] > ' 9 ' - s [ i ] + ' 0 ' ) s [ i ] = ' 9 ' - s [ i ] + ' 0 ' ;
if s [ 0 ] = 0 , s [ 0 ] = 9	if ( s [ 0 ] == ' 0 ' ) s [ 0 ] = ' 9 ' ;
print s	cout << s << endl ;
define new string a	string a ;
read user input to a	cin >> a ;
for i = 0 to length of a exclusive	for ( int i = 0 ; i < a . size ( ) ; i ++ )
if a [ i ] > = ' 5 ' , change the value of a [ i ] to 9 - ( a [ i ] - ' 0 ' ) + ' 0 '	if ( a [ i ] >= ' 5 ' ) a [ i ] = 9 - ( a [ i ] - ' 0 ' ) + ' 0 ' ;
if a [ 0 ] is equal to ' 0 '	if ( a [ 0 ] == ' 0 ' )
print 9	cout << 9 ;
else	else
print a [ 0 ]	cout << a [ 0 ] ;
print all elements of a , starting from the index 1 , to the output	for ( int j = 1 ; j < a . size ( ) ; j ++ ) { cout << a [ j ] ; }
print new line	cout << endl ;
create strings s and output	string s , output ;
read from the input to s	cin >> s ;
start for loop from i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
declare new integer temp with value s [ i ] - 48	int temp = s [ i ] - 48 ;
create new character called tempChar = ' \ 0 '	char tempChar = ' \0 ' ;
if ( i = 0 and temp = 9 ) or temp < 5	if ( ( i == 0 && temp == 9 ) || temp < 5 )
add new element = s [ i ] after the last element of output	output . push_back ( s [ i ] ) ;
else	else
assign ( 9 - temp ) + 48 to tempChar	tempChar = ( 9 - temp ) + 48 ;
push tempChar to the variable output	output . push_back ( tempChar ) ;
print output to the stdout	cout << output << endl ;
arr = 4 * 1e5	const int arr = 4 * 1e5 ;
md = 1e9 + 7	const int md = 1e9 + 7 ;
create int pref [ 2600 ] [ 2600 ]	int pref [ 2600 ] [ 2600 ] ;
create n and m	int n , m ;
call solve ( int u )	int solve ( int u )
res = 0	int res = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i += u )
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; j += u )
l1 = i	int l1 = i ;
set l2 = j	int l2 = j ;
assign min ( n , i + u ) to r1	int r1 = min ( n , i + u ) ;
set r2 to min ( m , j + u )	int r2 = min ( m , j + u ) ;
set now = pref [ r1 ] [ r2 ] - pref [ r1 ] [ l2 ] - pref [ l1 ] [ r2 ] + pref [ l1 ] [ l2 ] ;	int now = pref [ r1 ] [ r2 ] - pref [ r1 ] [ l2 ] - pref [ l1 ] [ r2 ] + pref [ l1 ] [ l2 ] ;
set res to res + min of now and u * u - now	res += min ( now , u * u - now ) ;
return res	return ( res ) ;
read n and m	cin >> n >> m ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create string st	string st ;
read st	cin >> st ;
for j = 0 to size of st , pref [ i ] [ j + 1 ] = st [ j ] - 0	for ( int j = 0 ; j < st . size ( ) ; j ++ ) pref [ i ] [ j + 1 ] = st [ j ] - ' 0 ' ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to m inclusive , set pref [ i ] [ j ] = pref [ i - 1 ] [ j ] + pref [ i ] [ j - 1 ] - pref [ i - 1 ] [ j - 1 ] + pref [ i ] [ j ]	for ( int j = 1 ; j <= m ; j ++ ) pref [ i ] [ j ] = pref [ i - 1 ] [ j ] + pref [ i ] [ j - 1 ] - pref [ i - 1 ] [ j - 1 ] + pref [ i ] [ j ] ;
assign 1e9 to ans	int ans = 1e9 ;
for k = 2 to max of n and m inclusive , set ans to min of ans and solve ( k )	for ( int k = 2 ; k <= max ( n , m ) ; k ++ ) ans = min ( ans , solve ( k ) ) ;
print ans and a newline	cout << ans << ' \n ' ;
declare integer array at size 5001 by 5001	int mat [ 5001 ] [ 5001 ] ;
declare integer array psum size 5001 by 5001	int psum [ 5001 ] [ 5001 ] ;
declare sum with integers fi , li , fj , lj as arguments , returning integer	int sum ( int fi , int li , int fj , int lj )
declare integer big = psum [ li ] [ lj ]	int big = psum [ li ] [ lj ] ;
declare integer smol = psum [ fi - 1 ] [ fj - 1 ] if fi and fj , else 0	int smol = ( fi and fj ? psum [ fi - 1 ] [ fj - 1 ] : 0 ) ;
declare integer lat1 = psum [ li ] [ fj - 1 ] if fj is true , else 0	int lat1 = ( fj ? psum [ li ] [ fj - 1 ] : 0 ) ;
declare integer lat2 = psum [ fi - 1 ] [ lj ] if fi is true , else 0	int lat2 = ( fi ? psum [ fi - 1 ] [ lj ] : 0 ) ;
return big + smol - lat1 - lat2 from function	return big + smol - lat1 - lat2 ;
declare integers n , m	int n , m ;
read n and m	cin >> n >> m ;
for i = 0 to 5001 exclusive	for ( int i = 0 ; i < 5001 ; ++ i )
for j = 0 to 5001 exclusive , let mat [ i ] [ j ] be 0	for ( int j = 0 ; j < 5001 ; ++ j ) { mat [ i ] [ j ] = 0 ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
declare string s	string s ;
read s	cin >> s ;
for j = 0 to m exclusive , let max [ i ] [ j ] be s [ j ] - ' 0 '	for ( int j = 0 ; j < m ; ++ j ) { mat [ i ] [ j ] = s [ j ] - ' 0 ' ; }
let psum [ 0 ] [ 0 ] be mat [ 0 ] [ 0 ]	psum [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;
for i = 1 to 5001 exclusive , let psum [ 0 ] [ i ] be psum [ 0 ] [ i - 1 ] + mat [ 0 ] [ i ]	for ( int i = 1 ; i < 5001 ; ++ i ) { psum [ 0 ] [ i ] = psum [ 0 ] [ i - 1 ] + mat [ 0 ] [ i ] ; }
for i = 1 to 5001 exclusive , let psum [ i ] [ 0 ] be psum [ i - 1 ] [ 0 ] + mat [ i ] [ 0 ]	for ( int i = 1 ; i < 5001 ; ++ i ) { psum [ i ] [ 0 ] = psum [ i - 1 ] [ 0 ] + mat [ i ] [ 0 ] ; }
for i = 1 to 5001 exclusive	for ( int i = 1 ; i < 5001 ; ++ i )
for j = 1 to 5001 exclusive , let psum [ i ] [ j ] be psum [ i ] [ j - 1 ] + psum [ i - 1 ] [ j ] - psum [ i - 1 ] [ j - 1 ] + mat [ i ] [ j ]	for ( int j = 1 ; j < 5001 ; ++ j ) { psum [ i ] [ j ] = psum [ i ] [ j - 1 ] + psum [ i - 1 ] [ j ] - psum [ i - 1 ] [ j - 1 ] + mat [ i ] [ j ] ; }
declare integer ans = 1e9	int ans = 1e9 ;
for k = 2 to 2500 inclusive	for ( int k = 2 ; k <= 2500 ; ++ k )
end statement	;
declare integer pans = 0	int pans = 0 ;
for i = 0 to ( n + k - 1 ) / k exclusive	for ( int i = 0 ; i < ( n + k - 1 ) / k ; ++ i )
for j = t0 to ( m + k - 1 ) / k excclusive	for ( int j = 0 ; j < ( m + k - 1 ) / k ; ++ j )
declare integer c1 = result of run sum with i * k , ( i + 1 ) * k - 1 , j * k , ( j + 1 ) * k - 1 as arguments	int c1 = sum ( i * k , ( i + 1 ) * k - 1 , j * k , ( j + 1 ) * k - 1 ) ;
declare integer c0 = k * k - c1	int c0 = k * k - c1 ;
end statement	;
end statement	;
end statement	;
end statement	;
increment pans by minimum of c0 and c1	pans += min ( c0 , c1 ) ;
end statement	;
let ans be minimum of ans and pans	ans = min ( ans , pans ) ;
print ans and ' \ n '	cout << ans << ' \n ' ;
create int array dp of size 2505 with array of size 2505	int dp [ 2505 ] [ 2505 ] ;
make ints n and m	int n , m ;
declare cntt taking in int k and returning integer	int cntt ( int k )
create integers k - 1 and res = 0	int k1 = k - 1 , res = 0 ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i += k )
for j = 1 to m	for ( int j = 1 ; j <= m ; j += k )
create integer cnt = 0	int cnt = 0 ;
set cnt to cnt + dp [ min ( i + k1 , n ) ] [ min ( j + k1 , m ) ]	cnt += dp [ min ( i + k1 , n ) ] [ min ( j + k1 , m ) ] ;
set cnt to cnt - dp [ i - 1 ] [ min ( j + k1 , m ) ]	cnt -= dp [ i - 1 ] [ min ( j + k1 , m ) ] ;
subtract dp [ min ( i + k1 , n ) ] [ j - 1 ] from cnt	cnt -= dp [ min ( i + k1 , n ) ] [ j - 1 ] ;
add dp [ i - 1 ] [ j - 1 ] to cnt	cnt += dp [ i - 1 ] [ j - 1 ] ;
add min ( cnt , k * k - cnt ) to res	res += min ( cnt , k * k - cnt ) ;
return res	return res ;
read n and m	cin >> n >> m ;
create string s	string s ;
for i = 1 to n	for ( int i = 1 ; i <= n ; ++ i )
read s	cin >> s ;
for j = 1 to m , set dp [ i ] [ j ] to dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] - dp [ i - 1 ] [ j - 1 ] + s [ j - 1 ] - ' 0 '	for ( int j = 1 ; j <= m ; ++ j ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] - dp [ i - 1 ] [ j - 1 ] + s [ j - 1 ] - ' 0 ' ; }
create integer res = n * m	int res = n * m ;
for k = 2 to min ( n , m ) , set res to min of res and cntt ( k )	for ( int k = 2 ; k <= min ( n , m ) ; ++ k ) { res = min ( res , cntt ( k ) ) ; }
show res	cout << res << ' \n ' ;
create int array mat of size 5001 with array of size 5001	int mat [ 5001 ] [ 5001 ] ;
make integer array psum of size 5001 with array of size 5001	int psum [ 5001 ] [ 5001 ] ;
declare sum taking in ints fi , li , fj , and lj and returning integer	int sum ( int fi , int li , int fj , int lj )
make integer big = psum [ li ] [ lj ]	int big = psum [ li ] [ lj ] ;
create integer smol =	int smol = ( fi and fj ? psum [ fi - 1 ] [ fj - 1 ] : 0 ) ;
make integer lat1 = ( fj ? psum [ li ] [ fj - 1 ] : 0 )	int lat1 = ( fj ? psum [ li ] [ fj - 1 ] : 0 ) ;
let int lat2 = ( fi ? psum [ fi - 1 ] [ lj ] : 0 )	int lat2 = ( fi ? psum [ fi - 1 ] [ lj ] : 0 ) ;
return big + smol - lat1 - lat2	return big + smol - lat1 - lat2 ;
create ints n and m	int n , m ;
read n and m	cin >> n >> m ;
for i = 0 to 5001 exclusive	for ( int i = 0 ; i < 5001 ; ++ i )
for j = 0 to 5001 exclusive , set mat [ i ] [ j ] to 1	for ( int j = 0 ; j < 5001 ; ++ j ) { mat [ i ] [ j ] = 0 ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
make string s	string s ;
read s	cin >> s ;
for j = 0 to m exclusive , set m [ i ] [ j ] to s [ j ] - ' 0 '	for ( int j = 0 ; j < m ; ++ j ) { mat [ i ] [ j ] = s [ j ] - ' 0 ' ; }
set psum [ 0 ] [ 0 ] to mat [ 0 ] [ 0 ]	psum [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;
for i = 1 to 5001 exclusive , set psum [ 0 ] [ i ] to psum [ 0 ] [ i - 1 ] + mat [ 0 ] [ i ]	for ( int i = 1 ; i < 5001 ; ++ i ) { psum [ 0 ] [ i ] = psum [ 0 ] [ i - 1 ] + mat [ 0 ] [ i ] ; }
for i = 1 to 5001 exclusive , set psum [ i ] [ 0 ] to psum [ i - 1 ] [ 0 ] + mat [ i ] [ 0 ]	for ( int i = 1 ; i < 5001 ; ++ i ) { psum [ i ] [ 0 ] = psum [ i - 1 ] [ 0 ] + mat [ i ] [ 0 ] ; }
for i = 1 to 5001 exclusive	for ( int i = 1 ; i < 5001 ; ++ i )
for j = 1 to 5001 exclusive , set psum [ i ] [ j ] to psum [ i ] [ j - 1 ] + psum [ i - 1 ] [ j ] - psum [ i - 1 ] [ j - 1 ] + mat [ i ] [ j ]	for ( int j = 1 ; j < 5001 ; ++ j ) { psum [ i ] [ j ] = psum [ i ] [ j - 1 ] + psum [ i - 1 ] [ j ] - psum [ i - 1 ] [ j - 1 ] + mat [ i ] [ j ] ; }
make integer ans = 1e9	int ans = 1e9 ;
for k = 2 to 10	for ( int k = 2 ; k <= 10 ; ++ k )
end statement	;
make integer pans = 0	int pans = 0 ;
for i = 0 to ( n + k - 1 ) / k exclusive	for ( int i = 0 ; i < ( n + k - 1 ) / k ; ++ i )
for j = 0 to ( m + k - 1 ) / k exclusive	for ( int j = 0 ; j < ( m + k - 1 ) / k ; ++ j )
create int c1 = sum ( i * k , ( i + 1 ) * k - 1 , j * k , ( j + 1 ) * k - 1 )	int c1 = sum ( i * k , ( i + 1 ) * k - 1 , j * k , ( j + 1 ) * k - 1 ) ;
create integer c0 to k * k - c1	int c0 = k * k - c1 ;
end	;
end	;
end	;
end statement	;
set pans to pans + min of c0 and c1	pans += min ( c0 , c1 ) ;
end statement	;
set ans to min of ans and pans	ans = min ( ans , pans ) ;
print ans	cout << ans << ' \n ' ;
db = string of size 2501	string db [ 2501 ] ;
n , m , ans , prf = integers with ans = 6250000 , prf = array of size [ 2 * 2501 ] [ 2 * 2501 ]	int n , m , ans = 6250000 , prf [ 2 * 2501 ] [ 2 * 2501 ] ;
read n , m	cin >> n >> m ;
for i = 0 to n exclusive , read db [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> db [ i ] ; }
for i = 0 to 2 * 2501 exclusive	for ( int i = 0 ; i < 2 * 2501 ; i ++ )
for j = 0 to 2 * 2501 exclusive	for ( int j = 0 ; j < 2 * 2501 ; j ++ )
if ( i < n and j < m and db [ i ] [ j ] is 1 ) , prf [ i ] [ j ] = 1	if ( i < n && j < m && db [ i ] [ j ] == ' 1 ' ) prf [ i ] [ j ] = 1 ;
if ( i ) , prf [ i ] [ j ] = prf [ i ] [ j ] + prf [ i - 1 ] [ j ]	if ( i ) prf [ i ] [ j ] += prf [ i - 1 ] [ j ] ;
if ( j ) , prf [ i ] [ j ] = prf [ i ] [ j ] + prf [ i ] [ j - 1 ]	if ( j ) prf [ i ] [ j ] += prf [ i ] [ j - 1 ] ;
if ( i and j ) , prf [ i ] [ j ] = prf [ i ] [ j ] - prf [ i - 1 ] [ j - 1 ]	if ( i && j ) prf [ i ] [ j ] -= prf [ i - 1 ] [ j - 1 ] ;
maxk = integer with maxk = min of n and m	int maxk = min ( n , m ) ;
for k = 2 to maxk	for ( int k = 2 ; k <= maxk ; k ++ )
tmp_ans = integer with tmp_ans = 0	int tmp_ans = 0 ;
for i = 0 to n exclusvie , i = i + k	for ( int i = 0 ; i < n ; i += k )
for j = 0 to m exclusive , j = j + k	for ( int j = 0 ; j < m ; j += k )
solve = integer with solve = prf [ i + k - 1 ] [ j + k - 1 ]	int solve = prf [ i + k - 1 ] [ j + k - 1 ] ;
if ( i ) , solve = solve - prf [ i - 1 ] [ j + k - 1 ]	if ( i ) solve -= prf [ i - 1 ] [ j + k - 1 ] ;
if ( j ) , solve = solve - prf [ i + k - 1 ] [ j - 1 ]	if ( j ) solve -= prf [ i + k - 1 ] [ j - 1 ] ;
if ( i and j ) , solve = solve + prf [ i - 1 ] [ j - 1 ]	if ( i && j ) solve += prf [ i - 1 ] [ j - 1 ] ;
tmp_ans = tmp_ans + min ( solve , k * k - solve )	tmp_ans += min ( solve , k * k - solve ) ;
ans = min of ans and tmp_ans	ans = min ( ans , tmp_ans ) ;
print ans	cout << ans << endl ;
MAXN , MAXM = const int with MAXN = 2500 and MAXM = 2500	const int MAXN = 2500 , MAXM = 2500 ;
S = two dimensional int array of sizes MAXN + 1 and MAXM + 1	int S [ MAXN + 1 ] [ MAXM + 1 ] ;
N , M = int	int N , M ;
read N then M	cin >> N >> M ;
for i = 1 to N inclusive	for ( int i = 1 ; i <= N ; ++ i )
R = string	string R ;
read R	cin >> R ;
for j = 1 to M inclusive set S [ i ] [ j ] to ( R [ j - 1 ] - ' 0 ' ) + S [ i - 1 ] [ j ] + S [ i ] [ j - 1 ] - S [ i - 1 ] [ j - 1 ]	for ( int j = 1 ; j <= M ; ++ j ) S [ i ] [ j ] = ( R [ j - 1 ] - ' 0 ' ) + S [ i - 1 ] [ j ] + S [ i ] [ j - 1 ] - S [ i - 1 ] [ j - 1 ] ;
ans = int with ans = INT_MAX	int ans = INT_MAX ;
iterate k from 2 while k < = N or k < = M	for ( int k = 2 ; k <= N || k <= M ; ++ k )
aux = int with aux = 0	int aux = 0 ;
for i = 1 to N inclusive incrementing i by k	for ( int i = 1 ; i <= N ; i += k )
for j = 1 to M inclusive incrementing j by k	for ( int j = 1 ; j <= M ; j += k )
ii , jj = int with ii = min of N , i + k - 1 and jj = min of M , j + k - 1	int ii = min ( N , i + k - 1 ) , jj = min ( M , j + k - 1 ) ;
q = int with q = S [ ii ] [ jj ] - S [ ii ] [ j - 1 ] - S [ i - 1 ] [ jj ] + S [ i - 1 ] [ j - 1 ]	int q = S [ ii ] [ jj ] - S [ ii ] [ j - 1 ] - S [ i - 1 ] [ jj ] + S [ i - 1 ] [ j - 1 ] ;
increment aux by min of q , k * k - q	aux += min ( q , k * k - q ) ;
set ans to min of ans , aux	ans = min ( ans , aux ) ;
print ans	cout << ans << ' \n ' ;
let n be a integer	int n ;
read n	cin >> n ;
if n equals 2	if ( n == 2 )
print 2 and newline	cout << " 2\n " ;
else do the following	else
print 1 and newline	cout << " 1\n " ;
n = int	int n ;
while read n	while ( cin >> n )
if n is 2	if ( n == 2 )
print 2	cout << 2 << endl ;
else	else
print 1	cout << 1 << endl ;
n = int	int n ;
read n	cin >> n ;
if n is 2	if ( n == 2 )
print " 2 "	cout << " 2 " << endl ;
else	else
print " 1 "	cout << " 1 " << endl ;
n = int	int n ;
read n	cin >> n ;
if n = 2	if ( n == 2 )
print n	cout << n << endl ;
else	else
print 1	cout << 1 << endl ;
integer as l , r , a , b , d , i , n	int l , r , a , b , d , i , n ;
read n	cin >> n ;
output 2 if n = 2 , else output 1	cout << ( ( n == 2 ) ? 2 : 1 ) << " \n " ;
declare integer n	int n ;
read n	cin >> n ;
if n is 2	if ( n == 2 )
print 2 and newline	cout << 2 << endl ;
else	else
print 1 and newline	cout << 1 << endl ;
declare integer n	int n ;
read n	cin >> n ;
if n is 2	if ( n == 2 )
print 2 and newline	cout << 2 << endl ;
else	else
print 1 and newline	cout << 1 << endl ;
declare integer v	int v ;
read v	cin >> v ;
if v is 2	if ( v == 2 )
print 2 and newline	cout << 2 << endl ;
else	else
print 1 and newline	cout << 1 << endl ;
n = int	int n ;
read n	cin >> n ;
if n is not 2	if ( n != 2 )
print " 1 "	cout << " 1 " << endl ;
else	else
print " 2 "	cout << " 2 " << endl ;
let n , x , v be long integers	long int n , x , v ;
read v	cin >> v ;
n is equal to v	n = v ;
if n is greater than 2	if ( n > 2 )
n is equal to 1	n = 1 ;
else if n is equal to 2	else if ( n == 2 )
n is equal to 2	n = 2 ;
print n and newline	cout << n << endl ;
integer as n	int n ;
read n	cin >> n ;
if n is 1 or n is 2 then do the following	if ( n == 1 || n == 2 )
output n	cout << n << endl ;
else	else
output 1	cout << 1 << endl ;
let n be a integer	int n ;
read n	cin >> n ;
if n equals 2	if ( n == 2 )
print 2 and newline	cout << " 2 " << endl ;
else do the following	else
print 1 and newline	cout << " 1 " << endl ;
let n be a long integer	long long n ;
while read n	while ( cin >> n )
if n equals 2	if ( n == 2 )
print 2 and newline	cout << " 2 " << endl ;
else do the following	else
print 1 and newline	cout << " 1 " << endl ;
n = int	int n ;
read n	cin >> n ;
if n is 2	if ( n == 2 )
print 2	cout << " 2\n " ;
else	else
print 1	cout << " 1\n " ;
n = integer	int n ;
read n	cin >> n ;
if ( n is 2 )	if ( n == 2 )
read n	cout << n << endl ;
else	else
print 1	cout << " 1\n " ;
n = int	int n ;
read n	cin >> n ;
k = int , k = n - 1	int k = n - 1 ;
if n = 2	if ( n == 2 )
print 2	cout << 2 << endl ;
else	else
print n - k	cout << n - k << endl ;
integer as n	int n ;
read n	cin >> n ;
if n is 2 then do the following	if ( n == 2 )
output 2	cout << " 2 " << endl ;
else	else
output 1	cout << " 1 " << endl ;
let N be a constant integer with N is equal to 1e5 + 50	const int N = 1e5 + 50 ;
let oo be a constant integer with oo is equal to1e9	const int oo = 1e9 ;
let mod be a constant integer with mod is equal to 1e9 + 7	const int mod = 1e9 + 7 ;
let a , b , f1 , f2 be string arrays of size 2001	string a [ 2001 ] , b [ 201 ] , f1 [ 2001 ] , f2 [ 2001 ] ;
let n be a integer	int n , m ;
read n , m	cin >> n >> m ;
for integer i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for integer i = 0 to m exclusive , read b [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;
for integer i = 0 to n - m inclusive ,	for ( int i = 0 ; i + m <= n ; i ++ )
f1 [ i ] is empty	f1 [ i ] = "  " ;
for integer j = 0 to m exclusive , increase f1 [ i ] with a [ i + j ]	for ( int j = 0 ; j < m ; j ++ ) f1 [ i ] += a [ i + j ] ;
for integer i = 0 to n - m inclusive ,	for ( int i = 0 ; i + m <= n ; i ++ )
f2 [ i ] is empty	f2 [ i ] = "  " ;
for integer j = 0 to m exclusive , increase f2 [ i ] withb [ j ] . substr ( i , m )	for ( int j = 0 ; j < m ; j ++ ) { f2 [ i ] += b [ j ] . substr ( i , m ) ; }
for integer i = 0 to n - m inclusive ,	for ( int i = 0 ; i + m <= n ; i ++ )
for integer j = 0 to n - m inclusive ,	for ( int j = 0 ; j + m <= n ; j ++ )
if f1 [ i ] equals f2 [ j ]	if ( f1 [ i ] == f2 [ j ] )
print i + 1 space j + 1 and endline	cout << i + 1 << '   ' << j + 1 << endl ;
declare constant integer maxn = 2000 + 5	const int maxn = 2000 + 5 ;
declare string arrays s1 size maxn , s2 size maxn	string s1 [ maxn ] , s2 [ maxn ] ;
declare integers n , m	int n , m ;
read n , m	cin >> n >> m ;
for i = 0 to n exclusive , read s1 [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> s1 [ i ] ;
for i = 0 to m exclusive , read s2 [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> s2 [ i ] ;
for i = 0 to n - m inclusive	for ( int i = 0 ; i <= n - m ; i ++ )
for j = 0 to n - m inclusive	for ( int j = 0 ; j <= n - m ; j ++ )
declare boolean flag = true	bool flag = true ;
for p = 0 to p is less than m and flag , incrementing p	for ( int p = 0 ; p < m && flag ; p ++ )
if memory compare between address of s1 [ i + p ] [ 0 ] and address of s2 [ p ] [ j ] comparing m bytes , let flag be false	if ( memcmp ( & s1 [ i + p ] [ 0 ] , & s2 [ p ] [ j ] , m ) ) flag = false ;
if flag is true	if ( flag )
print i + 1 , " " , j + 1 , " \ n "	cout << i + 1 << "   " << j + 1 << " \n " ;
n , m = int	int n , m ;
read n , m	cin >> n >> m ;
A , B = string vectors with size of A = n and size of B = m	vector < string > A ( n ) , B ( m ) ;
read all A	for ( auto & s : A ) cin >> s ;
read all B	for ( auto & s : B ) cin >> s ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
pos = - 1 = int	int pos = - 1 ;
while pos + 1 < n	while ( pos + 1 < n )
ok = 1 = bool	bool ok = 1 ;
set pos to find A [ i ] , pos + 1 on B [ 0 ]	pos = B [ 0 ] . find ( A [ i ] , pos + 1 ) ;
if pos = - 1 then break	if ( pos == - 1 ) break ;
for k = m - 1 , until k < = 0 and is ok , decrement k	for ( int k = m - 1 ; k >= 0 && ok ; k -- )
if A [ i + k ] isn ' t substring from pos to m of b then set ok to 0	if ( A [ i + k ] != B [ k ] . substr ( pos , m ) ) ok = 0 ;
if ok then return print i + 1 and space and pos + 1 and new line	if ( ok ) return cout << i + 1 << "   " << pos + 1 << " \n " , 0 ;
print - 1	cout << - 1 ;
let mp [ 2 ] [ 2001 ] [ 2001 ] be a array of character elements	char mp [ 2 ] [ 2001 ] [ 2001 ] ;
let n , m be integers	int n , m ;
read n , m	cin >> n >> m ;
for i = 0 to n exclusive , read mp [ 0 ] [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> mp [ 0 ] [ i ] ;
for i = 0 to m exclusive , read mp [ 1 ] [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> mp [ 1 ] [ i ] ;
for i = 0 to n - m inclusive	for ( int i = 0 ; i <= n - m ; i ++ )
for j = 0 to n - m inclusive	for ( int j = 0 ; j <= n - m ; j ++ )
the integer value of ok = 1	int ok = 1 ;
for integer p = 0 , p is less than m and ok equals 1 , increment p by 1 , ok & = ! memcmp ( & mp [ 0 ] [ i + p ] [ 0 ] , & mp [ 1 ] [ p ] [ j ] , m )	for ( int p = 0 ; p < m && ok == 1 ; p ++ ) { ok &= ! memcmp ( & mp [ 0 ] [ i + p ] [ 0 ] , & mp [ 1 ] [ p ] [ j ] , m ) ; }
if ok is true	if ( ok )
print i + 1 and ' ' and j + 1 and newline	cout << i + 1 << '   ' << j + 1 << endl ;
declare constant integer N = 1e5 + 50	const int N = 1e5 + 50 ;
declare constant integer oo = 1e9	const int oo = 1e9 ;
declare constant integer mod = 1e9 + 7	const int mod = 1e9 + 7 ;
declare string arrays a size 2001 , b size 201 , f1 size 2001 , f2 size 2001	string a [ 2001 ] , b [ 201 ] , f1 [ 2001 ] , f2 [ 2001 ] ;
declare integers n , m	int n , m ;
read n , m	cin >> n >> m ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to m exclusive , read b [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;
for i = 0 to i + m is less than or equal to n , incrementing i	for ( int i = 0 ; i + m <= n ; i ++ )
let f1 [ i ] be " "	f1 [ i ] = "  " ;
for j = 0 to m exclusive , increment f1 [ i ] by a [ i + j ]	for ( int j = 0 ; j < m ; j ++ ) f1 [ i ] += a [ i + j ] ;
for i = 0 to i + m is less than or equal to n , incrementing i	for ( int i = 0 ; i + m <= n ; i ++ )
let f2 [ i ] be " "	f2 [ i ] = "  " ;
for j = 0 to m exclusive , increment f2 [ i ] by substring of b [ j ] from i to m	for ( int j = 0 ; j < m ; j ++ ) { f2 [ i ] += b [ j ] . substr ( i , m ) ; }
for i = 0 to i + m is less than or equal to n , incrementing i	for ( int i = 0 ; i + m <= n ; i ++ )
for j = 0 to j + m is less than or equal to n , incrementing j	for ( int j = 0 ; j + m <= n ; j ++ )
if f1 [ i ] is f2 [ j ]	if ( f1 [ i ] == f2 [ j ] )
print i + 1 , ' ' , j + 1 , newline	cout << i + 1 << '   ' << j + 1 << endl ;
declare character array mp size 2 by 2001 by 2001	char mp [ 2 ] [ 2001 ] [ 2001 ] ;
declare integers n , m	int n , m ;
read n , m	cin >> n >> m ;
for i = 0 to n exclusive , read mp [ 0 ] [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> mp [ 0 ] [ i ] ;
for i = 0 to m exclusive , read mp [ 1 ] [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> mp [ 1 ] [ i ] ;
declare integers i , j	int i , j ;
for i = 0 to n - m inclusive	for ( i = 0 ; i <= n - m ; i ++ )
for j = 0 to n - m inclusive	for ( j = 0 ; j <= n - m ; j ++ )
declare boolean ok = true	bool ok = true ;
for p = 0 to p is less than m and ok , incrementing p , let ok be ok bitwise and not ( memory compare ( address of mp [ 0 ] [ i + p ] [ 0 ] and address of mp [ 1 ] [ p ] [ j ] comparing m bytes ) )	for ( int p = 0 ; p < m && ok ; p ++ ) ok &= ! memcmp ( & mp [ 0 ] [ i + p ] [ 0 ] , & mp [ 1 ] [ p ] [ j ] , m ) ;
if ok is true	if ( ok )
print i + 1 , ' ' , j + 1 , newline	cout << i + 1 << '   ' << j + 1 << endl ;
n , m = int	int n , m ;
read n , m	cin >> n >> m ;
let v1 ( 2002 ) , v2 ( 202 ) , v3 ( 2002 ) , v4 ( 2002 ) be vector of string	vector < string > v1 ( 2002 ) , v2 ( 202 ) , v3 ( 2002 ) , v4 ( 2002 ) ;
for i = 0 to n exlcusive , read v [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> v1 [ i ] ;
read the first m elements of v2	for ( int i = 0 ; i < m ; i ++ ) cin >> v2 [ i ] ;
for i = 0 until i + m < = n increment i after	for ( int i = 0 ; i + m <= n ; i ++ )
for j = 0 to m exlcusive , increment v3 at i by v1 [ i + j ]	for ( int j = 0 ; j < m ; j ++ ) v3 [ i ] += v1 [ i + j ] ;
for i = 0 until i + m < = n increment i after	for ( int i = 0 ; i + m <= n ; i ++ )
for j = 0 to m exclusive , increment v4 [ j ] by substring of v2 [ j ] form i to m	for ( int j = 0 ; j < m ; j ++ ) v4 [ i ] += v2 [ j ] . substr ( i , m ) ;
for i = 0 until i + m < = n	for ( int i = 0 ; i + m <= n ; i ++ )
for j = 0 until j + m < = n	for ( int j = 0 ; j + m <= n ; j ++ )
if v3 at i is v4 at j	if ( v3 [ i ] == v4 [ j ] )
print i + 1 < < ' ' < < j + 1 < <	cout << i + 1 << '   ' << j + 1 << endl ;
t = int	int t ;
read t	cin >> t ;
loop t times	while ( t -- )
n , r = int	int n , r ;
read n then r	cin >> n >> r ;
x = int then for i = 1 to n read x then decrement r by x	for ( int i = 1 , x ; i < n ; ++ i ) cin >> x , r -= x ;
print ( r mod n + n ) mod n + 1	cout << ( r % n + n ) % n + 1 << ' \n ' ;
t , n , r , k = integer	int t , n , r , k ;
q = integer array of size 5	int q [ 5 ] ;
read t	cin >> t ;
for i = 0 to t exclusive	for ( int i = 0 ; i < t ; i ++ )
k = 0	k = 0 ;
read n , r	cin >> n >> r ;
for j = 0 to n - 1 exclusive	for ( int j = 0 ; j < n - 1 ; j ++ )
read q [ j ]	cin >> q [ j ] ;
k = k + q [ j ]	k = k + q [ j ] ;
print the result of ( ( r - k ) modulo n + n ) modulo n + 1	cout << ( ( r - k ) % n + n ) % n + 1 << endl ;
test = integer	int test ;
read test	cin >> test ;
while looping decrease test by 1	while ( test -- )
n , r = integers	int n , r ;
read n , r	cin >> n >> r ;
sum = integer = r	int sum = r ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; ++ i )
val = integer	int val ;
read val	cin >> val ;
sum = sum - val	sum -= val ;
sum = ( sum modulo n + n ) modulo n	sum = ( sum % n + n ) % n ;
print the result of sum + 1	cout << ( sum + 1 ) << " \n " ;
create int n	int n ;
read n	cin >> n ;
while decrement n	while ( n -- )
create unsigned int a , b and sum , set sum to 0	unsigned int a , b , sum = 0 ;
read a and b	cin >> a >> b ;
for i = 1 to a exclusive	for ( int i = 1 ; i < a ; ++ i )
create int c	int c ;
read c	cin >> c ;
set sum to sum + c	sum += c ;
assign sum mod a to sum	sum %= a ;
sum = ( a + b - sum ) % a	sum = ( a + b - sum ) % a ;
print sum + 1	cout << sum + 1 << endl ;
create int nums [ 5 ] , r , n , T	int nums [ 5 ] , r , n , T ;
read T	cin >> T ;
while decrement T	while ( T -- )
read n and r	cin >> n >> r ;
set sum to 0	int sum = 0 ;
for c = 1 to n exclusive	for ( int c = 1 ; c < n ; c ++ )
create int i	int i ;
read i	cin >> i ;
set sum to sum - i	sum -= i ;
set sum = sum + r	sum += r ;
assign sum + n * 1000 to sum	sum += n * 1000 ;
print sum mod n + 1	cout << ( sum % n + 1 ) << endl ;
no , appr , st = long long arrays all with length 300001	long long no [ 300001 ] , appr [ 300001 ] , st [ 300001 ] ;
app = long long vector with length 300001	vector < long long > app [ 300001 ] ;
i , j , n , m , k , cnt , ans , t = long long with cnt and ans having value of 0 and t having value of 1	long long i , j , n , m , k , cnt = 0 , ans = 0 , t = 1 ;
read n and t	cin >> n >> t ;
v = long long vector	vector < long long > v ;
pos = long long with value of 0	long long pos = 0 ;
while t is not zero subtract 1 from t and do	while ( t -- )
read m and k	cin >> m >> k ;
if m equals 1	if ( m == 1 )
set no [ cnt ] to k	no [ cnt ] = k ;
append cnt to the end of app [ k ]	app [ k ] . push_back ( cnt ) ;
set st [ cnt ] to 0	st [ cnt ] = 0 ;
append cnt to the end of v	v . push_back ( cnt ) ;
add 1 to cnt	cnt ++ ;
add 1 to ans	ans ++ ;
else if m equals 2	else if ( m == 2 )
for i = appr [ k ] to the size of app [ k ] exclusive	for ( i = appr [ k ] ; i < app [ k ] . size ( ) ; i ++ )
if st [ app [ k ] [ i ] ] equals 0 subtract 1 from ans	if ( st [ app [ k ] [ i ] ] == 0 ) ans -- ;
set st [ app [ k ] [ i ] ] to 1	st [ app [ k ] [ i ] ] = 1 ;
set appr [ k ] to the size of app [ k ]	appr [ k ] = app [ k ] . size ( ) ;
else	else
for i = pos to k exclusive	for ( i = pos ; i < k ; i ++ )
if st [ v [ i ] ] equals 0 subtract 1 from ans	if ( st [ v [ i ] ] == 0 ) ans -- ;
set st [ v [ i ] ] to 1	st [ v [ i ] ] = 1 ;
set pos to the maximum of pos and k	pos = max ( pos , k ) ;
print ans	cout << ans << ' \n ' ;
MAXN = 3 * 1e5 + 5	const int MAXN = 3 * 1e5 + 5 ;
create int N , M , S , x , y , j , z , r	int N , M , S , x , y , j , z , r ;
create vector int V [ MAXN ]	vector < int > V [ MAXN ] ;
create int v [ MAXN ]	int v [ MAXN ] ;
create bool R [ MAXN ]	bool R [ MAXN ] ;
read N and M	cin >> N >> M ;
while decrement M	while ( M -- )
read x and y	cin >> x >> y ;
if x = 1	if ( x == 1 )
assign j to last element of V [ y ]	V [ y ] . push_back ( j ) ;
increment j	j ++ ;
increment S	S ++ ;
if x = 2	if ( x == 2 )
set z to size of V [ y ]	z = ( int ) V [ y ] . size ( ) ;
for i = v [ y ] to z exclusive	for ( int i = v [ y ] ; i < z ; i ++ )
if R [ V [ y ] [ i ] ] = 0 , decrement S	if ( ! R [ V [ y ] [ i ] ] ) S -- ;
set R [ V [ y ] [ i ] ] = true	R [ V [ y ] [ i ] ] = true ;
set v [ y ] = z	v [ y ] = z ;
if x = 3	if ( x == 3 )
for i = r to y exclusive	for ( int i = r ; i < y ; i ++ )
if R [ i ] = 0 , decrement S	if ( ! R [ i ] ) S -- ;
assign true to R [ i ]	R [ i ] = true ;
set r to max of r and y	r = max ( r , y ) ;
print S	cout << S << endl ;
declare integers vector arrays mp and dis with size 100010 * 3	vector < int > mp [ 100010 * 3 ] , dis [ 100010 * 3 ] ;
create ints u , v and c	int u , v , c ;
declare long long res	long long res ;
create long long array a with 100010 * 3 elements	long long a [ 100010 * 3 ] ;
create long long arrays dp and dp_max with 100010 * 3 elements	long long dp [ 100010 * 3 ] , dp_max [ 100010 * 3 ] ;
dfs is a void function with int arguments x and y	void dfs ( int x , int y )
create long long max1 = 0	long long max1 = 0 ;
create long long max2 = 0	long long max2 = 0 ;
loop i from 0 to length of mp [ x ] exclusive	for ( int i = 0 ; i < mp [ x ] . size ( ) ; i ++ )
declare integer f = mp [ x ] [ i ]	int f = mp [ x ] [ i ] ;
if f = y , skip the rest of the loop	if ( f == y ) continue ;
call function dfs with arguments f and x	dfs ( f , x ) ;
if dp [ f ] - dis [ x ] [ i ] is greater than max1	if ( dp [ f ] - dis [ x ] [ i ] > max1 )
set max2 to max1	max2 = max1 ;
assign dp [ f ] - dis [ x ] [ i ] to max1	max1 = dp [ f ] - dis [ x ] [ i ] ;
else if dp [ f ] - dis [ x ] [ i ] = max1	else if ( dp [ f ] - dis [ x ] [ i ] == max1 )
set value of max2 to max1	max2 = max1 ;
else	else
if dp [ f ] - dis [ x ] [ i ] is greater than max2 , change max2 to dp [ f ] - dis [ x ] [ i ]	if ( dp [ f ] - dis [ x ] [ i ] > max2 ) max2 = dp [ f ] - dis [ x ] [ i ] ;
assign max1 + max2 + a [ x ] to dp_max [ x ]	dp_max [ x ] = max1 + max2 + a [ x ] ;
change dp [ x ] to max1 + a [ x ]	dp [ x ] = max1 + a [ x ] ;
assign max of max ( dp [ x ] , dp_max [ x ] ) and res to res	res = max ( max ( dp [ x ] , dp_max [ x ] ) , res ) ;
declare int t	int t ;
read t	cin >> t ;
set res to 0	res = 0 ;
for i = 1 to t inclusive , read a [ i ]	for ( int i = 1 ; i <= t ; i ++ ) cin >> a [ i ] ;
subtract 1 from t	t -= 1 ;
decrement t and loop further , while t is not 0	while ( t -- )
read u , v and c	cin >> u >> v >> c ;
push v into mp [ u ]	mp [ u ] . push_back ( v ) ;
push u into mp [ v ]	mp [ v ] . push_back ( u ) ;
push c into dis [ u ]	dis [ u ] . push_back ( c ) ;
push c into dis [ v ]	dis [ v ] . push_back ( c ) ;
call function dfs with arguments 1 and - 1	dfs ( 1 , - 1 ) ;
print res	cout << res << endl ;
create long long m and an array of long longs a with size 200000	long long m , a [ 200000 ] ;
create array of long long pairs b with size 200000	pair < long long , long long > b [ 200000 ] ;
create long long array cnt with size 200000	long long cnt [ 200000 ] ;
read m	cin >> m ;
for integer i = 0 to m exclusive read a [ i ]	for ( int i = 0 ; i < m ; ++ i ) cin >> a [ i ] ;
for i = 0 to m exclusive	for ( int i = 0 ; i < m ; ++ i )
read b [ i ] . first	cin >> b [ i ] . first ;
b [ i ] . second = i	b [ i ] . second = i ;
sort array a	sort ( a , a + m ) ;
sort b	sort ( b , b + m ) ;
reverse b	reverse ( b , b + m ) ;
for i = 0 to m exclusive , set cnt [ b [ i ] . second ] to a [ i ]	for ( int i = 0 ; i < m ; ++ i ) { cnt [ b [ i ] . second ] = a [ i ] ; }
for i = 0 to m exclusive , print cnt [ i ] and " \ n " [ i = = m - 1 ]	for ( int i = 0 ; i < m ; ++ i ) cout << cnt [ i ] << "  \n " [ i == m - 1 ] ;
