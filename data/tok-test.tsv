create integer n	int n ;
read n	cin >> n ;
create integers cur , cnt with cur = 1 , cnt = 0	int cur = 1 , cnt = 0 ;
create integer vector ans	vector < int > ans ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integer x	int x ;
read x	cin >> x ;
if x is cur	if ( x == cur )
increment cnt	cnt ++ ;
increment cur	cur ++ ;
else	else
add element cnt to end of ans	ans . push_back ( cnt ) ;
set cnt to 1	cnt = 1 ;
set cur to 2	cur = 2 ;
if i is n - 1 , add element cnt to end of ans	if ( i == n - 1 ) { ans . push_back ( cnt ) ; }
print integer casted size of ans print newline	cout << ( int ) ans . size ( ) << endl ;
for i = 0 to integer casted size of ans exclusive	for ( int i = 0 ; i < ( int ) ans . size ( ) ; i ++ )
if i is greater than 0 , print " "	if ( i > 0 ) cout << "   " ;
print ans [ i ]	cout << ans [ i ] ;
print newline	cout << endl ;
let n be an integer	int n ;
while reading n	while ( cin >> n )
let a be an integer array of length n	int a [ n ] ;
let b be an integer array of length n	int b [ n ] ;
let max be an int	int max ;
let count = 0 be an int	int count = 0 ;
read a n times	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
set max = a at 0	max = a [ 0 ] ;
for q = 1 to n exclusive	for ( int q = 1 ; q < n ; q ++ )
if a at q is 1 then increment count , set b [ count ] to a [ q - 1 ]	if ( a [ q ] == 1 ) { b [ ++ count ] = a [ q - 1 ] ; }
print count + 1	cout << count + 1 << endl ;
for j = 1 to count inclusive print b	for ( int j = 1 ; j <= count ; j ++ ) cout << b [ j ] << "   " ;
print a [ n - 1 ]	cout << a [ n - 1 ] << endl ;
create int n	int n ;
read n	cin >> n ;
declare int array arr with n elements and int variable ct = 0	int arr [ n ] , ct = 0 ;
change i from 0 to n exclusive in a loop	for ( int i = 0 ; i < n ; i ++ )
read input to arr [ i ]	cin >> arr [ i ] ;
if arr [ i ] is equal to 1 , increment ct	if ( arr [ i ] == 1 ) ct ++ ;
print ct	cout << ct << endl ;
for i from 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if arr [ i ] is equal to 1 , print arr [ i - 1 ] and " "	if ( arr [ i ] == 1 ) cout << arr [ i - 1 ] << "   " ;
print arr [ n - 1 ]	cout << arr [ n - 1 ] << endl ;
n = int	int n ;
read n	cin >> n ;
i , j , k = int with k = 0 and a = int array of size n + 1	int a [ n + 1 ] , i , j , k = 0 ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is 1 then increment k	if ( a [ i ] == 1 ) k ++ ;
print k	cout << k << endl ;
for i = 1 to n	for ( i = 1 ; i < n ; i ++ )
if a [ i ] is 1 print a [ i - 1 ] and " "	if ( a [ i ] == 1 ) cout << a [ i - 1 ] << "   " ;
print a [ n - 1 ]	cout << a [ n - 1 ] << endl ;
declare int variable n	int n ;
read n	cin >> n ;
declare an array of integers a with size 1005	int a [ 1005 ] ;
declare an array of integers ans with size 1005	int ans [ 1005 ] ;
for i from 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
create integer j = 0	int j = 0 ;
loop i from 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if a [ i + 1 ] < = a [ i ] , set ans [ j ] to a [ i ] and increment j	if ( a [ i + 1 ] <= a [ i ] ) { ans [ j ++ ] = a [ i ] ; }
set ans [ j ] to a [ n ] and increment j	ans [ j ++ ] = a [ n ] ;
print j	cout << j << endl ;
for i = 0 to j - 1 exclusive , print ans [ i ] and " "	for ( int i = 0 ; i < j - 1 ; i ++ ) cout << ans [ i ] << "   " ;
print ans [ j - 1 ]	cout << ans [ j - 1 ] << endl ;
maxn = const integer with maxn = 1e3 + 5	const int maxn = 1e3 + 5 ;
arr = integer array of size maxn	int arr [ maxn ] ;
stc = integer array of size maxn	int stc [ maxn ] ;
n , top = integers	int n , top ;
while read n	while ( cin >> n )
top = 0	top = 0 ;
for i = 0 to n exclusive , readarr [ i ]	for ( int i = 0 ; i < n ; ++ i ) { cin >> arr [ i ] ; }
i = integer	int i ;
for i = 0 to n - 1 exclusive	for ( i = 0 ; i < n - 1 ; ++ i )
if arr [ i + 1 ] is 1 , stc [ increment top ] = arr [ i ]	if ( arr [ i + 1 ] == 1 ) { stc [ top ++ ] = arr [ i ] ; }
stc [ increment top ] = arr [ i ]	stc [ top ++ ] = arr [ i ] ;
print top , stc [ 0 ]	cout << top << endl << stc [ 0 ] ;
for i = 1 to top exclusive , print stc [ i ]	for ( int i = 1 ; i < top ; ++ i ) { cout << "   " << stc [ i ] ; }
print next line	cout << endl ;
n = integer	int n ;
read n	cin >> n ;
nxt = integer = 1	int nxt = 1 ;
ans = integer vector	vector < int > ans ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
x = integer	int x ;
read x	cin >> x ;
if x is not nxt , then push back the values of ans and insert a new element of nxt - 1 at the end of ans	if ( x != nxt ) { ans . push_back ( nxt - 1 ) ; }
nxt = x + 1	nxt = x + 1 ;
push back the values of ans and insert a new element of nxt - 1 at the end of ans	ans . push_back ( nxt - 1 ) ;
print size of ans in integer form	cout << ( int ) ans . size ( ) << endl ;
for i = 0 to size of ans in integer form	for ( int i = 0 ; i < ( int ) ans . size ( ) ; i ++ )
if i > 0 , then print a space	if ( i > 0 ) cout << "   " ;
print ans [ i ]	cout << ans [ i ] ;
print endline	cout << endl ;
a = int array of length 1001 , n = int , s = int = 0	int a [ 1001 ] , n , sum = 0 ;
read n	cin >> n ;
read n values into array a	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a at i is 1 increment sum	if ( a [ i ] == 1 ) sum ++ ;
print sum	cout << sum << endl ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if a at i + 1 is 1 print a at i	if ( a [ i + 1 ] == 1 ) cout << a [ i ] << "   " ;
print a at n	cout << a [ n ] << endl ;
create integers n , c with c = 0 , create integer array arr with size 1001	int n , arr [ 1001 ] , c = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
if arr [ i ] is 1 increment c	if ( arr [ i ] == 1 ) c ++ ;
print c print newline	cout << c << endl ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if arr [ i ] is 1 , print arr [ i - 1 ] print " "	if ( arr [ i ] == 1 ) { cout << arr [ i - 1 ] << "   " ; }
print arr [ n - 1 ] print newline	cout << arr [ n - 1 ] << endl ;
n = integer	int n ;
val = integer	int val ;
Read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if i is greater than 0 , print " "	if ( i > 0 ) { cout << "   " ; }
Read val	cin >> val ;
print val - ( val + 1 ) % 2 and a new line	cout << ( val - ( ( val + 1 ) % 2 ) ) ;
print a new line	cout << endl ;
n = integer	int n ;
Read n	cin >> n ;
a = array of n + 10 integers	int a [ n + 10 ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
Read n values into array a	cin >> a [ i ] ;
if a [ i ] modulo 2 is 0 , then set a [ i ] to a [ i ] - 1	if ( a [ i ] % 2 == 0 ) { a [ i ] -= 1 ; }
print a [ j ] and a new line	for ( int j = 0 ; j < n - 1 ; j ++ ) { cout << a [ j ] << "   " ; }
print a [ n - 1 ] and a new line	cout << a [ n - 1 ] << endl ;
create integer n	int n ;
while read n is true	while ( cin >> n )
create integer flag with flag = 1	int flag = 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integer num	int num ;
read num	cin >> num ;
if num is 0	if ( num == 0 )
if flag is true	if ( flag )
print num , set flag to 0	cout << num , flag = 0 ;
else	else
print " " print num	cout << "   " << num ;
else if num % 2 is 0	else if ( num % 2 == 0 )
if flag is true	if ( flag )
print num - 1 , set flag to 0	cout << num - 1 , flag = 0 ;
else	else
print " " print num - 1	cout << "   " << num - 1 ;
else	else
if flag is true	if ( flag )
print num , flag with flag = 0	cout << num , flag = 0 ;
else	else
print " " print num	cout << "   " << num ;
print newline	cout << endl ;
array of 1000 = a	int a [ 10000 ] ;
integers = n	int n ;
read n	cin >> n ;
read in a until i = n inclusive	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] modulo 2 is 0 then do the following a [ i ] - = 1	if ( a [ i ] % 2 == 0 ) a [ i ] -= 1 ;
if i = n then do the following	if ( i == n )
output a [ i ]	cout << a [ i ] << endl ;
else	else
output a [ i ] ,	cout << a [ i ] << "   " ;
create integer n	int n ;
read n	cin >> n ;
create integer array a with size n + 10	int a [ n + 10 ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] % 2 is 0 , decrement a [ i ] by 1	if ( a [ i ] % 2 == 0 ) { a [ i ] -= 1 ; }
for j = 0 to n - 1 exclusive , print a [ j ] print " "	for ( int j = 0 ; j < n - 1 ; ++ j ) { cout << a [ j ] << "   " ; }
print a [ n - 1 ] print newline	cout << a [ n - 1 ] << endl ;
declare const int N = 1e5 + 50	const int N = 1e5 + 50 ;
declare ints T , n , m , L and R	int T , n , m , L , R ;
declare long long array a with size 2 * N	long long a [ 2 * N ] ;
read input to n	cin >> n ;
for i from 0 to n * 2 exclusive , read a [ i ]	for ( int i = 0 ; i < n * 2 ; i ++ ) { cin >> a [ i ] ; }
if n < = 1	if ( n <= 1 )
print " 0 "	cout << " 0 " << endl ;
sort a from the start to the position 2 * n	sort ( a , a + 2 * n ) ;
declare long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] )	long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] ) ;
declare long long C = a [ 2 * n - 1 ] - a [ 0 ]	long long C = a [ 2 * n - 1 ] - a [ 0 ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare long long variable temp = C * ( a [ i + n - 1 ] - a [ i ] )	long long temp = C * ( a [ i + n - 1 ] - a [ i ] ) ;
set ans to min of ans and temp	ans = min ( ans , temp ) ;
print ans	cout << ans << endl ;
n = long long	long long n ;
while the loop reads n	while ( cin >> n )
a = long long array of size 2 * n + 10	long long a [ 2 * n + 10 ] ;
for i = 0 to 2 * n exclusive , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort a in ascending order	sort ( a , a + 2 * n ) ;
ans = long long = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] )	long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] ) ;
for i = 1 to n exclusive , ans = the minimum value between ans and ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ i + n - 1 ] - a [ i ] )	for ( int i = 1 ; i < n ; i ++ ) ans = min ( ans , ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ i + n - 1 ] - a [ i ] ) ) ;
print ans	cout << ans << endl ;
create constant integer sz with sz = 200010	const int sz = 200010 ;
create long long integer array a with size sz	long long int a [ sz ] ;
create integer n	int n ;
read n	cin >> n ;
for i = 0 to 2 * n exclusive , read [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }
sort elements from a to a + 2 * n	sort ( a , a + 2 * n ) ;
create long long integer ans with ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] )	long long int ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] ) ;
for i = n to 2 * 2 exclusive , set ans to minimum of ( ans and ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ i ] - a [ i - n + 1 ] ) )	for ( int i = n ; i < 2 * n ; i ++ ) { ans = min ( ans , ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ i ] - a [ i - n + 1 ] ) ) ; }
print ans print newline	cout << ans << endl ;
set N to 2e6 + 5	const int N = 2e6 + 5 ;
create long long a [ N ]	long long a [ N ] ;
create int n	int n ;
read n	cin >> n ;
for i = 0 to 2 * n , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort elements between a and a + 2 * n	sort ( a , a + 2 * n ) ;
set ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] )	long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] ) ;
for i = 1 to n exclusive , set and to min ( ans , ( a [ i + n - 1 ] - a [ i ] ) * ( a [ 2 * n - 1 ] - a [ 0 ] ) )	for ( int i = 1 ; i < n ; i ++ ) ans = min ( ans , ( a [ i + n - 1 ] - a [ i ] ) * ( a [ 2 * n - 1 ] - a [ 0 ] ) ) ;
print ans	cout << ans << endl ;
N = const integer with N = 2e5 + 50	const int N = 2e5 + 50 ;
M = const integer with M = 1e6	const int M = 1e6 ;
oo = const long long with oo = 1e18	const long long oo = 1e18 ;
mod = const integer mod = 1e9 + 7	const int mod = 1e9 + 7 ;
n = integer	int n ;
read n	cin >> n ;
a ( 2 * n ) = vector of long long	vector < long long > a ( 2 * n ) ;
for i = 0 to n * 2 exclusive , read a [ i ]	for ( int i = 0 ; i < n * 2 ; i ++ ) cin >> a [ i ] ;
sort a . begin ( ) and a . end ( )	sort ( a . begin ( ) , a . end ( ) ) ;
ans = long long with ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a . back ( ) - a [ n ] )	long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a . back ( ) - a [ n ] ) ;
for i = 1 to n exclusive , ans = min ( ans , ( a [ i + n - 1 ] - a [ i ] ) * ( a . back ( ) - a [ 0 ] ) )	for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans , ( a [ i + n - 1 ] - a [ i ] ) * ( a . back ( ) - a [ 0 ] ) ) ; }
print ans	cout << ans << endl ;
declare const int INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create const int maxa = 1e5 + 10	const int maxa = 1e5 + 10 ;
declare int array a with size maxa < < 1	int a [ maxa << 1 ] ;
declare integer variable n	int n ;
read n and loop further	while ( cin >> n )
declare int variable i	int i ;
for i = 0 to 2 * n exclusive , read a [ i ]	for ( i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort a	sort ( a , a + 2 * n ) ;
declare long long x = a [ n - 1 ] - a [ 0 ]	long long x = a [ n - 1 ] - a [ 0 ] ;
create long long y = a [ 2 * n - 1 ] - a [ n ]	long long y = a [ 2 * n - 1 ] - a [ n ] ;
declare long long minsq = x * y	long long minsq = x * y ;
set x to a [ 2 * n - 1 ] - a [ 0 ]	x = a [ 2 * n - 1 ] - a [ 0 ] ;
for i from 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
set y to a [ i + n - 1 ] - a [ i ]	y = a [ i + n - 1 ] - a [ i ] ;
change minsq to min of minsq and x * y	minsq = min ( minsq , x * y ) ;
print minsq	cout << minsq << endl ;
create integer N	int N ;
create long long array A with size 200005	long long A [ 200005 ] ;
read N	cin >> N ;
for i = 0 to 2 * N - 1 inclusive , read A [ i ]	for ( int i = 0 ; i <= 2 * N - 1 ; i ++ ) cin >> A [ i ] ;
sort elements from A to A + 2 * N	sort ( A , A + 2 * N ) ;
create long long Ans with Ans = ( A [ N - 1 ] - A [ 0 ] ) * ( A [ 2 * N - 1 ] - A [ N ] )	long long Ans = ( A [ N - 1 ] - A [ 0 ] ) * ( A [ 2 * N - 1 ] - A [ N ] ) ;
for i = 1 to N - 1 inclusive , set Ans to minimum of Ans and ( A [ 2 * N - 1 ] - A [ 0 ] ) * ( A [ i + N - 1 ] - A [ i ] )	for ( int i = 1 ; i <= N - 1 ; i ++ ) { Ans = min ( Ans , ( A [ 2 * N - 1 ] - A [ 0 ] ) * ( A [ i + N - 1 ] - A [ i ] ) ) ; }
print Ans print ' \ n '	cout << Ans << ' \n ' ;
niz = array of integers of length 200005	int niz [ 200005 ] ;
let n be a integer	int n ;
read n	cin >> n ;
for i = 1 to 2 * n inclusive , read niz [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) { cin >> niz [ i ] ; }
sort the values niz + 1 and niz + 2 * n + 1	sort ( niz + 1 , niz + 2 * n + 1 ) ;
let dx be a integer with dx = niz [ n ] - niz [ 1 ]	int dx = niz [ n ] - niz [ 1 ] ;
let dy be a integer with dy = niz [ 2 * n ] - niz [ n + 1 ]	int dy = niz [ 2 * n ] - niz [ n + 1 ] ;
let p be a long integer with p = 0	long long int p = 0 ;
the value ( long long int ) dx * dy is initialized to p	p = ( long long int ) dx * dy ;
set the long integer tren to 0	long long int tren = 0 ;
for i = n + 1 to 2 * n - 1 inclusive	for ( int i = n + 1 ; i <= 2 * n - 1 ; i ++ )
the long integer value of ( niz [ i ] - niz [ i - n + 1 ] ) * ( niz [ 2 * n ] - niz [ 1 ] ) is assigned to tren	tren = ( long long int ) ( niz [ i ] - niz [ i - n + 1 ] ) * ( niz [ 2 * n ] - niz [ 1 ] ) ;
if tren is less than p , the value of p is equal to tren	if ( tren < p ) p = tren ;
print p and newline	cout << p << endl ;
declare long long n and long long array a with size 1000001	long long n , a [ 1000001 ] ;
read n	cin >> n ;
multiply n by 2	n *= 2 ;
loop i from 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort a from element 1 to n + 1	sort ( a + 1 , a + n + 1 ) ;
create long long ans = ( a [ n / 2 ] - a [ 1 ] ) * ( a [ n ] - a [ n / 2 + 1 ] )	long long ans = ( a [ n / 2 ] - a [ 1 ] ) * ( a [ n ] - a [ n / 2 + 1 ] ) ;
loop i from 2 to n / 2 + 1 inclusive , assign min of ans and ( a [ i + n / 2 - 1 ] - a [ i ] ) * ( a [ n ] - a [ 1 ] ) to ans	for ( int i = 2 ; i <= n / 2 + 1 ; i ++ ) ans = min ( ans , ( a [ i + n / 2 - 1 ] - a [ i ] ) * ( a [ n ] - a [ 1 ] ) ) ;
print ans	cout << ans << endl ;
declare long long array a with size 202000	long long a [ 202000 ] ;
declare integer n	int n ;
read input to n	cin >> n ;
for i = 1 to n < < 1 inclusive , read a [ i ]	for ( int i = 1 ; i <= ( n << 1 ) ; ++ i ) { cin >> a [ i ] ; }
sort a fron index 1 to 1 + n + n	sort ( a + 1 , a + 1 + n + n ) ;
long long s = 1ll < < 62	long long s = 1ll << 62 ;
set s to min of s and ( a [ n ] - a [ 1 ] ) * ( a [ n < < 1 ] - a [ n + 1 ] )	s = min ( s , ( a [ n ] - a [ 1 ] ) * ( a [ n << 1 ] - a [ n + 1 ] ) ) ;
for i from 2 to n inclusive , change s to min of s and ( a [ n < < 1 ] - a [ 1 ] ) * ( a [ n + i - 1 ] - a [ i ] )	for ( int i = 2 ; i <= n ; i ++ ) { s = min ( s , ( a [ n << 1 ] - a [ 1 ] ) * ( a [ n + i - 1 ] - a [ i ] ) ) ; }
print s	cout << s << endl ;
flag = int	int flag ;
n , m , len = int	int n , m , len ;
a = long long array of size 200005	long long a [ 200005 ] ;
ans , temp = long long	long long ans , temp ;
loop while reading n	while ( cin >> n )
read 2 * n values into a	for ( int i = 0 ; i < 2 * n ; ++ i ) cin >> a [ i ] ;
sort a	sort ( a , a + n + n ) ;
set ans to ( a [ 2 * n - 1 ] - a [ n ] ) * ( a [ n - 1 ] - a [ 0 ] )	ans = ( a [ 2 * n - 1 ] - a [ n ] ) * ( a [ n - 1 ] - a [ 0 ] ) ;
set temp to a [ 2 * n - 1 ] - a [ 0 ]	temp = a [ 2 * n - 1 ] - a [ 0 ] ;
for i = 1 to n set ans to min of ans and temp * ( a [ i + n - 1 ] - a [ i ] )	for ( int i = 1 ; i < n ; ++ i ) { ans = min ( ans , temp * ( a [ i + n - 1 ] - a [ i ] ) ) ; }
print ans	cout << ans << endl ;
create integer flag	int flag ;
create integers n , m , len	int n , m , len ;
create long long array a with size 200005	long long a [ 200005 ] ;
create long longs ans , temp	long long ans , temp ;
while read n is true	while ( cin >> n )
for i = 0 to 2 * n exclusive , read a [ i ]	for ( int i = 0 ; i < 2 * n ; ++ i ) cin >> a [ i ] ;
sort elements from a to a + n + n	sort ( a , a + n + n ) ;
set ans to ( a [ 2 * n - 1 ] - a [ n ] ) * ( a [ n - 1 ] - a [ 0 ] )	ans = ( a [ 2 * n - 1 ] - a [ n ] ) * ( a [ n - 1 ] - a [ 0 ] ) ;
set temp to a [ 2 * n - 1 ] - a [ 0 ]	temp = a [ 2 * n - 1 ] - a [ 0 ] ;
for i = 1 to n exclusive , set ans to minimum of ans and temp * ( a [ i + n - 1 ] - a [ i ] )	for ( int i = 1 ; i < n ; ++ i ) { ans = min ( ans , temp * ( a [ i + n - 1 ] - a [ i ] ) ) ; }
print ans print newline	cout << ans << endl ;
maxn = const integer with maxn = 2e5 + 10	const int maxn = 2e5 + 10 ;
a = array of size maxn long long	long long a [ maxn ] ;
n = integer	int n ;
read n	cin >> n ;
ans = long long with ans = 0	long long ans = 0 ;
for i = 0 to 2 * n exclusive , read a [ i ]	for ( int i = 0 ; i < 2 * n ; i ++ ) { cin >> a [ i ] ; }
sort a and a + 2 * n	sort ( a , a + 2 * n ) ;
ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] )	ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a [ 2 * n - 1 ] - a [ n ] ) ;
for i = 1 to n exclusive , ans = min ( ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ i + n - 1 ] - a [ i ] ) , ans )	for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a [ i + n - 1 ] - a [ i ] ) , ans ) ; }
print ans	cout << ans << endl ;
n = integer	int n ;
a = long long array of size 200001 , ans = long long	long long a [ 200001 ] , ans ;
read n	cin >> n ;
for i = 1 to ( left shift n 1 place ) , read a [ i ]	for ( int i = 1 ; i <= ( n << 1 ) ; i ++ ) cin >> a [ i ] ;
sort a + 1 and a + ( n < < 1 ) + 1	sort ( a + 1 , a + ( n << 1 ) + 1 ) ;
ans = ( a [ n ] - a [ 1 ] ) * ( a [ shift n 1 place ] - a [ n + 1 ] )	ans = ( a [ n ] - a [ 1 ] ) * ( a [ n << 1 ] - a [ n + 1 ] ) ;
for i = 1 to n exclusive , ans = min ( ( a [ left shift n 1 place ] - a [ 1 ] ) * ( a [ n + i ] - a [ i + 1 ] ) , ans )	for ( int i = 1 ; i < n ; i ++ ) ans = min ( ( a [ n << 1 ] - a [ 1 ] ) * ( a [ n + i ] - a [ i + 1 ] ) , ans ) ;
print ans	cout << ans << endl ;
let in be long long array with size 200010	long long in [ 200010 ] ;
create ints n and n2	int n , n2 ;
declare long long ans	long long ans ;
read n	cin >> n ;
change n2 to n * 2	n2 = n * 2 ;
for integer i = 0 to n2 exclusive , read in [ i ]	for ( int i = 0 ; i < n2 ; i ++ ) cin >> in [ i ] ;
sort n2 elements of in	sort ( in , in + n2 ) ;
assign ( in [ n - 1 ] - in [ 0 ] ) * ( in [ n2 - 1 ] - in [ n ] ) to ans	ans = ( in [ n - 1 ] - in [ 0 ] ) * ( in [ n2 - 1 ] - in [ n ] ) ;
for i from 1 to n exclusive , set ans to min of ans and in [ n - 1 + i ] - in [ i ] ) * ( in [ n2 - 1 ] - in [ 0 ]	for ( int i = 1 ; i < n ; i ++ ) ans = min ( ans , ( in [ n - 1 + i ] - in [ i ] ) * ( in [ n2 - 1 ] - in [ 0 ] ) ) ;
print ans and ' \ n '	cout << ans << ' \n ' ;
create long long array of length 200020	long long a [ 200020 ] ;
create int n	int n ;
read n	cin >> n ;
for i = 1 to 2 * n inclusive , read a [ i ]	for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
sort elements between a + 1 and a + 2 * n + 1	sort ( a + 1 , a + 2 * n + 1 ) ;
set min1 to ( a [ n ] - a [ 1 ] ) * ( a [ 2 * n ] - a [ n + 1 ] )	long long min1 = ( a [ n ] - a [ 1 ] ) * ( a [ 2 * n ] - a [ n + 1 ] ) ;
for i = 2 to n + 1 inclusive , assign min of min1 and ( a [ 2 * n ] - a [ 1 ] ) * ( a [ i + n - 1 ] - a [ i ] ) to min1	for ( int i = 2 ; i <= n + 1 ; i ++ ) { min1 = min ( min1 , ( a [ 2 * n ] - a [ 1 ] ) * ( a [ i + n - 1 ] - a [ i ] ) ) ; }
print min1	cout << min1 << endl ;
create long long array a with size 202000	long long a [ 202000 ] ;
create integer n	int n ;
read n	cin >> n ;
for i = 1 to i is less than or equal to ( n bitshift left 1 ) , incrementing i , read a [ i ]	for ( int i = 1 ; i <= ( n << 1 ) ; ++ i ) { cin >> a [ i ] ; }
sort elements from a + 1 to a + 1 + n + n	sort ( a + 1 , a + 1 + n + n ) ;
create long long s with s = ( s , ( a [ n ] - a [ 1 ] ) * ( a [ n bitshift left 1 ] - a [ n + 1 ] ) )	long long s = ( s , ( a [ n ] - a [ 1 ] ) * ( a [ n << 1 ] - a [ n + 1 ] ) ) ;
for i = 2 to n inclusive , set s to minimum of ( s and ( a [ n bitshift left 1 ] - a [ 1 ] ) * ( a [ n + i - 1 ] - a [ i ] )	for ( int i = 2 ; i <= n ; i ++ ) { s = min ( s , ( a [ n << 1 ] - a [ 1 ] ) * ( a [ n + i - 1 ] - a [ i ] ) ) ; }
print s print newline	cout << s << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
create long longs vector a with n * 2 elements	vector < long long > a ( n * 2 ) ;
for i = 0 to n * 2 exclusive , read a [ i ]	for ( int i = 0 ; i < n * 2 ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a . begin ( ) , a . end ( ) ) ;
create long long ans = LLONG_MAX	long long ans = LLONG_MAX ;
loop i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if i = 0	if ( i == 0 )
assign min of ans and ( a [ n - 1 ] - a [ 0 ] ) * ( a [ n * 2 - 1 ] - a [ n ] ) to ans	ans = min ( ans , ( a [ n - 1 ] - a [ 0 ] ) * ( a [ n * 2 - 1 ] - a [ n ] ) ) ;
else	else
assign min of ans and ( a [ i + n - 1 ] - a [ i ] ) * ( a [ n * 2 - 1 ] - a [ 0 ] ) to ans	ans = min ( ans , ( a [ i + n - 1 ] - a [ i ] ) * ( a [ n * 2 - 1 ] - a [ 0 ] ) ) ;
print ans	cout << ans << endl ;
create const int maxn = 1e5 + 2	const int maxn = 1e5 + 2 ;
let a be long long array with size maxn * 2	long long a [ maxn * 2 ] ;
declare integer variable n	int n ;
read n	cin >> n ;
create long long m = n * 2	long long m = n * 2 ;
for i from 1 to m inclusive , read input to a [ i ]	for ( int i = 1 ; i <= m ; i ++ ) { cin >> a [ i ] ; }
sort a from index 1 to m + 1	sort ( a + 1 , a + m + 1 ) ;
create long long ans = 1e18	long long ans = 1e18 ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if i = 1	if ( i == 1 )
change ans to min of ans and ( a [ n ] - a [ 1 ] ) * ( a [ m ] - a [ n + 1 ] )	ans = min ( ans , ( a [ n ] - a [ 1 ] ) * ( a [ m ] - a [ n + 1 ] ) ) ;
else	else
change ans to min of ans and ( a [ m ] - a [ 1 ] ) * ( a [ n + i - 1 ] - a [ i ] )	ans = min ( ans , ( a [ m ] - a [ 1 ] ) * ( a [ n + i - 1 ] - a [ i ] ) ) ;
print ans	cout << ans << endl ;
create constant integer MAXN with MAXN = integer casted ( 2 * 1e5 + 5 )	const int MAXN = ( int ) ( 2 * 1e5 + 5 ) ;
create integer n	int n ;
create long long array a with size MAXN	long long a [ MAXN ] ;
read n	cin >> n ;
for i = 0 to n + n exclusive , read a [ i ]	for ( int i = 0 ; i < n + n ; i ++ ) { cin >> a [ i ] ; }
sort elements from a to a + n + n	sort ( a , a + n + n ) ;
if n is less than or equal to 1	if ( n <= 1 )
print " 0 " print newline	cout << " 0 " << endl ;
else	else
create long long ans with ans = a [ n - 1 ] - a [ 0 ]	long long ans = a [ n - 1 ] - a [ 0 ] ;
set ans to ans * ( a [ n + n - 1 ] - a [ n ] )	ans *= a [ n + n - 1 ] - a [ n ] ;
create long long l with l = a [ n + n - 1 ] - a [ 0 ]	long long l = a [ n + n - 1 ] - a [ 0 ] ;
for i = 1 to n inclusive , set ans to minimum of ( ans and ( l * ( a [ i + n - 1 ] - a [ i ] ) ) )	for ( int i = 1 ; i <= n ; i ++ ) { ans = min ( ans , l * ( a [ i + n - 1 ] - a [ i ] ) ) ; }
print ans print newline	cout << ans << endl ;
n , x = integers	int n , x ;
read n	cin >> n ;
set cnt1 , cnt2 = 0	int cnt1 = 0 , cnt2 = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
set cnt1 = cnt1 + x	cnt1 += x ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
set cnt2 = cnt2 + x	cnt2 += x ;
if cnt1 > = cnt2	if ( cnt1 >= cnt2 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
declare long long integer variables n , i and j	long long int n , i , j ;
read n	cin >> n ;
declare long long integers s1 and s2 = 0 and long long integer arrays a and b with size n	long long int a [ n ] , b [ n ] , s1 = 0 , s2 = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increase s1 by a [ i ]	s1 += a [ i ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read b [ i ]	cin >> b [ i ] ;
increase s2 by b [ i ]	s2 += b [ i ] ;
if s1 > = s2	if ( s1 >= s2 )
print " YES " and ' \ n '	cout << " YES " << ' \n ' ;
else	else
print " NO " and ' \ n '	cout << " NO " << ' \n ' ;
n = integer	int n ;
Read n	cin >> n ;
sumx = integer , set to 0	int sumx = 0 ;
sumy = integer , set to 0	int sumy = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
x = integer	int x ;
Read x	cin >> x ;
set sumx to sumx + x	sumx = sumx + x ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
y = integer	int y ;
Read y	cin >> y ;
set sumy to sumy + y	sumy = sumy + y ;
if sumy is less than or equal to sumx	if ( sumy <= sumx )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
x , y , n = integers with x , y = 0	int x = 0 , y = 0 , n ;
a = integer	int a ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
set x to x + a	x += a ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
set y to y + a	y += a ;
if x > = y	if ( x >= y )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
create integer arrays x , y , with x size 51 , y size 51	int x [ 51 ] , y [ 51 ] ;
create integers n , sum_x , sum_y , with sum_x = 0 , sum_y = 0	int n , sum_x = 0 , sum_y = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read x [ i ] , increment sum_x by x [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> x [ i ] , sum_x += x [ i ] ;
for i = 0 to n exclusive , read y [ i ] , increment sum_y by y [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> y [ i ] , sum_y += y [ i ] ;
if sum_x is greater than or equal than sum_y	if ( sum_x >= sum_y )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create n , sum , s as int set sum and s to 0	int n , sum = 0 , s = 0 ;
read in to n	cin >> n ;
create int array arr and ar both size n	int arr [ n ] , ar [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read in to arr [ i ]	cin >> arr [ i ] ;
increase sum by arr [ i ]	sum += arr [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read in to ar [ i ]	cin >> ar [ i ] ;
increase s by ar [ i ]	s += ar [ i ] ;
if s < = sum	if ( s <= sum )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
let is be integer array with size 105	int is [ 105 ] ;
create integers n , m , a and b	int n , m , a , b ;
read n and m	cin >> n >> m ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a and b	cin >> a >> b ;
for j = a to b inclusive set is [ j ] to 1	for ( int j = a ; j <= b ; j ++ ) is [ j ] = 1 ;
declare integer vector ans	vector < int > ans ;
for i = 1 to m inclusive	for ( int i = 1 ; i <= m ; i ++ )
if is [ i ] is 0 , push i into ans	if ( ! is [ i ] ) ans . push_back ( i ) ;
print length of ans and " \ n "	cout << ans . size ( ) << " \n " ;
for i = 0 to length of ans exclusive	for ( int i = 0 ; i < ans . size ( ) ; i ++ )
if i ! = length of ans - 1	if ( i != ans . size ( ) - 1 )
print ans [ i ] and " "	cout << ans [ i ] << "   " ;
else	else
print ans [ i ] and " \ n "	cout << ans [ i ] << " \n " ;
a , tam , comeco , fim = int witha = 0 and tam = 0 and comeco = 0 and fim = 0	int a = 0 , tam = 0 , comeco = 0 , fim = 0 ;
read a then tam	cin >> a >> tam ;
isThere = bool array of size tam + 1	bool isThere [ tam + 1 ] ;
set all values of isThere to false	for ( int j = 0 ; j <= tam ; j ++ ) { isThere [ j ] = false ; }
for b = 0 to a	for ( int b = 0 ; b < a ; b ++ )
read comeco then fim	cin >> comeco >> fim ;
for c = comeco to fim inclusive set siThere [ c ] to true	for ( int c = comeco ; c <= fim ; c ++ ) { isThere [ c ] = true ; }
resp = int with resp = 0	int resp = 0 ;
presentes = int array of size tam + 1	int presentes [ tam + 1 ] ;
ordem = string with ordem = " "	string ordem = "  " ;
for b = 1 to tam inclusive	for ( int b = 1 ; b <= tam ; b ++ )
is isThere [ b ] is false	if ( ! isThere [ b ] )
set presentes [ resp ] to b	presentes [ resp ] = b ;
increment resp	resp ++ ;
print resp	cout << resp << endl ;
for b = 0 to resp	for ( int b = 0 ; b < resp ; b ++ )
print presentes [ b ]	cout << presentes [ b ] ;
if b is resp - 1	if ( b == resp - 1 )
print newline	cout << endl ;
else	else
print " "	cout << "   " ;
M = const int with M = 3010	const int M = 3010 ;
b = int vector and a = int vector array of size M	vector < int > a [ M ] , b ;
n , m = int	int n , m ;
in function judge taking an int x and returning a bool	bool judge ( int x )
num1 = int with num1 = size of a [ 1 ]	int num1 = a [ 1 ] . size ( ) ;
for i = 2 to m inclusive	for ( int i = 2 ; i <= m ; i ++ )
if size of a [ i ] is greater than x	if ( a [ i ] . size ( ) > x )
increment num1 by size of a [ i ] - x	num1 += a [ i ] . size ( ) - x ;
else	else
increment num1 by size of a [ i ]	num1 += a [ i ] . size ( ) ;
return true if num1 is greater than x else return false	return num1 > x ;
in function get_ans taking an int x and returning a long long	long long get_ans ( int x )
ans = long long with ans = 0	long long ans = 0 ;
num1 = int with num1 = size of a [ 1 ]	int num1 = a [ 1 ] . size ( ) ;
clear b	b . clear ( ) ;
for i = 2 to m inclusive	for ( int i = 2 ; i <= m ; i ++ )
if size of a [ i ] is greater than x	if ( a [ i ] . size ( ) > x )
for j = x to size of a [ i ]	for ( int j = x ; j < a [ i ] . size ( ) ; j ++ )
increment num1	num1 ++ ;
increment ans by a [ i ] [ j ]	ans += a [ i ] [ j ] ;
for j = 0 to x append a [ i ] [ j ] to b	for ( int j = 0 ; j < x ; j ++ ) b . push_back ( a [ i ] [ j ] ) ;
else	else
for j = 0 to size of a [ i ] append a [ i ] [ j ] to b	for ( int j = 0 ; j < a [ i ] . size ( ) ; j ++ ) b . push_back ( a [ i ] [ j ] ) ;
sort b	sort ( b . begin ( ) , b . end ( ) ) ;
if num1 is less than x and x - num1 + 1 is greater than size of b then return 10000000000000ll	if ( num1 < x && x - num1 + 1 > b . size ( ) ) return 10000000000000ll ;
hh = int with hh = x - num1 + 1	int hh = x - num1 + 1 ;
for i = 0 to hh increment ans by b [ i ]	for ( int i = 0 ; i < hh ; i ++ ) ans += b [ i ] ;
return ans	return ans ;
in function cmp taking two ints x and y and returning a bool	bool cmp ( int x , int y )
return true if x is greater than y else return false	return x > y ;
read n then m	cin >> n >> m ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
x , y = int	int x , y ;
read x then y	cin >> x >> y ;
append y to a [ x ]	a [ x ] . push_back ( y ) ;
for i = 1 to m inclusive sort a [ i ] using cmp	for ( int i = 1 ; i <= m ; i ++ ) sort ( a [ i ] . begin ( ) , a [ i ] . end ( ) , cmp ) ;
ans = long long with ans = 10000000000000ll	long long ans = 10000000000000ll ;
for i = 0 to n / 2 inclusive set ans to min of ans and get_ans of i	for ( int i = 0 ; i <= n / 2 ; i ++ ) ans = min ( ans , get_ans ( i ) ) ;
print ans	cout << ans << endl ;
create long long integer pair p of 3007 size	pair < long long int , long long int > p [ 3007 ] ;
c = long long integers array of length 3007	long long int c [ 3007 ] ;
integer n , m = long long integers	long long int n , m ;
read n , m	cin >> n >> m ;
set long long integer mx to 0	long long int mx = 0 ;
for i = 0 to less than n do the following	for ( long long int i = 0 ; i < n ; i ++ )
read p [ i ] . second , p [ i ] . first	cin >> p [ i ] . second >> p [ i ] . first ;
add one to c [ p [ i ] . second ]	c [ p [ i ] . second ] ++ ;
sort the values of p to p + n	sort ( p , p + n ) ;
for i = 2 to less than or equal to m then make mx the maximum of mx or c [ i ]	for ( long long int i = 2 ; i <= m ; i ++ ) mx = max ( mx , c [ i ] ) ;
set long long integer ans to 21474836470000	long long int ans = 21474836470000 ;
set long long integer sum to 0	long long int sum = 0 ;
for i = mx to greater than or equal to 0 do the following	for ( long long int i = mx ; i >= 0 ; i -- )
for j = 0 to less than n do the following	for ( long long int j = 0 ; j < n ; j ++ )
if p [ j ] . second is not equal to 1 and c [ p [ j ] . second ] > i then do the following	if ( p [ j ] . second != 1 && c [ p [ j ] . second ] > i )
minus 1from c [ p [ j ] . second ]	c [ p [ j ] . second ] -- ;
set p [ j ] . second to 1	p [ j ] . second = 1 ;
add 1 to c [ 1 ]	c [ 1 ] ++ ;
sum equals sum plus p [ j ] . first	sum += p [ j ] . first ;
set long long integer k to i - c [ 1 ] + 1	long long int k = i - c [ 1 ] + 1 ;
set long long integer t to sum	long long int t = sum ;
for j = 0 to less than n do the following	for ( long long int j = 0 ; j < n ; j ++ )
if k is greater than 0 then do the following	if ( k > 0 )
if p [ j ] . second is not equal to 1 then do the following	if ( p [ j ] . second != 1 )
t equals t plus p [ j ] . first	t += p [ j ] . first ;
minus 1 from k - -	k -- ;
set ans to min ( ans , t )	ans = min ( ans , t ) ;
output ans , \ n	cout << ans << ' \n ' ;
ax , ay , bx , by , cx , cy , n = integers	int ax , ay , bx , by , cx , cy , n ;
Read ax , ay , bx , by , cx , cy , n	cin >> n >> ax >> ay >> bx >> by >> cx >> cy ;
if cx is greater than bx	if ( cx > bx )
if cy is greater than by	if ( cy > by )
if ( ax is less than cx and ax is greater than bx ) OR ( ay is less than cy and ay is greater than by )	if ( ( ax < cx && ax > bx ) || ( ay < cy && ay > by ) )
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
else do the following	else
if ( ax is less than cx and ax is greater than bx ) OR ( ay is greater than cy and ay is less than by )	if ( ( ax < cx && ax > bx ) || ( ay > cy && ay < by ) )
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
else do the following	else
if cy is greater than by	if ( cy > by )
if ( ax is greater than cx and ax is less than bx ) OR | ( ay is less than cy and ay is greater than by	if ( ( ax > cx && ax < bx ) || ( ay < cy && ay > by ) )
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
else do the following	else
if ( ax is greater than cx and ax is less than bx ) OR | ( ay is greater than cy and ay is less than by )	if ( ( ax > cx && ax < bx ) || ( ay > cy && ay < by ) )
print NO and a new line	cout << " NO\n " ;
else do the following	else
print YES and a new line	cout << " YES\n " ;
create 2d integer array bio with size 1000 by 1000	int bio [ 1000 ] [ 1000 ] ;
create constant integer array smjeroviX with size 8 with smjeroviX = { 0 , 0 , 1 , - 1 , 1 , 1 , - 1 , - 1 }	const int smjeroviX [ 8 ] = { 0 , 0 , 1 , - 1 , 1 , 1 , - 1 , - 1 } ;
create constant integer array smjeroviY with size 8 with smjeroviY = { 1 , - 1 , 0 , 0 , 1 , - 1 , 1 , - 1 }	const int smjeroviY [ 8 ] = { 1 , - 1 , 0 , 0 , 1 , - 1 , 1 , - 1 } ;
create integers n , aX , aY , bX , bY , cX , cY	int n , aX , aY , bX , bY , cX , cY ;
read n read aX read aY read bX read bY read cX read cY	cin >> n >> aX >> aY >> bX >> bY >> cX >> cY ;
decrement aX	aX -- ;
decrement aY	aY -- ;
decrement bX	bX -- ;
decrement bY	bY -- ;
decrement cX	cX -- ;
decrement cY	cY -- ;
create integer queue q	queue < int > q ;
add element bX to end of q	q . push ( bX ) ;
add element bY to end of q	q . push ( bY ) ;
set bio [ bX ] [ bY ] to 1	bio [ bX ] [ bY ] = 1 ;
while q is not empty	while ( ! q . empty ( ) )
create integer x with x = front of q	int x = q . front ( ) ;
remove next element from q	q . pop ( ) ;
set y to front of q	int y = q . front ( ) ;
remove next element from q	q . pop ( ) ;
if x is cX and y is cY	if ( x == cX && y == cY )
print " YES \ n "	cout << " YES\n " ;
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
create integer X with X = x + smjeroviX [ i ]	int X = x + smjeroviX [ i ] ;
create integer Y with Y = y + smjeroviY [ i ]	int Y = y + smjeroviY [ i ] ;
if X is less than 0 or X is n or Y is less than 0 or Y is n or bio [ X ] [ Y ] , break current loop iteration	if ( X < 0 || X == n || Y < 0 || Y == n || bio [ X ] [ Y ] ) continue ;
set bio [ X ] [ Y ] to 1	bio [ X ] [ Y ] = 1 ;
if X is not aX and Y is not aY and ( X + Y is not aX + aY ) and ( X - Y is not aX - aY )	if ( X != aX && Y != aY && ( X + Y != aX + aY ) && ( X - Y != aX - aY ) )
add element X to end of q	q . push ( X ) ;
add element Y to end of q	q . push ( Y ) ;
print " NO \ n "	cout << " NO\n " ;
integers = n , ax , ay , bx , by , cx , cy	int n , ax , ay , bx , by , cx , cy ;
read n , ax , ay , bx , by , cx , cy	cin >> n >> ax >> ay >> bx >> by >> cx >> cy ;
if ( bx - ax ) * ( cx - ax ) is less than 0 or ( by - ay ) * ( cy - ay ) < 0 then do the following	if ( ( bx - ax ) * ( cx - ax ) < 0 || ( by - ay ) * ( cy - ay ) < 0 )
output NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
declare integer variable n	int n ;
read input to n	cin >> n ;
create integers x1 and y1	int x1 , y1 ;
read x1 and y1	cin >> x1 >> y1 ;
declare ints x2 and y2	int x2 , y2 ;
read x2 and y2	cin >> x2 >> y2 ;
declare integers x3 and y3	int x3 , y3 ;
read x3 and y3	cin >> x3 >> y3 ;
if x2 < x1 and y2 < y1 and x3 < x1 and y3 < y1	if ( x2 < x1 && y2 < y1 && x3 < x1 && y3 < y1 )
print " YES "	cout << " YES " << endl ;
else if x2 > x1 & & y2 > y1 & & x3 > x1 & & y3 > y1	else if ( x2 > x1 && y2 > y1 && x3 > x1 && y3 > y1 )
print " YES "	cout << " YES " << endl ;
else if x2 > x1 & & x3 > x1 & & y3 < y1 & & y2 < y1	else if ( x2 > x1 && x3 > x1 && y3 < y1 && y2 < y1 )
print " YES "	cout << " YES " << endl ;
else if x2 < x1 & & x3 < x1 & & y2 > y1 & & y3 > y1	else if ( x2 < x1 && x3 < x1 && y2 > y1 && y3 > y1 )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
n , qx , qy , kx , ky , tx , ty = integers	int n , qx , qy , kx , ky , tx , ty ;
Read n	cin >> n ;
Read qx	cin >> qx ;
Read qy	cin >> qy ;
Read kx	cin >> kx ;
Read ky	cin >> ky ;
Read tx	cin >> tx ;
Read ty	cin >> ty ;
if kx is less than qx	if ( kx < qx )
if ky is less than qy	if ( ky < qy )
if tx is less than qx and ty is less than qy	if ( tx < qx && ty < qy )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
else do the following	else
if tx is less than qx and ty is greater than qy	if ( tx < qx && ty > qy )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
else do the following	else
if ky is less than qy	if ( ky < qy )
if tx is greater than qx and ty is less than qy	if ( tx > qx && ty < qy )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
else do the following	else
if tx is greater than qx and ty is greater than qy	if ( tx > qx && ty > qy )
print YES and a new line	cout << " YES " << endl ;
else do the following	else
print NO and a new line	cout << " NO " << endl ;
integers = n	int n ;
read n	cin >> n ;
integers = x , y , x1 , y1 , x2 , y2	int x , y , x1 , y1 , x2 , y2 ;
read input x , y , x1 , y1 , x2 , y2	cin >> x >> y >> x1 >> y1 >> x2 >> y2 ;
integers = flag = 1	int flag = 1 ;
if x1 is x or y1 then do the following	if ( x1 == x || y1 == y || x2 == x || y2 == y ) { flag = 0 ; }
if abs is abs ( y - y1 then do the following or abs ( x - x2	if ( abs ( x - x1 ) == abs ( y - y1 ) || abs ( x - x2 ) == abs ( y - y2 ) )
set flag to 0	flag = 0 ;
else if x1 is less than x and x2 > x then do the following	else if ( x1 < x && x2 > x )
set flag to 0	flag = 0 ;
else if x1 > x and x2 is less than x then do the following	else if ( x1 > x && x2 < x )
set flag to 0	flag = 0 ;
else if y1 is less than y and y2 > y then do the following	else if ( y1 < y && y2 > y )
set flag to 0	flag = 0 ;
else if y1 > y and y2 is less than y then do the following	else if ( y1 > y && y2 < y )
set flag to 0	flag = 0 ;
if flag is true	if ( flag )
output YES	cout << " YES " << endl ;
else	else
output NO	cout << " NO " << endl ;
boolean function search with int arguments ax , ay , bx , by , cx and cy	bool search ( int ax , int ay , int bx , int by , int cx , int cy )
if bx < ax and cx < ax and by < ay and cy < ay	if ( bx < ax && cx < ax && by < ay && cy < ay )
return true	return true ;
else if bx < ax and cx < ax and by > ay and cy > ay	else if ( bx < ax && cx < ax && by > ay && cy > ay )
return true	return true ;
else if bx > ax and cx > ax and by < ay and cy < ay	else if ( bx > ax && cx > ax && by < ay && cy < ay )
return true	return true ;
else if bx > ax and cx > ax and by > ay and cy > ay	else if ( bx > ax && cx > ax && by > ay && cy > ay )
return true	return true ;
return false	return false ;
create ints n , ax , ay , bx , by , cx and cy	int n , ax , ay , bx , by , cx , cy ;
read n , ax , ay , bx , by , cx and cy	cin >> n >> ax >> ay >> bx >> by >> cx >> cy ;
if search ( ax , ay , bx , by , cx , cy ) returns true	if ( search ( ax , ay , bx , by , cx , cy ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
n , a , b , c = long long int	long long int n , a , b , c ;
read n	cin >> n ;
if n is a multiple of 3 or n mod 3 is 1	if ( n % 3 == 0 || n % 3 == 1 )
set a to n - 2	a = n - 2 ;
set b to 1	b = 1 ;
set c to 1	c = 1 ;
else if n mod 3 is 2	else if ( n % 3 == 2 )
set a to n - 3	a = n - 3 ;
set b to 1	b = 1 ;
set c to 2	c = 2 ;
print a and b and c	cout << a << "   " << b << "   " << c << endl ;
declare integer n	int n ;
declare integer variable c8 = 0	int c8 = 0 ;
read n	cin >> n ;
read from the input input and ignore it	cin . ignore ( ) ;
let s be char array with size 101	char s [ 101 ] ;
read s	gets ( s ) ;
if n > = 11	if ( n >= 11 )
declare integer r = n / 11	int r = n / 11 ;
loop i from 0 while s [ i ] ! = 0 , incrementing i	for ( int i = 0 ; s [ i ] ; i ++ )
if s [ i ] is equal to ' 8 ' , increment c8	if ( s [ i ] == ' 8 ' ) c8 ++ ;
if c8 is equal to r , break the loop	if ( c8 == r ) break ;
print c8	cout << c8 << endl ;
print c8	cout << c8 << endl ;
create integers n , num8 , numn and num	int n , num8 , numn , num ;
create character array str with 101 element	char str [ 101 ] ;
read n and loop further	while ( cin >> n )
set num8 to 0	num8 = 0 ;
read input to str	cin >> str ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if str [ i ] = ' 8 ' , increment num8 by one	if ( str [ i ] == ' 8 ' ) num8 ++ ;
assign n / 11 to numn	numn = n / 11 ;
if num8 is greater than numn	if ( num8 > numn )
change num to numn	num = numn ;
else	else
change num to num8	num = num8 ;
print num	cout << num << endl ;
st , s = string	string st , s ;
i , a , b , count = int with count = 0	int i , a , b , count = 0 ;
read a then st	cin >> a >> st ;
set b to a / 11	b = a / 11 ;
for i = 0 to a	for ( i = 0 ; i < a ; i ++ )
if st [ i ] is ' 8 ' then increment count	if ( st [ i ] == ' 8 ' ) { count ++ ; }
if count is less than b	if ( count < b )
print count	cout << count << endl ;
else	else
print b	cout << b << endl ;
s = character array of size 101	char s [ 101 ] ;
n , i = integers , sum8 = integer = 0 , sum = integer = 0 , total = integer = 0	int n , i , sum8 = 0 , sum = 0 , total = 0 ;
read n	cin >> n ;
read s	cin >> s ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if s [ i ] is 8 , then increase sum8 by 1	if ( s [ i ] == ' 8 ' ) sum8 ++ ;
increase sum by 1	sum ++ ;
if sum8 > = sum / 11	if ( sum8 >= sum / 11 )
total = sum / 11	total = sum / 11 ;
else	else
total = sum8	total = sum8 ;
print total	cout << total << endl ;
create character array s with size 101	char s [ 101 ] ;
create integers n , i , sum8 , sum , total , with sum8 = 0 , sum = 0 , total = 0	int n , i , sum8 = 0 , sum = 0 , total = 0 ;
read n	cin >> n ;
read s	cin >> s ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if s [ i ] is ' 8 ' , increment sum8	if ( s [ i ] == ' 8 ' ) sum8 ++ ;
increment sum	sum ++ ;
if sum8 is greater than or equal to sum / 11	if ( sum8 >= sum / 11 )
set total to sum / 11	total = sum / 11 ;
else	else
set total to sum8	total = sum8 ;
print total print newline	cout << total << endl ;
create string s	string s ;
create int n and sum , set to sum 0	int n , sum = 0 ;
read n	cin >> n ;
read s	cin >> s ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] equal to 8 , increment sum	if ( s [ i ] == ' 8 ' ) sum ++ ;
if n / 11 greater than 11	if ( n / 11 < sum )
print n / 11	cout << ( n / 11 ) << endl ;
else	else
print sum and a newline	cout << sum << endl ;
set N to 1e6 + 10	const int N = 1e6 + 10 ;
mod = 998244353	const int mod = 998244353 ;
create int n	int n ;
create string x	string x ;
create map m from int to int	map < int , int > m ;
read n and x	cin >> n >> x ;
for i = 0 to n exclusive , increment m [ x [ i ] - 0 ]	for ( int i = 0 ; i < n ; i ++ ) m [ x [ i ] - ' 0 ' ] ++ ;
set s to size of x	int s = x . size ( ) ;
print min of m [ 8 ] and s / 11	cout << min ( m [ 8 ] , s / 11 ) << endl ;
n , k = integers with k = 0	int n , k = 0 ;
Read n	cin >> n ;
s = string	string s ;
Read s	cin >> s ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] is 8 , then increment k	if ( s [ i ] == ' 8 ' ) { k ++ ; }
print minimum value of n / 11 and k and a new line	cout << min ( n / 11 , k ) << endl ;
MAX = const int with MAX = 100000	const int MAX = 100000 ;
IN = const int with INF = 1000000001	const int INF = 1000000001 ;
a = int array of size MAX	int a [ MAX ] ;
n , sum = int with sum = 0	int n , sum = 0 ;
s = string	string s ;
read n	cin >> n ;
read s	cin >> s ;
len = int with len = length of s	int len = s . length ( ) ;
for i = 0 to len increment sum if s [ i ] is ' 8 '	for ( int i = 0 ; i < len ; ++ i ) sum += ( s [ i ] == ' 8 ' ) ;
res = int with res = n / 11	int res = n / 11 ;
if sum is less or equal to res	if ( sum <= res )
print sum	cout << sum << endl ;
else	else
print res	cout << res << endl ;
n = integer	int n ;
Read n	cin >> n ;
number = string	string number ;
Read number	cin >> number ;
has_eight = integer with 0	int has_eight = 0 ;
for i = 0 to length of string number exclusive	for ( int i = 0 ; i < number . length ( ) ; i ++ )
if number [ i ] is 8 , then increment has_eight	if ( number [ i ] == ' 8 ' ) has_eight ++ ;
if n is less than 11 OR has_eight is 0	if ( n < 11 || has_eight == 0 )
print 0 and a new line	cout << 0 << endl ;
if ( n / 11 ) is greater than or equal to has_eight	if ( ( n / 11 ) >= has_eight )
print has_eight and a new line	cout << has_eight << endl ;
else if ( n / 11 ) is less than has_eight	else if ( ( n / 11 ) < has_eight )
print n / 11 and a new line	cout << n / 11 << endl ;
declare integer variables n and count with count = 0	int n , count = 0 ;
read n	cin >> n ;
create character c	char c ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read c	cin >> c ;
if c = ' 8 ' , increment count	if ( c == ' 8 ' ) count ++ ;
if n < 11 or count = 0	if ( n < 11 || count == 0 )
print 0	cout << 0 << endl ;
print min of count and n / 11	cout << min ( count , n / 11 ) << endl ;
k , i , n , ans , m = integers	int k , i , n , ans , m ;
s = string	string s ;
read n , s	cin >> n >> s ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if s [ i ] is 8 , increment k	if ( s [ i ] == ' 8 ' ) k ++ ;
ans = min of k and n / 11	ans = min ( k , n / 11 ) ;
print ans	cout << ans << endl ;
n = int	int n ;
read n	cin >> n ;
s = string	string s ;
read s	cin >> s ;
eight , other = int with eight = 0 and other = 0	int eight = 0 , other = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] is ' 8 '	if ( s [ i ] == ' 8 ' )
increment eight	eight ++ ;
else	else
increment other	other ++ ;
if eight is 0	if ( eight == 0 )
print 0	cout << 0 << endl ;
else	else
ans = int with ans = other / 10	int ans = other / 10 ;
if ans is greater than eight	if ( ans > eight )
print eight	cout << eight << endl ;
if eight - ans is 0	if ( eight - ans == 0 )
print ans	cout << ans << endl ;
else	else
print ( ( ( eight - ans ) + ( other mod 10 ) ) / 11 ) + ans	cout << ( ( ( eight - ans ) + ( other % 10 ) ) / 11 ) + ans << endl ;
create integers n , i and cnt where i and cnt = 0	int n , i = 0 , cnt = 0 ;
create string s	string s ;
read n and s	cin >> n >> s ;
while s [ i ] ! = ' \ 0 '	while ( s [ i ] != ' \0 ' )
if s [ i ] = ' 8 ' , increment cnt by one	if ( s [ i ] == ' 8 ' ) cnt ++ ;
increment i	i ++ ;
if n > = 11 and n / 11 < = cnt and cnt ! = 0	if ( n >= 11 && n / 11 <= cnt && cnt != 0 )
print n / 11 and " \ n "	cout << n / 11 << " \n " ;
else if n > = 11 & & n / 11 > = cnt & & cnt ! = 0	else if ( n >= 11 && n / 11 >= cnt && cnt != 0 )
print cnt and " \ n "	cout << cnt << " \n " ;
else	else
print " 0 \ n "	cout << " 0\n " ;
create string s	string s ;
declare integers n and sum with sum = 0	int n , sum = 0 ;
read n	cin >> n ;
read s	cin >> s ;
for i from 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] = ' 8 ' , increment sum	if ( s [ i ] == ' 8 ' ) sum ++ ;
if n / 11 is less than sum	if ( n / 11 < sum )
print n / 11	cout << ( n / 11 ) << endl ;
else	else
print sum	cout << sum << endl ;
declare int variable n	int n ;
declare string variable num	string num ;
read n and num	cin >> n >> num ;
declare int count = 0	int count = 0 ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if num [ i ] is equal to ' 8 ' , increment count by one	if ( num [ i ] == ' 8 ' ) { count ++ ; }
print count if n / 11 > count and n / 11 otherwise	cout << ( n / 11 > count ? count : n / 11 ) << endl ;
n , i , no_of_8 , groups = integers with no_of_8 = 0	int n , i , no_of_8 = 0 , groups ;
c = character	char c ;
Read n	cin >> n ;
for i = 1 to n exclusive	for ( i = 1 ; i <= n ; i ++ )
Read c	cin >> c ;
f c is 8 , then increment no_of_8	if ( c == ' 8 ' ) no_of_8 ++ ;
set groups to n / 11	groups = n / 11 ;
if no_of_8 is greater than or equal to groups	if ( no_of_8 >= groups )
print groups and a new line	cout << groups << endl ;
else do the following	else
print no_of_8 and a new line	cout << no_of_8 << endl ;
create integer n	int n ;
read n	cin >> n ;
declare integer ans = 0	int ans = 0 ;
create char array s with 101 element	char s [ 101 ] ;
read s	cin >> s ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] = ' 8 ' , increment ans by 1	if ( s [ i ] == ' 8 ' ) ans ++ ;
if ans is equal to 0 or n / 11 is equal to 0	if ( ans == 0 || n / 11 == 0 )
print 0	cout << 0 << endl ;
else if ans > n / 11	else if ( ans > n / 11 )
print n / 11	cout << n / 11 << endl ;
else	else
print ans	cout << ans << endl ;
create int	int t ;
read t	cin >> t ;
while decrement t	while ( t -- )
n and k = int	int n , k ;
read n , k	cin >> n >> k ;
set flag = 0	int flag = 0 ;
for i = 0 to n / k exclusive	for ( int i = 0 ; i < ( n / k ) ; i ++ )
for j = 0 to k exclusive	for ( int j = 0 ; j < k ; j ++ )
print char ( 97 + j )	cout << char ( 97 + j ) ;
assign j to flag	flag = j ;
for i = 0 to n - ( n / k ) * k exclusive , print char ( 97 + flag )	for ( int i = 0 ; i < n - ( n / k ) * k ; i ++ ) { cout << char ( 97 + flag ) ; }
print a newline	cout << endl ;
create integer n	int n ;
create string s	string s ;
read n	cin >> n ;
read s	cin >> s ;
create string t with t = " "	string t = "  " ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integer k with k = ( i * ( i + 1 ) ) / 2	int k = ( i * ( i + 1 ) ) / 2 ;
if k is greater than or equal to n , break loop	if ( k >= n ) { break ; }
set t to t + s [ k ]	t = t + s [ k ] ;
print t print newline	cout << t << endl ;
create long longs x , y and z , with z = 1	long long x , y , z = 1 ;
declare string variables s and ss	string s , ss ;
read x and s	cin >> x >> s ;
for integer i = 0 to x exclusive	for ( int i = 0 ; i < x ; )
increase ss by s [ i ]	ss += s [ i ] ;
increase i by z	i += z ;
increment z	z ++ ;
print ss and a new line	cout << ss << endl ;
v = vector of characters	vector < char > v ;
s = vector of characters	vector < char > s ;
count and size are integers , with count = 1	int count = 1 , size ;
declare character variable called c	char c ;
read size	cin >> size ;
for integer i = 0 to size exclusive	for ( int i = 0 ; i < size ; i ++ )
read c	cin >> c ;
push c into v	v . push_back ( c ) ;
let in and i be integers , with i = 0	int in , i = 0 ;
while i is less than size	while ( i < size )
if i = 0	if ( i == 0 )
push v [ i ] into s	s . push_back ( v [ i ] ) ;
increase i by one	i ++ ;
else	else
set value of in to count	in = count ;
for integer j = 0 to in exclusive	for ( int j = 0 ; j < in ; j ++ ) { i ++ ; }
if i is less than size push v [ i ] into s	if ( i < size ) s . push_back ( v [ i ] ) ;
increase count	count ++ ;
for integer i = 0 to length of s exclusive , print s [ i ]	for ( int i = 0 ; i < s . size ( ) ; i ++ ) { cout << s [ i ] ; }
print new line	cout << endl ;
declare integer variable called n	int n ;
read n	cin >> n ;
let a be string	string a ;
read a	cin >> a ;
for integer i = 1 while i * ( i + 1 ) / 2 < n + 1 , print a [ ( i * ( i + 1 ) / 2 ) - 1 ]	for ( int i = 1 ; i * ( i + 1 ) / 2 < n + 1 ; i ++ ) { cout << a [ ( i * ( i + 1 ) / 2 ) - 1 ] ; }
print new line	cout << endl ;
create integers n , sum , index	int n , sum , index ;
create character arrays s , a , with s size 55 , a size 55	char s [ 55 ] , a [ 55 ] ;
read n read s	cin >> n >> s ;
set sum to index to 0	sum = index = 0 ;
for i = 0	for ( int i = 0 ; ; i ++ )
increment index by i	index += i ;
if index is greater than or equal to n , break loop	if ( index >= n ) break ;
set a [ increment sum ] to s [ index ]	a [ sum ++ ] = s [ index ] ;
set a [ sum ] to ' \ 0 '	a [ sum ] = ' \0 ' ;
print a print newline	cout << a << endl ;
define function compare with arguments p1 and p2 of type pair of string and int	int compare ( pair < string , int > p1 , pair < string , int > p2 )
return true if p1 . second > p2 . second or false if it is not	return ( p1 . second > p2 . second ) ;
n is integer	int n ;
read n	cin >> n ;
declare string called s	string s ;
read s	cin >> s ;
declare string variable called ans = " "	string ans = "  " ;
declare integer called h = 1	int h = 1 ;
declare integer variable called c = 1	int c = 1 ;
for integer i = 0 to length of s exclusive	for ( int i = 0 ; i < int ( s . size ( ) ) ; i ++ )
if c = h	if ( c == h )
increase ans by s [ i ]	ans += s [ i ] ;
increment h	h ++ ;
c = 1	c = 1 ;
else	else
increase c by one	c ++ ;
print ans and a new line	cout << ans << endl ;
read n	cin >> n ;
s , d = strings	string s , sd ;
n , i , l = long long	long long n , i , l ;
read n	cin >> n ;
read s	cin >> s ;
while n is not 0	while ( n != 0 )
increment l	l ++ ;
n = n - l	n -= l ;
for i = 1 to less or equal l	for ( i = 1 ; i <= l ; i ++ )
sd = sd + s [ 0 ]	sd = sd + s [ 0 ] ;
Erases the portion of the string	s . erase ( 0 , i ) ;
print sd and new line	cout << sd << endl ;
create string a	string a ;
create integers n , num , l with num = 0 , l = 2	int n , num = 0 , l = 2 ;
read n read a	cin >> n >> a ;
while true	while ( true )
if num is less than n - 1	if ( num < n - 1 )
print a [ num ]	cout << a [ num ] ;
increment num by l	num += l ;
increment l	l ++ ;
else	else
print a [ num ] print newline	cout << a [ num ] << endl ;
break loop	break ;
create long long n	long long n ;
read n	cin >> n ;
create string palabra	string palabra ;
read palabra	cin >> palabra ;
create string answer with answer = " "	string answer = "  " ;
create long long aumento with aumento = 1	long long aumento = 1 ;
for i = 0 to n exclusive , setting i to i + aumento	for ( long long i = 0 ; i < n ; i = i + aumento )
add element substring of palabra from i to 1 to end of answer	answer . append ( palabra . substr ( i , 1 ) ) ;
increment aumento	aumento ++ ;
print answer print newline	cout << answer << endl ;
create integers n , sum , index	int n , sum , index ;
create character arrays s , a , with s size 56 , a size 56	char s [ 56 ] , a [ 56 ] ;
read n read s	cin >> n >> s ;
set sum to index to 0	sum = index = 0 ;
for i = 0	for ( int i = 0 ; ; i ++ )
increment index by i	index += i ;
if index is greater than or equal to n , break loop	if ( index >= n ) break ;
set a [ increment sum ] to s [ index ]	a [ sum ++ ] = s [ index ] ;
set a [ sum ] to ' \ 0 '	a [ sum ] = ' \0 ' ;
print a print newline	cout << a << endl ;
declare integer called n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
let i be integer = 2	int i = 2 ;
ans is an empty string	string ans = "  " ;
ans = ans + s [ 0 ]	ans = ans + s [ 0 ] ;
j is integer = 3	int j = 3 ;
while i < = n - 1	while ( i <= n - 1 )
ans = ans + s [ i ]	ans = ans + s [ i ] ;
i = i + j	i = i + j ;
increment j	j ++ ;
print ans and a new line	cout << ans << endl ;
declare string variable a	string a ;
declare integer variables n and s with s = 0	int n , s = 0 ;
read n and a	cin >> n >> a ;
for i = 1 to n inclusive	for ( int i = 1 ; s <= n ; i ++ )
increase s by i	s += i ;
if s < = n print a [ s - i ]	if ( s <= n ) cout << a [ s - i ] ;
print new line	cout << endl ;
n is integer	int n ;
read n	cin >> n ;
let a be an array of characters of length n	char a [ n ] ;
for i = 0 to n exclusive put input to a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
let incr be integer = 1	int incr = 1 ;
for integer i = 0 to n exclusive incrementing by incr	for ( int i = 0 ; i < n ; i = i + incr )
print a [ i ]	cout << a [ i ] ;
increase incr	incr ++ ;
print new line	cout << endl ;
create integer n	int n ;
let s be an array of characters of length 100	char s [ 100 ] ;
read n and s	cin >> n >> s ;
t is integer = 1	int t = 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i += t )
print s [ i ]	cout << s [ i ] ;
increase t by one	t ++ ;
print new line	cout << endl ;
create integers n and it ; it = 1	int n , it = 1 ;
create string s	string s ;
read n and s	cin >> n >> s ;
for i = 0 to n exclusive with step of it	for ( int i = 0 ; i < n ; i += it )
increase it by one	it ++ ;
print s [ i ]	cout << s [ i ] ;
print new line	cout << endl ;
a and b are char arrays with size 60	char a [ 60 ] , b [ 60 ] ;
let n be integer	int n ;
read n in a loop	while ( cin >> n )
call memset ( b , 0 and sizeof ( b ) )	memset ( b , 0 , sizeof ( b ) ) ;
read n elements into a starting from index 1	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
k and d are integers = 0	int k = 0 , d = 0 ;
for i = 1 to n inclusive , incrementing by k	for ( int i = 1 ; i <= n ; i = i + k )
set b [ d ] to a [ i ]	b [ d ] = a [ i ] ;
increment d	d ++ ;
increase k	k ++ ;
print b and a new line	cout << b << endl ;
declare integer variable called n	int n ;
read n	cin >> n ;
let a be an array of characters of size 60	char a [ 60 ] ;
read a	cin >> a ;
j is integer = 1	int j = 1 ;
for i = 0 to n exclusive , incrementing i by j	for ( int i = 0 ; i < n ; i = i + j )
print a [ i ]	cout << a [ i ] ;
increase j by one	j ++ ;
print new line	cout << endl ;
set s to character array of length 60	char s [ 60 ] ;
n , ans = integers with ans set to 0	int n , ans = 0 ;
read n	cin >> n ;
read s	cin >> s ;
for i to n inclusive incremented by ans	for ( int i = 0 ; i < n ; i += ans )
increment ans by 1	ans += 1 ;
print s [ i ]	cout << s [ i ] ;
print new line	cout << endl ;
create integer n	int n ;
read n	cin >> n ;
create string s	string s ;
read s	cin >> s ;
create string ans	string ans ;
create integers cnt , sum with cnt = 0 , sum = 0	int cnt = 0 , sum = 0 ;
for i = 0 to n exclusive , incrementing i by cnt	for ( int i = 0 ; i < n ; i += cnt )
add element s [ i ] to end of ans	ans . push_back ( s [ i ] ) ;
increment cnt	cnt ++ ;
print ans print newline	cout << ans << endl ;
create integers n , cnt , i with cnt = 1 , i = 0	int n , cnt = 1 , i = 0 ;
create string s	string s ;
read n read s	cin >> n >> s ;
while true	while ( true )
print s [ i ]	cout << s [ i ] ;
increment i by cnt	i += cnt ;
increment cnt	cnt ++ ;
if i + cnt is greater than n , break loop	if ( i + cnt > n ) { break ; }
print newline	cout << endl ;
declare integer variables l , r , n and k	int l , r , n , k ;
read k	cin >> k ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
read l and r	cin >> l >> r ;
print l , ' ' and r - ( r modulo l )	cout << l << '   ' << r - ( r % l ) << endl ;
n = int	int n ;
read n	cin >> n ;
l , r , R = long long arrays of size 1000 each	long long l [ 1000 ] , r [ 1000 ] , R [ 1000 ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read l [ i ] then r [ i ]	cin >> l [ i ] >> r [ i ] ;
set R [ i ] to r [ i ] / l [ i ]	R [ i ] = r [ i ] / l [ i ] ;
for i = 0 to n print l [ i ] then " " then l [ i ] * R [ i ]	for ( int i = 0 ; i < n ; i ++ ) cout << l [ i ] << "   " << l [ i ] * R [ i ] << endl ;
create integers t , n , l	int t , n , l ;
read t	cin >> t ;
while decrement t is true	while ( t -- )
read n read l	cin >> n >> l ;
print n print " " print ( l / n ) * n print newline	cout << n << "   " << ( l / n ) * n << endl ;
create integers T , l , r	int T , l , r ;
read T	cin >> T ;
for i = 1 to T inclusive	for ( int i = 1 ; i <= T ; i ++ )
read l read r	cin >> l >> r ;
print l print " " print l * ( r / l ) print newline	cout << l << "   " << l * ( r / l ) << endl ;
create integer numberOfInputs	int numberOfInputs ;
read numberOfInputs	cin >> numberOfInputs ;
create long longs input1 and input2	long long input1 , input2 ;
while numberOfInputs > 0 , decrement it and keep looping	while ( numberOfInputs -- )
read input1 and input2	cin >> input1 >> input2 ;
create long long div = input2 / input1	long long div = input2 / input1 ;
create long long answer = input1 * div	long long answer = input1 * div ;
print input1 , " " and answer	cout << input1 << "   " << answer << endl ;
create integers T , l , r	int T , l , r ;
create integers i , j	int i , j ;
read T	cin >> T ;
for i = 1 to T inclusive	for ( i = 1 ; i <= T ; i ++ )
read l read r	cin >> l >> r ;
print l print ' ' print ( r / l ) * l print ' \ n '	cout << l << '   ' << ( r / l ) * l << ' \n ' ;
t = int	int t ;
read t	cin >> t ;
loop t times	while ( t -- )
l , r = long int	long int l , r ;
read l then r	cin >> l >> r ;
if l equals 1	if ( l == 1 )
print l and r	cout << l << "   " << r << endl ;
else	else
print l and " "	cout << l << "   " ;
mod = long int with mod = r modulo l	long int mod = ( r % l ) ;
print r - mod	cout << ( r - mod ) << endl ;
t = int	int t ;
read t	cin >> t ;
l , r , d = int	int l , r , d ;
while decremented t not equal 0	while ( t -- )
read l , r	cin >> l >> r ;
if r modulo l is zero	if ( r % l == 0 )
print l , space , r	cout << l << "   " << r << endl ;
else	else
d = r modulo l	d = r % l ;
d = r - d	d = r - d ;
print l , space , d	cout << l << "   " << d << endl ;
create long long n and m	long long n , m ;
read n	cin >> n ;
create long long l and r	long long l , r ;
while decrement n	while ( n -- )
read l and r	cin >> l >> r ;
if r mod l = 0	if ( r % l == 0 )
print l , " " , r	cout << l << "   " << r << endl ;
else	else
print l , " " , r - ( r mod l )	cout << l << "   " << r - ( r % l ) << endl ;
x , y = long long	long long x , y ;
T = int	int T ;
read T	cin >> T ;
loop T times	while ( T -- )
read x then y	cin >> x >> y ;
r = long long with r = y mod x	long long r = y % x ;
print x then " " then y - r	cout << x << "   " << y - r << " \n " ;
create int n , i and arrays p and s of length 100100	int n , p [ 100100 ] , s [ 100100 ] , i ;
read n	cin >> n ;
for i = 2 to n inclusive , read p [ i ]	for ( i = 2 ; i <= n ; i ++ ) cin >> p [ i ] ;
for i = 1 to n inclusive , read s [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
for i = 2 to n inclusive	for ( i = 2 ; i <= n ; i ++ )
if s [ i ] = - 1 , continue the loop	if ( s [ i ] == - 1 ) continue ;
s [ p [ i ] ] = - 1	if ( s [ p [ i ] ] == - 1 )
set s [ p [ i ] ] = s [ i ]	s [ p [ i ] ] = s [ i ] ;
else	else
s [ p [ i ] ] = min of s [ p [ i ] ] and s [ i ]	s [ p [ i ] ] = min ( s [ p [ i ] ] , s [ i ] ) ;
for i = 2 to n inclusive	for ( i = 2 ; i <= n ; i ++ )
if s [ i ] equal to - 1 , continue the loop	if ( s [ i ] == - 1 ) continue ;
if s [ p [ i ] ] greater than s [ i ]	if ( s [ p [ i ] ] > s [ i ] )
print - 1	cout << - 1 << endl ;
set ans to s [ 1 ]	long long ans = s [ 1 ] ;
for i = 2 to n inclusive	for ( i = 2 ; i <= n ; i ++ )
if s [ i ] equal to - 1 , continue the loop	if ( s [ i ] == - 1 ) continue ;
assign ans + s [ i ] - s [ p [ i ] ] to ans	ans += ( s [ i ] - s [ p [ i ] ] ) ;
print ans	cout << ans << endl ;
create integer n	int n ;
read n	cin >> n ;
create long long integer arrays s , ms , p , v with s size n , ms size n , p size n , v size n	long long int s [ n ] , ms [ n ] , p [ n ] , v [ n ] ;
set p [ 0 ] to 0	p [ 0 ] = 0 ;
for i = 1 to n exclusive , decrementing p [ increment i ] , read p [ i ]	for ( int i = 1 ; i < n ; -- p [ i ++ ] ) cin >> p [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read s [ i ]	cin >> s [ i ] ;
set ms [ i ] to s [ i ]	ms [ i ] = s [ i ] ;
for i = n - 1 to 0 exclusive , decrementing i	for ( int i = n - 1 ; i > 0 ; -- i )
if ms [ i ] is less than 0 , break current loop iteration	if ( ms [ i ] < 0 ) continue ;
if s [ p [ i ] ] is less than 0 and ( ms [ p [ i ] ] is less than 0 or ms [ p [ i ] ] is greater than ms [ i ] ) , set ms [ p [ i ] ] to ms [ i ]	if ( s [ p [ i ] ] < 0 && ( ms [ p [ i ] ] < 0 || ms [ p [ i ] ] > ms [ i ] ) ) ms [ p [ i ] ] = ms [ i ] ;
if ms [ 0 ] is less than 0 , set ms [ 0 ] to 0	if ( ms [ 0 ] < 0 ) ms [ 0 ] = 0 ;
create long long integer sum with sum = ms [ 0 ]	long long int sum = ms [ 0 ] ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; ++ i )
if ms [ i ] is less than 0	if ( ms [ i ] < 0 )
set ms [ i ] to mms [ p [ i ] ]	ms [ i ] = ms [ p [ i ] ] ;
else if ms [ i ] is less than ms [ p [ i ] ]	else if ( ms [ i ] < ms [ p [ i ] ] )
print - 1 print newline	cout << - 1 << endl ;
else	else
increment sum by ms [ i ] - ms [ p [ i ] ]	sum += ms [ i ] - ms [ p [ i ] ] ;
print sum print newline	cout << sum << endl ;
let N be a constant integer with value N is equal to 100001	const int N = 100001 ;
g = array of vector integers of size N	vector < int > g [ N ] ;
let n , val be integers with val = array of integers of length N	int n , val [ N ] ;
sum = array of long integers of length N	long long sum [ N ] ;
let depth first search of int u and int p be a boolean type	bool dfs ( int u , int p )
if length of g [ u ] is equal to 1 and p is not equal to - 1	if ( g [ u ] . size ( ) == 1 && p != - 1 )
if sum [ u ] is equal to - 1	if ( sum [ u ] == - 1 )
set val [ u ] to 0	val [ u ] = 0 ;
assign the value sum [ p ] to sum [ u ]	sum [ u ] = sum [ p ] ;
else do the following	else
assign the value of sum [ u ] - sum [ p ] to val [ u ]	val [ u ] = sum [ u ] - sum [ p ] ;
return the value as true	return true ;
if sum [ u ] is equal to - 1	if ( sum [ u ] == - 1 )
let mn be a long integer with mn = 1e9	long long mn = 1e9 ;
for i = 0 to length of g [ u ] exclusive	for ( int i = 0 ; i < g [ u ] . size ( ) ; ++ i )
let v be a integer with v = g [ u ] [ i ]	int v = g [ u ] [ i ] ;
if v is equal to p , proceed to next	if ( v == p ) continue ;
let diff be a long integer with diff = sum [ v ] - sum [ p ]	long long diff = sum [ v ] - sum [ p ] ;
if diff is less than 0 , return false	if ( diff < 0 ) return false ;
mn = minimum of mn and diff	mn = min ( mn , diff ) ;
the uth element of val = mn	val [ u ] = mn ;
sum [ u ] is equal to sum [ p ] + val [ u ]	sum [ u ] = sum [ p ] + val [ u ] ;
else if ( p is not equal to - 1 )	else if ( p != - 1 )
the value of sum [ u ] - sum [ p ] is assigned to val [ u ]	val [ u ] = sum [ u ] - sum [ p ] ;
let check is a boolean type with check = 1	bool check = 1 ;
for i = 0 to length of g [ u ] exclusive ]	for ( int i = 0 ; i < g [ u ] . size ( ) ; ++ i )
let v be a integer with v = g [ u ] [ i ]	int v = g [ u ] [ i ] ;
if v is equal to p , proceed to next	if ( v == p ) continue ;
check = check and depth first search of v , u	check = check && dfs ( v , u ) ;
return the value of check	return check ;
read n	cin >> n ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; ++ i )
let p be a integer	int p ;
read p	cin >> p ;
decrease p value by 1	-- p ;
do g [ p ] . push_back ( i + 1 )	g [ p ] . push_back ( i + 1 ) ;
do g [ i + 1 ] . push_back ( p )	g [ i + 1 ] . push_back ( p ) ;
for i = 0 to n exclusive , read sum [ i ]	for ( int i = 0 ; i < n ; ++ i ) cin >> sum [ i ] ;
let val [ 0 ] = sum [ 0 ]	val [ 0 ] = sum [ 0 ] ;
if not dfs of 0 and - 1	if ( ! dfs ( 0 , - 1 ) )
print - 1 and newline	cout << - 1 << endl ;
else do the following	else
let long integer s = 0	long long s = 0 ;
for i = 0 to n exclusive , increase s by val [ i ]	for ( int i = 0 ; i < n ; ++ i ) s += val [ i ] ;
print s and newline	cout << s << endl ;
create long long p with size 200000	long long p [ 200000 ] ;
create long long s with size 200000	long long s [ 200000 ] ;
create long long num with num = 0	long long num = 0 ;
create long longs n , i , j	long long n , i , j ;
read n	cin >> n ;
for i = 2 to n inclusive , read p [ i ]	for ( i = 2 ; i <= n ; i ++ ) { cin >> p [ i ] ; }
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read s [ i ]	cin >> s [ i ] ;
if s [ i ] is - 1 , set s [ i ] to 1e10	if ( s [ i ] == - 1 ) s [ i ] = 1e10 ;
for i = 1 to n inclusive , set s [ p [ i ] ] to minimum of s [ p [ i ] ] and s [ i ]	for ( i = 1 ; i <= n ; i ++ ) s [ p [ i ] ] = min ( s [ p [ i ] ] , s [ i ] ) ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if s [ p [ i ] ] is greater than s [ i ]	if ( s [ p [ i ] ] > s [ i ] )
print - 1 print newline	cout << - 1 << endl ;
if s [ i ] is 1e10 , set s [ i ] to s [ p [ i ] ]	if ( s [ i ] == 1e10 ) s [ i ] = s [ p [ i ] ] ;
increment num by s [ i ] - s [ p [ i ] ]	num += s [ i ] - s [ p [ i ] ] ;
print num print newline	cout << num << endl ;
declare const int maxn = 1e5 + 5	const int maxn = 1e5 + 5 ;
declare const long long inf = 0x3f3f3f3f	const long long inf = 0x3f3f3f3f ;
declare an array of integer vectors G with size maxn	vector < int > G [ maxn ] ;
create long long arrays sum and a with maxn elements	long long sum [ maxn ] , a [ maxn ] ;
create integer array minson with maxn elements	int minson [ maxn ] ;
declare int variable n	int n ;
define function getson	int getson ( int v )
declare int minkey = inf	int minkey = inf ;
for i = 0 to length of G [ v ] exclusive	for ( int i = 0 ; i < G [ v ] . size ( ) ; ++ i )
create int to = G [ v ] [ i ]	int to = G [ v ] [ i ] ;
if minkey is greater than getson ( to )	if ( minkey > getson ( to ) )
set minkey to sum [ to ]	minkey = sum [ to ] ;
change minson [ v ] to to	minson [ v ] = to ;
return sum [ v ]	return sum [ v ] ;
void function dfs with int arguments v and deep and long long argument fasum	void dfs ( int v , long long fasum , int deep )
if deep & 1 is not 0	if ( deep & 1 )
assign sum [ v ] - fasum to a [ v ]	a [ v ] = sum [ v ] - fasum ;
else if length of G [ v ] is not 0	else if ( ! G [ v ] . size ( ) )
change a [ v ] to 0	a [ v ] = 0 ;
return	return ;
else	else
set a [ v ] to sum [ minson [ v ] ] - fasum	a [ v ] = sum [ minson [ v ] ] - fasum ;
for i = 0 to length of G [ v ] exclusive , call dfs ( G [ v ] [ i ] , fasum + a [ v ] , deep + 1 )	for ( int i = 0 ; i < G [ v ] . size ( ) ; ++ i ) dfs ( G [ v ] [ i ] , fasum + a [ v ] , deep + 1 ) ;
read n and loop further	while ( cin >> n )
create int pa	int pa ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; ++ i )
read pa	cin >> pa ;
push i to G [ pa ]	G [ pa ] . push_back ( i ) ;
for integer i = 1 to n inclusive , read sum [ i ]	for ( int i = 1 ; i <= n ; ++ i ) cin >> sum [ i ] ;
call function getson with argument 1	getson ( 1 ) ;
call function dfs with arguments 1 , 0 and 1	dfs ( 1 , 0 , 1 ) ;
create long long maxsum = 0	long long maxsum = 0 ;
create integer flag = 0	int flag = 0 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
if a [ i ] > = 0	if ( a [ i ] >= 0 )
add a [ i ] to maxsum	maxsum += a [ i ] ;
else	else
set flag to 1	flag = 1 ;
if flag is 0	if ( ! flag )
print maxsum	cout << maxsum << endl ;
else	else
print - 1	cout << - 1 << endl ;
for i = 0 to n inclusive , clear G [ i ]	for ( int i = 0 ; i <= n ; ++ i ) G [ i ] . clear ( ) ;
create string x	string x ;
read x	cin >> x ;
create integers v and h = 0	int v = 0 , h = 0 ;
for i = 0 to length of x exclusive	for ( int i = 0 ; i < x . size ( ) ; i ++ )
if x [ i ] is ' 0 '	if ( x [ i ] == ' 0 ' )
if v is 0	if ( ! v )
print 1 , ' ' , 1 and a new line , then increment v	cout << 1 << '   ' << 1 << endl , v ++ ;
else	else
print 3 , ' ' , 1 and a new line , then set v to 0	cout << 3 << '   ' << 1 << endl , v = 0 ;
else	else
if h is 0	if ( ! h )
print 4 , ' ' , 3 and a new line , then increment h	cout << 4 << '   ' << 3 << endl , h ++ ;
else	else
print 4 , ' ' , 1 and a new line , then set h to 0	cout << 4 << '   ' << 1 << endl , h = 0 ;
declare boolean variables l and r	bool l , r ;
let s be string	string s ;
read s	cin >> s ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] = ' 0 ' & & l is true	if ( s [ i ] == ' 0 ' && l )
print " 3 1 " and a new line	cout << " 3 1 " << endl ;
set value of l to false	l = false ;
else if s [ i ] = ' 0 '	else if ( s [ i ] == ' 0 ' )
print " 1 1 " and a new line	cout << " 1 1 " << endl ;
l = true	l = true ;
else if s [ i ] = ' 1 ' & & r is true	else if ( s [ i ] == ' 1 ' && r )
print " 4 1 " and a new line	cout << " 4 1 " << endl ;
assign value of false to r	r = false ;
else	else
print " 4 3 " and a new line	cout << " 4 3 " << endl ;
r = true	r = true ;
create constant integer MAXN with value 100000 + 5	const int MAXN = 100000 + 5 ;
create string s	string s ;
read s	cin >> s ;
let cnt1 and cnt2 be integers = 0	int cnt1 = 0 , cnt2 = 0 ;
for integer i = 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] = ' 0 '	if ( s [ i ] == ' 0 ' )
if cnt1 is even	if ( cnt1 % 2 == 0 )
print 1 , " " and 1	cout << 1 << "   " << 1 ;
else	else
print 3 , " " and 1	cout << 3 << "   " << 1 ;
increment cnt1	cnt1 ++ ;
else	else
if cnt2 is even	if ( cnt2 % 2 == 0 )
print 4 , " " and 3	cout << 4 << "   " << 3 ;
else	else
print 4 , " " and 1	cout << 4 << "   " << 1 ;
increase cnt2	cnt2 ++ ;
print " \ n "	cout << " \n " ;
s is string	string s ;
read s	cin >> s ;
l1 is integer = length of s	int l1 = s . length ( ) ;
create booleans vertikal and horizontal = 0	bool vertikal = 0 , horizontal = 0 ;
for integer i = 0 to l1 exclusive	for ( int i = 0 ; i < l1 ; i ++ )
if s [ i ] = ' 0 '	if ( s [ i ] == ' 0 ' )
if vertikal is not 0	if ( vertikal )
assign value of 0 to vertikal	vertikal = 0 ;
print " 3 1 \ n "	cout << " 3 1\n " ;
else	else
assign value of 1 to vertikal	vertikal = 1 ;
print " 1 1 \ n "	cout << " 1 1\n " ;
else	else
if horizontal is not 0	if ( horizontal )
assign value of 0 to horizontal	horizontal = 0 ;
print " 4 1 \ n "	cout << " 4 1\n " ;
else	else
set value of horizontal to 1	horizontal = 1 ;
print " 4 3 \ n "	cout << " 4 3\n " ;
create string s	string s ;
read s	cin >> s ;
create integers o , z , with o = 0 , z = 0	int o = 0 , z = 0 ;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] is ' 0 '	if ( s [ i ] == ' 0 ' )
increment o	o ++ ;
if o % 2	if ( o % 2 )
print 1 print " " print 1 print newline	cout << 1 << "   " << 1 << endl ;
else	else
print 3 print " " print 1 print newline	cout << 3 << "   " << 1 << endl ;
else if s [ i ] is ' 1 '	else if ( s [ i ] == ' 1 ' )
increment z	z ++ ;
if z % 2	if ( z % 2 )
print 4 print " " print 3 print newline	cout << 4 << "   " << 3 << endl ;
else	else
print 4 print " " print 1 print newline	cout << 4 << "   " << 1 << endl ;
create string str	string str ;
read str	cin >> str ;
create integer len with len = length of str	int len = str . length ( ) ;
create integers a , c , with a = 0 , c = 0	int a = 0 , c = 0 ;
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if str [ i ] is ' 0 '	if ( str [ i ] == ' 0 ' )
if a is 0	if ( a == 0 )
set a to 1	a = 1 ;
print " 1 1 "	puts ( " 1 1 " ) ;
else	else
set a to 0	a = 0 ;
print " 3 1 "	puts ( " 3 1 " ) ;
if str [ i ] is ' 1 '	if ( str [ i ] == ' 1 ' )
if c is 0	if ( c == 0 )
set c to 1	c = 1 ;
print " 4 3 "	puts ( " 4 3 " ) ;
else	else
set c to 0	c = 0 ;
print " 4 1 "	puts ( " 4 1 " ) ;
assign value 200005 to constant integer N	const int N = 200005 ;
assign value 998244353 to constant integer MOD	const long long MOD = 998244353 ;
define function solve	void solve ( )
create string s	string s ;
create boolean v = false	bool v = false ;
create boolean g = false	bool g = false ;
read s	cin >> s ;
declare integer n = length of s	int n = s . length ( ) ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < ( s . length ( ) ) ; i ++ )
if s [ i ] = ' 0 '	if ( s [ i ] == ' 0 ' )
if v is true	if ( v )
print 3 , " " , 1 and a new line	cout << 3 << "   " << 1 << endl ;
set v to false	v = false ;
else	else
print " 1 1 " and a new line	cout << " 1 1 " << endl ;
set v to true	v = true ;
else	else
if g is true	if ( g )
print 4 , " " , 1 and a new line	cout << 4 << "   " << 1 << endl ;
set g to false	g = false ;
else	else
print 4 , " " , 3 and a new line	cout << 4 << "   " << 3 << endl ;
set g to true	g = true ;
declare integer variable t = 1	int t = 1 ;
while t is not 0 , decrement it and call solve	while ( t -- ) { solve ( ) ; }
declare expo_fast with long long integers a , b as arguments , returning long long integer	long long int expo_fast ( long long int a , long long int b )
set a to a	a = a ;
create long long integer result with result = 1	long long int result = 1 ;
while b is true	while ( b )
if b bitwise and 1 , set result to result * a	if ( b & 1 ) result = ( result * a ) ;
set b to b bitshift right 1	b >>= 1 ;
set a to a * a	a = ( a * a ) ;
return result from function	return ( result ) ;
declare take_in with long long integer vector pointer arr as argument returning void	void take_in ( vector < long long int > * arr )
for i = 0 to result of run size from arr exclusive , read value of arr [ i ]	for ( int i = 0 ; i < arr -> size ( ) ; i ++ ) cin >> ( * ( arr ) ) [ i ] ;
declare disp_arr with long long integer vector pointer as argument , returning void	void disp_arr ( vector < long long int > * arr )
for i = 0 to result of run size from arr exclusive , print value of arr [ i ] print " "	for ( int i = 0 ; i < arr -> size ( ) ; i ++ ) cout << ( * ( arr ) ) [ i ] << "   " ;
declare func with string s , integer n as arguments , returning string	string func ( string s , int n )
create string q	string q ;
resize q to size n	q . resize ( n ) ;
set q [ 0 ] to s [ 0 ]	q [ 0 ] = s [ 0 ] ;
set q [ 1 ] to s [ 1 ]	q [ 1 ] = s [ 1 ] ;
set q [ 2 ] to s [ 2 ]	q [ 2 ] = s [ 2 ] ;
for i = 3 to n exclusive	for ( int i = 3 ; i < n ; i ++ )
if i % 3 is 0	if ( i % 3 == 0 )
set q [ i ] to q [ 0 ]	q [ i ] = q [ 0 ] ;
else if i % 3 is 1	else if ( i % 3 == 1 )
set q [ i ] to q [ 1 ]	q [ i ] = q [ 1 ] ;
else	else
set q [ i ] to q [ 2 ]	q [ i ] = q [ 2 ] ;
return q from function	return q ;
create string s	string s ;
read s	cin >> s ;
create character stack stk	stack < char > stk ;
create long long integers ans with ans = 0	long long int ans = 0 ;
create booleans cond1 , cond2 with cond1 = true , cond2 = true	bool cond1 = true , cond2 = true ;
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] is ' 0 '	if ( s [ i ] == ' 0 ' )
if cond1 is true	if ( cond1 )
set cond1 to false	cond1 = false ;
print " 1 1 \ n "	cout << " 1 1\n " ;
else	else
set cond1 to true	cond1 = true ;
print " 3 1 \ n "	cout << " 3 1\n " ;
else	else
if cond2 is true	if ( cond2 )
set cond2 to false	cond2 = false ;
print " 4 3 \ n "	cout << " 4 3\n " ;
else	else
set cond2 to true	cond2 = true ;
print " 4 1 \ n "	cout << " 4 1\n " ;
create string s	string s ;
create integer array r with size 1001	int r [ 1001 ] ;
create integer array c with size 1001	int c [ 1001 ] ;
read s	cin >> s ;
create integer n with n = length of s	int n = s . length ( ) ;
create boolean slot_0 with slot_0 = false	bool slot_0 = false ;
create boolean slot_1 with slot_1 = false	bool slot_1 = false ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] is ' 0 '	if ( s [ i ] == ' 0 ' )
if not slot_0	if ( ! slot_0 )
print " 1 1 \ n "	cout << " 1 1\n " ;
set slot_0 to true	slot_0 = true ;
else	else
print " 3 1 \ n "	cout << " 3 1\n " ;
set slot_0 to false	slot_0 = false ;
else	else
if not slot_1	if ( ! slot_1 )
print " 4 3 \ n "	cout << " 4 3\n " ;
set slot_1 to true	slot_1 = true ;
else	else
print " 4 1 \ n "	cout << " 4 1\n " ;
set slot_1 to false	slot_1 = false ;
create llin with no arguments , returning long long integer	long long int llin ( )
create long long integer tmp	long long int tmp ;
read tmp	cin >> tmp ;
return tmp from function	return tmp ;
declare solve with no arguments , returning void	void solve ( )
create long long integer nsticks with nsticks = result of run llin	long long int nsticks = llin ( ) ;
create long long integer array lengths with size nsticks	long long int lengths [ nsticks ] ;
create long long integer min with min = 101	long long int min = 101 ;
create long long integer max with max = 0	long long int max = 0 ;
for i = 0 to nsticks exclusive	for ( long long int i = 0 ; i < nsticks ; i ++ )
create long long integer tmp with tmp = result of run llin	long long int tmp = llin ( ) ;
set lengths [ i ] to tmp	lengths [ i ] = tmp ;
if tmp is greater than max , set max to tmp	if ( tmp > max ) max = tmp ;
if tmp is less than min , set min to tmp	if ( tmp < min ) min = tmp ;
create long long integer min_t with min_t to min	long long int min_t = min ;
create long long integer min_cost with min_cost = 1000005	long long int min_cost = 1000005 ;
for t = min to max + 1 exclusive	for ( long long int t = min ; t < max + 1 ; t ++ )
create long long integer tmp_cost with tmp_cost = 0	long long int tmp_cost = 0 ;
for i = 0 to nsticks exclusive	for ( long long int i = 0 ; i < nsticks ; i ++ )
create long long integer tmp_length with tmp_length = lengths [ i ]	long long int tmp_length = lengths [ i ] ;
if tmp_length is greater than t + 1	if ( tmp_length > t + 1 )
increment tmp_cost by tmp_length - ( t + 1 )	tmp_cost += tmp_length - ( t + 1 ) ;
else if tmp_length is less than t - 1	else if ( tmp_length < t - 1 )
increment tmp_cost by t - 1 - tmp_length	tmp_cost += t - 1 - ( tmp_length ) ;
if min_cost is greater than tmp_cost	if ( min_cost > tmp_cost )
set min_t to t	min_t = t ;
set min_cost to tmp_cost	min_cost = tmp_cost ;
print min_t print " " print min_cost print ' \ n '	cout << min_t << "   " << min_cost << ' \n ' ;
return from function	return ;
create integer TESTS with TESTS = 1	int TESTS = 1 ;
while decrement TESTS is true , run solve	while ( TESTS -- ) { solve ( ) ; }
create integer n	int n ;
read n	cin >> n ;
create integer a , b , i , cnt , max , set cnt = 0 , max = 0	int a , b , i , cnt = 0 , max = 0 ;
for i = 0 to n execute	for ( i = 0 ; i < n ; i ++ )
print a , b	cin >> a >> b ;
set cnt = cnt + b - a	cnt = cnt + b - a ;
if cnt > max set max = cnt	if ( cnt > max ) max = cnt ;
print max	cout << max << endl ;
create integers x , y , c , m with c = 0 , m = 0	int x , y , c = 0 , m = 0 ;
create integer n	int n ;
read n	cin >> n ;
while decrement n is true	while ( n -- )
read x read y	cin >> x >> y ;
decrement c by x	c -= x ;
increment c by y	c += y ;
if c is greater than m , set m to c	if ( c > m ) { m = c ; }
print m print newline	cout << m << endl ;
create string str	string str ;
let n , a , b , capacity , total be integers , set capacity = 0 , total = 0	int n , a , b , capacity = 0 , total = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read a and b	cin >> a >> b ;
total = total - a	total -= a ;
set total to total + b	total += b ;
assign max of capacity and total to capacity	capacity = max ( capacity , total ) ;
print capacity	cout << capacity << endl ;
create integer n	int n ;
read n	cin >> n ;
create integers on , off , count , c with count = 0 , c = 0	int on , off , count = 0 , c = 0 ;
while decrement n is true	while ( n -- )
read off read on	cin >> off >> on ;
increment c by on - off	c += on - off ;
if c is greater than count , set count to c	if ( c > count ) count = c ;
print count print newline	cout << count << endl ;
integers = n	int n ;
read n	cin >> n ;
integers = max , a , b , c	int max , a , b , c ;
read a , b	cin >> a >> b ;
set c to a + b	c = a + b ;
set max to c	max = c ;
for i = 1 to less than n do the following	for ( int i = 1 ; i < n ; i ++ )
read a , b	cin >> a >> b ;
subtract a from c	c -= a ;
c equals c plus b	c += b ;
if c is greater than max then do the following max = c	if ( c > max ) max = c ;
output max	cout << max << endl ;
n , i , j , k , max , cap = int	int n , i , j , k , max , cap ;
set max to - 1	max = - 1 ;
set cap to 0	cap = 0 ;
read n	cin >> n ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
rad j then k	cin >> j >> k ;
set cap to cap - j + k	cap = cap - j + k ;
if cap is greater than max set max to cap	if ( cap > max ) max = cap ;
print max	cout << max << endl ;
let n be an integer	int n ;
read n	cin >> n ;
max = int = 0	int max = 0 ;
cp = 0 = int	int cp = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
let a , b be ints	int a , b ;
read a and b	cin >> a >> b ;
increment cp by ( b - a )	cp += ( b - a ) ;
if cp > = max then set max to cp	if ( cp >= max ) max = cp ;
print max	cout << max << endl ;
create integers n , a , b , c , m with c = 0 , m = 0	int n , a , b , c = 0 , m = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a read b	cin >> a >> b ;
set c to c + b - a	c = c + b - a ;
if m is less than c , set m to c	if ( m < c ) m = c ;
print m print newline	cout << m << endl ;
create int n	int n ;
read n	cin >> n ;
ans = 0	int ans = 0 ;
temp = 0	int temp = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create int a and b	int a , b ;
read a and b	cin >> a >> b ;
set temp to temp - a	temp -= a ;
assign temp + b to temp	temp += b ;
set ans = max of temp and ans	ans = max ( temp , ans ) ;
print ans	cout << ans << endl ;
create long longs n , max , d , with max = 0 , d = 0	long long n , max = 0 , d = 0 ;
read n	cin >> n ;
create long long arrays a , b , with a size 100000 , with b size 100000	long long a [ 100000 ] , b [ 100000 ] ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read a [ i ] read b [ i ]	cin >> a [ i ] >> b [ i ] ;
set d to d - a [ i ]	d = d - a [ i ] ;
set d to d + b [ i ]	d = d + b [ i ] ;
if d is greater than max , set max to d	if ( d > max ) max = d ;
print max print newline	cout << max << endl ;
create integer n	int n ;
read n	cin >> n ;
create integer arrays a , b with a size n , b size n	int a [ n ] , b [ n ] ;
for i = 0 to n exclusive , read a [ i ] read b [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }
create integer curr with curr = 0	int curr = 0 ;
create integer req with req = 0	int req = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
decrement curr by a [ i ]	curr -= a [ i ] ;
increment cur by b [ i ]	curr += b [ i ] ;
if curr is greater than req , set req to curr	if ( curr > req ) { req = curr ; }
print req print newline	cout << req << endl ;
create integer n	int n ;
create integer maxValue set maxValue = INT_MIN	int maxValue = INT_MIN ;
read n	cin >> n ;
create Integer a , b	int a , b ;
create integer d set d = 0	int d = 0 ;
create integer c set c = 0	int c = 0 ;
for i = 0 to n execute	for ( int i = 0 ; i < n ; i ++ )
print a , b	cin >> a >> b ;
set c = c + a	c = c + a ;
set d = d + b	d = d + b ;
if maxValue is less than the absolute value of c - d set maxValue = abs ( c - d )	if ( maxValue < abs ( c - d ) ) maxValue = abs ( c - d ) ;
print maxValue	cout << maxValue << endl ;
create integer n	int n ;
while read n is true	while ( cin >> n )
create integers ans , temp with ans = 0 , temp = 0	int ans = 0 , temp = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integers p , q	int p , q ;
read p read q	cin >> p >> q ;
increment temp by q	temp += q ;
decrement temp by p	temp -= p ;
set ans to maximum of ans and temp	ans = max ( ans , temp ) ;
print ans print newline	cout << ans << endl ;
n = int , Max and Count = 0	int n , Max = 0 , Count = 0 ;
read n	cin >> n ;
a and b = array of n int	int a [ n ] , b [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ] , b [ i ]	cin >> a [ i ] >> b [ i ] ;
subtract a [ i ] from Count	Count -= a [ i ] ;
add b [ i ] to Count	Count += b [ i ] ;
if Count > Max Max = Count	if ( Count > Max ) { Max = Count ; }
print Max	cout << Max << endl ;
a , b , i , j , c , n , p , q = int with j = 0 and c = 0 and p = 0 and q = 0	int a , b , i , j = 0 , c = 0 , n , p = 0 , q = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read a then b	cin >> a >> b ;
set p to p + a	p = p + a ;
set q to q + b	q = q + b ;
set c to q - p	c = q - p ;
if c > j set j to c	if ( c > j ) { j = c ; }
print j	cout << j << endl ;
create character array s with size 10001	char s [ 10001 ] ;
create integer t	int t ;
while read t is true	while ( cin >> t )
create integers ns , sm with ns = - 1 , sm = 0	int ns = - 1 , sm = 0 ;
while decrement t is true	while ( t -- )
create integers doll , puppet	int doll , puppet ;
read doll read puppet	cin >> doll >> puppet ;
set sm to sm - doll + puppet	sm = sm - doll + puppet ;
set ns to maximum of ns and sm	ns = max ( ns , sm ) ;
print ns print newline	cout << ns << endl ;
n = integer	int n ;
while n can be read as a valid integer	while ( cin >> n )
a , b , total , max = integers , k = integer = 0	int a , b , total , k = 0 , max ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a , b	cin >> a >> b ;
if k is 0	if ( k == 0 )
total = b	total = b ;
k = 1	k = 1 ;
max = b	max = b ;
else if k is 1	else if ( k == 1 )
total = total - a + b	total = total - a + b ;
if total > max , then max = total	if ( total > max ) max = total ;
print max	cout << max << endl ;
create integers a , b	int a , b ;
create integer counter with counter = 0	int counter = 0 ;
create integer tranSize with tranSize = 0	int tranSize = 0 ;
create integer rep	int rep ;
read rep	cin >> rep ;
while decrement rep is true	while ( rep -- )
read a read b	cin >> a >> b ;
decrement counter by a	counter -= a ;
increment counter by b	counter += b ;
if counter is greater than tranSize , set tranSize to counter	if ( counter > tranSize ) { tranSize = counter ; }
print tranSize print newline	cout << tranSize << endl ;
v = long long int vector	vector < long long int > v ;
n , out , in , sum = long long int with sum = 0	long long int n , out , in , sum = 0 ;
read n	cin >> n ;
loop n times	while ( n -- )
read out then in	cin >> out >> in ;
set sum to sum - out + in	sum = sum - out + in ;
append sum to v	v . push_back ( sum ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
reverse v	reverse ( v . begin ( ) , v . end ( ) ) ;
print v [ 0 ]	cout << v [ 0 ] << endl ;
n , x , y , i , max , a = long long integer with max , a = 0	long long int n , x , y , i , max = 0 , a = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read x , y	cin >> x >> y ;
a = a - x + y	a = a - x + y ;
if max < a , max = a	if ( max < a ) { max = a ; }
print max	cout << max << " \n " ;
create integers minx , n , a , b and test with minx and test = 0	int minx = 0 , n , a , b , test = 0 ;
read variable n from the input	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read standard input to a and b	cin >> a >> b ;
change test to test - a	test -= a ;
change test to sum of test and b	test += b ;
change minx to max of minx and test	minx = max ( minx , test ) ;
print minx to the standard output	cout << minx << endl ;
n = int	int n ;
read n	cin >> n ;
a , b = int array of size n each	int a [ n ] , b [ n ] ;
cntr , ans = int with cntr = 0 and ans = 0	int cntr = 0 , ans = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read a [ i ] then b [ i ]	cin >> a [ i ] >> b [ i ] ;
decrement cntr by a [ i ]	cntr -= a [ i ] ;
increment cntr by b [ i ]	cntr += b [ i ] ;
set ans to max of ans and cntr	ans = max ( ans , cntr ) ;
print ans	cout << ans << endl ;
create integers n , a , b , s , t	int n , a , b , s , t ;
while read n is true	while ( cin >> n )
set t to 0	t = 0 ;
create integers r , z , with r = 0 , z = 0	int r = 0 , z = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a read b	cin >> a >> b ;
increment r by a	r += a ;
increment z by b	z += b ;
set s to z - r	s = z - r ;
set t to maximum of t ans s	t = max ( t , s ) ;
print t print newline	cout << t << endl ;
s = integer	int s ;
create integers x , a [ 10001 ] , b [ 10001 ] , maxs , set maxs to 0	int x , a [ 10001 ] , b [ 10001 ] , maxs = 0 ;
read x	cin >> x ;
for i = 1 to x inclusive , read a [ i ] and b [ i ]	for ( int i = 1 ; i <= x ; i ++ ) cin >> a [ i ] >> b [ i ] ;
for i = 1 to x inclusive	for ( int i = 1 ; i <= x ; i ++ )
set s to s - a [ i ]	s -= a [ i ] ;
assign s + b [ i ] to s	s += b [ i ] ;
if s greater than maxs , set maxs to s	if ( s > maxs ) maxs = s ;
print maxs	cout << maxs << endl ;
create integers n , r , t , with r = 0 , t = 0	int n , r = 0 , t = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integers a , b	int a , b ;
read a read b	cin >> a >> b ;
set t to t = a + b	t = t - a + b ;
if t is greater than r , set r to t	if ( t > r ) r = t ;
print r print newline	cout << r << endl ;
bool function lucky with integer argument n	bool lucky ( int n )
while n ! = 0	while ( n != 0 )
if n % 10 ! = 4 & & n % 10 ! = 7 return false	if ( n % 10 != 4 && n % 10 != 7 ) { return false ; }
divide n by 10	n /= 10 ;
return true	return true ;
almost_lucky is a boolean function with integer argument n	bool almost_lucky ( int n )
if lucky ( n ) is true , return true	if ( lucky ( n ) ) { return true ; }
for i = 2 while i * i < = n	for ( int i = 2 ; i * i <= n ; ++ i )
if n % i = 0 & & ( lucky ( i ) or lucky ( n / i ) is true )	if ( n % i == 0 && ( lucky ( i ) || lucky ( n / i ) ) ) { return true ; }
return false	return false ;
declare integer n	int n ;
read n	cin >> n ;
if almost_lucky ( n ) is true	if ( almost_lucky ( n ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
function str ( get int n , return string )	string str ( int n )
ss = stringstream	stringstream ss ;
push n into ss	ss << n ;
s = string	string s ;
s = ss	ss >> s ;
return s	return s ;
sorte = array of 1001 int	int sorte [ 1001 ] ;
tam = 0	int tam = 0 ;
function lucky	void lucky ( )
for i = 0 to 1001 exclusive	for ( int i = 0 ; i < 1001 ; i ++ )
s string = str ( i )	string s = str ( i ) ;
sorte2 = true	bool sorte2 = true ;
for c = 0 to length of s exclusive	for ( int c = 0 ; c < s . length ( ) ; c ++ )
if s [ c ] ! = ' 4 ' and ! = ' 7 '	if ( s [ c ] != ' 4 ' && s [ c ] != ' 7 ' )
sorte2 = false	sorte2 = false ;
break	break ;
if sorte2	if ( sorte2 )
sorte [ tam ] = i	sorte [ tam ] = i ;
increment tam	tam ++ ;
call lucky ( )	lucky ( ) ;
n = int	int n ;
read n	cin >> n ;
pos = 0	int pos = 0 ;
divide = false	bool divide = false ;
while sorte [ pos ] < = n and pos < tam	while ( sorte [ pos ] <= n && pos < tam )
if n modulo sorte [ pos ] is zero	if ( n % sorte [ pos ] == 0 )
divide = true	divide = true ;
break	break ;
increment pos	pos ++ ;
if divide	if ( divide )
print " YES "	cout << " YES\n " ;
else	else
print " NO "	cout << " NO\n " ;
assign elements 4 , 7 , 44 , 77 , 47 , 74 , 444 , 447 , 474 , 477 , 777 , 744 , 747 , 774 to int array arr	int arr [ ] = { 4 , 7 , 44 , 77 , 47 , 74 , 444 , 447 , 474 , 477 , 777 , 744 , 747 , 774 } ;
set bool s to false	bool s = false ;
create int n	int n ;
read n	cin >> n ;
for i = 0 to 14 exclusive	for ( int i = 0 ; i < 14 ; ++ i )
if n mod arr [ i ] = 0	if ( n % arr [ i ] == 0 )
print YES	cout << " YES " << endl ;
s = true	s = true ;
break	break ;
else	else
continue the loop	continue ;
if s is false , print NO and a newline	if ( s == false ) cout << " NO " << endl ;
create integers n , i , , a , j , h	int n , i , k , a , j , h ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
set k to i	k = i ;
if n % k is 0	if ( n % k == 0 )
set j to h to 0	j = h = 0 ;
while k is not 0	while ( k != 0 )
set a to k % 10	a = k % 10 ;
if a is 4 or a is 7 , increment h	if ( a == 4 || a == 7 ) { h ++ ; }
set k to k / 10	k = k / 10 ;
increment j	j ++ ;
if h is j	if ( h == j )
print " YES " print newline	cout << " YES " << endl ;
print " NO " print newline	cout << " NO " << endl ;
num = integer	int num ;
arr = integer array of 14 strings with arr = { 4 , 7 , 44 , 47 , 74 , 77 , 444 , 447 , 474 , 477 , 744 , 747 , 774 , 777 }	int arr [ 14 ] = { 4 , 7 , 44 , 47 , 74 , 77 , 444 , 447 , 474 , 477 , 744 , 747 , 774 , 777 } ;
read num	cin >> num ;
for i = 0 to 13	for ( int i = 0 ; i < 14 ; i ++ )
if num modulo arr [ i ] is 0	if ( num % arr [ i ] == 0 )
print YES	cout << " YES " << endl ;
print NO	cout << " NO " << endl ;
set int i , j , l , x , m , m1 , k to 0 , res = 0	int i , j , l , x , m , m1 , k = 0 , res = 0 ;
read x	cin >> x ;
set int a as array of 1000 all to 0	int a [ 1000 ] = { 0 } ;
for = 4 to less than or equal to 1000 do the following	for ( j = 4 ; j <= 1000 ; j ++ )
set i to j	i = j ;
set m to 0 , m1	m = 0 , m1 = 0 ;
if i is greater than 0 then do	while ( i > 0 )
set l to i modulo 10	l = i % 10 ;
if l is 4 or 7 then add one to m	if ( l == 4 || l == 7 ) m ++ ;
set i to i / 10	i = i / 10 ;
add one to m1	m1 ++ ;
if m is m1 then do the following	if ( m == m1 )
set a [ k ] to j	a [ k ] = j ;
add one to k	k ++ ;
for = 0 to less than k do the following	for ( i = 0 ; i < k ; i ++ )
if x modulo a [ i ] is 0 then do	if ( x % a [ i ] == 0 )
set res to 5	res = 5 ;
break	break ;
if res is 5 then do the following commands	if ( res == 5 )
output YES	cout << " YES " << endl ;
else	else
output NO	cout << " NO " << endl ;
create integer n	int n ;
create integer array arr with arr = { 4 , 7 , 44 , 47 , 74 , 77 , 444 , 447 , 474 , 477 }	int arr [ ] = { 4 , 7 , 44 , 47 , 74 , 77 , 444 , 447 , 474 , 477 } ;
read n	cin >> n ;
for i = 0 to size of arr / 4 exclusie	for ( int i = 0 ; i < sizeof ( arr ) / 4 ; i ++ )
if not ( n % arr [ i ] )	if ( ! ( n % arr [ i ] ) )
print " YES \ n "	cout << " YES\n " ;
exit from program with code 0	exit ( 0 ) ;
print " NO \ n "	cout << " NO\n " ;
int function getdigits with int argument n	int getdigits ( int n )
declare int variable c = 0	int c = 0 ;
while n is not 0	while ( n != 0 )
divide n by 10	n /= 10 ;
increment c	c ++ ;
return c	return c ;
declare int variables n , d , i and flag where flag = 0	int n , d , i , flag = 0 ;
read input to n	cin >> n ;
assign result of etdigits ( n ) to d	d = getdigits ( n ) ;
if n % 4 = 0	if ( n % 4 == 0 )
set flag to 1	flag = 1 ;
else if n % 7 = 0	else if ( n % 7 == 0 )
assign 1 to flag	flag = 1 ;
else if n % 47 = 0	else if ( n % 47 == 0 )
assign 1 to flag	flag = 1 ;
else if n % 477 = 0	else if ( n % 477 == 0 )
change flag to 1	flag = 1 ;
else if n % 447 = 0	else if ( n % 447 == 0 )
assign 1 to flag	flag = 1 ;
else if n % 474 = 0	else if ( n % 474 == 0 )
set flag to 1	flag = 1 ;
else if n % 744 = 0	else if ( n % 744 == 0 )
assign 1 to flag	flag = 1 ;
else if n % 747 = 0	else if ( n % 747 == 0 )
set flag to 1	flag = 1 ;
else if n % 774 = 0	else if ( n % 774 == 0 )
set flag to 1	flag = 1 ;
if flag is true	if ( flag )
print " YES "	cout << " YES "
print " \ n "	<< " \n " ;
else	else
print " NO "	cout << " NO "
print " \ n "	<< " \n " ;
integers = a	int a ;
read a	cin >> a ;
set int l to 0	int l = 0 ;
set int m to a	int m = a ;
for i = 0 to less than a do the following	for ( int i = 0 ; i < a ; i ++ )
set m to m / 10	m = m / 10 ;
set l to l + 1	l = l + 1 ;
if m is 0 then do break	if ( m == 0 ) { break ; }
for k = 1 to less than or equal to l do the following	for ( int k = 1 ; k <= l ; k ++ )
set int b [ k ] to	int b [ k ] = { } ;
for i = 1 to less than or equal to k do the following	for ( int i = 1 ; i <= k ; i ++ )
set int sum1 to 0	int sum1 = 0 ;
set b [ k - i ] to 4	b [ k - i ] = 4 ;
for j = 0 to less than k then sum1 = 10 * sum1 + b [ j ]	for ( int j = 0 ; j < k ; j ++ ) { sum1 = 10 * sum1 + b [ j ] ; }
if a modulo sum1 is 0 then do	if ( a % sum1 == 0 )
output YES	cout << " YES " << endl ;
for i = 1 to less than or equal to k do the following	for ( int i = 1 ; i <= k ; i ++ )
set int sum1 to 0	int sum1 = 0 ;
set b [ k - i ] to 7	b [ k - i ] = 7 ;
for j = 0 to less than k do the following	for ( int j = 0 ; j < k ; j ++ ) { sum1 = 10 * sum1 + b [ j ] ; }
if a modulo sum1 is 0 then do	if ( a % sum1 == 0 )
output YES	cout << " YES " << endl ;
for j = 0 to less than k do b [ j ] = 0	for ( int j = 0 ; j < k ; j ++ ) { b [ j ] = 0 ; }
for i = 1 to less than or equal to k do the following	for ( int i = 1 ; i <= k ; i ++ )
set int sum1 to 0	int sum1 = 0 ;
set b [ k - i ] to 7	b [ k - i ] = 7 ;
for j = 0 to less than k do the following	for ( int j = 0 ; j < k ; j ++ ) { sum1 = 10 * sum1 + b [ j ] ; }
if a modulo sum1 is 0 then do	if ( a % sum1 == 0 )
output YES	cout << " YES " << endl ;
for i = 1 to less than or equal to k do the following	for ( int i = 1 ; i <= k ; i ++ )
set int sum1 to 0	int sum1 = 0 ;
set b [ k - i ] to 4	b [ k - i ] = 4 ;
for j = 0 to less than k do the following	for ( int j = 0 ; j < k ; j ++ ) { sum1 = 10 * sum1 + b [ j ] ; }
if a modulo sum1 is 0 then do	if ( a % sum1 == 0 )
output YES	cout << " YES " << endl ;
output NO	cout << " NO " << endl ;
set int n , arr [ ] to 4 , 7 , 44 , 47 , 74 , 77 , 444 , 447 , 474 , 477 , 744 , 747 , 774 , 777	int n , arr [ ] = { 4 , 7 , 44 , 47 , 74 , 77 , 444 , 447 , 474 , 477 , 744 , 747 , 774 , 777 } ;
read n	cin >> n ;
for i = 0 to less than 10 do the following	for ( int i = 0 ; i < 10 ; i ++ )
if n / arr [ i ] has no remainder then do the following	if ( ! ( n % arr [ i ] ) )
output YES	cout << " YES " << endl ;
output NO	cout << " NO " << endl ;
n , k = integer	int n , k ;
read n , k	cin >> n >> k ;
x , y , x0 , y0 , total = double with total ( 0 . 0 )	double x , y , x0 , y0 , total ( 0.0 ) ;
read x0 , y0	cin >> x0 >> y0 ;
while decrement n	while ( -- n )
read x , y	cin >> x >> y ;
total = total + sqrt ( ( x - x0 ) * ( x - x0 ) + ( y - y0 ) * ( y - y0 ) )	total += sqrt ( ( x - x0 ) * ( x - x0 ) + ( y - y0 ) * ( y - y0 ) ) ;
x0 = x	x0 = x ;
y0 = y	y0 = y ;
print fixed , setprecision ( 6 ) , total * k / 50	cout << fixed << setprecision ( 6 ) << total * k / 50 << endl ;
n , k = int	int n , k ;
read n then k	cin >> n >> k ;
x , y , x0 , y0 , total = double with total = 0 . 0	double x , y , x0 , y0 , total ( 0.0 ) ;
read x0 then y0	cin >> x0 >> y0 ;
loop n times	while ( -- n )
read x then y	cin >> x >> y ;
add sqrt ( ( x - x0 ) * ( x - x0 ) + ( y - y0 ) * ( y - y0 ) ) to total	total += sqrt ( ( x - x0 ) * ( x - x0 ) + ( y - y0 ) * ( y - y0 ) ) ;
set x0 = x	x0 = x ;
set y0 = y	y0 = y ;
print total * k / 50 with 6 decimal digits	cout << fixed << setprecision ( 6 ) << total * k / 50 << endl ;
create integers n , k	int n , k ;
read n read k	cin >> n >> k ;
create doubles x , y , x0 , y0 , total with total initialized with 0 . 0	double x , y , x0 , y0 , total ( 0.0 ) ;
read x0 read y0	cin >> x0 >> y0 ;
while decrement n is true	while ( -- n )
read x read y	cin >> x >> y ;
increment total by square root of ( ( x - x0 ) * ( x - x0 ) + ( y - y0 ) * ( y - y0 ) )	total += sqrt ( ( x - x0 ) * ( x - x0 ) + ( y - y0 ) * ( y - y0 ) ) ;
set x0 to x	x0 = x ;
set y0 to y	y0 = y ;
print fixed , set cout decimal precision to 6 , print total * k / 50 print newline	cout << fixed << setprecision ( 6 ) << total * k / 50 << endl ;
double function dist with integer arguments x1 , y1 , x2 and y2	double dist ( int x1 , int y1 , int x2 , int y2 )
return square root of ( pow ( ( x1 - x2 ) , 2 ) + pow ( ( y1 - y2 ) , 2 ) )	return sqrt ( pow ( ( x1 - x2 ) , 2 ) + pow ( ( y1 - y2 ) , 2 ) ) ;
create integers n and k	int n , k ;
read n and k	cin >> n >> k ;
declare boolean f = true	bool f = true ;
create integers x1 , y1 , x2 and y2	int x1 , y1 , x2 , y2 ;
create double totDist	double totDist ;
decrement n in a loop while n > 0	while ( n -- )
if f is true	if ( f )
read x1 and y1	cin >> x1 >> y1 ;
set f to false	f = false ;
else	else
read x2 and y2	cin >> x2 >> y2 ;
increase totDist by dist of ( x1 , y1 , x2 , y2 )	totDist += dist ( x1 , y1 , x2 , y2 ) ;
set x1 to x2	x1 = x2 ;
assign value of y2 to y1	y1 = y2 ;
create double r = totDist * k / 50 . 0	double r = totDist * k / 50.0 ;
print fixed and r	cout << fixed << r << endl ;
s = string	string s ;
read s	getline ( cin , s ) ;
for i = 0 to s . length ( ) exclusive	for ( int i = 0 ; i < s . length ( ) ; i ++ )
while ( s [ i - 1 ] is character ' ' and s [ i ] is character ' ' ) , erase ( s . begin ( ) + i - 1 ) from s	while ( s [ i - 1 ] == '   ' && s [ i ] == '   ' ) s . erase ( s . begin ( ) + i - 1 ) ;
if ( ( s [ i ] is . or s [ i ] is ! or s [ i ] is , or s [ i ] is ? ) )	if ( ( s [ i ] == ' . ' || s [ i ] == ' ! ' || s [ i ] == ' , ' || s [ i ] == ' ? ' ) )
if ( s [ i - 1 ] is character ' ' and s [ i + 1 ] is character ' ' )	if ( s [ i - 1 ] == '   ' && s [ i + 1 ] == '   ' )
erase ( s . begin ( ) + i - 1 ) from s	s . erase ( s . begin ( ) + i - 1 ) ;
else if ( s [ i + 1 ] is not character ' '	else if ( s [ i + 1 ] != '   ' )
insert ( s . begin ( ) + i + 1 , character ' ' ) in s	s . insert ( s . begin ( ) + i + 1 , '   ' ) ;
while ( s [ i - 1 ] is character ' ' ) erase ( s . begin ( ) + i - 1 ) from s	while ( s [ i - 1 ] == '   ' ) s . erase ( s . begin ( ) + i - 1 ) ;
print s	cout << s << " \n " ;
create const ints N = 1e5 + 5 and OO = 0x3f3f3f3f	const int N = 1e5 + 5 , OO = 0x3f3f3f3f ;
declare string variable str	string str ;
read input into str	getline ( cin , str ) ;
loop i from 0 to length of str exclusive	for ( int i = 0 ; i < str . size ( ) ; i ++ )
if str [ i ] is equal to ' ' and str [ i + 1 ] is equal to ' '	if ( str [ i ] == '   ' && str [ i + 1 ] == '   ' )
remove element at position i from str	str . erase ( str . begin ( ) + i ) ;
decrement i by one	i -- ;
if str [ i ] = ' , ' or str [ i ] = ' ! ' or str [ i ] = ' ? ' or str [ i ] = ' . '	if ( str [ i ] == ' , ' || str [ i ] == ' ! ' || str [ i ] == ' ? ' || str [ i ] == ' . ' )
if str [ i + 1 ] ! = ' ' and i < length of str - 1	if ( str [ i + 1 ] != '   ' && i < str . size ( ) - 1 )
declare string a = " "	string a = "   " ;
insert a to position i + 1 of str	str . insert ( i + 1 , a ) ;
if str [ i - 1 ] is equal to ' '	if ( str [ i - 1 ] == '   ' )
remove element at position i - 1 from str	str . erase ( str . begin ( ) + ( i - 1 ) ) ;
decrement i by one	i -- ;
print str	cout << str << endl ;
s = string array	string s ;
set int sp to 0 , p = 0	int sp = 0 , p = 0 ;
get the line as variable s	getline ( cin , s ) ;
set string s2 to	string s2 = "  " ;
set int l to s . size ( )	int l = s . size ( ) ;
for i = 0 to less than l do the following	for ( int i = 0 ; i < l ; i ++ )
if s [ i ] is then do	if ( s [ i ] == '   ' )
add one to sp	sp ++ ;
else if ( s [ i ] equals , . ? or ! then do the following	else if ( s [ i ] == ' , ' || s [ i ] == ' . ' || s [ i ] == ' ? ' || s [ i ] == ' ! ' )
add one to p	p ++ ;
s2 equals s2 plus s [ i ]	s2 += s [ i ] ;
else	else
if sp is 0 and p = 0 then do the following instructions	if ( sp == 0 && p == 0 )
s2 equals s2 plus s [ i ]	s2 += s [ i ] ;
else if sp and p = 0 the do the following	else if ( p == 0 && sp > 0 )
s2 equals s2 plus space	s2 += '   ' ;
s2 equals s2 plus s [ i ]	s2 += s [ i ] ;
set sp to 0	sp = 0 ;
else	else
s2 equals s2 plus space	s2 += '   ' ;
s2 equals s2 plus s [ i ]	s2 += s [ i ] ;
set p to 0	p = 0 ;
set sp to 0	sp = 0 ;
output s2	cout << s2 << endl ;
create character variable c with size of 10005	char c [ 10005 ] ;
s = string	string s ;
input line into array c of 10005 size	cin . getline ( c , 10005 ) ;
set int i to 0	int i = 0 ;
set int lg to strlen ( c )	int lg = strlen ( c ) ;
set bool ok to 0	bool ok = 0 ;
if i is less than lg then do	while ( i < lg )
if isalpha is true	if ( isalpha ( c [ i ] ) )
if ok = 0 and i is not equal to 0 and not isalpha ( c [ i - 1 ] then add a space character to s	if ( ok == 0 && i != 0 && ! isalpha ( c [ i - 1 ] ) ) s += '   ' ;
s equals s plus c [ i ]	s += c [ i ] ;
set ok to 0	ok = 0 ;
else	else
set if ( c [ i ] = ? or c [ i ] = ! or c [ i ] = , or c [ i ] = . ) s + = c [ i ] then add a c [ i ] to s and add a space to s , and make ok = 1	if ( c [ i ] == ' ? ' || c [ i ] == ' ! ' || c [ i ] == ' , ' || c [ i ] == ' . ' ) s += c [ i ] , s += '   ' , ok = 1 ;
add one to i	++ i ;
output s	cout << s << ' \n ' ;
in function File	void File ( )
call freopen on " output . txt " , " w " and stdout	freopen ( " output.txt " , " w " , stdout ) ;
call freopen on " input . txt " , " r " and stdin	freopen ( " input.txt " , " r " , stdin ) ;
define empty function fast	void fast ( ) { }
pi = const double with pi = 2 * acos of 0 . 0	const double pi = 2 * acos ( 0.0 ) ;
nn = const int with nn = 1e5 + 4	const int nn = 1e5 + 4 ;
oo = const int with oo = 0x3f3f3f3f	const int oo = 0x3f3f3f3f ;
in function nCr taking two long longs n and r and returning a long long	long long nCr ( long long n , long long r )
if n is less than r then return 0	if ( n < r ) return 0 ;
if r is 0 then return 1	if ( r == 0 ) return 1 ;
return n * nCr of n - 1 and r - 1 / r	return n * nCr ( n - 1 , r - 1 ) / r ;
in function gcd taking two long longs a and b and returning a long long	long long gcd ( long long a , long long b )
if b is 0 return a	if ( b == 0 ) return a ;
return gcd of b and a mod b	return gcd ( b , a % b ) ;
call fast	fast ( ) ;
s = string	string s ;
call getline on cin and s	getline ( cin , s ) ;
arr = char vector	vector < char > arr ;
if s [ 0 ] is a lower case letter then append s [ 0 ] to arr	if ( s [ 0 ] >= ' a ' && s [ 0 ] <= ' z ' ) arr . push_back ( s [ 0 ] ) ;
for i = 1 to size of s	for ( int i = 1 ; i < ( ( int ) ( ( s ) . size ( ) ) ) ; i ++ )
if s [ i ] is a lower case letter	if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )
if s [ i - 1 ] is a lower case letter	if ( s [ i - 1 ] >= ' a ' && s [ i - 1 ] <= ' z ' )
append s [ i ] to arr	arr . push_back ( s [ i ] ) ;
else	else
append ' ' then s [ i ] to arr	arr . push_back ( '   ' ) , arr . push_back ( s [ i ] ) ;
else if s [ i ] is ' '	else if ( s [ i ] == '   ' )
continue loop	continue ;
else	else
append s [ i ] to arr	arr . push_back ( s [ i ] ) ;
print all values of arr	for ( int i = 0 ; i < ( ( int ) ( ( arr ) . size ( ) ) ) ; i ++ ) cout << arr [ i ] ;
print newline	cout << endl ;
s = string	string s ;
ans = string array of size 111111	string ans [ 111111 ] ;
call getline of cin and s	getline ( cin , s ) ;
n , p = int with n = size of s and p = 0	int n = s . size ( ) , p = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] equals ' , ' or ' . ' or ' ! ' or ' ? '	if ( s [ i ] == ' , ' || s [ i ] == ' . ' || s [ i ] == ' ! ' || s [ i ] == ' ? ' )
set ans [ p ] to " " then increment p	ans [ p ++ ] = "   " ;
set ans [ p - 1 ] [ 0 ] to s [ i ]	ans [ p - 1 ] [ 0 ] = s [ i ] ;
else if s [ i ] is a lowercase character	else if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )
j = int with j = i	int j = i ;
loop while s [ j ] is a lowercase character and j is less than n increment j	for ( ; s [ j ] >= ' a ' && s [ j ] <= ' z ' && j < n ; ) { j ++ ; }
set ans [ p ] to result of s . substr of i and j - i then increment p	ans [ p ++ ] = s . substr ( i , j - i ) ;
set i to j - 1	i = j - 1 ;
l = int with l = 0	int l = 0 ;
for i = 0 to p	for ( int i = 0 ; i < p ; i ++ )
if ans [ i ] [ 0 ] is greater or equal to ' a '	if ( ans [ i ] [ 0 ] >= ' a ' )
if l equals 1 print ' '	if ( l == 1 ) { cout << '   ' ; }
print ans [ i ]	cout << ans [ i ] ;
set l to 1	l = 1 ;
else	else
print ans [ i ] and ' '	cout << ans [ i ] << '   ' ;
set l to 0	l = 0 ;
print newline	cout << endl ;
create string in	string in ;
declare string n = " "	string n = "  " ;
read line and store it into in	getline ( cin , in ) ;
declare int m = length of in	int m = in . size ( ) ;
declare boolean se = false	bool se = false ;
for i from 0 to m exclusive	for ( int i = 0 ; i < m ; i ++ )
if in [ i ] > = ' a ' and in [ i ] < = ' z '	if ( in [ i ] >= ' a ' && in [ i ] <= ' z ' )
append n to in [ i ]	n += in [ i ] ;
else if in [ i ] = ' '	else if ( in [ i ] == '   ' )
if n is equal to " " continue the loop from the start	if ( n == "   " ) { continue ; }
print n	cout << n ;
assign ' ' to n	n = '   ' ;
change se to true	se = true ;
continue the loop from the start	continue ;
else	else
if se is true and n = " "	if ( se && n == "   " )
print in [ i ]	cout << in [ i ] ;
set n to ' '	n = '   ' ;
set se to false	se = false ;
go to the start of the loop	continue ;
print n and in [ i ]	cout << n << in [ i ] ;
change n to ' '	n = '   ' ;
print n if if n ! = " "	if ( n != "   " ) { cout << n ; }
print a new line	cout << endl ;
declare string variable s	string s ;
loop when read data from input into s	while ( getline ( cin , s ) )
declare string n = " "	string n = "  " ;
declare integer d = length of s	int d = s . length ( ) ;
for i = 0 to d exclusive incrementing i	for ( int i = 0 ; i < d ; i ++ )
if s [ i ] is equal to ' '	if ( s [ i ] == '   ' )
if n [ n . length ( ) - 1 ] is not ' ' , incremen n by s [ i ]	if ( n [ n . length ( ) - 1 ] != '   ' ) { n = n + s [ i ] ; }
else if s [ i ] = ' . ' | | s [ i ] = ' , ' | | s [ i ] = ' ! ' | | s [ i ] = ' ? '	else if ( s [ i ] == ' . ' || s [ i ] == ' , ' || s [ i ] == ' ! ' || s [ i ] == ' ? ' )
if n [ n . length ( ) - 1 ] is not ' '	if ( n [ n . length ( ) - 1 ] != '   ' )
append s [ i ] + ' ' to n	n = n + s [ i ] + '   ' ;
else	else
remove n . length ( ) - 1 elements from n	n . erase ( n . length ( ) - 1 ) ;
append s [ i ] + ' ' to n	n = n + s [ i ] + '   ' ;
else	else
append s [ i ] to n	n = n + s [ i ] ;
print all elements of n sequentially	for ( int i = 0 ; i < n . length ( ) ; i ++ ) cout << n [ i ] ;
print a new line	cout << endl ;
declare isp with character c as argument , returning boolean	bool isp ( char c )
if c is ' . ' or c is ' , ' or c is ' ! ' or c is ' ? ' , return true from function	if ( c == ' . ' or c == ' , ' or c == ' ! ' or c == ' ? ' ) return true ;
return false from function	return false ;
create string s	string s ;
read line from cin to s	getline ( cin , s ) ;
create integer len with len = size of s	int len = s . size ( ) ;
create string s2	string s2 ;
create integer lenn with lenn = len - 1	int lenn = len - 1 ;
for i = 0 to lenn exclusive	for ( int i = 0 ; i < lenn ; i ++ )
if s [ i ] is ' ' and ( s [ i + 1 ] is ' ' or result of run isp with s [ i + 1 ] as argument is true ) , break current loop iteration	if ( s [ i ] == '   ' and ( s [ i + 1 ] == '   ' or isp ( s [ i + 1 ] ) ) ) continue ;
increment s2 by s [ i ]	s2 += s [ i ] ;
if result of run isp with s [ i ] as argument is true and s [ i + 1 ] is not ' ' , increment s2 by ' '	if ( isp ( s [ i ] ) and s [ i + 1 ] != '   ' ) s2 += '   ' ;
increment s2 by s [ len - 1 ]	s2 += s [ len - 1 ] ;
print s2 print newline	cout << s2 << endl ;
s = string	string s ;
p = integer	int p ;
ans = character array of size 111111	char ans [ 111111 ] ;
read s	getline ( cin , s ) ;
n = integer with n = s . size ( )	int n = s . size ( ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] > = a and s [ i ] < = z	if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )
ans [ increment p ] = s [ i ]	ans [ p ++ ] = s [ i ] ;
else if s [ i ] is , or s [ i ] is . or s [ i ] is ? or s [ i ] is !	else if ( s [ i ] == ' , ' || s [ i ] == ' . ' || s [ i ] == ' ? ' || s [ i ] == ' ! ' )
for p and ans [ p - 1 ] is character ' ' , decrement p	for ( ; p && ans [ p - 1 ] == '   ' ; ) { p -- ; }
ans [ increment p ] = s [ i ]	ans [ p ++ ] = s [ i ] ;
ans [ increment p ] = character ' '	ans [ p ++ ] = '   ' ;
else if ( s [ i ] is character ' '	else if ( s [ i ] == '   ' )
if ans [ p - 1 ] is not character ' ' , ans [ increment p ] = s [ i ]	if ( ans [ p - 1 ] != '   ' ) { ans [ p ++ ] = s [ i ] ; }
print ans	cout << ans << endl ;
create const double PI = 3 . 1415926535897932384626433832795	const double PI = 3.1415926535897932384626433832795 ;
declare long long mod = 1e9 + 7	long long mod = 1e9 + 7 ;
function isp with char argument c that returns bool	bool isp ( char c )
return true if c = ' . ' | | c = ' , ' | | c = ' ? ' | | c = ' ! ' and false otherwise	return ( c == ' . ' || c == ' , ' || c == ' ? ' || c == ' ! ' ) ;
change output decimal precision to 12	cout . precision ( 12 ) ;
change output decimal format to fixed	cout << fixed ;
let s and ans be strings where ans = " "	string s , ans = "  " ;
read s and loop further	while ( cin >> s )
if length of s = 1 and isp of s [ 0 ] return true and size of ans > 0	if ( s . size ( ) == 1 && isp ( s [ 0 ] ) && ans . size ( ) )
assign s [ 0 ] to ans [ ans . size ( ) - 1 ] and append " " to ans	ans [ ans . size ( ) - 1 ] = s [ 0 ] , ans += "   " ;
else	else
change ans to ans + s + " "	ans = ans + s + "   " ;
create int sz = length of ans	int sz = ans . size ( ) ;
create integers last and i = 0	int last = 0 , i = 0 ;
for i = 0 , last = 0 to sz - 1 exclusive	for ( i = 0 , last = 0 ; i < sz - 1 ; ++ i )
if ans [ i ] = ' ' and isp ( ans [ i + 1 ] ) is true	if ( ans [ i ] == '   ' && isp ( ans [ i + 1 ] ) )
print ( substring of ans from position last to position i - last ) + ans [ i + 1 ] + " " , set value of last to i + 2 and increment i	cout << ans . substr ( last , i - last ) + ans [ i + 1 ] + "   " , last = i + 2 , i ++ ;
else if ans [ i ] = ' '	else if ( ans [ i ] == '   ' )
print substring of ans from position last with length of i - last + 1 , then change last to i + 1	cout << ans . substr ( last , i - last + 1 ) , last = i + 1 ;
else if isp ( ans [ i ] ) is true	else if ( isp ( ans [ i ] ) )
if ans [ i + 1 ] ! = ' '	if ( ans [ i + 1 ] != '   ' )
print substring of ans from position last with length of i - last + 1 and " " , then change last to i + 1	cout << ans . substr ( last , i - last + 1 ) + "   " , last = i + 1 ;
else	else
print substring of ans from position last with length of i - last + 1 and " " , then change last to i + 1	cout << ans . substr ( last , i - last + 1 ) , last = i + 1 ;
print substring of ans from position last to i and ' \ n '	cout << ans . substr ( last , i - last ) << ' \n ' ;
create integers n , dx	int n , dx ;
read n read dx	cin >> n >> dx ;
create string arrays a , b , c , d , with a size 1001 , b size 1001 , c size 1001 , d size 1001	string a [ 1001 ] , b [ 1001 ] , c [ 1001 ] , d [ 1001 ] ;
create integer array t with size 1001	int t [ 1001 ] ;
create integer sum with sum = 0	int sum = 0 ;
for i = 0 to n exclusive , read a [ i ] read b [ i ] read t [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] >> b [ i ] >> t [ i ] ;
or i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
for j = i + 1 to n exclusive	for ( int j = i + 1 ; j < n ; j ++ )
if t [ j ] - t [ i ] is greater than 0 and t [ j ] - t [ i ] is less than or equal to dx	if ( t [ j ] - t [ i ] > 0 && t [ j ] - t [ i ] <= dx )
if a [ i ] is b [ j ] and b [ i ] is a [ j ]	if ( a [ i ] == b [ j ] && b [ i ] == a [ j ] )
create integer flat with flat = 0	int flat = 0 ;
for k = 0 to sum exclusive	for ( int k = 0 ; k < sum ; k ++ )
if a [ i ] is c [ k ] and b [ i ] is d [ k ] or a [ i ] is d [ k ] and b [ i ] is c [ k ]	if ( a [ i ] == c [ k ] && b [ i ] == d [ k ] || a [ i ] == d [ k ] && b [ i ] == c [ k ] )
set flat to 1	flat = 1 ;
break loop	break ;
if not flag	if ( ! flat )
set c [ sum ] to a [ i ]	c [ sum ] = a [ i ] ;
set d [ sum ] to b [ i ]	d [ sum ] = b [ i ] ;
increment sum	sum ++ ;
print sum print newline	cout << sum << endl ;
for i = 0 to sum exclusive , print c [ i ] print " " print d [ i ] print newline	for ( int i = 0 ; i < sum ; i ++ ) { cout << c [ i ] << "   " << d [ i ] << endl ; }
let x and y be arrays of double of size 100000	double x [ 100000 ] , y [ 100000 ] ;
n and t = integers	int n , t ;
define function sorty	void sorty ( )
let i and k be integers	int i , k ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
create integer min with value x [ i ]	int min = x [ i ] ;
set integer pos to i	int pos = i ;
for k = i + 1 to n exclusive	for ( k = i + 1 ; k < n ; k ++ )
if x [ k ] is less than min	if ( x [ k ] < min )
set value of min to x [ k ]	min = x [ k ] ;
set value of pos to k	pos = k ;
invoke function swap with arguments x [ i ] and x [ pos ]	swap ( x [ i ] , x [ pos ] ) ;
invoke function swap with arguments y [ i ] and y [ pos ]	swap ( y [ i ] , y [ pos ] ) ;
read n and t	cin >> n >> t ;
let i be integer	int i ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
a and b = doubles	double a , b ;
read a and b	cin >> a >> b ;
x [ i ] = ( a - ( b / 2 . 0 ) )	x [ i ] = ( a - ( b / 2.0 ) ) ;
y [ i ] = ( a + ( b / 2 . 0 ) )	y [ i ] = ( a + ( b / 2.0 ) ) ;
call sorty	sorty ( ) ;
create integer ct with value 2	int ct = 2 ;
for i = 0 to n - 1 exclusive	for ( i = 0 ; i < n - 1 ; i ++ )
create double h with value y [ i ] + t	double h = y [ i ] + t ;
if x [ i + 1 ] > = h increment ct	if ( x [ i + 1 ] >= h ) { ct ++ ; }
h = x [ i + 1 ] - t	h = x [ i + 1 ] - t ;
if y [ i ] is less than h increment ct	if ( y [ i ] < h ) { ct ++ ; }
print ct and a new line	cout << ct << endl ;
let a be an array of integers of length 10005	int a [ 10005 ] ;
create integers n and t	int n , t ;
read n and t	cin >> n >> t ;
multiply t by 2	t *= 2 ;
mi and mx are integers with mi = 5000 and mx = 0	int mi = 5000 , mx = 0 ;
invoke function memset with arguments a , 0 and size of a	memset ( a , 0 , sizeof ( a ) ) ;
while n - -	while ( n -- )
let x and aa be integers	int x , aa ;
read x and aa	cin >> x >> aa ;
set integer ll to x * 2 + 4000 - aa ;	int ll = x * 2 + 4000 - aa ;
set integer rr to x * 2 + 4000 + aa	int rr = x * 2 + 4000 + aa ;
for i = ll to rr inclusive	for ( int i = ll ; i <= rr ; ++ i )
increase a [ i ]	a [ i ] ++ ;
set mx to max of mx , i	mx = max ( mx , i ) ;
set value of mi to min of mi , i	mi = min ( mi , i ) ;
len and ans are integers with len = 0 and ans = 2	int len = 0 , ans = 2 ;
for integer i = mi to mx inclusive	for ( int i = mi ; i <= mx ; ++ i )
increase len	len ++ ;
if a [ i ] is true	if ( a [ i ] )
if len is greater than t	if ( len > t )
increase ans by 2	ans += 2 ;
else if len is equal to t	else if ( len == t )
increase ans by one	ans ++ ;
len = 0	len = 0 ;
if len is greater than t	if ( len > t )
increase ans by 2	ans += 2 ;
else if len is equal to t	else if ( len == t )
increment ans	ans ++ ;
print ans and a new line	cout << ans << endl ;
double constant PI is acos ( - 1 . 0 )	const double Pi = acos ( - 1.0 ) ;
let n and s be integers	int n , s ;
read n and s	cin >> n >> s ;
create integers x and size	int x , size ;
create arrays of doubles start and end with size 1005	double start [ 1005 ] , end [ 1005 ] ;
call memset with arguments start , 0 and sizeof ( start )	memset ( start , 0 , sizeof ( start ) ) ;
call memset with arguments end , 0 and sizeof ( end )	memset ( end , 0 , sizeof ( end ) ) ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x and size	cin >> x >> size ;
start [ i ] = x - size / 2 . 0	start [ i ] = x - size / 2.0 ;
end [ i ] = x + size / 2 . 0	end [ i ] = x + size / 2.0 ;
sort n elements of array start	sort ( start , start + n ) ;
sort n elements of array end	sort ( end , end + n ) ;
res is integer = 2	int res = 2 ;
for integer i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
set double gap to start [ i + 1 ] - end [ i ]	double gap = start [ i + 1 ] - end [ i ] ;
if s is less than gap increase res by 2	if ( s < gap ) { res += 2 ; }
if s = gap increase res by 1	if ( s == gap ) { res ++ ; }
print res and " \ n "	cout << res << " \n " ;
let n , i and sum be integers with sum = 2	int n , i , sum = 2 ;
let x , y and t be doubles	double x , y , t ;
a = array of doubles of length 2005	double a [ 2005 ] ;
read n and t	cin >> n >> t ;
for i = 0 to n + n exclusive looping by steps of 2	for ( i = 0 ; i < n + n ; i = i + 2 )
read x and y	cin >> x >> y ;
a [ i ] = x - y * 0 . 5	a [ i ] = x - y * 0.5 ;
a [ i + 1 ] = x + y * 0 . 5	a [ i + 1 ] = x + y * 0.5 ;
sort a from the start to n + n	sort ( a , a + n + n ) ;
b = array of doubles of length 2005	double b [ 2005 ] ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
b [ i ] = a [ i * 2 ] - a [ i * 2 - 1 ]	b [ i ] = a [ i * 2 ] - a [ i * 2 - 1 ] ;
if b [ i ] is equal to t	if ( b [ i ] == t )
sum = sum + 1	sum = sum + 1 ;
else if b [ i ] is greater than t	else if ( b [ i ] > t )
sum = sum + 2	sum = sum + 2 ;
print sum and a new line	cout << sum << endl ;
let x , d and c be doubles	double x , d , c ;
assign value 0 , n , t to the integer cnt	int cnt = 0 , n , t ;
arr is an array of double double pairs	pair < double , double > arr [ 1500 ] ;
read n and t	cin >> n >> t ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x and d	cin >> x >> d ;
divide d by 2	d /= 2 ;
arr [ i ] = make_pair ( x - d , x + d )	arr [ i ] = make_pair ( x - d , x + d ) ;
sort arr	sort ( arr , arr + n ) ;
for integer i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
c = first element of arr [ i + 1 ] - second element	c = arr [ i + 1 ] . first - arr [ i ] . second ;
decrease c by t	c -= t ;
if c = 0	if ( c == 0 )
increase cnt	cnt ++ ;
else if c is greater than 0	else if ( c > 0 )
increase cnt by 2	cnt += 2 ;
print cnt + 2 and a new line	cout << cnt + 2 << endl ;
create map mp from long long to long long	map < long long , long long > mp ;
create integers n , t , c with c = 2	int n , t , c = 2 ;
read n read t	cin >> n >> t ;
create doubles x , y	double x , y ;
create pair array p with double , double , size n	pair < double , double > p [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x read y	cin >> x >> y ;
if x is greater than or equal to 0	if ( x >= 0 )
set first element of p [ i ] to x - ( y / 2 )	p [ i ] . first = x - ( y / 2 ) ;
set second element of p [ i ] to x + ( y / 2 )	p [ i ] . second = x + ( y / 2 ) ;
else	else
set first element of p [ i ] to x - ( y / 2 )	p [ i ] . first = x - ( y / 2 ) ;
set second element of p [ i ] to x + ( y / 2 )	p [ i ] . second = x + ( y / 2 ) ;
sort elements from p to p + n	sort ( p , p + n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
set x to first element of p [ i ] - second element of p [ i - 1 ]	x = p [ i ] . first - p [ i - 1 ] . second ;
if x is t	if ( x == t )
increment c	c ++ ;
else if x is greater than t	else if ( x > t )
increment c by 2	c += 2 ;
print c print newline	cout << c << endl ;
let mp be a map from long long to long long	map < long long , long long > mp ;
integers n , t and c with c = 2	int n , t , c = 2 ;
read n and t	cin >> n >> t ;
declare doubles called x and y	double x , y ;
p is array of pairs of double , double with size n	pair < double , double > p [ n ] ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x and y	cin >> x >> y ;
if x > = 0	if ( x >= 0 )
p [ i ] . first = x - ( y / 2 )	p [ i ] . first = x - ( y / 2 ) ;
p [ i ] . second = x + ( y / 2 )	p [ i ] . second = x + ( y / 2 ) ;
else	else
p [ i ] . first = x - ( y / 2 )	p [ i ] . first = x - ( y / 2 ) ;
p [ i ] . second = x + ( y / 2 )	p [ i ] . second = x + ( y / 2 ) ;
sort array p	sort ( p , p + n ) ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
x = p [ i ] . first - p [ i - 1 ] . second	x = p [ i ] . first - p [ i - 1 ] . second ;
if x is equal to t	if ( x == t )
increase c	c ++ ;
else if x is greater than t	else if ( x > t )
increase c by 2	c += 2 ;
print c and a new line	cout << c << endl ;
create integers n , t	int n , t ;
create double vector coord	vector < double > coord ;
read n read t	cin >> n >> t ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
create integers x , a	int x , a ;
read x read	cin >> x >> a ;
add element 1 . 0 * x - 1 . 0 * a / 2 to end of coord	coord . push_back ( 1.0 * x - 1.0 * a / 2 ) ;
add element 1 . 0 * x + 1 . 0 * a / 2 to end of coord	coord . push_back ( 1.0 * x + 1.0 * a / 2 ) ;
sort elements from beginning of coord to end of coord	sort ( coord . begin ( ) , coord . end ( ) ) ;
create integer ans with ans = 2	int ans = 2 ;
for i = 1 to size of coord - 1 exclusive , incrementing i by 2	for ( int i = 1 ; i < coord . size ( ) - 1 ; i += 2 )
create double x1 , x2 with x1 = coord [ i ] , x2 = coord [ i + 1 ]	double x1 = coord [ i ] , x2 = coord [ i + 1 ] ;
if x2 - x1 is less than t	if ( x2 - x1 < t )
break current loop iteration	continue ;
else if x2 - x1 is t	else if ( x2 - x1 == t )
increment ans by 1	ans += 1 ;
else	else
increment ans by 2	ans += 2 ;
print ans print " \ n "	cout << ans << " \n " ;
create integers n and t	int n , t ;
coord = vector of doubles	vector < double > coord ;
read n and t	cin >> n >> t ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
declare integers called x and a	int x , a ;
read x and a	cin >> x >> a ;
push 1 . 0 * x - 1 . 0 * a / 2 into coord	coord . push_back ( 1.0 * x - 1.0 * a / 2 ) ;
push 1 . 0 * x + 1 . 0 * a / 2 into coord	coord . push_back ( 1.0 * x + 1.0 * a / 2 ) ;
sort coord	sort ( coord . begin ( ) , coord . end ( ) ) ;
create integer ans with value 2	int ans = 2 ;
for i = 1 to the length of coord - 1 exclusive with increments of 2	for ( int i = 1 ; i < coord . size ( ) - 1 ; i += 2 )
let double x1 = coord [ i ] and double x2 = coord [ i + 1 ]	double x1 = coord [ i ] , x2 = coord [ i + 1 ] ;
if x2 - x1 is less than t	if ( x2 - x1 < t )
go to the start of the loop	continue ;
else if x2 - x1 is equal to t	else if ( x2 - x1 == t )
increase ans by 1	ans += 1 ;
else	else
increase ans by 2	ans += 2 ;
print ans and " \ n "	cout << ans << " \n " ;
mod = int with mod = 1e9 + 7	int mod = ( 1e9 ) + 7 ;
n = int	int n ;
N = const int with N = 50	const int N = 50 ;
p , t = int array of size N each	int p [ N ] , t [ N ] ;
in function compare taking int a , int b and returning bool	bool compare ( int a , int b )
if p [ a ] > p [ b ] return 1	if ( p [ a ] > p [ b ] ) return 1 ;
if p [ a ] is p [ b ] and t [ a ] < = t [ b ] return 1	if ( p [ a ] == p [ b ] && t [ a ] <= t [ b ] ) return 1 ;
in function eq taking int a , int b and returning bool	bool eq ( int a , int b )
if p [ a ] is p [ b ] and t [ a ] is t [ b ] return 1	if ( p [ a ] == p [ b ] && t [ a ] == t [ b ] ) return 1 ;
k = int	int k ;
read n then k	cin >> n >> k ;
a = int array of size n	int a [ n ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read p [ i ] then t [ i ]	cin >> p [ i ] >> t [ i ] ;
set a [ i ] to i	a [ i ] = i ;
call stable_sort on a , a + n , compare	stable_sort ( a , a + n , compare ) ;
c = int with c = 1	int c = 1 ;
i = int with i = k - 2	int i = k - 2 ;
loop while i > = 0 and eq of a [ k - 1 ] , a [ i ]	while ( i >= 0 && eq ( a [ k - 1 ] , a [ i ] ) )
increment c	c ++ ;
decrement i	i -- ;
set to k	i = k ;
loop while i < n and eq of a [ k - 1 ] , a [ i ]	while ( i < n && eq ( a [ k - 1 ] , a [ i ] ) )
increment c	c ++ ;
increment i	i ++ ;
print c	cout << c << endl ;
create ints n , i , p , t , and k and int array a of size 111111	int n , i , a [ 111111 ] , p , t , k ;
read n and k	cin >> n >> k ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read p and t	cin >> p >> t ;
increment a [ p * 50 - t ]	a [ p * 50 - t ] ++ ;
set t to 10000	t = 10000 ;
while a [ t ] is less than k , set k to k - a [ t - - ]	while ( a [ t ] < k ) k -= a [ t -- ] ;
print a [ t ]	cout << a [ t ] << endl ;
i , j , n , a , k = int	int i , j , n , a , k ;
arr = two dimensional int array of sizes 55 and 2	int arr [ 55 ] [ 2 ] ;
read n then k	cin >> n >> k ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to 2 read arr [ i ] [ j ]	for ( j = 0 ; j < 2 ; j ++ ) { cin >> arr [ i ] [ j ] ; }
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if arr [ i ] [ 0 ] > arr [ j ] [ 0 ]	if ( arr [ i ] [ 0 ] > arr [ j ] [ 0 ] )
tmp = int with tmp = arr [ i ] [ 0 ]	int tmp = arr [ i ] [ 0 ] ;
set arr [ i ] [ 0 ] to arr [ j ] [ 0 ]	arr [ i ] [ 0 ] = arr [ j ] [ 0 ] ;
set arr [ j ] [ 0 ] to tmp	arr [ j ] [ 0 ] = tmp ;
set tmp to arr [ i ] [ 1 ]	tmp = arr [ i ] [ 1 ] ;
set arr [ i ] [ 1 ] to arr [ j ] [ 1 ]	arr [ i ] [ 1 ] = arr [ j ] [ 1 ] ;
set arr [ j ] [ 1 ] to tmp	arr [ j ] [ 1 ] = tmp ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if arr [ i ] [ 0 ] is arr [ j ] [ 0 ]	if ( arr [ i ] [ 0 ] == arr [ j ] [ 0 ] )
if arr [ i ] [ 1 ] < arr [ j ] [ 1 ]	if ( arr [ i ] [ 1 ] < arr [ j ] [ 1 ] )
tmp = int with tmp = arr [ i ] [ 1 ]	int tmp = arr [ i ] [ 1 ] ;
set arr [ i ] [ 1 ] to arr [ j ] [ 1 ]	arr [ i ] [ 1 ] = arr [ j ] [ 1 ] ;
set arr [ j ] [ 1 ] to tmp	arr [ j ] [ 1 ] = tmp ;
p = int with p = 0 and frr = int array of size 55	int frr [ 55 ] , p = 0 ;
for i = 0 to n set frr [ i ] to 0	for ( i = 0 ; i < n ; i ++ ) { frr [ i ] = 0 ; }
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if arr [ i ] [ 0 ] is arr [ j ] [ 0 ] and arr [ i ] [ 1 ] is arr [ j ] [ 1 ] increment frr [ p ]	if ( arr [ i ] [ 0 ] == arr [ j ] [ 0 ] && arr [ i ] [ 1 ] == arr [ j ] [ 1 ] ) { frr [ p ] ++ ; }
increment p	p ++ ;
print frr [ k - 1 ]	cout << frr [ k - 1 ] << endl ;
create new integers n and k	int n , k ;
read n and k	cin >> n >> k ;
create an array of int int pairs A witn n + 1 element	pair < int , int > A [ n + 1 ] ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read input to A [ i ] . first and A [ i ] . second	cin >> A [ i ] . first >> A [ i ] . second ;
invert the sign of A [ i ] . first	A [ i ] . first *= - 1 ;
sort A from position 1 to n + 1	sort ( A + 1 , A + n + 1 ) ;
create integer ans = 0	int ans = 0 ;
for i = 1 to n inclusive incrementing i	for ( int i = 1 ; i <= n ; i ++ )
if A [ i ] = A [ k ] , increment ans by one	if ( A [ i ] == A [ k ] ) ans ++ ;
print ans and ' \ n '	cout << ans << ' \n ' ;
i , j , n , a , k = int	int i , j , n , a , k ;
arr = two dimensional int array of sizes 55 and 2	int arr [ 55 ] [ 2 ] ;
read n then k	cin >> n >> k ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to 2 read arr [ i ] [ j ]	for ( j = 0 ; j < 2 ; j ++ ) { cin >> arr [ i ] [ j ] ; }
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if arr [ i ] [ 0 ] is arr [ j ] [ 0 ]	if ( arr [ i ] [ 0 ] > arr [ j ] [ 0 ] )
tmp = int with tmp = arr [ i ] [ 0 ]	int tmp = arr [ i ] [ 0 ] ;
set arr [ i ] [ 0 ] to arr [ j ] [ 0 ]	arr [ i ] [ 0 ] = arr [ j ] [ 0 ] ;
set arr [ j ] [ 0 ] to tmp	arr [ j ] [ 0 ] = tmp ;
set tmp to arr [ i ] [ 1 ]	tmp = arr [ i ] [ 1 ] ;
set arr [ i ] [ 1 ] to arr [ j ] [ 1 ]	arr [ i ] [ 1 ] = arr [ j ] [ 1 ] ;
set arr [ j ] [ 1 ] to tmp	arr [ j ] [ 1 ] = tmp ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if arr [ i ] [ 0 ] is arr [ j ] [ 0 ]	if ( arr [ i ] [ 0 ] == arr [ j ] [ 0 ] )
if arr [ i ] [ 1 ] < arr [ j ] [ 1 ]	if ( arr [ i ] [ 1 ] < arr [ j ] [ 1 ] )
tmp = int with tmp = arr [ i ] [ 1 ]	int tmp = arr [ i ] [ 1 ] ;
set arr [ i ] [ 1 ] to arr [ j ] [ 1 ]	arr [ i ] [ 1 ] = arr [ j ] [ 1 ] ;
set arr [ j ] [ 1 ] to tmp	arr [ j ] [ 1 ] = tmp ;
p = int with p = 0 and frr = int array of size 55	int frr [ 55 ] , p = 0 ;
for i = 0 to n set frr [ i ] to 0	for ( i = 0 ; i < n ; i ++ ) { frr [ i ] = 0 ; }
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if arr [ i ] [ 0 ] is arr [ j ] [ 0 ] and arr [ i ] [ 1 ] is arr [ j ] [ 1 ] incrment frr [ p ]	if ( arr [ i ] [ 0 ] == arr [ j ] [ 0 ] && arr [ i ] [ 1 ] == arr [ j ] [ 1 ] ) { frr [ p ] ++ ; }
increment p	p ++ ;
print frr [ k - 1 ]	cout << frr [ k - 1 ] << endl ;
create ints i , j , n , k , ans1 , ans2 , and c and int arrays a of size 10000 and b of size 10000	int a [ 10000 ] , b [ 10000 ] , i , j , n , k , ans1 , ans2 , c ;
read n and k	cin >> n >> k ;
Enter integers for every index of arrays a and b	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] >> b [ i ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
for j = n - 1 to i exclusive	for ( j = n - 1 ; j > i ; j -- )
if a [ j ] is greater than a [ j - 1 ]	if ( a [ j ] > a [ j - 1 ] )
swap the values of a [ j ] and a [ j - 1 ]	swap ( a [ j ] , a [ j - 1 ] ) ;
swap the values of b [ j ] and b [ j - 1 ]	swap ( b [ j ] , b [ j - 1 ] ) ;
if a [ j ] is equal to a [ j - 1 ] and b [ j ] is less than a [ j - 1 ] , swap the values of b [ j ] and b [ j - 1 ]	if ( a [ j ] == a [ j - 1 ] && b [ j ] < b [ j - 1 ] ) swap ( b [ j ] , b [ j - 1 ] ) ;
set ans1 to a [ k - 1 ]	ans1 = a [ k - 1 ] ;
set ans2 to b [ k - 1 ]	ans2 = b [ k - 1 ] ;
for i = 0 and c = 0 to n exclusive	for ( i = 0 , c = 0 ; i < n ; i ++ )
if ans1 is equal to a [ i ] and ans2 is equal to b [ i ] , increment c + +	if ( ans1 == a [ i ] && ans2 == b [ i ] ) c ++ ;
print c	cout << c << endl ;
declare const int N = 50 + 5	const int N = 50 + 5 ;
create integers n , k and res	int n , k , res ;
create an array of int - int pairs a with size N	pair < int , int > a [ N ] ;
declare boolean function cmp that takes pairs of int - int a and b as an arguments	bool cmp ( pair < int , int > a , pair < int , int > b )
if a . first is greater than b . first	if ( a . first > b . first )
return true	return true ;
else if a . first is equal to b . first	else if ( a . first == b . first )
if a . second is less than b . second , return true	if ( a . second < b . second ) return true ;
return false	return false ;
else	else
return false	return false ;
define function Input	void Input ( )
read n and k	cin >> n >> k ;
for i from 1 to n inclusive , read input to a [ i ] . first and a [ i ] . second	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] . first >> a [ i ] . second ;
sort a from position 1 to n + 1 using cmp as a comparator method	sort ( a + 1 , a + n + 1 , cmp ) ;
function Solve	void Solve ( )
declare int problems = a [ k ] . first and penalty = a [ k ] . second	int problems = a [ k ] . first , penalty = a [ k ] . second ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] . first = problems and a [ i ] . second is equal to penalty , increment res	if ( a [ i ] . first == problems && a [ i ] . second == penalty ) res ++ ;
print res and ' \ n '	cout << res << ' \n ' ;
call Input ( )	Input ( ) ;
call Solve ( )	Solve ( ) ;
create int array a of size 100 containing array of size 100	int a [ 100 ] [ 100 ] ;
declare margesort taking in ints l and r and int arrays p and t	void margesort ( int p [ ] , int t [ ] , int l , int r ) ;
declare marge taking in int l , m , and r and int arrays p and t	void marge ( int p [ ] , int t [ ] , int l , int m , int r ) ;
let ints n and k and int arrays p of size 100 and t of size 100	int n , k , p [ 100 ] , t [ 100 ] ;
read n and k	cin >> n >> k ;
for i - 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read p [ i ] and t [ i ]	cin >> p [ i ] >> t [ i ] ;
increment a [ p [ i ] ] [ t [ i ] ]	a [ p [ i ] ] [ t [ i ] ] ++ ;
call margesort with arguments p , t , 0 , and n - 1	margesort ( p , t , 0 , n - 1 ) ;
print a [ p [ k - 1 ] ] [ t [ k - 1 ] ]	cout << a [ p [ k - 1 ] ] [ t [ k - 1 ] ] << endl ;
decalre margesort taking in ints l and r and int arrays p and t	void margesort ( int p [ ] , int t [ ] , int l , int r )
if l is less than r	if ( l < r )
let int m = ( l + r - 1 ) / 2	int m = ( l + r - 1 ) / 2 ;
call margesort ( p , t , l , m )	margesort ( p , t , l , m ) ;
call margesort ( p , t , m + 1 , r )	margesort ( p , t , m + 1 , r ) ;
call margesort with arguments p , t , l , m , and r	marge ( p , t , l , m , r ) ;
declare marge taking in ints l , m , and r and int arrays p and t	void marge ( int p [ ] , int t [ ] , int l , int m , int r )
let ints i , j , and k	int i , j , k ;
create integer n1 = m - l + 1	int n1 = m - l + 1 ;
let integer n2 = r - m	int n2 = r - m ;
create int arrays L of size n1 , R of size n2 , ll of size n1 , and rr of size n2	int L [ n1 ] , R [ n2 ] , ll [ n1 ] , rr [ n2 ] ;
for i = 0 to n1 exclusive	for ( i = 0 ; i < n1 ; i ++ )
set L [ i ] to p [ l + i ]	L [ i ] = p [ l + i ] ;
set ll [ i ] to t [ l + i ]	ll [ i ] = t [ l + i ] ;
for j = 0 to n2 exclusive	for ( j = 0 ; j < n2 ; j ++ )
set R [ j ] to p [ m + 1 + j ]	R [ j ] = p [ m + 1 + j ] ;
set rr [ j ] to t [ m + 1 + j ]	rr [ j ] = t [ m + 1 + j ] ;
set i to 0	i = 0 ;
set j to 0	j = 0 ;
set k to l	k = l ;
while i is less than n1 and j is less than n2	while ( i < n1 && j < n2 )
if L [ i ] is greater than R [ j ]	if ( L [ i ] > R [ j ] )
set p [ k ] to L [ i ]	p [ k ] = L [ i ] ;
set t [ k ] to ll [ i ]	t [ k ] = ll [ i ] ;
increase i by 1	i ++ ;
else if L [ i ] is equal to R [ j ] and ll [ i ] is less than or equal to rr [ j ]	else if ( L [ i ] == R [ j ] && ll [ i ] <= rr [ j ] )
set p [ k ] to L [ i ]	p [ k ] = L [ i ] ;
set t [ k ] to ll [ i ]	t [ k ] = ll [ i ] ;
increment i	i ++ ;
else	else
set p [ k ] to R [ j ]	p [ k ] = R [ j ] ;
set t [ k ] to rr [ j ]	t [ k ] = rr [ j ] ;
increment j	j ++ ;
increase k by 1	k ++ ;
while i is less than n1	while ( i < n1 )
set p [ k ] to L [ i ]	p [ k ] = L [ i ] ;
set t [ k ] to ll [ i ]	t [ k ] = ll [ i ] ;
increment i	i ++ ;
increment k	k ++ ;
while j is less than n2	while ( j < n2 )
set p [ k ] to R [ j ]	p [ k ] = R [ j ] ;
set t [ k ] to rr [ j ]	t [ k ] = rr [ j ] ;
increment j	j ++ ;
add 1 to k	k ++ ;
declare integers n , k	int n , k ;
read n read k	cin >> n >> k ;
declare pair of integer , integer array a size 50	pair < int , int > a [ 50 ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read first element for a [ i ] , second element of a [ i ]	cin >> a [ i ] . first >> a [ i ] . second ;
let first element of a [ i ] be first element of a [ i ] * - 1	a [ i ] . first *= - 1 ;
sort elements from a to a + n	sort ( a , a + n ) ;
print result of run count with a , a + n , a [ k - 1 ] as arguments , newline	cout << count ( a , a + n , a [ k - 1 ] ) << endl ;
return 0 from function	return ( 0 ) ;
n , i , p , t , k = int and a = int array of size 111111	int n , i , a [ 111111 ] , p , t , k ;
read n then k	cin >> n >> k ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
read p then t	cin >> p >> t ;
increment a [ p * 50 - t ]	a [ p * 50 - t ] ++ ;
set t to 2500	t = 2500 ;
loop while a [ t ] is less than k decrement k by a [ t ] then decrement t	while ( a [ t ] < k ) k -= a [ t -- ] ;
print a [ t ]	cout << a [ t ] << endl ;
create integers n , m , i , j , k , a , b , create integer array x with size 51	int n , m , x [ 51 ] , i , j , k , a , b ;
while read n read m	while ( cin >> n >> m )
set j to 0	j = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a read b	cin >> a >> b ;
set x [ i ] to a * 50 - b	x [ i ] = a * 50 - b ;
sort elements from x to x + n	sort ( x , x + n ) ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if x [ i ] is x [ n - m ] , increment j	if ( x [ i ] == x [ n - m ] ) { j ++ ; }
print j print newline	cout << j << endl ;
declare int variables n and d	int n , d ;
declare double variable a	double a ;
read n , a and d	cin >> n >> a >> d ;
create an arrays of long longs t and v with n elements	long long t [ n ] , v [ n ] ;
loop i from 0 to n exclusive , read t [ i ] and v [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> t [ i ] >> v [ i ] ;
declare long double T = 0	long double T = 0 ;
loop i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if v [ i ] * v [ i ] > = 2 * a * d	if ( v [ i ] * v [ i ] >= 2 * a * d )
T = max of t [ i ] + sqrt ( ( 2 . 0 * d ) / a and T	T = max ( ( long double ) t [ i ] + sqrt ( ( 2.0 * d ) / a ) , T ) ;
else	else
create long double t1 = v [ i ] / a	long double t1 = v [ i ] / a ;
create long double s = ( v [ i ] * v [ i ] ) / ( 2 * a )	long double s = ( v [ i ] * v [ i ] ) / ( 2 * a ) ;
T = max of T and t [ i ] + t1 + ( ( d - s ) / v [ i ] )	T = max ( T , ( long double ) t [ i ] + t1 + ( ( d - s ) / v [ i ] ) ) ;
set output decimal precision to 12 and print T	cout << setprecision ( 12 ) << T << endl ;
maxn = const int with maxn = 2e5 + 10	const int maxn = 2e5 + 10 ;
n , a , b = int and arr = int array of size maxn	int arr [ maxn ] , n , a , b ;
read n then a then b	cin >> n >> a >> b ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr	sort ( arr , arr + n ) ;
print arr [ b ] - arr [ b - 1 ]	cout << arr [ b ] - arr [ b - 1 ] << endl ;
n = integer with 0	int n = 0 ;
a = integer with 0	int a = 0 ;
b = integer with 0	int b = 0 ;
Read n	cin >> n ;
Read a	cin >> a ;
Read b	cin >> b ;
h = array of 2000 integers	int h [ 2000 ] ;
Read n values into array h	for ( int i = 0 ; i < n ; i ++ ) cin >> h [ i ] ;
sort array elements of h in ascending order	sort ( h , h + n ) ;
print h [ b ] - h [ b - 1 ] and a new line	cout << h [ b ] - h [ b - 1 ] << endl ;
create integer array arr of length 2005	int arr [ 2005 ] ;
create integers a , b , and c	int a , b , c ;
read a , b , and c	cin >> a >> b >> c ;
for i = 0 to a exclusive , read arr [ i ]	for ( int i = 0 ; i < a ; i ++ ) { cin >> arr [ i ] ; }
sort array arr	sort ( arr , arr + a ) ;
create integer mn = arr [ c - 1 ]	int mn = arr [ c - 1 ] ;
create integer mx = arr [ c ] - 1	int mx = arr [ c ] - 1 ;
print the max of 0 and mx - mn + 1	cout << max ( 0 , mx - mn + 1 ) << endl ;
n , a , b , i = long long int	long long int n , a , b , i ;
read n then a then b	cin >> n >> a >> b ;
p = long long int array of size n	long long int p [ n ] ;
read n values into p	for ( i = 0 ; i < n ; i ++ ) cin >> p [ i ] ;
sort p	sort ( p , p + n ) ;
x = long long int with x = p [ n - a ] - p [ b - 1 ]	long long int x = p [ n - a ] - p [ b - 1 ] ;
print x	cout << x << endl ;
create ints n , a and b	int n , a , b ;
declare integer array x with 2005 elements	int x [ 2005 ] ;
read n , a and b	cin >> n >> a >> b ;
for i from 0 to n exclusive , read input to x [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> x [ i ] ;
sort x	sort ( x , x + n ) ;
print x [ b ] - x [ b - 1 ] and ' \ n '	cout << x [ b ] - x [ b - 1 ] << ' \n ' ;
create integers n , a , b	int n , a , b ;
read n read a read b	cin >> n >> a >> b ;
create integer array p with size n	int p [ n ] ;
for i = 0 to n exclusive , read p [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }
sort elements from p to p + n	sort ( p , p + n ) ;
create long long count with count = 0	long long count = 0 ;
if p [ b - 1 ] is not p [ b ]	if ( p [ b - 1 ] != p [ b ] )
increment count by p [ b ] - p [ b - 1 ]	count += p [ b ] - p [ b - 1 ] ;
print count print newline	cout << count << endl ;
else	else
print " 0 " print newline	cout << " 0 " << endl ;
create string T	string T ;
create long long N , K , M , A , B , C [ 2005 ] , D , sum	long long N , K , M , A , B , C [ 2005 ] , D , sum ;
read N , A and B	cin >> N >> A >> B ;
for i = 1 to N inclusive , read C [ i ]	for ( int i = 1 ; i <= N ; i ++ ) { cin >> C [ i ] ; }
sort elements between C + 1 and C + N + 1	sort ( C + 1 , C + N + 1 ) ;
print C [ B + 1 ] - C [ B ] and a newline	cout << C [ B + 1 ] - C [ B ] << ' \n ' ;
create ints n , a , b and way	int n , a , b , way ;
read n , a and b	cin >> n >> a >> b ;
create int pointer * chore to the new array of int with n elements	int * chore = new int [ n ] ;
loop i from 0 to n exclusive , read chore [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> chore [ i ] ;
sort chore	sort ( chore , chore + n ) ;
declare int j = n - 1	int j = n - 1 ;
decrement j while j > n - a	while ( j > n - a ) { j -- ; }
if chore [ j ] = chore [ j - 1 ]	if ( chore [ j ] == chore [ j - 1 ] )
print 0 and " \ n "	cout << 0 << " \n " ;
else	else
print chore [ j ] - chore [ j - 1 ] and " \ n "	cout << chore [ j ] - chore [ j - 1 ] << " \n " ;
define int constant maxn , set to 5e3 + 5	const int maxn = 5e3 + 5 ;
define unsigned integer constant base , set to 311	const unsigned long long base = 311 ;
define unsigned integer array A to be of maxn elements	unsigned long long A [ maxn ] ;
define integer N	int N ;
read N	cin >> N ;
define integers a and b	int a , b ;
read a , b	cin >> a >> b ;
for int i from 1 to N by 1 , read A [ i ]	for ( int i = ( 1 ) ; i <= ( N ) ; i += ( 1 ) ) cin >> A [ i ] ;
sort ( A + 1 , A + N + 1 )	sort ( A + 1 , A + N + 1 ) ;
print A [ b + 1 ] - A [ b ] and a newline	cout << A [ b + 1 ] - A [ b ] << " \n " ;
create int a , b , n , i , au , nx	int a , b , n , i , au , nx ;
read n	cin >> n ;
read a and b	cin >> a >> b ;
create vector int c	vector < int > c ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read au	cin >> au ;
put au at the end of c	c . push_back ( au ) ;
sort c	sort ( c . begin ( ) , c . end ( ) ) ;
set nx to c [ b ] - c [ b - 1 ]	nx = c [ b ] - c [ b - 1 ] ;
print nx and a newline	cout << nx << " \n " ;
n , a , b , i , ans = int	int n , a , b , i , ans ;
read n then a then b	cin >> n >> a >> b ;
f = int vector of size n	vector < int > f ( n ) ;
read n values into f	for ( i = 0 ; i < n ; i ++ ) cin >> f [ i ] ;
sort f from rbegin to rend	sort ( f . rbegin ( ) , f . rend ( ) ) ;
set ans to n , a , b , i , ans	ans = - ( f [ a ] - f [ a - 1 ] ) ;
print ans	cout << ans << " \n " ;
n , a , b = int	int n , a , b ;
read n then a then b	cin >> n >> a >> b ;
V = int vector of size n	vector < int > V ( n ) ;
read n values into V	for ( int i = 0 ; i < n ; ++ i ) cin >> V [ i ] ;
sort V	sort ( V . begin ( ) , V . end ( ) ) ;
print V [ b ] - V [ b - 1 ]	cout << V [ b ] - V [ b - 1 ] << " \n " ;
N = 1000055	const int N = 1e6 + 55 ;
M = 1000000007	const int M = 1e9 + 7 ;
n , a , b = int	int n , a , b ;
v = vector of int	vector < int > v ;
read n , a , b	cin >> n >> a >> b ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
q = int	int q ;
read q	cin >> q ;
add q to end of v	v . push_back ( q ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
q = v [ n - 1 ] - v [ n - a - 1 ]	int q = v [ n - a ] - v [ n - a - 1 ] ;
if q < = 0	if ( q <= 0 )
print 0	cout << 0 << endl ;
exit	exit ( 0 ) ;
print q	cout << q << endl ;
n = int	int n ;
a = int	int a ;
b = int	int b ;
complexity = int vector	vector < int > complexity ;
read n then a then b	cin >> n >> a >> b ;
i = int with i = 0	int i = 0 ;
loop while i is less than n incrementing i each time	for ( ; i < n ; i ++ )
tmp = int	int tmp ;
read tmp	cin >> tmp ;
append tmp to complexity	complexity . push_back ( tmp ) ;
sort complexity	sort ( complexity . begin ( ) , complexity . end ( ) ) ;
cnt = int with cnt = 0	int cnt = 0 ;
for i = complexity [ b - 1 ] to complexity [ b ] increment cnt	for ( i = complexity [ b - 1 ] ; i < complexity [ b ] ; i ++ ) { cnt ++ ; }
print cnt	cout << cnt << endl ;
let n , a , b , i be long integers	long long n , a , b , i ;
read n , a , b	cin >> n >> a >> b ;
let c [ n ] be long integer	long long c [ n ] ;
for i = 0 to n exclusive , read ith element of c	for ( i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }
sort the values of c and c + n	sort ( c , c + n ) ;
print c [ b ] - c [ b - 1 ] and newline	cout << c [ b ] - c [ b - 1 ] << endl ;
create integers n , a , b	int n , a , b ;
create integer vector h	vector < int > h ;
read n read a read b	cin >> n >> a >> b ;
resize vector to size n	h . resize ( n ) ;
for i = 0 to n exclusive , read h [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort elements from beginning of h to end of h using integer greater function to compare	sort ( h . begin ( ) , h . end ( ) , greater < int > ( ) ) ;
create integer min_petya with min_petya = h [ a - 1 ]	int min_petya = h [ a - 1 ] ;
create max_vasya with max_vasya = h [ a ]	int max_vasya = h [ a ] ;
if min_petya is max_vasya	if ( min_petya == max_vasya )
print 0 print newline	cout << 0 << endl ;
else	else
print min_petya - max_vasya print newline	cout << min_petya - max_vasya << endl ;
N = const long long with N = 1e9 + 3	const long long N = 1e9 + 3 ;
MN = const long long with MN = 1e9 + 7	const long long MN = 1e9 + 7 ;
MX = const long long with MX = - 1e9 - 7	const long long MX = - 1e9 - 7 ;
n , a , b , x , c1 , c2 , cnt = long long	long long n , a , b , x , c1 , c2 , cnt ;
s , s1 = string	string s , s1 ;
bl = bool with bl = false	bool bl = false ;
c = long long	long long c ;
pr = pair of long long and long long	pair < long long , long long > pr ;
v = vector of long long	vector < long long > v ;
mp = map from long long to long long	map < long long , long long > mp ;
st = set of long long	set < long long > st ;
iterator it = set of long long	set < long long > :: iterator it ;
read n , a , b	cin >> n >> a >> b ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read x	cin >> x ;
append x in v	v . push_back ( x ) ;
sort v . begin ( ) and v . end ( )	sort ( v . begin ( ) , v . end ( ) ) ;
if v [ b - 1 ] is v [ b ]	if ( v [ b - 1 ] == v [ b ] )
print 0	cout << 0 ;
else	else
print v [ b ] - v [ b - 1 ]	cout << v [ b ] - v [ b - 1 ] ;
print new line	cout << " \n " ;
create integer vector h	vector < int > h ;
create integers a , b , n , num	int a , b , n , num ;
read n read a read b	cin >> n >> a >> b ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read num	cin >> num ;
add element num to end of h	h . push_back ( num ) ;
sort elements from beginning of h to end of h	sort ( h . begin ( ) , h . end ( ) ) ;
if h [ b - 1 ] is h [ b ]	if ( h [ b - 1 ] == h [ b ] )
print 0 print newline	cout << 0 << endl ;
else	else
print h [ b ] - h [ b - 1 ] print newline	cout << h [ b ] - h [ b - 1 ] << endl ;
create long long int n , a , b , kount , x , set kount = 0	long long int n , a , b , kount = 0 , x ;
create vector long long int h	vector < long long int > h ;
read n , a and b	cin >> n >> a >> b ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
add x to end of h	h . push_back ( x ) ;
sort h	sort ( h . begin ( ) , h . end ( ) ) ;
if h [ b - 1 ] different from h [ b ] , set kount to h [ b ] - h [ b - 1 ]	if ( h [ b - 1 ] != h [ b ] ) { kount = h [ b ] - h [ b - 1 ] ; }
print kount	cout << kount << endl ;
create int n , a and b	int n , a , b ;
read n , a and b	cin >> n >> a >> b ;
create vector int h ( n )	vector < int > h ( n ) ;
for i = 0 to n exclusive , read h [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort vector h	sort ( h . begin ( ) , h . end ( ) ) ;
print h [ b ] - h [ b - 1 ] and a newline	cout << h [ b ] - h [ b - 1 ] << " \n " ;
integer function selsort with an array of long long argument arr and int argument n	int selsort ( long long arr [ ] , int n )
loop i from 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
declare integer min = i	int min = i ;
for j = to n exclusive	for ( int j = i + 1 ; j < n ; j ++ )
if arr [ j ] is less than arr [ min ] , set min to j	if ( arr [ j ] < arr [ min ] ) { min = j ; }
create long long t with value arr [ i ]	long long t = arr [ i ] ;
set arr [ i ] to arr [ min ]	arr [ i ] = arr [ min ] ;
assign t to arr [ min ]	arr [ min ] = t ;
declare integers n , a and b	int n , a , b ;
read n , a and b	cin >> n >> a >> b ;
let arr be long long array with size n	long long arr [ n ] ;
loop i from 0 to n exclusive , read input to arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
call selsort ( arr , n )	selsort ( arr , n ) ;
print arr [ n - a ] - arr [ n - a - 1 ] and " \ n "	cout << arr [ n - a ] - arr [ n - a - 1 ] << " \n " ;
create integer array h with size 2000	int h [ 2000 ] ;
create integers n , a , b	int n , a , b ;
read n read a read b	cin >> n >> a >> b ;
for i = 0 to n exclusive , read h [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort elements from h to h + n	sort ( h , h + n ) ;
create integer ans with ans = h [ b ] - h [ b - 1 ]	int ans = h [ b ] - h [ b - 1 ] ;
print ans print newline	cout << ans << endl ;
a , b , n , i = integers	int a , b , n , i ;
Read a , b , n	cin >> n >> a >> b ;
C = array of n integers	int C [ n ] ;
Read n values into array C	for ( i = 0 ; i < n ; i ++ ) cin >> C [ i ] ;
sort array elements of C in ascending order	sort ( C , C + n ) ;
print C [ b ] - C [ b - 1 ] and a new line	cout << C [ b ] - C [ b - 1 ] << endl ;
create integers n , a , and b	int n , a , b ;
let chores be an array of integers of length 2000	int chores [ 2000 ] ;
read n , a , and b	cin >> n >> a >> b ;
for i to n exclusive , read chores [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> chores [ i ] ; }
sort arrary chores	sort ( chores , chores + n ) ;
output chores [ b ] - chores [ b - 1 ] and new line	cout << chores [ b ] - chores [ b - 1 ] << ' \n ' ;
n , a , b , m = integers and c = array of 2555 integers	long long int n , a , b , c [ 2555 ] , m ;
Read n , a , b	cin >> n >> a >> b ;
Read n values into array c	for ( int i = 0 ; i < n ; i ++ ) cin >> c [ i ] ;
sort array elements of c in ascending order	sort ( c , c + n ) ;
set m to c [ b ] - c [ b - 1 ]	m = c [ b ] - c [ b - 1 ] ;
print m and a new line	cout << m << endl ;
n and b = integers	int n , b ;
read n and b	cin >> n >> b ;
create vector of integers V with n elements	vector < int > V ( n ) ;
read n elements into V	for ( int i = 0 ; i < n ; ++ i ) cin >> V [ i ] ;
assign value b to the integer total	int total = b ;
for integer i = 0 to n exclusive , add V [ i ] to the total	for ( int i = 0 ; i < n ; ++ i ) total += V [ i ] ;
double t = total / n	double t = ( double ) total / n ;
create vector of doubles ans with n elements	vector < double > ans ( n ) ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if V [ i ] is greater than t	if ( V [ i ] > t )
print " - 1 \ n "	cout << " -1\n " ;
assign value of t - V [ i ] to the ans [ i ]	ans [ i ] = t - V [ i ] ;
print fixed and set decimal precision to 10	cout << fixed << setprecision ( 10 ) ;
for integer i = 0 to n exclusive print ans [ i ]	for ( int i = 0 ; i < n ; ++ i ) cout << ans [ i ] << " \n " ;
create integer arrays p of size 101 within an array of size 101 , ai of size 1000 , bi of size 1000	int p [ 101 ] [ 101 ] , ai [ 1000 ] , bi [ 1000 ] ;
create unsigned integer array ci of size 1000	unsigned int ci [ 1000 ] ;
created unsigned integers n , m , and k	unsigned int n , m , k ;
read n , m , and k	cin >> n >> m >> k ;
create string u	string u ;
create unsigned integer o = 0	unsigned int o = 0 ;
for i = 0 to n exclusive	for ( unsigned int i = 0 ; i < n ; ++ i )
read u	cin >> u ;
for j = 0 to m exclusive	for ( unsigned int j = 0 ; j < m ; ++ j )
create unsigned integer ix = o + j	unsigned int ix = o + j ;
read ai [ ix ] , bi [ ix ] , ci [ ix ]	cin >> ai [ ix ] >> bi [ ix ] >> ci [ ix ] ;
set o to the result of o + m	o += m ;
created unsigned integer e = n * m	unsigned int e = n * m ;
create integer ma = 0	int ma = 0 ;
for u = 0 to e exclusive in increments of m	for ( unsigned int u = 0 ; u < e ; u += m )
for v = 0 to e exclusive in increments of m	for ( unsigned int v = 0 ; v < e ; v += m )
if u is equal to v , continue to next loop iteration	if ( u == v ) continue ;
for i = 1 to m inclusive	for ( unsigned int i = 1 ; i <= m ; ++ i )
created unsigned integer ix = u + i - 1	unsigned int ix = u + i - 1 ;
for j = 1 to k inclusive	for ( unsigned int j = 1 ; j <= k ; ++ j )
create integer mx = p [ j ] [ i - 1 ]	int mx = p [ j ] [ i - 1 ] ;
for x = 1 to ci [ ix ] inclusive and j inclusive	for ( unsigned int x = 1 ; x <= ci [ ix ] && x <= j ; ++ x )
create integer mm = p [ j - x ] [ i - 1 ] + ( bi [ v + i - 1 ] - ai [ ix ] ) * x	int mm = p [ j - x ] [ i - 1 ] + ( bi [ v + i - 1 ] - ai [ ix ] ) * x ;
if mm is greater than mx , set mx to mm	if ( mm > mx ) mx = mm ;
set p [ j ] [ i ] to mx	p [ j ] [ i ] = mx ;
if p [ k ] [ m ] is greater than ma , set ma to p [ k ] [ m ]	if ( p [ k ] [ m ] > ma ) ma = p [ k ] [ m ] ;
print ma	cout << ma << endl ;
create 2d array of integers a with size 15 by 105	int a [ 15 ] [ 105 ] ;
create 2d array of integers b with size 15 by 105	int b [ 15 ] [ 105 ] ;
create 2d array of integers c with size 15 by 105	int c [ 15 ] [ 105 ] ;
declare boolean array vis with 105 elements	bool vis [ 105 ] ;
declare ints n , m and k	int n , m , k ;
function Cal with int arguments x and y that returns int	int Cal ( int x , int y )
set first sizeof vis bytes at the pointer vis to 0	memset ( vis , 0 , sizeof vis ) ;
if x = y , return - 1	if ( x == y ) return - 1 ;
declare int variable cost = k	int cost = k ;
create int ans = 0	int ans = 0 ;
while cost ! = 0	while ( cost )
create integer flag	int flag ;
declare integer maxgas = 0	int maxgas = 0 ;
declare integer variable dp = 1	int dp = 1 ;
for integer i = 1 to m inclusive	for ( int i = 1 ; i <= m ; i ++ )
if vis [ i ] is true , skip the rest of the loop	if ( vis [ i ] ) continue ;
if b [ y ] [ i ] - a [ x ] [ i ] is greater than maxgas	if ( b [ y ] [ i ] - a [ x ] [ i ] > maxgas )
assign 0 to dp	dp = 0 ;
assign b [ y ] [ i ] - a [ x ] [ i ] to maxgas	maxgas = b [ y ] [ i ] - a [ x ] [ i ] ;
change flag to i	flag = i ;
if dp is true , break the loop	if ( dp ) break ;
set vis [ flag ] to 1	vis [ flag ] = 1 ;
add min of cost and c [ x ] [ flag ] * maxgas to ans	ans += min ( cost , c [ x ] [ flag ] ) * maxgas ;
decrease cost by min of cost and c [ x ] [ flag ]	cost -= min ( cost , c [ x ] [ flag ] ) ;
return ans	return ans ;
set first sizeof vis bytes at the pointer vis to 0	memset ( vis , 0 , sizeof vis ) ;
read n , m and k	cin >> n >> m >> k ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create string s	string s ;
read input to s	cin >> s ;
for j from 1 to m inclusive , read a [ i ] [ j ] , b [ i ] [ j ] and c [ i ] [ j ]	for ( int j = 1 ; j <= m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ; }
declare int variable ans = 0	int ans = 0 ;
change i from 1 to n inclusive in a loop	for ( int i = 1 ; i <= n ; i ++ )
change j from 1 to n inclusive in a loop , setting ans to max of ans and Cal ( i , j )	for ( int j = 1 ; j <= n ; j ++ ) { ans = max ( ans , Cal ( i , j ) ) ; }
print ans	cout << ans << endl ;
n , m , k = int	int n , m , k ;
a , b , c = array of 11 by 111 int	int a [ 11 ] [ 111 ] , b [ 11 ] [ 111 ] , c [ 11 ] [ 111 ] ;
f = array of 111 int	int f [ 111 ] ;
read n , m , k	cin >> n >> m >> k ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
name = string	string name ;
read name	cin >> name ;
for j = 0 to m exclusive read a [ i ] [ j ] , b [ i ] [ j ] , c [ i ] [ j ]	for ( int j = 0 ; j < m ; ++ j ) { cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ; }
ans = 0	int ans = 0 ;
for st = 0 to n exclusive	for ( int st = 0 ; st < n ; ++ st )
for fn = 0 to n exclusive	for ( int fn = 0 ; fn < n ; ++ fn )
if st is not fn	if ( st != fn )
cst and num = array of 111 int	int cst [ 111 ] , num [ 111 ] ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
cst [ j ] = b [ fn ] [ j ] - a [ st ] [ j ]	cst [ j ] = b [ fn ] [ j ] - a [ st ] [ j ] ;
num [ j ] = c [ st ] [ j ]	num [ j ] = c [ st ] [ j ] ;
fill f with - 1	memset ( f , - 1 , sizeof ( f ) ) ;
f [ 0 ] = 0	f [ 0 ] = 0 ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
for cnt = 0 to num [ j ] exclusive	for ( int cnt = 0 ; cnt < num [ j ] ; ++ cnt )
for pos = k - 1 down to 0 inclusive	for ( int pos = k - 1 ; pos >= 0 ; -- pos )
if f [ pos ] > = 0 f [ pos + 1 ] = max ( f [ pos + 1 ] , f [ pos ] + cst [ j ] )	if ( f [ pos ] >= 0 ) f [ pos + 1 ] = max ( f [ pos + 1 ] , f [ pos ] + cst [ j ] ) ;
ans = max ( ans , element pointed by max_element ( f , f + k + 1 ) )	ans = max ( ans , * max_element ( f , f + k + 1 ) ) ;
pritn ans	cout << ans << endl ;
let a , b , c be int matrices of size 11x101 , and d , e int arrays of length 101	int a [ 11 ] [ 101 ] , b [ 11 ] [ 101 ] , c [ 11 ] [ 101 ] , d [ 101 ] , e [ 101 ] ;
let x , y be ints	int x , y ;
let n , m , kkk , maxn be ints	int n , m , kkk , maxn ;
in boolean function cmp that takes int x , int y	bool cmp ( int x , int y )
return d [ x ] > d [ y ]	return d [ x ] > d [ y ] ;
read n , m , kkk	cin >> n >> m >> kkk ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
cc = string	string cc ;
read cc	cin >> cc ;
for j = 0 to m exclusive , read a [ i ] [ j ] , b [ i ] [ j ] , c [ i ] [ j ]	for ( int j = 0 ; j < m ; j ++ ) cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let ans be an int	int ans ;
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
set ans to 0	ans = 0 ;
if i is different from j	if ( i != j )
reset d to all 0	memset ( d , 0 , sizeof ( d ) ) ;
for k = 0 to m exclusive set e [ k ] to k	for ( int k = 0 ; k < m ; k ++ ) e [ k ] = k ;
for k = 0 to m exclusive , set d [ k ] to b [ j ] [ k ] - a [ i ] [ k ]	for ( int k = 0 ; k < m ; k ++ ) { d [ k ] = b [ j ] [ k ] - a [ i ] [ k ] ; }
sort the first m elements of e using cmp	sort ( e , e + m , cmp ) ;
let kk = kkk be an int	int kk = kkk ;
let p be an integer	int p ;
set p = 0	p = 0 ;
while p < m and kk is positive	while ( ( p < m ) && ( kk > 0 ) )
if d [ e [ p ] ] is negative or zero	if ( d [ e [ p ] ] <= 0 )
set kk to 0	kk = 0 ;
exit loop	break ;
if c [ i ] [ e [ p ] ] < = kk	if ( c [ i ] [ e [ p ] ] <= kk )
increment ans by c [ i ] [ e [ p ] ] * d [ e [ p ] ]	ans = ans + c [ i ] [ e [ p ] ] * d [ e [ p ] ] ;
decrement kk by c [ i ] [ e [ p ] ]	kk = kk - c [ i ] [ e [ p ] ] ;
increment p	p = p + 1 ;
else	else
increment ans by kk * d [ e [ p ] ]	ans = ans + kk * d [ e [ p ] ] ;
set kk to 0	kk = 0 ;
if ans > maxn	if ( ans > maxn )
set maxn to ans	maxn = ans ;
set x = i	x = i ;
set y = j	y = j ;
print maxn	cout << maxn << endl ;
declare const int MOD = 1e9 + 7	const int MOD = 1e9 + 7 ;
create integers n , m and k	int n , m , k ;
create 2d arrays of integers a , b and c with size 10 by 100	int a [ 10 ] [ 100 ] , b [ 10 ] [ 100 ] , c [ 10 ] [ 100 ] ;
integer function solve with int arguments u and v	int solve ( int u , int v )
create vector of integers profits	vector < int > profits ;
for i = 0 to m exclusive	for ( int i = 0 ; i < m ; ++ i )
loop j from 0 to c [ u ] [ i ] exclusive , push max of 0 and b [ v ] [ i ] - a [ u ] [ i ] into profits	for ( int j = 0 ; j < c [ u ] [ i ] ; ++ j ) profits . push_back ( max ( 0 , b [ v ] [ i ] - a [ u ] [ i ] ) ) ;
sort profits	sort ( profits . rbegin ( ) , profits . rend ( ) ) ;
declare integer variable ans = 0	int ans = 0 ;
for i = 0 to min of k and length of profits exclusive , increase ans by profits [ i ]	for ( int i = 0 ; i < min ( k , ( int ) profits . size ( ) ) ; ++ i ) ans += profits [ i ] ;
return ans	return ans ;
read n , m and k	cin >> n >> m >> k ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
declare string variable name	string name ;
read name	cin >> name ;
loop j from 0 to m exclusive , read a [ i ] [ j ] , b [ i ] [ j ] and c [ i ] [ j ]	for ( int j = 0 ; j < m ; ++ j ) cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ;
create integer ans = 0	int ans = 0 ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
for j from 0 to n exclusive , assign max of ans and solve ( i , j ) to ans	for ( int j = 0 ; j < n ; ++ j ) ans = max ( ans , solve ( i , j ) ) ;
print ans and ' \ n '	cout << ans << ' \n ' ;
declare arrays of integers a , b and c with size 105 by 105 and integer variables n , m and k	int a [ 105 ] [ 105 ] , b [ 105 ] [ 105 ] , c [ 105 ] [ 105 ] , n , m , k ;
function buy with int arguments x and y that returns int	int buy ( int x , int y )
create an array of integers v with size 105	int v [ 105 ] = { 0 } ;
let ans and i be integers with ans = 0	int ans = 0 , i ;
declare integer variable last = k	int last = k ;
while last is not 0	while ( last )
declare integer variable maxn = 0	int maxn = 0 ;
declare int maxi	int maxi ;
declare integer variable num	int num ;
for i from 1 to m inclusive	for ( i = 1 ; i <= m ; i ++ )
if v [ i ] is true , skip the rest of the loop	if ( v [ i ] ) continue ;
if b [ y ] [ i ] - a [ x ] [ i ] is greater than maxn	if ( b [ y ] [ i ] - a [ x ] [ i ] > maxn )
assign i to maxi	maxi = i ;
set maxn to b [ y ] [ i ] - a [ x ] [ i ]	maxn = b [ y ] [ i ] - a [ x ] [ i ] ;
if maxn = 0 , stop the loop	if ( maxn == 0 ) break ;
change num to min of last and c [ x ] [ maxi ]	num = min ( last , c [ x ] [ maxi ] ) ;
add num * maxn to ans	ans += num * maxn ;
assign 1 to v [ maxi ]	v [ maxi ] = 1 ;
decrease last by num	last -= num ;
return ans	return ans ;
declare ints i and j	int i , j ;
declare string variable s	string s ;
read n , m and k	cin >> n >> m >> k ;
loop i from 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read input to s	cin >> s ;
read a [ i ] [ j ] , b [ i ] [ j ] and c [ i ] [ j ] m times	for ( j = 1 ; j <= m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ; }
create int ans = 0	int ans = 0 ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
loop j from 1 to n inclusive , change ans to max of ans and buy ( i , j )	for ( j = 1 ; j <= n ; j ++ ) { ans = max ( ans , buy ( i , j ) ) ; }
print ans	cout << ans << endl ;
create constant integers Maxn , Maxm with Maxn = 15 , Maxm = 100 + 5	const int Maxn = 15 , Maxm = 100 + 5 ;
create integers n , m , k , ans create 2d integer arrays a , b , c , with a size Maxn by Maxm , b size Maxn by Maxm , c size Maxn by Maxm	int n , m , k , a [ Maxn ] [ Maxm ] , b [ Maxn ] [ Maxm ] , c [ Maxn ] [ Maxm ] , ans ;
read n read m read k	cin >> n >> m >> k ;
create string s	string s ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read s	cin >> s ;
for j = 0 to m exclusive , read a [ i ] [ j ] read b [ i ] [ j ] read c [ i ] [ j ]	for ( int j = 0 ; j < m ; j ++ ) cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ;
create pair of integer , integer array d with size Maxm	pair < int , int > d [ Maxm ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
for l = 0 to m exclusive , set d [ l ] to make pair from ( b [ j ] [ l ] - a [ i ] [ l ] and c [ i ] [ l ] )	for ( int l = 0 ; l < m ; l ++ ) d [ l ] = make_pair ( b [ j ] [ l ] - a [ i ] [ l ] , c [ i ] [ l ] ) ;
sort elements from d to d + m	sort ( d , d + m ) ;
reverse sort elements from d to d + m	reverse ( d , d + m ) ;
create integers num , p , cnt with num = 0 , p = 0 , cnt = 0	int num = 0 , p = 0 , cnt = 0 ;
while p is less than m and cnt + second element of d [ p ] is less than or equal to k	while ( p < m && cnt + d [ p ] . second <= k )
if first element of d [ p ] is less than 0 , break loop	if ( d [ p ] . first < 0 ) break ;
increment cnt by second element of d [ p ]	cnt += d [ p ] . second ;
increment num by first element of d [ p ] * second eleement of d [ p ]	num += d [ p ] . first * d [ p ] . second ;
increment p	p ++ ;
if first element of d [ p ] is greater than 0 , increment num by first element of d [ p ] * ( k - cnt )	if ( d [ p ] . first > 0 ) num += d [ p ] . first * ( k - cnt ) ;
set ans to maximum of ans and num	ans = max ( ans , num ) ;
print ans print newline	cout << ans << endl ;
create 2d long long array a with size 11 by 105	long long a [ 11 ] [ 105 ] ;
create 2d long long array b with size 11 by 105	long long b [ 11 ] [ 105 ] ;
create 2d long long array c with size 11 by 105	long long c [ 11 ] [ 105 ] ;
declare boolean array vis with 105 elements	bool vis [ 105 ] ;
declare long longs n , m and k	long long n , m , k ;
cal is a long long function with int arguments x and y	long long cal ( int x , int y )
create long long last = k	long long last = k ;
create long long ans = 0	long long ans = 0 ;
set sizeof ( vis ) bytes at the pointer vis to 0	memset ( vis , 0 , sizeof ( vis ) ) ;
while last ! = 0	while ( last )
declare long long v = 0	long long v = 0 ;
declare long long p	long long p ;
declare long long flag = 0	long long flag = 0 ;
for integer i = 1 to m inclusive	for ( int i = 1 ; i <= m ; i ++ )
if vis [ i ] is false	if ( ! vis [ i ] )
if b [ y ] [ i ] - a [ x ] [ i ] is greater than v	if ( b [ y ] [ i ] - a [ x ] [ i ] > v )
assign b [ y ] [ i ] - a [ x ] [ i ] to v	v = b [ y ] [ i ] - a [ x ] [ i ] ;
set p to i	p = i ;
assign 1 to flag	flag = 1 ;
if flag = 0 , break	if ( flag == 0 ) break ;
set vis [ p ] to 1	vis [ p ] = 1 ;
if last > = c [ x ] [ p ]	if ( last >= c [ x ] [ p ] )
increase ans by c [ x ] [ p ] * v	ans += c [ x ] [ p ] * v ;
decrease last by c [ x ] [ p ]	last -= c [ x ] [ p ] ;
else	else
increase ans by last * v	ans += last * v ;
change last to 0	last = 0 ;
return ans	return ans ;
read n , m and k	cin >> n >> m >> k ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare string s	string s ;
read input to s	cin >> s ;
for j from 1 to m inclusive , read input to a [ i ] [ j ] , b [ i ] [ j ] and c [ i ] [ j ]	for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ] [ j ] >> b [ i ] [ j ] >> c [ i ] [ j ] ;
declare long long variable ans = 0	long long ans = 0 ;
loop i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for int j = 1 to n inclusive , change ans to max of ans and cal ( i , j )	for ( int j = 1 ; j <= n ; j ++ ) { ans = max ( ans , cal ( i , j ) ) ; }
print ans and " \ n "	cout << ans << " \n " ;
declare n as long long , a as long long array with size 100100	long long n , a [ 100100 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;
declare s as long long = 0	long long s = 0 ;
for k = 0 to n - 1 exclusive	for ( int k = 0 ; k < n - 1 ; ++ k )
declare integer t = 0	int t = 0 ;
while k + ( 1 bitshift left t + 1 ) is less than n , increment i	while ( k + ( 1 << t + 1 ) < n ) ++ t ;
increment s by a [ k ] , a [ k + ( 1 < < t ) ] by a [ k ]	s += a [ k ] , a [ k + ( 1 << t ) ] += a [ k ] ;
print s , newline	cout << s << endl ;
MaxN = const int with MaxN = 1E5 + 10	const int MaxN = 1E5 + 10 ;
a = int array of size MaxN	int a [ MaxN ] ;
n = int	int n ;
read n	cin >> n ;
read n values into a	for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;
ans = int with ans = 0	int ans = 0 ;
for i = 0 to n - 1	for ( int i = 0 ; i < n - 1 ; ++ i )
lg = int with lg = log2 of n - i - 1	int lg = log2 ( n - i - 1 ) ;
increment ans by a [ i ]	ans += a [ i ] ;
increment a [ i + ( 1 bitshift left by lg ) ] by a [ i ]	a [ i + ( 1 << lg ) ] += a [ i ] ;
print ans	cout << ans << endl ;
n , i , a , ans , d = integers with ans = 0 , a , d = integer array of size 1111111	int n , i , a [ 1111111 ] , ans = 0 , d [ 1111111 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
d [ 1 ] = 1	d [ 1 ] = 1 ;
for i = 2 to n exclusive , d [ i ] = d [ i / 2 ] * 2	for ( i = 2 ; i < n ; i ++ ) d [ i ] = d [ i / 2 ] * 2 ;
for i = 0 to i + 1 < n	for ( i = 0 ; i + 1 < n ; i ++ )
a [ i + d [ n - i - 1 ] ] = a [ i + d [ n - i - 1 ] ] + a [ i ]	a [ i + d [ n - i - 1 ] ] += a [ i ] ;
ans = ans + a [ i ]	ans += a [ i ] ;
print ans	cout << ans << endl ;
create int n	int n ;
read n	cin >> n ;
create long long int array arr [ n ]	long long arr [ n ] ;
read every index of arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
create long long N = 0	long long N = 0 ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
let integer t = floor ( log2 ( n - i - 1 ) )	int t = floor ( log2 ( n - i - 1 ) ) ;
set N to N + arr [ i ]	N = N + arr [ i ] ;
create int j = i + pow ( 2 , t )	int j = i + pow ( 2 , t ) ;
set arr [ j ] to arr [ j ] + arr [ i ]	arr [ j ] += arr [ i ] ;
set arr [ i ] to 0	arr [ i ] = 0 ;
print N	cout << N << endl ;
a = integer array of size 100001	int a [ 100001 ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 1 to n + 1 exclusive , read a [ i ]	for ( int i = 1 ; i < n + 1 ; i ++ ) cin >> a [ i ] ;
res = long long with res = 0	long long res = 0 ;
t = integer	int t ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
for t = 1 , i + t < = n , t = t * 2	for ( t = 1 ; i + t <= n ; t *= 2 )
;	;
t = right shift t 1 place	t >>= 1 ;
res = res + a [ i ]	res += a [ i ] ;
a [ i + t ] = a [ i + t ] + a [ i ]	a [ i + t ] += a [ i ] ;
print res	cout << res << endl ;
create long long int n	long long int n ;
read n	cin >> n ;
create long long int a [ n + 5 ]	long long int a [ n + 5 ] ;
for i = 0 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
set c to 0	long long int c = 0 ;
for i = 0 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
set c to c + a [ i ]	c += a [ i ] ;
print c and a newline	cout << c << " \n " ;
j = 1	long long int j = 1 ;
while ( - 1 + j * 2 < n , set j to j * 2	while ( ( i - 1 ) + j * 2 < n ) j *= 2 ;
set a [ i + j ] to a [ i + j ] + a [ i ]	a [ i + j ] += a [ i ] ;
power2 is a long long function with long long arguments pow and mod	long long power2 ( long long pow , long long mod )
declare long longs res = 1ll and x = 2ll	long long res = 1ll , x = 2ll ;
while pow > 0	while ( pow > 0 )
if pow & 1 is true , set res to ( res * x ) modulo mod	if ( pow & 1 ) res = ( res * x ) % mod ;
pow > > = 1	pow >>= 1 ;
assign ( x * x ) modulo mod to x	x = ( x * x ) % mod ;
return res	return res ;
create long long n	long long n ;
read n	cin >> n ;
if n is true	if ( n )
declare long long M = 1 * 1000 * 1000 * 1000 + 7	long long M = 1 * 1000 * 1000 * 1000 + 7 ;
declare long long variable sol	long long sol ;
assign power2 ( 2 * n - 1 , M ) to sol	sol = power2 ( 2 * n - 1 , M ) ;
increase sol by power2 ( n - 1 , M )	sol += power2 ( n - 1 , M ) ;
sol = sol modulo M	sol %= M ;
print sol	cout << sol << endl ;
else	else
print 1	cout << 1 << endl ;
declare int variables a , n and p where p = 1000000007	int a , n , p = 1000000007 ;
long long function fastmod with long long arguments a and n	long long fastmod ( long long a , long long n )
if n is equal to 1 , return a	if ( n == 1 ) { return a ; }
declare long long variable ans = fastmod ( a , n / 2 ) modulo p	long long ans = fastmod ( a , n / 2 ) % p ;
if n is even	if ( n % 2 == 0 )
return ans % p * ans % p	return ans % p * ans % p ;
else {	else
return ans % p * ans % p * a % p	return ans % p * ans % p * a % p ;
declare long long variable k	long long k ;
read k	cin >> k ;
if k > = 2	if ( k >= 2 )
declare long long variable t = fastmod ( 2 , k - 1 )	long long t = fastmod ( 2 , k - 1 ) ;
print ( t + 2 * t * t % p ) % p	cout << ( t + 2 * t * t % p ) % p << endl ;
else if k = 1	else if ( k == 1 )
print 3	cout << 3 << endl ;
else	else
print 1	cout << 1 << endl ;
mod = constant long long with value of 1e9 + 7	const long long mod = 1e9 + 7 ;
in function qpow2 that returns a long long and takes argument p = long long	long long qpow2 ( long long p )
a = long long with value of 2	long long a = 2 ;
res = long long with value of 1	long long res = 1 ;
while p	while ( p )
if p bitwise and 1	if ( p & 1 )
set res to res * a	res *= a ;
set res to res modulo mod	res %= mod ;
set a to a * a	a *= a ;
set a to a modulo mod	a %= mod ;
set p to right shift p by 1	p >>= 1 ;
return res	return res ;
n = long long	long long n ;
read n	cin >> n ;
if n equals 0	if ( n == 0 )
print 1	cout << 1 << endl ;
else	else
print ( call qpow2 with argument n - 1 plus call qpow2 with argument 2 * n - 1 ) modulo mod	cout << ( qpow2 ( n - 1 ) + qpow2 ( 2 * n - 1 ) ) % mod << endl ;
oo = 1000000000 , MD = 1000000007	const int oo = 1e9 , MD = 1e9 + 7 ;
function fastExp ( get long long b and e , return long long )	long long fastExp ( long long b , long long e )
ans = 1	long long ans = 1 ;
while e > 0	while ( e > 0 )
if e and 1 ans = ( ans * b ) modulo MD	if ( e & 1 ) ans = ( ans * b ) % MD ;
b = ( b * b ) modulo MD	b = ( b * b ) % MD ;
right shift e	e >>= 1 ;
return ans	return ans ;
n = long long	long long n ;
read n	cin >> n ;
ans = ( fastExp ( 4 , n ) + fastExp ( 2 , n ) ) modulo MD	long long ans = ( fastExp ( 4 , n ) + fastExp ( 2 , n ) ) % MD ;
ans = ( ans * fastExp ( 2 , MD - 2 ) ) modulo MD	ans = ( ans * fastExp ( 2 , MD - 2 ) ) % MD ;
print ans	cout << ans << ' \n ' ;
mul is a long long function with long long arguments x and p	long long mul ( long long x , long long p )
declare long long ans = 1	long long ans = 1 ;
while p is not 0	while ( p )
if p & 1 ! = 0 , assign ans * x % 1000000007 to ans	if ( p & 1 ) ans = ans * x % 1000000007 ;
set x to x * x % 1000000007	x = x * x % 1000000007 ;
assign p > > 1 to p	p = p >> 1 ;
return ans	return ans ;
declare long long variable n	long long n ;
read n	cin >> n ;
if n is equal to 0	if ( n == 0 )
print 1	cout << 1 << endl ;
else	else
declare long long variable w = mul ( 2 , n - 1 ) % 1000000007	long long w = mul ( 2 , n - 1 ) % 1000000007 ;
print ( w + w * w % 1000000007 * 2 % 1000000007 ) % 1000000007	cout << ( w + w * w % 1000000007 * 2 % 1000000007 ) % 1000000007 << endl ;
MOD = 1000000007	long long MOD = 1e9 + 7 ;
mod = 1000000007	long long mod = 1e9 + 7 ;
N = 100005	const int N = 100005 ;
inv = array of 100005 long long	long long inv [ 100005 ] ;
function powmod ( get long long a and b , return long long )	long long powmod ( long long a , long long b )
res = 1	long long res = 1 ;
a = a modulo mod	a %= mod ;
while b = b > > 1	for ( ; b ; b >>= 1 )
if b and 1 multiply res by a modulo mod	if ( b & 1 ) res = res * a % mod ;
multiply a by a modulo mod	a = a * a % mod ;
return res	return res ;
n = long long	long long n ;
read n	cin >> n ;
inv [ 1 ] = 1	inv [ 1 ] = 1 ;
for i = 2 to N exclusive inv [ i ] = ( MOD - MOD / i ) * inv [ MOD modulo i ] modulo MOD	for ( int i = 2 ; i < N ; i ++ ) { inv [ i ] = ( MOD - MOD / i ) * inv [ MOD % i ] % MOD ; }
d = powmod ( 2 , n )	long long d = powmod ( 2 , n ) ;
ans = d * ( d + 1 ) modulo mod * inv [ 2 ] modulo mod	long long ans = d * ( d + 1 ) % mod * inv [ 2 ] % mod ;
print ans	cout << ans << endl ;
create constant long long INF with INF = ( 1ll bitshift left 62 ) - 1	const long long INF = ( 1ll << 62 ) - 1 ;
create constant long long M with M = 1e9 + 7	const long long M = 1e9 + 7 ;
declare modularExponentiation with long longs x , y as arguments , returning long long	long long modularExponentiation ( long long x , long long y )
create integer res with res = 1	int res = 1 ;
while y is greater than 0	while ( y > 0 )
if y bitwise and 1 , set res to ( res * x ) % M	if ( y & 1 ) res = ( res * x ) % M ;
set y to y bitshift right 1	y = y >> 1 ;
set x to ( x * x ) % M	x = ( x * x ) % M ;
return res from function	return res ;
create long long n	long long n ;
read n	cin >> n ;
create long long ans with ans = result of run modularExponentiation with 2 , n as arguments	long long ans = modularExponentiation ( 2 , n ) ;
set ans to ( ans + ( ans * ans ) ) / 2	ans = ( ans + ( ans * ans ) ) / 2 ;
print ans % M print newline	cout << ans % M << endl ;
n , a , b , c = int	int n , a , b , c ;
read n then a then b then c	cin >> n >> a >> b >> c ;
ans = int with ans = 0	int ans = 0 ;
for i = 0 to 4000 inclusive	for ( int i = 0 ; i <= 4000 ; i ++ )
for k = 0 to 4000 inclusive	for ( int k = 0 ; k <= 4000 ; k ++ )
sum = int with sum = a * i + b * k	int sum = a * i + b * k ;
if sum is greater than n then continue inner loop	if ( sum > n ) continue ;
if ( n - sum ) mod c equals 0 then set ans to max of ans and ( i + k + ( n - sum ) / c )	if ( ( n - sum ) % c == 0 ) { ans = max ( ans , ( i + k + ( n - sum ) / c ) ) ; }
print ans	cout << ans << ' \n ' ;
a = int array of size 3 with all values set to 0	int a [ 3 ] = { 0 } ;
dp = int array of size 10000	int dp [ 10000 ] ;
n = int	int n ;
read n then a [ 0 ] then a [ 1 ] then a [ 2 ]	cin >> n >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
set all values of dp to - 100	memset ( dp , - 100 , sizeof ( dp ) ) ;
set dp [ 0 ] to 0	dp [ 0 ] = 0 ;
for i = 0 to 3	for ( int i = 0 ; i < 3 ; i ++ )
for j = a [ i ] to n inclusive set dp [ j ] to max of dp [ j ] and dp [ j - a [ i ] ] + 1	for ( int j = a [ i ] ; j <= n ; j ++ ) { dp [ j ] = max ( dp [ j ] , dp [ j - a [ i ] ] + 1 ) ; }
print dp [ n ]	cout << dp [ n ] << endl ;
create ints n , a , b and c	int n , a , b , c ;
read n	cin >> n ;
declare integer array w with size 5	int w [ 5 ] ;
loop i from 1 to 3 inclusive , read input to w [ i ]	for ( int i = 1 ; i <= 3 ; i ++ ) cin >> w [ i ] ;
let e be int array with size 5000	int e [ 5000 ] ;
set sizeof ( e ) bytes at the pointer e to - 40	memset ( e , - 40 , sizeof ( e ) ) ;
assign 0 to e [ 0 ]	e [ 0 ] = 0 ;
loop i from 1 to 3 inclusive	for ( int i = 1 ; i <= 3 ; i ++ )
for j = w [ i ] to n inclusive , assign max of e [ j - w [ i ] ] + 1 and e [ j ] to e [ j ]	for ( int j = w [ i ] ; j <= n ; j ++ ) { e [ j ] = max ( e [ j - w [ i ] ] + 1 , e [ j ] ) ; }
print e [ n ]	cout << e [ n ] << endl ;
integers = a array that is size 4	int a [ 4 ] ;
integers = dp array size 4001	int dp [ 4001 ] ;
integers = n	int n ;
read n , a [ 1 ] , a [ 2 ] , a [ 3 ]	cin >> n >> a [ 1 ] >> a [ 2 ] >> a [ 3 ] ;
create memset dp with a size of dp	memset ( dp , - 42 , sizeof ( dp ) ) ;
set dp [ 0 ] to 0	dp [ 0 ] = 0 ;
for i = 1 to less than or equal to 3 do the following	for ( int i = 1 ; i <= 3 ; i ++ )
for j = a [ i ] to less than or equal to n then dp [ j ] = the maximum out of dp [ j ] and dp [ j - a [ i ] + 1	for ( int j = a [ i ] ; j <= n ; j ++ ) { dp [ j ] = max ( dp [ j ] , dp [ j - a [ i ] ] + 1 ) ; }
output dp [ n ]	cout << dp [ n ] << endl ;
let a be int array with size 3 fileld with 0	int a [ 3 ] = { 0 } ;
declare integer array dp with size 10000	int dp [ 10000 ] ;
declare integer variable n	int n ;
read input to n , a [ 0 ] , a [ 1 ] and a [ 2 ]	cin >> n >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
set sizeof ( dp ) bytes at the pointer dp to - 9999	memset ( dp , - 9999 , sizeof ( dp ) ) ;
set dp [ 0 ] to 0	dp [ 0 ] = 0 ;
loop i from 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
loop j from a [ i ] to n inclusive incrementing j , change dp [ j ] to max of dp [ j ] and dp [ j - a [ i ] ] + 1	for ( int j = a [ i ] ; j <= n ; j ++ ) { dp [ j ] = max ( dp [ j ] , dp [ j - a [ i ] ] + 1 ) ; }
print dp [ n ]	cout << dp [ n ] << endl ;
n , a , b , c = integers	int n , a , b , c ;
read n , a , b , c	cin >> n >> a >> b >> c ;
mx = integer with mx = - 1	int mx = - 1 ;
for i = n / a down to 0	for ( int i = n / a ; i >= 0 ; -- i )
for j = n / b down to 0	for ( int j = n / b ; j >= 0 ; -- j )
x = integer with x = n - ( i * a + j * b )	int x = n - ( i * a + j * b ) ;
if x modulo c is 0 and x > = 0 , mx = max of mx and i + j + x / c	if ( x % c == 0 and x >= 0 ) { mx = max ( mx , i + j + x / c ) ; }
print mx	cout << mx << endl ;
n , a , b , c = integers	int n , a , b , c ;
Read n , a , b , c	cin >> n >> a >> b >> c ;
res = integer with 0	int res = 0 ;
for i = 0 to n / a exclusive	for ( int i = 0 ; i <= n / a ; i ++ )
for i = 0 to n / b exclusive	for ( int j = 0 ; j <= n / b ; j ++ )
set k to n - i * a - j * b	int k = n - i * a - j * b ;
if k is greater than 0 and k modulo c is 0 , then set res to maximum value of res and i + j + k / c	if ( k >= 0 && k % c == 0 ) res = max ( res , i + j + k / c ) ;
print res and a new line	cout << res << " \n " ;
create integers n , a , b , c , max with max = 0	int n , a , b , c , max = 0 ;
read n read a read b read c	cin >> n >> a >> b >> c ;
for x = 0 to a * x is less than or equal to n , incrementing x	for ( int x = 0 ; a * x <= n ; x ++ )
for y = 0 to ( y * b ) + ( a * x ) is less than or equal to n , incrementing y	for ( int y = 0 ; ( y * b ) + ( a * x ) <= n ; y ++ )
create integer z with z = ( n - a * x - b * y ) / c	int z = ( n - a * x - b * y ) / c ;
if a * x + b * y + z * c is n	if ( a * x + b * y + z * c == n )
if x + y + z is greater than max , set max to x + y + z	if ( x + y + z > max ) max = x + y + z ;
print max print newline	cout << max << endl ;
let n , a , b , c be integers	int n , a , b , c ;
read n , a , b , c	cin >> n >> a >> b >> c ;
let x , y , z , p , i be integers with p = 0	int x , y , z , p = 0 , i ;
i is equal to minimum of a , minimum of b and c	i = min ( a , min ( b , c ) ) ;
i is equal to n / i	i = n / i ;
for x is equal to i , x > = 0 , decrease x by 1	for ( x = i ; x >= 0 ; x -- )
for y = 0 to i inclusive	for ( y = 0 ; y <= i ; y ++ )
z is equal to absolute value of ( n - ( a * x + b * y ) ) / c	z = abs ( ( n - ( a * x + b * y ) ) / c ) ;
if a * x + b * y + c * z is equal to n , p = maximum of p and x + y + z	if ( ( a * x + b * y + c * z ) == n ) { p = max ( p , x + y + z ) ; }
print p and newline	cout << p << endl ;
arr = integer array of size 5 , n = integer	int arr [ 5 ] , n ;
dp = integer array of size 4004 , mn = integer	int dp [ 4004 ] , mn ;
in the function fun that takes integer rem and returns integer	int fun ( int rem )
if rem is 0 , return 0	if ( rem == 0 ) return 0 ;
if rem < mn , return - 11111111	if ( rem < mn ) return - 11111111 ;
if dp [ rem ] is not - 1 , return dp [ rem ]	if ( dp [ rem ] != - 1 ) return dp [ rem ] ;
ret = integer with ret = - 11111111	int ret = - 11111111 ;
for i = 0 to 3 , ret = max ( ret , 1 + fun ( rem - arr [ i ] ) )	for ( int i = 0 ; i < 3 ; i ++ ) { ret = max ( ret , 1 + fun ( rem - arr [ i ] ) ) ; }
return dp [ rem ] = ret	return dp [ rem ] = ret ;
set all contents of dp to - 1	memset ( dp , - 1 , sizeof dp ) ;
read n	cin >> n ;
mn = 100000000	mn = 100000000 ;
for i = 0 to 2	for ( int i = 0 ; i < 3 ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
mn = min of arr [ i ] and mn	mn = min ( arr [ i ] , mn ) ;
print fun ( n )	cout << fun ( n ) << endl ;
create long longs n , a , b and c	long long n , a , b , c ;
let dp be 2d long long array with size 5006 by 5005	long long dp [ 5006 ] [ 5005 ] ;
long long function result with long long arguments total and cnt	long long result ( long long total , long long cnt )
if total = 0 return cnt	if ( total == 0 ) return cnt ;
declare long long variables d , e and f = 0	long long d = 0 , e = 0 , f = 0 ;
if dp [ total ] [ cnt ] is not - 1m return dp [ total ] [ cnt ]	if ( dp [ total ] [ cnt ] != - 1 ) return dp [ total ] [ cnt ] ;
if a < = total , assign result ( total - a , cnt + 1 ) to d	if ( a <= total ) d = result ( total - a , cnt + 1 ) ;
if b < = total , assign result ( total - b , cnt + 1 ) to e	if ( b <= total ) e = result ( total - b , cnt + 1 ) ;
if c < = total , assign result ( total - c , cnt + 1 ) to f	if ( c <= total ) f = result ( total - c , cnt + 1 ) ;
return dp [ total ] [ cnt ] = max of d and max ( e , f )	return dp [ total ] [ cnt ] = max ( d , max ( e , f ) ) ;
set value of sizeofdp bytes at the pointer dp to - 1	memset ( dp , - 1 , sizeof dp ) ;
read input to n , a , b and c	cin >> n >> a >> b >> c ;
declare long long variable ans = result ( n , 0 )	long long ans = result ( n , 0 ) ;
print ans	cout << ans << endl ;
create integer n , create integer array a with size 3	int n , a [ 3 ] ;
read n read a [ 0 ] read a [ 1 ] read a [ 2 ]	cin >> n >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ;
sort elements from a to a + 3	sort ( a , a + 3 ) ;
create integers i , j , k , ans with i = 0 , j = 0 , k = 0 , ans = - 1	int i = 0 , j = 0 , k = 0 , ans = - 1 ;
for i = 0 to a * a [ 2 ] is less than n + 1 , incrementing i	for ( i = 0 ; i * a [ 2 ] < n + 1 ; i ++ )
for j = 0 to i * a [ 2 ] + j * a [ 1 ] is less than n + 1 , incrementing j	for ( j = 0 ; i * a [ 2 ] + j * a [ 1 ] < n + 1 ; j ++ )
if ( n - i * a [ 2 ] - j * a [ 1 ] ) % a [ 0 ] is 0 , set ans to maximum of ans and i + j + ( n - i * a [ 2 ] - j * a [ 1 ] ) / a [ 0 ] )	if ( ( n - i * a [ 2 ] - j * a [ 1 ] ) % a [ 0 ] == 0 ) { ans = max ( ans , i + j + ( n - i * a [ 2 ] - j * a [ 1 ] ) / a [ 0 ] ) ; }
print ans print newline	cout << ans << endl ;
declare const int N = 4005	const int N = 4005 ;
declare const int inf = 1e9	const int inf = 1e9 ;
create const long long INF = 1e18	const long long INF = 1e18 ;
declare const double PI = acos ( - 1 . 0 )	const double PI = acos ( - 1.0 ) ;
declare const double EPS = 1e - 8	const double EPS = 1e-8 ;
create const int MOD = 1000000007	const int MOD = 1000000007 ;
declare integer variables n , a , b and c	int n , a , b , c ;
declare int array dp with size N	int dp [ N ] ;
read n , a , b and c	cin >> n >> a >> b >> c ;
loop i from 0 to n inclusive , assign - inf to dp [ i ]	for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] = - inf ;
assign 0 to dp [ 0 ]	dp [ 0 ] = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a < = i , set dp [ i ] to max of dp [ i ] and dp [ i - a ] + 1	if ( a <= i ) dp [ i ] = max ( dp [ i ] , dp [ i - a ] + 1 ) ;
if b < = i , assign max of dp [ i ] and dp [ i - b ] + 1 to dp [ i ]	if ( b <= i ) dp [ i ] = max ( dp [ i ] , dp [ i - b ] + 1 ) ;
if c < = i , change dp [ i ] to max of dp [ i ] and dp [ i - c ] + 1	if ( c <= i ) dp [ i ] = max ( dp [ i ] , dp [ i - c ] + 1 ) ;
print dp [ n ] and " \ n "	cout << dp [ n ] << " \n " ;
N = constant integer with N = 1e5 + 7	const int N = 1e5 + 7 ;
arr = array of size N	int arr [ N ] ;
n , a , b , c = integers	int n , a , b , c ;
read n , a , b , c	cin >> n >> a >> b >> c ;
set all contents of arr to 0 after casting to integer	memset ( arr , ( int ) ( 0 ) , sizeof ( arr ) ) ;
arr [ a ] = arr [ b ] = arr [ c ] = 1	arr [ a ] = arr [ b ] = arr [ c ] = 1 ;
for i = ( cast to integer ) ( 1 ) to ( cast to integer ) ( n )	for ( int i = ( int ) ( 1 ) ; i <= ( int ) ( n ) ; i ++ )
if i > = a and arr [ i - a ] , arr [ i ] = max ( arr [ i ] , arr [ i - a ] + 1 )	if ( i >= a and arr [ i - a ] ) arr [ i ] = max ( arr [ i ] , arr [ i - a ] + 1 ) ;
if i > = b and arr [ i - b ] , arr [ i ] = max ( arr [ i ] , arr [ i - b ] + 1 )	if ( i >= b and arr [ i - b ] ) arr [ i ] = max ( arr [ i ] , arr [ i - b ] + 1 ) ;
if i > = c and arr [ i - c ] , arr [ i ] = max ( arr [ i ] , arr [ i - c ] + 1 )	if ( i >= c and arr [ i - c ] ) arr [ i ] = max ( arr [ i ] , arr [ i - c ] + 1 ) ;
print arr [ n ]	cout << arr [ n ] << endl ;
p = array of 3 integers	int p [ 3 ] ;
dp = 2d array of size [ 4010 ] [ 4010 ]	bool dp [ 4000 + 10 ] [ 4000 + 10 ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 0 to 2 , read p [ i ]	for ( int i = 0 ; i < 3 ; i ++ ) cin >> p [ i ] ;
minp , maxp = integers with minp = min ( min ( p [ 0 ] , p [ 1 ] ) , p [ 2 ] ) , maxp = max ( max ( p [ 0 ] , p [ 1 ] ) , p [ 2 ] )	int minp = min ( min ( p [ 0 ] , p [ 1 ] ) , p [ 2 ] ) , maxp = max ( max ( p [ 0 ] , p [ 1 ] ) , p [ 2 ] ) ;
dp [ 0 ] [ 0 ] = true	dp [ 0 ] [ 0 ] = true ;
for i = minp to n	for ( int i = minp ; i <= n ; i ++ )
for k = 1 to i / minp	for ( int k = 1 ; k <= i / minp ; k ++ )
for j = 0 to 2	for ( int j = 0 ; j < 3 ; j ++ )
if i > = p [ j ] , dp [ i ] [ k ] = dp [ i ] [ k ] binary or dp [ i - p [ j ] ] [ k - 1 ]	if ( i >= p [ j ] ) dp [ i ] [ k ] |= dp [ i - p [ j ] ] [ k - 1 ] ;
for i = n / minp down to 1	for ( int i = n / minp ; i >= 1 ; i -- )
if dp [ n ] [ i ]	if ( dp [ n ] [ i ] )
print i	cout << i << endl ;
break loop	break ;
create integers a , b and c	int a , b , c ;
declare int array memo with size 4001	int memo [ 4001 ] ;
function solve with int argument i that returns integer	int solve ( int i )
if i = 0 , return 0	if ( i == 0 ) return 0 ;
if memo [ i ] ! = - 1 , return memo [ i ]	if ( memo [ i ] != - 1 ) return memo [ i ] ;
create integers opt1 , opt2 and opt3 = - 1e9	int opt1 = - 1e9 , opt2 = - 1e9 , opt3 = - 1e9 ;
if i > = a , change opt1 to solve ( i - a ) + 1	if ( i >= a ) { opt1 = solve ( i - a ) + 1 ; }
if i > = b , change opt2 to solve ( i - b ) + 1	if ( i >= b ) { opt2 = solve ( i - b ) + 1 ; }
if i > = c , change opt3 to solve ( i - c ) + 1	if ( i >= c ) { opt3 = solve ( i - c ) + 1 ; }
return memo [ i ] = max of opt1 and ( max of opt2 and opt3 )	return memo [ i ] = max ( opt1 , max ( opt2 , opt3 ) ) ;
set first sizeof memo bytes at the pointer memo to - 1	memset ( memo , - 1 , sizeof memo ) ;
declare integer variable n	int n ;
read n , a , b and c	cin >> n >> a >> b >> c ;
print result of solve ( n )	cout << solve ( n ) << endl ;
declare cut_ribbon with integers n , a , b , c as arguments	int cut_ribbon ( int n , int a , int b , int c )
create integer array arr with size n + 1	int arr [ n + 1 ] ;
set bytes from arr to size of arr to value 0	memset ( arr , 0 , sizeof ( arr ) ) ;
if a is less than or equal to n , set arr [ a ] to 1	if ( a <= n ) { arr [ a ] = 1 ; }
if b is less than or equal to n , set arr [ b ] to 1	if ( b <= n ) { arr [ b ] = 1 ; }
if c is less than or equal to n , set arr [ c ] to 1	if ( c <= n ) { arr [ c ] = 1 ; }
for i = 0 to n inclusive	for ( int i = 0 ; i <= n ; i ++ )
if i is greater than a and arr [ i - a ] is not 0 , set arr [ i ] to maximum of arr [ i ] and arr [ i - a ] + 1	if ( i > a && arr [ i - a ] != 0 ) { arr [ i ] = max ( arr [ i ] , arr [ i - a ] + 1 ) ; }
if i is greater than b and arr [ i - b ] is not 0 , set arr [ i ] to maximum of arr [ i ] and arr [ i - b ] + 1	if ( i > b && arr [ i - b ] != 0 ) { arr [ i ] = max ( arr [ i ] , arr [ i - b ] + 1 ) ; }
if i is greater than c and arr [ i - c ] is not 0 , set arr [ i ] to maximum of arr [ i ] and arr [ i - c ] + 1	if ( i > c && arr [ i - c ] != 0 ) { arr [ i ] = max ( arr [ i ] , arr [ i - c ] + 1 ) ; }
return arr [ n ] from function	return arr [ n ] ;
create integers n , a , b , c	int n , a , b , c ;
read n read a read b read c	cin >> n >> a >> b >> c ;
print result of run cut_ribbon with n , a , b , c as arguments , print newline	cout << cut_ribbon ( n , a , b , c ) << endl ;
x , y , r , ans = integers	int x , y , r , ans ;
read x , y , r	cin >> x >> y >> r ;
if 2 * r > min ( x , y )	if ( 2 * r > min ( x , y ) )
print Second	cout << " Second " << endl ;
else	else
print First	cout << " First " << endl ;
l , b , r = integers	int l , b , r ;
read l , b , r	cin >> l >> b >> r ;
d , plates = integers with d = 2 * r , plates = 0	int d = 2 * r , plates = 0 ;
if min ( l , b ) < d	if ( min ( l , b ) < d )
print Second	cout << " Second " << endl ;
else	else
print First	cout << " First " << endl ;
a , b , c = int	int a , b , c ;
read a then b then c	cin >> a >> b >> c ;
if a and b are both greater or equal to 2 * c	if ( a >= 2 * c && b >= 2 * c )
print " First "	cout << " First " ;
else	else
print " Second "	cout << " Second " ;
print newline	cout << endl ;
create constant integer MAXN with MAXN = 100000 + 7	const int MAXN = 100000 + 7 ;
create constant integer mod with mod = 23333333	const int mod = 23333333 ;
create integers a , b , r	int a , b , r ;
read a read b read r	cin >> a >> b >> r ;
if a is less than 2 * r or b is less than 2 * r	if ( a < 2 * r || b < 2 * r )
print " Second " print newline	cout << " Second " << endl ;
else	else
print " First " print newline	cout << " First " << endl ;
str = array of 30100 strings	string str [ 30100 ] ;
a , b , r = int	int a , b , r ;
read a , b , r	cin >> a >> b >> r ;
multiply r by 2	r *= 2 ;
if r < = a and r < = b	if ( r <= a && r <= b )
print " First "	puts ( " First " ) ;
else	else
print " Second "	puts ( " Second " ) ;
integers = t integer pi = 3 . 14	const int pi = 3.14 ;
integers = a , b , r	int a , b , r ;
read a , b , r	cin >> a >> b >> r ;
if 2 * r is greater than min ( a , b then do the following	if ( 2 * r > min ( a , b ) )
output Second	cout << " Second " << endl ;
else	else
integers = cnt = 0	int cnt = 0 ;
integers = ans = max ( a , b )	int ans = max ( a , b ) ;
integers = res = min ( a , b )	int res = min ( a , b ) ;
if 1 is true do the following	while ( 1 )
set ans to maximum of ans and res	ans = max ( ans , res ) ;
set res to minimum and ans and res	res = min ( ans , res ) ;
cnt equals cnt plus res / ( 2 * r )	cnt += res / ( 2 * r ) ;
subtract ( res / ( 2 * r ) ) * 2 * r from ans	ans -= ( res / ( 2 * r ) ) * 2 * r ;
integers = minn = minimum of ans or res	int minn = min ( ans , res ) ;
if minn is less than 2 * r then do the following break	if ( minn < 2 * r ) break ;
if cnt is greater than or equal to 1 then do the following	if ( cnt >= 1 )
output First	cout << " First " << endl ;
else	else
output Second	cout << " Second " << endl ;
n , k , l = long long integers	long long int n , k , l ;
input n , k , l	cin >> n >> k >> l ;
if 2 * l is less than or equal to minimum of n and k then do the following	if ( 2 * l <= min ( n , k ) )
output First	cout << " First " << endl ;
else	else
output Second	cout << " Second " << endl ;
a , b , r = integers	int a , b , r ;
Read a , b , r	cin >> a >> b >> r ;
if a is less than 2 * r OR b is less than 2 * r	if ( a < 2 * r || b < 2 * r )
print Second and a new line	cout << " Second\n " ;
else do the following	else
print First and a new line	cout << " First\n " ;
create integers n1 , n2 , r	int n1 , n2 , r ;
read n1 read n2 read r	cin >> n1 >> n2 >> r ;
create integer r2 with r2 = r + r	int r2 = r + r ;
if n1 is greater than or equal to r2 and n2 is greater than or equal to r2	if ( n1 >= r2 && n2 >= r2 )
print " First \ n "	cout << " First\n " ;
else	else
print " Second \ n "	cout << " Second\n " ;
a , b , r = int	int a , b , r ;
read a then b then r	cin >> a >> b >> r ;
set r to r * 2	r *= 2 ;
if a or b is less than r	if ( a < r || b < r )
print " Second "	cout << " Second " << endl ;
else	else
print " First "	cout << " First " << endl ;
create integers a , b , r , m	int a , b , r , m ;
read a read b read r	cin >> a >> b >> r ;
if a is greater than b	if ( a > b )
set m to b	m = b ;
else	else
set m to a	m = a ;
if m is greater than or equal to 2 * r	if ( m >= 2 * r )
print " First " print newline	cout << " First " << endl ;
else	else
print " Second " print newline	cout << " Second " << endl ;
a , b , r = integers	int a , b , r ;
Read a , b , r	cin >> a >> b >> r ;
if minimum value of a and b is greater than or equal to 2 * r	if ( min ( a , b ) >= 2 * r )
print First and a new line	cout << " First " << endl ;
else do the following	else
print Second and a new line	cout << " Second " << endl ;
create int min , height , width , radius	int min , height , width , radius ;
while read height , width , radius	while ( cin >> height >> width >> radius )
if heigth less than width	if ( height < width )
set min to height	min = height ;
else	else
min = width	min = width ;
assign radius * 2 to radius	radius = radius * 2 ;
if min > = radius	if ( min >= radius )
print First	cout << " First " << endl ;
else	else
print Second	cout << " Second " << endl ;
define ints a , b , and r	int a , b , r ;
read a , b , r	cin >> a >> b >> r ;
if 2 r < = a and 2 r < = b	if ( 2 * r <= a && 2 * r <= b )
print First and newline	cout << " First\n " ;
else . . .	else
print Second followed by newline	cout << " Second\n " ;
integers = a , b , r	int a , b , r ;
read a , b , r	cin >> a >> b >> r ;
multiply r by 2	r *= 2 ;
if r is greater than minimum of a or b then proceed with the following	if ( r > min ( a , b ) )
output Second	cout << " Second " << ' \n ' ;
else	else
output First	cout << " First " << ' \n ' ;
define ints n , a , b , c	int n , a , b , c ;
read a , b , c	cin >> a >> b >> c ;
if a < c * 2 or b < c * 2	if ( a < c * 2 || b < c * 2 )
print " Second " and newline	cout << " Second " << endl ;
otherwise	else
print " First " and a newline	cout << " First " << endl ;
n , m , r = integers	int n , m , r ;
while read n , m , r	while ( cin >> n >> m >> r )
if r * 2 < = n and r * 2 < = m	if ( r * 2 <= n && r * 2 <= m )
print First	cout << " First " << endl ;
else	else
print Second	cout << " Second " << endl ;
a , b , r = integers	int a , b , r ;
Read a , b , r	cin >> a >> b >> r ;
if a is less than r * 2 OR b is less than r * 2	if ( a < r * 2 || b < r * 2 )
print Second and a new line	cout << " Second " << endl ;
else do the following	else
print First and a new line	cout << " First " << endl ;
create integers a , b , r	int a , b , r ;
read a read b read r	cin >> a >> b >> r ;
if a is greater than or equal to b	if ( a >= b )
if ( 2 * r is less than or equal to b )	if ( 2 * r <= b )
print " First \ n "	cout << " First\n " ;
else	else
print " Second \ n "	cout << " Second\n " ;
else	else
if ( 2 * r is less than or equal to a )	if ( 2 * r <= a )
print " First \ n "	cout << " First\n " ;
else	else
print " Second \ n "	cout << " Second\n " ;
x , y , r = integers	int x , y , r ;
read x , y , r	cin >> x >> y >> r ;
if x < r * 2 or y < r * 2	if ( x < r * 2 || y < r * 2 )
print Second	cout << " Second\n " ;
else	else
print First	cout << " First\n " ;
create long long int mod = 1000000007	long long int mod = 1000000007 ;
let a , b and r be integers	int a , b , r ;
read a , b and r	cin >> a >> b >> r ;
if 2 * r is greater than min ( a , b )	if ( 2 * r > min ( a , b ) )
print Second	cout << " Second " << endl ;
else	else
print First	cout << " First " << endl ;
a , b , r = integers	int a , b , r ;
read a , b , r	cin >> a >> b >> r ;
if 2 * r < = min ( a , b )	if ( 2 * r <= min ( a , b ) )
print First	cout << " First " << endl ;
else	else
print Second	cout << " Second " << endl ;
let k , b , n , t be long integers	long long k , b , n , t ;
read k , b , n , t	cin >> k >> b >> n >> t ;
let the value of long integer z is equal to k + b	long long z = k + b ;
let g be a integer with value g is equal to n	int g = n ;
while ( z is less than t and g is greater than 0 )	while ( z < t && g > 0 )
decrease g by 1	g -- ;
let the value of z is equal to z * k + b	z = z * k + b ;
if ( z is equal to t ) , decrease g by 1	if ( z == t ) { g -- ; }
print g and newline	cout << g << endl ;
create long long u = 1	long long u = 1 ;
create long long k , b , n and t	long long k , b , n , t ;
read k , b , n and t	cin >> k >> b >> n >> t ;
if k = 1	if ( k == 1 )
create long long x = 1	long long x = 1 ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ ) x += b ;
create long long variable r = t	long long r = t ;
create long long variable ans = 0	long long ans = 0 ;
while r is less than x	while ( r < x )
increase ans by one	ans ++ ;
increase r by b	r += b ;
print ans	cout << ans << endl ;
create long long r = 0	long long r = 0 ;
while u * ( k - 1 + b ) < = ( k * t - t + b )	while ( u * ( k - 1 + b ) <= ( k * t - t + b ) )
multiply u by k	u *= k ;
increase r by one	r ++ ;
print max of n - r + 1 and 0LL	cout << max ( n - r + 1 , 0LL ) << endl ;
l , b , n , t = long long	long long k , b , n , t ;
read k , b , n , t	cin >> k >> b >> n >> t ;
set x = 1 and cnt = - 1	long long x = 1 , cnt = - 1 ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; ++ i )
set x = k * x + b	x = k * x + b ;
if x is greater than t	if ( x > t )
set cnt = i - 1	cnt = i - 1 ;
stop the loop	break ;
if cnt is equal to - 1	if ( cnt == - 1 )
print 0	cout << 0 << endl ;
otherwise	else
print n - cnt	cout << n - cnt << endl ;
create long long k , b , n , z	long long k , b , n , z ;
read k , b , n and z	cin >> k >> b >> n >> z ;
set x = 1	int x = 1 ;
while n and k * x + b equal to or greater than z	while ( n && k * x + b <= z )
assign k * x + b to x	x = k * x + b ;
decrement n	n -- ;
print n and a new line	cout << n << endl ;
k , b , n , t , ans = integers	int k , b , n , t , ans ;
assign 1 to m	long long m = 1 ;
read k , b , n , t	cin >> k >> b >> n >> t ;
while m equal to or greater than t , assign m * k + b to m , increment ans	while ( m <= t ) m = m * k + b , ans ++ ;
if n > = ans	if ( n >= ans )
print n - ans + 1	cout << n - ans + 1 << endl ;
otherwise	else
print 0 and a new line	cout << 0 << endl ;
declare double variables k , b , n and t	double k , b , n , t ;
read k , b , n and t	cin >> k >> b >> n >> t ;
declare integer x = 0	int x = 0 ;
declare double variable dub = ( t * ( k - 1 ) + b ) / ( b + k - 1 )	double dub = ( t * ( k - 1 ) + b ) / ( b + k - 1 ) ;
if k = 1	if ( k == 1 )
dub = ( t - 1 ) / b	dub = ( t - 1 ) / b ;
set value of x to dub casted to integer	x = ( int ) dub ;
if x is greater than n	if ( x > n ) { x = n ; }
else	else
for i = 1 to n + 1 inclusive	for ( int i = 1 ; i <= n + 1 ; i ++ )
if pow ( k , i ) > = dub + 1	if ( pow ( k , i ) >= ( int ) dub + 1 )
set value of x to i - 1	x = i - 1 ;
stop the loop	break ;
if i = n + 1 , assign value of n to x	if ( i == n + 1 ) { x = n ; }
create integer ans = n - x	int ans = n - x ;
print ans	cout << ans << endl ;
let c1 , c2 , x , k , i , b , n , t , cnt be long long with cnt = 0	long long c1 , c2 , x , k , i , b , n , t , cnt = 0 ;
read k , b , n , t	cin >> k >> b >> n >> t ;
set c1 = b + t * ( k - 1 )	c1 = b + t * ( k - 1 ) ;
set c2 = b + k - 1	c2 = b + k - 1 ;
set cnt = 1	cnt = 1 ;
set x = n	x = n ;
if k not equal to 1 do the following	if ( k != 1 )
for i = n iterate while i is less than or equal to 0 having i decrease by 1 after each iteration	for ( i = n ; i >= 0 ; i -- )
if c1 is greater or equal to cnt * c2 do the following	if ( c1 >= cnt * c2 )
set x = i	x = i ;
else do the following	else
break out of the iteration loop	break ;
set cnt = cnt * k	cnt *= k ;
print x and one newline	cout << x << endl ;
else do the following	else
for i = 0 to n inclusive	for ( i = 0 ; i <= n ; i ++ )
if i * b is greater or equal to 1 + n * b - t break out of the iteration loop	if ( i * b >= 1 + n * b - t ) break ;
print i and one newline	cout << i << endl ;
in the function solve that takes long long k , b , n , t and returns long long	long long solve ( long long k , long long b , long long n , long long t )
if k is 1	if ( k == 1 )
low , high = long long with low = - 1 , high = n	long long low = - 1 , high = n ;
while high - low > 1	while ( high - low > 1 )
mid = long long with mid = ( low + high ) / 2	long long mid = ( low + high ) / 2 ;
if 1 - t + b * ( n - mid ) < = 0	if ( 1 - t + b * ( n - mid ) <= 0 )
high = mid	high = mid ;
else	else
low = mid	low = mid ;
return high	return high ;
answ = long long with answ = n	long long answ = n ;
pow = __float128 with pow = 1	__float128 pow = 1 ;
while answ > 0 and ( k - 1 ) * ( pow * k - t ) + b * ( pow * k - 1 ) < = 0	while ( answ > 0 && ( k - 1 ) * ( pow * k - t ) + b * ( pow * k - 1 ) <= 0 )
pow = pow * k	pow *= k ;
decrement answ	answ -- ;
return answ	return answ ;
k , b , n , t = long long	long long k , b , n , t ;
while read k , b , n , t , print solve ( k , b , n , t )	while ( cin >> k >> b >> n >> t ) { cout << solve ( k , b , n , t ) << endl ; }
k , b , n , t , i , j , m , ans , r , x , xx = long long int with m = 0 , x = 1 , xx = 0	long long int k , b , n , t , i , j , m = 0 , ans , r , x = 1 , xx = 0 ;
read k , b , n , t	cin >> k >> b >> n >> t ;
for i = 1 increment i	for ( i = 1 ; ; i ++ )
r = ( x * k ) + b	r = ( x * k ) + b ;
if r < = t	if ( r <= t )
increment m	m ++ ;
else	else
break loop	break ;
x = r	x = r ;
ans = n - m	ans = n - m ;
ans = max of xx and ans	ans = max ( xx , ans ) ;
print ans	cout << ans << endl ;
create long long integers k , b , n and t	long long int k , b , n , t ;
read k , b , n and t	cin >> k >> b >> n >> t ;
declare long long integer variable num = 1	long long int num = 1 ;
declare long long integer variable index = 0	long long int index = 0 ;
while num < = t	while ( num <= t )
num = k * num + b	num = k * num + b ;
increment index	index ++ ;
decrease index	index -- ;
print max of 0ll and n - index and ' \ n '	cout << max ( 0ll , n - index ) << ' \n ' ;
set constant integer M = 100 + 10	const int M = 100 + 10 ;
create long long integer k , b , n , t	long long int k , b , n , t ;
read k , b , n , t	cin >> k >> b >> n >> t ;
if k = 1	if ( k == 1 )
set z = 1 + n * b	long long int z = 1 + n * b ;
if z is equal to or less than t	if ( z <= t )
print 0	cout << " 0 " << endl ;
otherwise	else
set res = z - t	long long int res = z - t ;
ans = res / b + ( res modulo b different from 0 )	long long int ans = res / b + ( res % b != 0 ) ;
print and and a new line	cout << ans << endl ;
otherwise	else
set long long integer num1 = t * ( k - 1 ) + b	long long int num1 = t * ( k - 1 ) + b ;
num2 = k - 1 + b	long long int num2 = k - 1 + b ;
set num3 = num1 / num2	long long int num3 = num1 / num2 ;
set num1 equal to 1	long long int num = 1 ;
set integer tm = 0	int tm = 0 ;
while num * k is equal to or less than num3	while ( num * k <= num3 )
set num = num * k	num = num * k ;
increment tm	tm ++ ;
set m = n - tm	int m = n - tm ;
m = max between m and 0	m = max ( m , 0 ) ;
print m	cout << m << endl ;
create long long ans , set k , b , n , t , x to 1	long long k , b , n , t , x = 1 , ans ;
read k , b , n and t	cin >> k >> b >> n >> t ;
while x < = t , set x = x * k + b , increment ans	while ( x <= t ) x = x * k + b , ans ++ ;
print max between 011 and n - ans + 1	cout << max ( 0ll , n - ans + 1 ) << endl ;
k , b , n , t = long longs	long long k , b , n , t ;
read k , b , n and t	cin >> k >> b >> n >> t ;
declare cnt as long long set to 1	long long cnt = 1 ;
while c less than or equal to t	while ( cnt <= t )
set cnt to cnt * k + b	cnt = cnt * k + b ;
decrement n	n -- ;
print max ( 0LL , n + 1 )	cout << max ( 0LL , n + 1 ) << endl ;
long long function bigmod with long long arguments a , b and m	long long bigmod ( long long a , long long b , long long m )
if b = 0	if ( b == 0 ) return 1 % m ;
x = bigmod of a , b / 2 and m	long long x = bigmod ( a , b / 2 , m ) ;
x = ( x % m * x % m ) % m	x = ( x % m * x % m ) % m ;
if b % 2 ) x = ( x % m * a % m	if ( b % 2 ) x = ( x % m * a % m ) % m ;
return x % m	return x % m ;
long long function po with long long arguments a and b	long long po ( long long a , long long b )
return 1 if a = 1	if ( a == 1 ) return 1 ;
declare long long r = 1	long long r = 1 ;
decrement b and loop , while b > 0 ; multiply r by a in that loop	while ( b -- ) r *= a ;
return r	return r ;
declare long long variables k , b , n , t and s where s = 0	long long k , b , n , t , s = 0 ;
read k , b , n and t	cin >> k >> b >> n >> t ;
for i = 0 to n inclusive	for ( int i = 0 ; i <= n ; i ++ )
assign value of s + po ( k , i ) to new long long v	long long v = s + po ( k , i ) ;
if v > = t	if ( v >= t )
if v is greater than t	if ( v > t )
print n - i + 1	cout << n - i + 1 << endl ;
else	else
print n - i	cout << n - i << endl ;
increase s by b * po ( k , i )	s += b * po ( k , i ) ;
print " 0 "	puts ( " 0 " ) ;
k , b , n , t = integers	long long k , b , n , t ;
Read k , b , n , t	cin >> k >> b >> n >> t ;
sum = integer with 1	long long sum = 1 ;
cnt = integer with 0	int cnt = 0 ;
while sum is less than or equal to t	while ( sum <= t )
set sum to sum * k + b	sum = sum * k + b ;
increment cnt	cnt ++ ;
if cnt is greater than n	if ( cnt > n )
print 0 and a new line	cout << 0 << endl ;
else do the following	else
print n - cnt + 1 and a new line	cout << n - cnt + 1 << endl ;
long long function solve with long long arguments k , b , n and t	long long solve ( long long k , long long b , long long n , long long t )
if k = 1	if ( k == 1 )
declare long longs low = - 1 and high = n	long long low = - 1 , high = n ;
while high - low is greater than 1	while ( high - low > 1 )
declare long long variable mid = ( low + high ) / 2	long long mid = ( low + high ) / 2 ;
if 1 - t + b * ( n - mid ) < = 0	if ( 1 - t + b * ( n - mid ) <= 0 )
assign value of mid to high	high = mid ;
else	else
assign value of mid to low	low = mid ;
return high	return high ;
declare long long variable answ = n	long long answ = n ;
declare __float128 variable pow = 1	__float128 pow = 1 ;
while answ > 0 & & ( k - 1 ) * ( pow * k - t ) + b * ( pow * k - 1 ) < = 0	while ( answ > 0 && ( k - 1 ) * ( pow * k - t ) + b * ( pow * k - 1 ) <= 0 )
multiply pow by k	pow *= k ;
decrease answ	answ -- ;
return answ	return answ ;
declare long long variables k , b , n and t	long long k , b , n , t ;
while car read k , b , n and t , print solve ( k , b , n , t )	while ( cin >> k >> b >> n >> t ) { cout << solve ( k , b , n , t ) << endl ; }
point , num_diff and num are maps from string to int	map < string , int > point , num_diff , num ;
declare string variable s	string s ;
name is an array of strings with size 56	string name [ 56 ] ;
boolean function cmp with string arguments s1 and s2	bool cmp ( string s1 , string s2 )
if point [ s1 ] ! = point [ s2 ] return point [ s1 ] > point [ s2 ]	if ( point [ s1 ] != point [ s2 ] ) return point [ s1 ] > point [ s2 ] ;
if num_diff [ s1 ] ! = num_diff [ s2 ] return num_diff [ s1 ] > num_diff [ s2 ]	if ( num_diff [ s1 ] != num_diff [ s2 ] ) return num_diff [ s1 ] > num_diff [ s2 ] ;
return num [ s1 ] > num [ s2 ]	return num [ s1 ] > num [ s2 ] ;
let s1 and s2 be strings	string s1 , s2 ;
declare integer variable n	int n ;
num1 and num2 are integers	int num1 , num2 ;
c = character	char c ;
read n	cin >> n ;
for i = 1 to n inclusive read name [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> name [ i ] ; }
for integer i = 1 to ( n * ( n - 1 ) ) > > 1 inclusive	for ( int i = 1 ; i <= ( n * ( n - 1 ) ) >> 1 ; i ++ )
read s , num1 , c and num2	cin >> s >> num1 >> c >> num2 ;
s1 = substring of s from the start to the first character ' - '	s1 = s . substr ( 0 , s . find ( " - " ) ) ;
s2 = substring of s from the first character ' - ' to the end	s2 = s . substr ( s . find ( " - " ) + 1 ) ;
if num1 is greater than num2 , add 3 to point [ s1 ]	if ( num1 > num2 ) { point [ s1 ] += 3 ; }
if num1 is less than num2 , add 3 to point [ s2 ]	if ( num1 < num2 ) { point [ s2 ] += 3 ; }
if num1 = num2	if ( num1 == num2 )
increase point [ s1 ]	point [ s1 ] ++ ;
increase point [ s2 ]	point [ s2 ] ++ ;
increase num [ s1 ] by num1	num [ s1 ] += num1 ;
increase num [ s2 ] by num2	num [ s2 ] += num2 ;
increase num_diff [ s1 ] by num1 - num2	num_diff [ s1 ] += num1 - num2 ;
increase num_diff [ s2 ] by num2 - num1	num_diff [ s2 ] += num2 - num1 ;
sort name from name + 1 to name + n + 1 using comparator cmp	sort ( name + 1 , name + n + 1 , cmp ) ;
sort name from name + 1 to name + ( n / 2 + 1 ) using comparator cmp	sort ( name + 1 , name + ( n / 2 + 1 ) ) ;
for integer i = 1 to ( n > > 1 ) inclusive print name [ i ] and a new line	for ( int i = 1 ; i <= ( n >> 1 ) ; i ++ ) { cout << name [ i ] << endl ; }
scored , conceed , points are maps of string to int	map < string , int > scored , conceed , points ;
vec and a are vectors of strings	vector < string > vec , a ;
boolean function cmp with string arguments a and b	bool cmp ( string a , string b )
if points [ b ] is greater than points [ a ]	if ( points [ b ] > points [ a ] )
return 1	return 1 ;
else if points [ b ] is less than points [ a ]	else if ( points [ b ] < points [ a ] )
else	else
dif1 is an integer = scored [ a ] - conceed [ a ]	int dif1 = scored [ a ] - conceed [ a ] ;
dif2 is an integer = scored [ b ] - conceed [ b ]	int dif2 = scored [ b ] - conceed [ b ] ;
if dif1 is less than dif2	if ( dif1 < dif2 )
return 1	return 1 ;
else if dif1 is greater than dif2	else if ( dif1 > dif2 )
else	else
if scored [ a ] is greater than scored [ b ]	if ( scored [ a ] > scored [ b ] )
else if scored [ a ] is less than scored [ b ]	else if ( scored [ a ] < scored [ b ] )
return 1	return 1 ;
set integer n to 0	int n = 0 ;
st = string	string st ;
read n	cin >> n ;
m and k are integers with m = n and k = n / 2	int m = n , k = n / 2 ;
while m - -	while ( m -- )
read st	cin >> st ;
push st into vec	vec . push_back ( st ) ;
n = ( n * n - 1 ) / 2	n = ( n * n - 1 ) / 2 ;
st = " "	st = "  " ;
read character from the input	getchar ( ) ;
while n - -	while ( n -- )
let i be integer	int i ;
team1 and team2 are empty strings	string team1 = "  " , team2 = "  " ;
read line from input into st	getline ( cin , st ) ;
for i = 0 to length of st exclusive	for ( i = 0 ; i < st . size ( ) ; i ++ )
if st [ i ] is equal to ' - '	if ( st [ i ] == ' - ' )
increase i by one	i ++ ;
break the loop	break ;
increase team1 by st [ i ]	team1 += st [ i ] ;
loop through i while i < length of st , incrementing i	for ( ; i < st . size ( ) ; i ++ )
if st [ i ] is equal to ' '	if ( st [ i ] == '   ' )
increase i	i ++ ;
stop the loop	break ;
increase team2 by st [ i ]	team2 += st [ i ] ;
let j and sum1 be integers with j = 1 and sum1 = 0	int j = 1 , sum1 = 0 ;
loop through i while i < length of st , incrementing i	for ( ; i < st . size ( ) ; i ++ )
if st [ i ] is equal to ' : '	if ( st [ i ] == ' : ' )
increase i by one	i ++ ;
break the loop	break ;
create integer c with value st [ i ] - 48	int c = st [ i ] - 48 ;
sum1 = ( sum1 * j ) + c	sum1 = ( sum1 * j ) + c ;
multiply j by 10	j *= 10 ;
increase scored [ team1 ] by sum1	scored [ team1 ] += sum1 ;
increase conceed [ team2 ] by sum1	conceed [ team2 ] += sum1 ;
create integer sum2 with value 0	int sum2 = 0 ;
set value of j to 1	j = 1 ;
loop through i while i < length of st , incrementing i	for ( ; i < st . size ( ) ; i ++ )
create integer c with value st [ i ] - 48	int c = st [ i ] - 48 ;
sum2 = ( sum2 * j ) + c	sum2 = ( sum2 * j ) + c ;
multiply j by 10	j *= 10 ;
increase scored [ team2 ] by sum2	scored [ team2 ] += sum2 ;
increase conceed [ team1 ] by sum2	conceed [ team1 ] += sum2 ;
if sum1 is greater than sum2	if ( sum1 > sum2 )
increase points [ team1 ] by 3	points [ team1 ] += 3 ;
else if sum1 is less than sum2	else if ( sum1 < sum2 )
increase points [ team2 ] by 3	points [ team2 ] += 3 ;
else	else
increment points [ team1 ]	points [ team1 ] ++ ;
increment points [ team2 ]	points [ team2 ] ++ ;
sort vec using cmp as comparator function	sort ( vec . begin ( ) , vec . end ( ) , cmp ) ;
for i = length of vec - 1 to k inclusive , decrementing i , push i into vec	for ( int i = vec . size ( ) - 1 ; i >= k ; i -- ) a . push_back ( vec [ i ] ) ;
sort a	sort ( a . begin ( ) , a . end ( ) ) ;
for i = 0 to length of a exclusive print a [ i ]	for ( int i = 0 ; i < a . size ( ) ; i ++ ) cout << a [ i ] << endl ;
create maps pt , sc , mi from string to integer	map < string , int > pt , sc , mi ;
create string array name with size 50	string name [ 50 ] ;
declare cmp with strings s1 , s2 as arguments , returning boolean	bool cmp ( string s1 , string s2 )
if pt [ s1 ] is not pt [ s2 ] , return pt [ s1 ] is greater than pt [ s2 ] from function	if ( pt [ s1 ] != pt [ s2 ] ) return pt [ s1 ] > pt [ s2 ] ;
if mi [ s1 ] is not mi [ s2 ]	if ( mi [ s1 ] != mi [ s2 ] )
return mi [ s1 ] is greater than mi [ s2 ] from function	return mi [ s1 ] > mi [ s2 ] ;
else	else
return sc [ s1 ] is greater than sc [ s2 ] from function	return sc [ s1 ] > sc [ s2 ] ;
create integer n	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read name [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> name [ i ] ;
discard characters from stdin	cin . ignore ( ) ;
for i = 0 to n * ( n - 1 ) / 2 exclusive	for ( int i = 0 ; i < n * ( n - 1 ) / 2 ; i ++ )
create strings A , B	string A , B ;
read line from cin to A with ' - ' as delimiter	getline ( cin , A , ' - ' ) ;
read line from cin to B with ' ' as delimiter	getline ( cin , B , '   ' ) ;
create character ch	char ch ;
create integers pA , pB	int pA , pB ;
read pA read ch read pB	cin >> pA >> ch >> pB ;
discard characters from stdin	cin . ignore ( ) ;
if pA is less than pB , increment pt [ B ] by 3	if ( pA < pB ) pt [ B ] += 3 ;
if pA is greater than pB , increment pt [ A ] by 3	if ( pA > pB ) pt [ A ] += 3 ;
if pA is pB , increment pt [ A ] , increment pt [ B ]	if ( pA == pB ) pt [ A ] ++ , pt [ B ] ++ ;
increment sc [ A ] by pA	sc [ A ] += pA ;
increment mi [ A ] by pA - pB	mi [ A ] += pA - pB ;
increment sc [ B ] by pB	sc [ B ] += pB ;
increment mi [ B ] by pB - pA	mi [ B ] += pB - pA ;
sort elements from name to name + n using cmp function to compare	sort ( name , name + n , cmp ) ;
sort elements from name to name + n / 2	sort ( name , name + n / 2 ) ;
for i = 0 to n / 2 exclusive , print name [ i ] print newline	for ( int i = 0 ; i < n / 2 ; i ++ ) cout << name [ i ] << endl ;
n = int , wp , dg and sg = array of 55 int	int n , wp [ 55 ] , dg [ 55 ] , sg [ 55 ] ;
name = array of 55 string	string name [ 55 ] ;
function cmp ( get int a and b , return bool )	bool cmp ( int a , int b )
if wp [ a ] is not wp [ b ] return wp [ a ] > wp [ b ]	if ( wp [ a ] != wp [ b ] ) { return wp [ a ] > wp [ b ] ; }
if dg [ a ] is not dg [ b ] return dg [ a ] > dg [ b ]	if ( dg [ a ] != dg [ b ] ) { return dg [ a ] > dg [ b ] ; }
return sg [ a ] > sg [ b ]	return sg [ a ] > sg [ b ] ;
read n	cin >> n ;
for i = 0 to n exclusive read name [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> name [ i ] ; }
for i = 0 to n * ( n - 1 ) / 2 exclusive	for ( int i = 0 ; i < n * ( n - 1 ) / 2 ; i ++ )
s , a , b = string	string s , a , b ;
p , q = int	int p , q ;
c = char	char c ;
read s , p , c , q	cin >> s >> p >> c >> q ;
a = left portion of s before ' - '	a = s . substr ( 0 , s . find ( ' - ' ) ) ;
b = right portion of s after ' - '	b = s . substr ( s . find ( ' - ' ) + 1 ) ;
a1 = find ( name , name + n , a ) - name , b1 = find ( name , name + n , b ) - name	int a1 = find ( name , name + n , a ) - name , b1 = find ( name , name + n , b ) - name ;
if p > q	if ( p > q )
add 3 to wp [ a1 ]	wp [ a1 ] += 3 ;
else if q is p	else if ( q == p )
increment wp [ a1 ]	wp [ a1 ] ++ ;
increment wp [ b1 ]	wp [ b1 ] ++ ;
else	else
add 3 to wp [ b1 ]	wp [ b1 ] += 3 ;
add p - q to dg [ a1 ]	dg [ a1 ] += p - q ;
add p to sg [ a1 ]	sg [ a1 ] += p ;
add q - p to dg [ b1 ]	dg [ b1 ] += q - p ;
add q to sg [ b1 ]	sg [ b1 ] += q ;
a = array of 55 int	int a [ 55 ] ;
for i = 0 to n exclusive a [ i ] = i	for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = i ; }
sort first n items of a using function cmp	sort ( a , a + n , cmp ) ;
ans = array of 55 string	string ans [ 55 ] ;
for i = 0 to n / 2 exclusive ans [ i ] = name [ a [ i ] ]	for ( int i = 0 ; i < n / 2 ; i ++ ) { ans [ i ] = name [ a [ i ] ] ; }
sort first n / 2 items of ans	sort ( ans , ans + n / 2 ) ;
for i = 0 to n / 2 exclusive print ans [ i ]	for ( int i = 0 ; i < n / 2 ; i ++ ) { cout << ans [ i ] << endl ; }
create string array nam of size 50	string nam [ 50 ] ;
let int n and int arrays wp of size 50 , dg of size 50 , and sg of size 50	int n , wp [ 50 ] , dg [ 50 ] , sg [ 50 ] ;
declare comp taking in ints a and b and returning bool	bool comp ( int a , int b )
if wp [ a ] is not equal to wp [ b ]	if ( wp [ a ] != wp [ b ] )
return wp [ a ] > wp [ b ]	return wp [ a ] > wp [ b ] ;
else if dg [ a ] is not equal to dg [ b ]	else if ( dg [ a ] != dg [ b ] )
return the result of dg [ a ] > dg [ b ]	return dg [ a ] > dg [ b ] ;
else do	else
return sg [ a ] > sg [ b ]	return sg [ a ] > sg [ b ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read nam [ i ]	for ( int i = 0 ; i < ( int ) ( n ) ; i ++ ) cin >> nam [ i ] ;
for i = 0 to n * ( n - 1 ) / 2 exclusive	for ( int i = 0 ; i < ( int ) ( n * ( n - 1 ) / 2 ) ; i ++ )
create strings tmp , a , and b	string tmp , a , b ;
make ints p and q	int p , q ;
create char c	char c ;
read tmp , p , c , and q	cin >> tmp >> p >> c >> q ;
set a to tmp . substr ( 0 , tmp . find ( ' - ' ) )	a = tmp . substr ( 0 , tmp . find ( ' - ' ) ) ;
set b to tmp . substr ( tmp . find ( ' - ' ) + 1 )	b = tmp . substr ( tmp . find ( ' - ' ) + 1 ) ;
create ints ai = find ( nam , nam + n , a ) - nam and bi = find ( nam , nam + n , b ) - nam	int ai = find ( nam , nam + n , a ) - nam , bi = find ( nam , nam + n , b ) - nam ;
if p is more than q	if ( p > q )
set wp [ ai ] to wp [ ai ] + 3	wp [ ai ] += 3 ;
else if p is less than q	else if ( p < q )
set wp [ bi ] to wp [ bi ] + 3	wp [ bi ] += 3 ;
else	else
add 1 to wp [ ai ] and ap [ bi ]	wp [ ai ] ++ , wp [ bi ] ++ ;
set dg [ ai ] to ad [ ai ] + p - q , add p to sg [ ai ] , add q - p to dg [ bi ] , and add q to sg [ bi ]	dg [ ai ] += p - q , sg [ ai ] += p , dg [ bi ] += q - p , sg [ bi ] += q ;
create integer array a of size 50	int a [ 50 ] ;
for i = 0 to n exclusive , set a [ i ] to i	for ( int i = 0 ; i < ( int ) ( n ) ; i ++ ) a [ i ] = i ;
sort a using a + n and comp	sort ( a , a + n , comp ) ;
create string array names of size 50	string names [ 50 ] ;
for i = 0 to n / 2 exclusive , set names [ i ] to nam [ a [ i ] ]	for ( int i = 0 ; i < ( int ) ( n / 2 ) ; i ++ ) names [ i ] = nam [ a [ i ] ] ;
sort names using names + n / 2	sort ( names , names + n / 2 ) ;
for i = 0 to n / 2 exclusive , print names [ i ]	for ( int i = 0 ; i < ( int ) ( n / 2 ) ; i ++ ) cout << names [ i ] << endl ;
declare integers n , m , a , b and 2d array of integers v of size 2100 by 2100	int n , m , a , b , v [ 2100 ] [ 2100 ] ;
declare integers k , x , y and 2d array of integers d of size 2100 by 2100	int k , d [ 2100 ] [ 2100 ] , x , y ;
boolean function solve with integer arguments x , y and k	bool solve ( int x , int y , int k )
create ingteger variables t , l = max of 1 and x - k ; r = min of x + k and n	int l = max ( 1 , x - k ) , r = min ( x + k , n ) , t ;
for integer i = l to r inclusive	for ( int i = l ; i <= r ; i ++ )
set t to k - abs ( i - x )	t = k - abs ( i - x ) ;
if y - t is greater than 0 & & ! v [ i ] [ y - t ]	if ( y - t > 0 && ! v [ i ] [ y - t ] )
set a to i	a = i ;
set value of b to y - t	b = y - t ;
return 1	return 1 ;
if y + t < = m & & ! v [ i ] [ y + t ]	if ( y + t <= m && ! v [ i ] [ y + t ] )
a = i	a = i ;
b = y + t	b = y + t ;
return 1	return 1 ;
read n , m and k	cin >> n >> m >> k ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
read x and y	cin >> x >> y ;
for integer j = - 2 to 2 inclusive	for ( int j = - 2 ; j <= 2 ; j ++ )
for integer k = - 2 to 2 inclusive	for ( int k = - 2 ; k <= 2 ; k ++ )
if x + j < 1 | | x + j > n | | y + k < 1 | | y + k is greater than m , continue the loop	if ( x + j < 1 || x + j > n || y + k < 1 || y + k > m ) continue ;
d [ x ] [ y ] = max ( d [ x ] [ y ] , d [ x + j ] [ y + k ] - abs ( j ) - abs ( k ) )	d [ x ] [ y ] = max ( d [ x ] [ y ] , d [ x + j ] [ y + k ] - abs ( j ) - abs ( k ) ) ;
while solve ( x , y , d [ x ] [ y ] ) is false , increment d [ x ] [ y ]	while ( ! solve ( x , y , d [ x ] [ y ] ) ) d [ x ] [ y ] ++ ;
v [ a ] [ b ] = 1	v [ a ] [ b ] = 1 ;
print a , " " , b and a new line	cout << a << "   " << b << endl ;
create integers n , m , a , b , create 2d integer array v with size 2100 by 2100	int n , m , a , b , v [ 2100 ] [ 2100 ] ;
create integers k , x , y , create 2d integer array d with size 2100 by 2100	int k , d [ 2100 ] [ 2100 ] , x , y ;
declare solve with integers x , y , k as arguments , returning boolean	bool solve ( int x , int y , int k )
create integers l , r , t with l = maximum of ( 1 and x - k ) , r = minimum of ( x + k and n )	int l = max ( 1 , x - k ) , r = min ( x + k , n ) , t ;
for i = l to r inclusive	for ( int i = l ; i <= r ; i ++ )
set t to k - absolute value of ( i - x )	t = k - abs ( i - x ) ;
if y - t is greater than 0 and v [ i ] [ y - t ] is false	if ( y - t > 0 && ! v [ i ] [ y - t ] )
set a to i	a = i ;
set b to y - t	b = y - t ;
return 1 from function	return 1 ;
if y + t is less than or equal to m and v [ i ] [ y + t ] is false	if ( y + t <= m && ! v [ i ] [ y + t ] )
set a to i	a = i ;
set b to y + t	b = y + t ;
return 1	return 1 ;
read n read m read k	cin >> n >> m >> k ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
read x read y	cin >> x >> y ;
for j = - 2 to 2 inclusive	for ( int j = - 2 ; j <= 2 ; j ++ )
for k = - 2 to 2 inclusive	for ( int k = - 2 ; k <= 2 ; k ++ )
if x + j is less than 1 or x + j is greater than n or y + k is less than 1 or y + k is greater than m , break current loop iteration	if ( x + j < 1 || x + j > n || y + k < 1 || y + k > m ) continue ;
set d [ x ] [ y ] to maximum of ( d [ x ] [ y ] and d [ x + j ] [ y + k ] - absolute value of j - absolute value of k )	d [ x ] [ y ] = max ( d [ x ] [ y ] , d [ x + j ] [ y + k ] - abs ( j ) - abs ( k ) ) ;
while result of run solve with x , y , d [ x ] [ y ] as arguments is false , increment d [ x ] [ y ]	while ( ! solve ( x , y , d [ x ] [ y ] ) ) d [ x ] [ y ] ++ ;
set v [ a ] [ b ] to 1	v [ a ] [ b ] = 1 ;
print a print " " print b print newline	cout << a << "   " << b << endl ;
create integers n , m , a and b , and 2d array of integers v 2100 by 2100	int n , m , a , b , v [ 2100 ] [ 2100 ] ;
create integers k , x and y , and 2d array of integers d 2100 by 2100	int k , d [ 2100 ] [ 2100 ] , x , y ;
boolean method solve with integer arguments x , y and k	bool solve ( int x , int y , int k )
declare integers t , l = max of 1 and x - k and r = min of x + k and n	int l = max ( 1 , x - k ) , r = min ( x + k , n ) , t ;
for integer i = l to r inclusive	for ( int i = l ; i <= r ; i ++ )
set value of t to k - abs ( i - x )	t = k - abs ( i - x ) ;
if y - t is greater than 0 and ! v [ i ] [ y - t ]	if ( y - t > 0 && ! v [ i ] [ y - t ] )
set a to i	a = i ;
set value of b to y - t	b = y - t ;
return 1	return 1 ;
if y + t < = m and ! v [ i ] [ y + t ]	if ( y + t <= m && ! v [ i ] [ y + t ] )
assign value of i to the a	a = i ;
set b to y + t	b = y + t ;
return 1	return 1 ;
read n , m and k	cin >> n >> m >> k ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
read x and y	cin >> x >> y ;
for integer j = - 2 to 2 inclusive	for ( int j = - 2 ; j <= 2 ; j ++ )
for integer k = - 2 to 2 inclusive	for ( int k = - 2 ; k <= 2 ; k ++ )
if x + j < 1 or x + j > n or y + k < 1 or y + k > m , continue the loop	if ( x + j < 1 || x + j > n || y + k < 1 || y + k > m ) continue ;
set d [ x ] [ y ] = max of d [ x ] [ y ] and d [ x + j ] [ y + k ] - abs ( j ) - abs ( k ) )	d [ x ] [ y ] = max ( d [ x ] [ y ] , d [ x + j ] [ y + k ] - abs ( j ) - abs ( k ) ) ;
while solve ( x , y , d [ x ] [ y ] ) is 0 , increment d [ x ] [ y ]	while ( ! solve ( x , y , d [ x ] [ y ] ) ) d [ x ] [ y ] ++ ;
set value of v [ a ] [ b ] to 1	v [ a ] [ b ] = 1 ;
print a , " " , b and a new line	cout << a << "   " << b << endl ;
a = array of pair of size 200020 of int and int	pair < pair < int , int > , int > a [ 200020 ] ;
n , k , c , x , y , m , z , ac , t , b , i = long long	long long n , k , c , x , y , m , z , ac , t , b , i ;
for ( read n , increment i , decrement n	for ( cin >> n ; n -- ; i ++ )
for read k , c , x , y , m and t = 0 , decrement k , z = max ( z , t )	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac < = 200000 , a [ increment ac ] = make_pair ( pair of int to int ( t , c ) , i )	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
b = ( c * x + y ) modulo m	b = ( c * x + y ) % m ;
if b < c and k , increment t	if ( b < c && k ) t ++ ;
c = b	c = b ;
print z	cout << z << endl ;
if ac < 200001	if ( ac < 200001 )
sort a and a + ac	sort ( a , a + ac ) ;
for i = 0 to ac , print first . second of a [ i ] , " " , second of a [ i ] + 1	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
a1 , a2 , n , k , second , ans , ans1 = long long with second = 0 and ans = 0	long long a1 , a2 , n , k , second = 0 , ans = 0 , ans1 ;
h = pair of long long and pair of long long and long long vector	vector < pair < long long , pair < long long , long long >> > h ;
in function read	void read ( void )
read n	cin >> n ;
x , y , m = int then for i = 0 to n	for ( int i = 0 , x , y , m ; i < n ; ++ i )
read k	cin >> k ;
add k to second	second += k ;
read a1	cin >> a1 ;
t = long long with t = a1	long long t = a1 ;
read x then y then m	cin >> x >> y >> m ;
append make_pair of 0 and make_pair of a1 and i + 1 to h	h . push_back ( make_pair ( 0 , make_pair ( a1 , i + 1 ) ) ) ;
set ans1 to 0	ans1 = 0 ;
for j = 1 to k	for ( int j = 1 ; j < k ; ++ j )
set a2 to ( a1 * x + y ) mod m	a2 = ( a1 * x + y ) % m ;
if a2 is less than a1 then increment ans1	if ( a2 < a1 ) ans1 ++ ;
set a1 to a2	a1 = a2 ;
set t to max of t and a1	t = max ( t , a1 ) ;
if size of h is less or equal to 200000 then append make_pair of ans1 and make_pair of a1 and i + 1 to h	if ( h . size ( ) <= 200000 ) h . push_back ( make_pair ( ans1 , make_pair ( a1 , i + 1 ) ) ) ;
set ans to max of ans and ans1	ans = max ( ans , ans1 ) ;
sort vector h	sort ( h . begin ( ) , h . end ( ) ) ;
print ans	cout << ans << " \n " ;
if second is less or equal to 200000	if ( second <= 200000 )
for i = 0 to second print h [ i ] . second . first and h [ i ] . second . second	for ( int i = 0 ; i < second ; ++ i ) cout << h [ i ] . second . first << "   " << h [ i ] . second . second << " \n " ;
call read	read ( ) ;
a = pair of pair of int and int and int of size 200020	pair < pair < int , int > , int > a [ 200020 ] ;
n , k , c , x , y , m , z , ac , t , b , i = long long	long long n , k , c , x , y , m , z , ac , t , b , i ;
read n then loop n times decrementing n and incrementing i each time	for ( cin >> n ; n -- ; i ++ )
read k then c then x then y then m and set t to 0 then loop k times decrementing k and setting z to max of z and t each time	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less or equal to 200000 then set a [ ac ] to value of make_pair of pair of int and int of t and c and i then increment ac	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) mod m	b = ( c * x + y ) % m ;
if b is less than c and k is not 0 then increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
call sort on a and a + ac	sort ( a , a + ac ) ;
for i = 0 to ac print a [ i ] . first . second and a [ i ] . second + 1	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
let a = array of integers of length 200020 , pair of integets	pair < pair < int , int > , int > a [ 200020 ] ;
let n , k , c , x , y , m , z , ac , t , b , i be long integers	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n , n is decreased by 1 , i is increased by 1	for ( cin >> n ; n -- ; i ++ )
for read the values k , c , x , y , m , t , t = 0 , k value is decreased by 1 , z = maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac < = 200000 , a [ ac + + ] = make_pair ( pair < int , int > ( t , c ) , i	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
let the value of b is equal to c * x + y modulo m	b = ( c * x + y ) % m ;
if b is less than c and k , increase t by 1	if ( b < c && k ) t ++ ;
the value of b is assigned to c	c = b ;
print z and newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort the values a and a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print a [ i ] . first . second and a [ i ] . second + 1 and newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create pair array a with size 200020 with pair of ( pair of ( integer and integer ) and integer )	pair < pair < int , int > , int > a [ 200020 ] ;
create long longs n , k , c , x , y , m , z , ac , t , b , i	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n , decrement n , incrementing i	for ( cin >> n ; n -- ; i ++ )
for read k read c read x read y read m , t = 0 , deecrement k , setting z to maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less than or equal to 200000 , set a [ increment ac ] to make pair from ( pair of ( integer and integer ) initialized with ( t , c ) , and integer )	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) % m	b = ( c * x + y ) % m ;
if b is less than c and k , increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z print newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort elements from a to a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print second element of first element of a [ i ] print " " print second element of a [ i ] + 1 print newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create long longs n , count with count = 0	long long n , count = 0 ;
read n	cin >> n ;
create constant integer max_i with max_i = 2e5	const int max_i = 2e5 ;
create integer counter with counter = 0	int counter = 0 ;
create tuple array data with integer , integer , integer , with size max_i + 9	tuple < int , int , int > data [ max_i + 9 ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create long longs k , a0 , x , y , m , t , a , with t = 0 , a = 0	long long k , a0 , x , y , m , t = 0 , a = 0 ;
read k read a0 read x read y read m	cin >> k >> a0 >> x >> y >> m ;
for j = 0 to k exclusive	for ( int j = 0 ; j < k ; j ++ )
if counter is less than or equal to max_i , set data [ increment counter ] to make tuple from t , a0 , i	if ( counter <= max_i ) { data [ counter ++ ] = make_tuple ( t , a0 , i ) ; }
set a to ( a0 * x + y ) % m	a = ( a0 * x + y ) % m ;
if a is less than a0 and j is not k - 1 , increment t	if ( a < a0 && j != k - 1 ) { t ++ ; }
set a0 to a	a0 = a ;
set count to maximum of count and t	count = max ( count , t ) ;
print count print newline	cout << count << endl ;
if counter is less than or equal to max_i	if ( counter <= max_i )
sort elements from data to data + counter	sort ( data , data + counter ) ;
for i = 0 to counter exclusive , print get element 1 from data [ i ] print " " print get element 2 from data [ i ] + 1 print newline	for ( int i = 0 ; i < counter ; i ++ ) { cout << get < 1 > ( data [ i ] ) << "   " << get < 2 > ( data [ i ] ) + 1 << endl ; }
MAX = const int with MAX = 2e5	const int MAX = 2e5 ;
a = pair of pair of long long and long long and long long array of size MAX + 9	pair < pair < long long , long long > , long long > a [ MAX + 9 ] ;
n , k , a0 , x , y , m , ans , cnt , t , tmp = long long	long long n , k , a0 , x , y , m , ans , cnt , t , tmp ;
read n	cin >> n ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read k then a0 then x then y then m then set t to 0	cin >> k >> a0 >> x >> y >> m , t = 0 ;
for j = 0 to k	for ( int j = 0 ; j < k ; j ++ )
if cnt is less or equal to MAX then set a [ cnt ] to { { t , a0 } , i } then increment cnt	if ( cnt <= MAX ) a [ cnt ++ ] = { { t , a0 } , i } ;
set tmp to ( a0 * x + y ) mod m	tmp = ( a0 * x + y ) % m ;
if tmp is less than a0 and j is not k - 1 increment t	if ( tmp < a0 && j != k - 1 ) t ++ ;
set a0 to tmp	a0 = tmp ;
set ans to max of ans and t	ans = max ( ans , t ) ;
print ans	cout << ans << ' \n ' ;
if cnt is less than MAX	if ( cnt <= MAX )
call sort on a and a + cnt	sort ( a , a + cnt ) ;
for i = 0 to cnt print a [ i ] . first . second and a [ i ] . second + 1	for ( int i = 0 ; i < cnt ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << ' \n ' ;
create pair a with pair of ( integer , integer ) , integer , with size 200020	pair < pair < int , int > , int > a [ 200020 ] ;
create long longs n , k , c , x , y , m , z , ac , t , b , i	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n to decrement n , incrementing i	for ( cin >> n ; n -- ; i ++ )
for read k read c read x read y read m , t = 0 to decrement k , setting z to maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less than or equal to 200000 , set a [ increment ac ] to create pair from ( pair of integer and integer initialized with ( t , c ) and i	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) % m	b = ( c * x + y ) % m ;
if b is less than c and k , increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z print newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort elements from a to a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print second element of first element of a [ i ] print " " print second element of a [ i ] + 1 print newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create pair of ( pair of ( integer and integer ) and integer ) array a with size 200020	pair < pair < int , int > , int > a [ 200020 ] ;
create long longs n , k , c , x , y , m , z , ac , t , b , i	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n to decrement n , incrementing i	for ( cin >> n ; n -- ; i ++ )
for read k read c read x read y read m , t = 0 to decrement k , setting z to maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less than or equal to 200000 , set a [ increment ac ] to make pair of ( pair of ( integer and integer ) initialized with ( t , c ) and i )	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) % m	b = ( c * x + y ) % m ;
if b is less than c and k , increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z print newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort elements from a to a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print second element of first element of a [ i ] print " " print second element of a [ i ] + 1 print newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create pair of ( pair of ( integer , integer ) , integer ) array a with size 200020	pair < pair < int , int > , int > a [ 200020 ] ;
create long longs n , k , c , x , y , m , z , ac , t , b , i	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n to derement n , incrementing i	for ( cin >> n ; n -- ; i ++ )
for read k read c read x read y read m , t = 0 to decrement k , setting z to maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less than or equal to 200000 set a [ increment ac ] to make pair from ( pair of ( integer , integer ) initialized with ( t , c ) , i )	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) % m	b = ( c * x + y ) % m ;
if b is less than c and k , increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z print newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort elements from a to a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print second element of first element of a [ i ] print " " print second element of a [ i ] + 1 print newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create pair array of pair of ( pair of ( integer , integer ) , integer ) a with size 200020	pair < pair < int , int > , int > a [ 200020 ] ;
create long longs n , k , c , x , y , m , z , ac , t , b , i	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n , decrement n , incrementing i	for ( cin >> n ; n -- ; i ++ )
for read k read c read x read y read m , t = 0 , to decrement k , setting z to maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less than or equal to 200000 , set a [ increment ac ] to make pair with ( ( pair of integer , integer initialized with ( t , c ) ) , i	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) % m	b = ( c * x + y ) % m ;
if b is less than c and k , increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z print newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort elements from a to a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print second element of first element of a [ i ] print " " print second element of a [ i ] + 1 print newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create pair array a with size 200020 with pair of ( pair of ( integer and integer ) and integer )	pair < pair < int , int > , int > a [ 200020 ] ;
create long longs n , k , c , x , y , m , z , ac , t , b , i	long long n , k , c , x , y , m , z , ac , t , b , i ;
for read n , decrement n , incrementing i	for ( cin >> n ; n -- ; i ++ )
for read k read c read x read y read m , t = 0 , decrement k , setting z to maximum of z and t	for ( cin >> k >> c >> x >> y >> m , t = 0 ; k -- ; z = max ( z , t ) )
if ac is less than or equal to 200000 , set a [ increment ac ] to new pair from ( pair of ( integer and integer ) initialized with ( t , c ) and i )	if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int , int > ( t , c ) , i ) ;
set b to ( c * x + y ) % m	b = ( c * x + y ) % m ;
if b is less than c and k , increment t	if ( b < c && k ) t ++ ;
set c to b	c = b ;
print z print newline	cout << z << endl ;
if ac is less than 200001	if ( ac < 200001 )
sort elements from a to a + ac	sort ( a , a + ac ) ;
for i = 0 to ac exclusive , print second element of first element of a [ i ] print " " print second element of a [ i ] + 1 print newline	for ( int i = 0 ; i < ac ; i ++ ) cout << a [ i ] . first . second << "   " << a [ i ] . second + 1 << endl ;
create integers a , b and c	int a , b , c ;
read input to a , b and c	cin >> a >> b >> c ;
if b is greater than c , swap b and c	if ( b > c ) { swap ( b , c ) ; }
print ( 2 * a + b - 1 ) * b + ( c - b - 1 ) * ( a + b - 1 )	cout << ( 2 * a + b - 1 ) * b + ( c - b - 1 ) * ( a + b - 1 ) << endl ;
oo = constant integer = 1e9	const int oo = 1e9 ;
a , b , c = integer	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
ans = integer = b * c + ( a - 1 ) * ( b + c - 1 )	int ans = b * c + ( a - 1 ) * ( b + c - 1 ) ;
print ans	cout << ans << ' \n ' ;
a , b , c = integers	int a , b , c ;
Read a , b , c	cin >> a >> b >> c ;
print a * b + b * c + c * a - ( a + b + c ) + 1 and a new line	cout << a * b + b * c + c * a - ( a + b + c ) + 1 << endl ;
declare long longs x , y and z	long long x , y , z ;
read x , y and z	cin >> x >> y >> z ;
print x * y + y * z + x * z - x - z - y + 1	cout << x * y + y * z + x * z - x - z - y + 1 << endl ;
let gcd be a function which accepts integers a and b	int gcd ( int a , int b )
return gcd ( b , a modulo b ) if b else a	return b ? gcd ( b , a % b ) : a ;
let n , m , c be integers	int n , m , c ;
read n , m , c	cin >> n >> m >> c ;
print n * m * c - ( n - 1 ) * ( m - 1 ) * ( c - 1 ) and newline	cout << n * m * c - ( n - 1 ) * ( m - 1 ) * ( c - 1 ) << endl ;
create integers a , b , c	int a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print a * b + b * c + a * c - a - b - c + 1 print newline	cout << a * b + b * c + a * c - a - b - c + 1 << endl ;
create integers a , b , c	int a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print a * b + b * c + c * a - a - b - c + 1 print newline	cout << a * b + b * c + c * a - a - b - c + 1 << endl ;
let a , b , c be int	int a , b , c ;
read a and b and c	cin >> a >> b >> c ;
print a * b + b * c + c * a - a - b - c + 1	cout << a * b + b * c + c * a - a - b - c + 1 << endl ;
create integers a , b , c	int a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print a * b + b * c + c * a - a - b - c + 1 print newline	cout << a * b + b * c + c * a - a - b - c + 1 << endl ;
create long longs a , b , c	long long a , b , c ;
read a read b read c	cin >> a >> b >> c ;
create long long ans with ans = ( c + a - 1 ) * ( b + a - 1 ) - a * ( a - 1 )	long long ans = ( c + a - 1 ) * ( b + a - 1 ) - a * ( a - 1 ) ;
print ans print newline	cout << ans << endl ;
create constant long long OO with OO = 1e5 + 555	const long long OO = 1e5 + 555 ;
declare rakm with character x as argument , returning long long	long long rakm ( char x )
return x - 48 from function	return x - 48 ;
declare _7rf with long long x as argument , returning character	char _7rf ( long long x )
return x + 48 from function	return x + 48 ;
declare odd with long long x as argument , returning boolean	bool odd ( long long x )
return x % 2	return x % 2 ;
declare even with long long x as argument , returning boolean	bool even ( long long x )
return 1 - x % 2	return 1 - x % 2 ;
declare factorial with long long x as argument , returning long long	long long factorial ( long long x )
if x is 0 or x is 1	if ( x == 0 || x == 1 )
return 1 from function	return 1 ;
else	else
return x * result of run factorial with x - 1 as argument	return x * factorial ( x - 1 ) ;
declare ss with long long x as argument , returning long long	long long ss ( long long x )
create long long sum with sum = 0	long long sum = 0 ;
while x is greater than 0	while ( x > 0 )
increment sum by x % 10	sum += x % 10 ;
set x to x / 10	x /= 10 ;
return sum from function	return sum ;
declare a3ks with long long x as argument , returning long long	long long a3ks ( long long x )
create long longs b , u , with b = 0 , u = x	long long b = 0 , u = x ;
while u is greater than 0	while ( u > 0 )
set b to ( b * 10 ) + u % 10	b = ( b * 10 ) + u % 10 ;
set u to u / 10	u /= 10 ;
return b from function	return b ;
declare prime with long long x as argument , returning boolean	bool prime ( long long x )
for i = 2 to x exclusive	for ( int i = 2 ; i < x ; i ++ )
if x % i is 0 , return 0 from function	if ( x % i == 0 ) { return 0 ; }
return 1 from function	return 1 ;
create integers a , b , c	int a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print ( a * b * c ) - ( ( a - 1 ) * ( b - 1 ) * ( c - 1 ) ) print newline	cout << ( a * b * c ) - ( ( a - 1 ) * ( b - 1 ) * ( c - 1 ) ) << endl ;
declare integer variables a , b and c	int a , b , c ;
read a , b and c	cin >> a >> b >> c ;
print ( a * b ) + ( b * c ) + ( c * a ) - a - b - c + 1	cout << ( a * b ) + ( b * c ) + ( c * a ) - a - b - c + 1 << endl ;
declare constant int N = 1e5 + 100	const int N = 1e5 + 100 ;
create ints a , b and c	int a , b , c ;
declare vector of integers called v	vector < int > v ;
read input to a , b and c	cin >> a >> b >> c ;
print ( a * b * c ) - ( a - 1 ) * ( b - 1 ) * ( c - 1 )	cout << ( a * b * c ) - ( a - 1 ) * ( b - 1 ) * ( c - 1 ) << endl ;
create constant integer MAX with MAX = 5e4 + 5	const int MAX = 5e4 + 5 ;
create constant long long MAX2 with MAX2 = 11	const long long MAX2 = 11 ;
create constant integer MOD with MOD = 1000000000 + 7	const int MOD = 1000000000 + 7 ;
create constant long long INF with INF = 20000	const long long INF = 20000 ;
create constant integer array dr with dr = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 }	const int dr [ ] = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;
create constant integer array dc with dc = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 }	const int dc [ ] = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;
create constant double pi with pi = acosign of - 1	const double pi = acos ( - 1 ) ;
create integer a , b , c	int a , b , c ;
read a read b read c	cin >> a >> b >> c ;
print a * b + ( a + b - 1 ) * ( c - 1 ) print " \ n "	cout << a * b + ( a + b - 1 ) * ( c - 1 ) << " \n " ;
N = 100100	const int N = 1e5 + 100 ;
a , b , c = int	int a , b , c ;
v = vector of int	vector < int > v ;
read a , b , c	cin >> a >> b >> c ;
print ( b * c ) + ( a - 1 ) * ( b + c - 1 )	cout << ( b * c ) + ( a - 1 ) * ( b + c - 1 ) << endl ;
a , b , c = integers	long long a , b , c ;
Read a , b , c	cin >> a >> b >> c ;
ans = integer , set to ( c + a - 1 ) * ( b + a - 1 ) - a * ( a - 1 )	long long ans = ( c + a - 1 ) * ( b + a - 1 ) - a * ( a - 1 ) ;
print ans and a new line	cout << ans << endl ;
create long long a , b , c	long long a , b , c ;
read a , b , c	cin >> a >> b >> c ;
print ( a * b * c ) - ( ( a - 1 ) * ( b - 1 ) * ( c - 1 ) )	cout << ( a * b * c ) - ( ( a - 1 ) * ( b - 1 ) * ( c - 1 ) ) << endl ;
a , b , c = integer	int a , b , c ;
read a , b , c	cin >> a >> b >> c ;
print the result of b * c + ( a - 1 ) * ( b + c - 1 )	cout << b * c + ( a - 1 ) * ( b + c - 1 ) << endl ;
create constant integer INF with INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create constant long long INFLL with INFLL = 0x3f3f3f3f3f3f3f3fLL	const long long INFLL = 0x3f3f3f3f3f3f3f3fLL ;
create long longs a , b , c	long long a , b , c ;
read a read b read c	cin >> a >> b >> c ;
create long long ans with ans = ( c + a - 1 ) * ( b + a - 1 ) - a * ( a - 1 )	long long ans = ( c + a - 1 ) * ( b + a - 1 ) - a * ( a - 1 ) ;
print ans print newline	cout << ans << endl ;
declare string variables str , str2 and s	string str , str2 , s ;
declare integer variables num and i	int num , i ;
read num and str and loop further	while ( cin >> num >> str )
sort str	sort ( str . begin ( ) , str . end ( ) ) ;
for i from 0 to length of str exclusive adding num to i , append str [ i ] to str2	for ( i = 0 ; i < str . size ( ) ; i += num ) { str2 += str [ i ] ; }
for i = 0 to num exclusive , append str2 to s	for ( i = 0 ; i < num ; i ++ ) { s += str2 ; }
assign s to str2	str2 = s ;
sort str2	sort ( str2 . begin ( ) , str2 . end ( ) ) ;
if str2 ! = str	if ( str2 != str )
print - 1	cout << - 1 << endl ;
else	else
print s	cout << s << endl ;
create constant double PI with PI = acosign of - 1	const double PI = acos ( - 1 ) ;
create constant integer MAX with MAX = 2e9 + 7	const int MAX = 2e9 + 7 ;
create constant long long MOD with MOD = 1e9 + 7	const long long MOD = 1e9 + 7 ;
create map m from character to integer	map < char , int > m ;
declare solve with no arguments , returning void	void solve ( )
create integer k	int k ;
read k	cin >> k ;
create string s	string s ;
read s	cin >> s ;
create integer n with n = size of s	int n = s . size ( ) ;
if n % k is not 0	if ( n % k != 0 )
print - 1 print newline	cout << - 1 << endl ;
return false from function	return ;
create integer need with need = n / k	int need = n / k ;
for i = 0 to n exclusive , increment m [ s [ i ] ]	for ( int i = 0 ; i < n ; i ++ ) { m [ s [ i ] ] ++ ; }
create string t with t = " "	string t = "  " ;
for i = 97 to 123 exclusive	for ( int i = 97 ; i < 123 ; i ++ )
if m [ character casted i ] % k is 0	if ( m [ char ( i ) ] % k == 0 )
for j = 0 to m [ character casted i ] / k exclusive , increment by character casted i	for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { t += char ( i ) ; }
else	else
print - 1 print newline	cout << - 1 << endl ;
return false from function	return ;
for i = 0 to k exclusive , print t	for ( int i = 0 ; i < k ; i ++ ) { cout << t ; }
print newline	cout << endl ;
run solve	solve ( ) ;
k = int	int k ;
s = string	string s ;
c = int array of size 26 with all values set to 0	int c [ 26 ] = { 0 } ;
read k then s	cin >> k >> s ;
if size of s is not a multiple of k	if ( s . size ( ) % k != 0 )
print - 1	cout << - 1 << endl ;
for i = 0 to size of s increment c [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < s . size ( ) ; ++ i ) { ++ c [ s [ i ] - ' a ' ] ; }
for i = 0 to 26	for ( int i = 0 ; i < 26 ; ++ i )
if c [ i ] is not a multiple of k	if ( c [ i ] % k != 0 )
print - 1	cout << - 1 << endl ;
res = string	string res ;
for i = 0 to 26	for ( int i = 0 ; i < 26 ; ++ i )
for j = 0 to c [ i ] / k increment res by ( ' a ' + i ) as char	for ( int j = 0 ; j < c [ i ] / k ; ++ j ) { res += char ( ' a ' + i ) ; }
for i = 0 to k print res	for ( int i = 0 ; i < k ; ++ i ) { cout << res ; }
print newline	cout << endl ;
k = int	int k ;
s = string	string s ;
read k , s	cin >> k >> s ;
count = array of 26 int filled with 0	int count [ 26 ] = { 0 } ;
for i = 0 to length of s exclusive increment count [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < s . length ( ) ; ++ i ) { count [ s [ i ] - ' a ' ] += 1 ; }
s1 = string	string s1 ;
c = 0	int c = 0 ;
increment c while c < 26	for ( ; c < 26 ; ++ c )
if count [ c ] modulo k not equal 0	if ( count [ c ] % k != 0 )
break	break ;
else	else
append count [ c ] / k copies of ' a ' + c to s1	s1 . append ( count [ c ] / k , ' a ' + c ) ;
if c is 26	if ( c == 26 )
while decremented value of k not equal 0 print s1	while ( k -- ) { cout << s1 ; }
print newline	cout << endl ;
else	else
print - 1	cout << - 1 << endl ;
declare count as integer	int count ;
read count	cin >> count ;
declare s as string	string s ;
read s	cin >> s ;
declare n as integer = length of s	int n = s . length ( ) ;
declare integer array a size 26 = { 0 }	int a [ 26 ] = { 0 } ;
for i = 0 to n exclusive , increment a [ s [ i ] - ' a ' ]	for ( int i = 0 ; i < n ; i ++ ) { a [ s [ i ] - ' a ' ] ++ ; }
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if a [ i ] % count is not 0	if ( a [ i ] % count != 0 )
print " - 1 " print newline	cout << " -1 " << endl ;
declare string ans = " "	string ans = "  " ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if a [ i ] is true	if ( a [ i ] )
for j = 0 to a [ i ] / count exclusive	for ( int j = 0 ; j < a [ i ] / count ; j ++ )
declare temp with temp = i + ' a '	char temp = i + ' a ' ;
let ans be ans + temp	ans = ans + temp ;
for i = 0 to count exclusive , print ans	for ( int i = 0 ; i < count ; i ++ ) { cout << ans ; }
print newline	cout << endl ;
create integers k	int k ;
read k	cin >> k ;
create string str	string str ;
read str	cin >> str ;
create integer n with n = length of str	int n = str . length ( ) ;
create map characters from character to integer	map < char , int > characters ;
create map iterator itr from character to integer	map < char , int > :: iterator itr ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if first index of str [ i ] in characters is not end of characters	if ( characters . find ( str [ i ] ) != characters . end ( ) )
increment characters [ str [ i ] ] by 1	characters [ str [ i ] ] += 1 ;
else	else
set characters [ str [ i ] ] to 1	characters [ str [ i ] ] = 1 ;
for itr = beginning of characters to itr is not end of characters , incrementing itr	for ( itr = characters . begin ( ) ; itr != characters . end ( ) ; itr ++ )
if second element of itr is less than k	if ( itr -> second < k )
print - 1 print newline	cout << - 1 << endl ;
exit program with code 0	exit ( 0 ) ;
create string new_str with new_str = " "	string new_str = "  " ;
for itr = beginning of characters to itr is not end of characters , incrementing itr	for ( itr = characters . begin ( ) ; itr != characters . end ( ) ; itr ++ )
create integer repeat with repeat = second element of itr / k	int repeat = itr -> second / k ;
for i = 0 to repeat exclusive , set new_str to new_str + first element of itr	for ( int i = 0 ; i < repeat ; i ++ ) { new_str = new_str + itr -> first ; }
if length of new_str * k is less than n	if ( new_str . length ( ) * k < n )
print - 1 print newline	cout << - 1 << endl ;
exit program with code 0	exit ( 0 ) ;
for i = 0 to k exclusive , print new_str	for ( int i = 0 ; i < k ; i ++ ) { cout << new_str ; }
print newline	cout << endl ;
declare an array of chars inPutStr with size 1001	char inPutStr [ 1001 ] ;
declare int k and an array of ints strArr with 26 elements	int strArr [ 26 ] , k ;
create char array subStr with 1001 elements	char subStr [ 1001 ] ;
makeAString is a void function	void makeAString ( )
create integer idx = 0	int idx = 0 ;
for j from 0 to 26 exclusive	for ( int j = 0 ; j < 26 ; j ++ )
while strArr [ j ] ! = 0	while ( strArr [ j ] != 0 )
change subStr [ idx ] to j + ' a '	subStr [ idx ] = j + ' a ' ;
increment idx by one	idx ++ ;
assign strArr [ j ] - k to strArr [ j ]	strArr [ j ] = strArr [ j ] - k ;
for i from 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
for j = 0 to idx exclusive , print subStr [ j ]	for ( int j = 0 ; j < idx ; j ++ ) { cout << subStr [ j ] ; }
print new line	cout << endl ;
for i = 0 to 26 exclusive , set strArr [ i ] to 0	for ( int i = 0 ; i < 26 ; i ++ ) { strArr [ i ] = 0 ; }
read k	cin >> k ;
read inPutStr	cin >> inPutStr ;
for i = 0 while inPutStr [ i ] ! = 0	for ( int i = 0 ; inPutStr [ i ] ; i ++ )
create integer id = inPutStr [ i ] - ' a '	int id = inPutStr [ i ] - ' a ' ;
set strArr [ id ] to strArr [ id ] + 1	strArr [ id ] = strArr [ id ] + 1 ;
declare bool Result = true	bool Result = true ;
for i from 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
if strArr [ i ] % k ! = 0	if ( strArr [ i ] % k != 0 )
assign false to Result	Result = false ;
break the loop	break ;
if Result is true	if ( Result )
call makeAString ( )	makeAString ( ) ;
else	else
print " - 1 "	cout << " -1 " << endl ;
let T , i , j , count , d and m be integers with count = 1 and m = 0	int T , i , j , count = 1 , d , m = 0 ;
create an arrays of characters s and k with size 1000	char s [ 1000 ] , k [ 1000 ] ;
read T and s	cin >> T >> s ;
set j to length of s	j = strlen ( s ) ;
sort s	sort ( s , s + j ) ;
for i = 0 to j exclusive	for ( i = 0 ; i < j ; i ++ )
if s [ i ] = s [ i + 1 ]	if ( s [ i ] == s [ i + 1 ] )
add 1 to count	count += 1 ;
else	else
if count % T = 0	if ( count % T == 0 )
assign count / T to d	d = count / T ;
loop , decrementing d , while it is not 0	while ( d -- )
set k [ m ] to s [ i ]	k [ m ] = s [ i ] ;
increment m	m ++ ;
set count to 1	count = 1 ;
else	else
print " - 1 "	cout << " -1 " << endl ;
set k [ m ] to ' \ 0 '	k [ m ] = ' \0 ' ;
decrement T and loop further , while T is not 0	while ( T -- )
for i from 0 while k [ i ] ! = ' \ 0 ' incrementing i , print k [ i ] in a loop	for ( i = 0 ; k [ i ] != ' \0 ' ; i ++ ) { cout << k [ i ] ; }
print new line	cout << endl ;
let solve be a void function which accepts string str , integer k	void solve ( string str , int k )
cnt = array of integers of length 26	int cnt [ 26 ] ;
memset of cnt , 0 , length of cnt	memset ( cnt , 0 , sizeof ( cnt ) ) ;
for i = 0 to length of str exclusive , increment cnt [ str [ i ] - a ] by 1	for ( int i = 0 ; i < str . length ( ) ; i ++ ) cnt [ str [ i ] - ' a ' ] ++ ;
let s1 be a string	string s1 ;
initialize integer i to 0	int i = 0 ;
for i is less than 26 , increment i by 1	for ( ; i < 26 ; i ++ )
if cnt [ i ] modulo k is not equal to 0	if ( cnt [ i ] % k != 0 )
stop	break ;
else do the following	else
It extends the string s1 by appending cnt [ i ] / k , ' a ' + i	s1 . append ( cnt [ i ] / k , ' a ' + i ) ;
if i is equal to 26	if ( i == 26 )
while k is decremented by 1 , print s1	while ( k -- ) { cout << s1 ; }
print newline	cout << endl ;
else do the following	else
print - 1 and newline	cout << " -1 " << endl ;
let k be a integer	int k ;
read k	cin >> k ;
let str be a string	string str ;
read str	cin >> str ;
solve the values str , k	solve ( str , k ) ;
declare long longs i , j , k , n , m , ans , sz , c1 , c2 , x , f , z , declare long long arrays a with size 100009 , ch with size 26	long long i , j , k , n , m , a [ 100009 ] , ans , sz , c1 , c2 , x , ch [ 26 ] , f , z ;
declare string s	string s ;
read k , s	cin >> k >> s ;
let sz be size of s	sz = s . size ( ) ;
declare character set st	set < char > st ;
declare it as character set iterator	set < char > :: iterator it ;
for i = 0 to sz exclusive	for ( i = 0 ; i < sz ; i ++ )
insert s [ i ] into st	st . insert ( s [ i ] ) ;
increment ch [ s [ i ] - ' a ' ]	ch [ s [ i ] - ' a ' ] ++ ;
declare long long vector v	vector < long long > v ;
for it = beginning of st to it is not end of st , incrementing it	for ( it = st . begin ( ) ; it != st . end ( ) ; it ++ )
create character c	char c ;
set c to value of it	c = * it ;
add ch [ c - ' a ' ] to end of v	v . push_back ( ch [ c - ' a ' ] ) ;
let sz be size of v	sz = v . size ( ) ;
for i = 0 to sz exclusive	for ( i = 0 ; i < sz ; i ++ )
if v [ i ] % k is not 0	if ( v [ i ] % k != 0 )
let f be 1	f = 1 ;
break loop	break ;
if f is true	if ( f )
print " - 1 " print newline	cout << " -1 " << endl ;
else	else
declare ss as string	string ss ;
for it = beginning of st to it is not end of st , incrementing it	for ( it = st . begin ( ) ; it != st . end ( ) ; it ++ )
declare character c	char c ;
let c be value of it	c = * it ;
let z be ch [ c - ' a ' ] / k	z = ch [ c - ' a ' ] / k ;
for i = 0 to z exclusive , increment ss by c	for ( i = 0 ; i < z ; i ++ ) ss += c ;
for i = 0 to k exclusive , print ss	for ( i = 0 ; i < k ; i ++ ) cout << ss ;
print newline	cout << endl ;
create integer vector v	vector < int > v ;
create integer vector v1	vector < int > v1 ;
create character vector v2	vector < char > v2 ;
create integers k , c , temp , gh with c = 0 , gh = 0	int k , c = 0 , temp , gh = 0 ;
read k	cin >> k ;
create character ch	char ch ;
create strings s , ans	string s , ans ;
read s	cin >> s ;
create string s1 with s1 = s	string s1 = s ;
sort elements from beginning of s1 to end of s1	sort ( s1 . begin ( ) , s1 . end ( ) ) ;
for i = 0 to size of s1 exclusive	for ( int i = 0 ; i < s1 . size ( ) ; i ++ )
set c to 0	c = 0 ;
if s1 [ i ] is not s1 [ i + 1 ]	if ( s1 [ i ] != s1 [ i + 1 ] )
set ch to s1 [ i ]	ch = s1 [ i ] ;
add character ch to end of v2	v2 . push_back ( ch ) ;
for j = 0 to size of s exclusive	for ( int j = 0 ; j < s . size ( ) ; j ++ )
if s [ j ] is ch , increment c	if ( s [ j ] == ch ) { c ++ ; }
create integer temp with temp = c	int temp = c ;
add element temp to end of v	v . push_back ( temp ) ;
for i = 0 to size of v exclusive	for ( int i = 0 ; i < v . size ( ) ; i ++ )
if v [ i ] % k is 0	if ( v [ i ] % k == 0 )
create integer f with f = v [ i ] / k	int f = v [ i ] / k ;
add element f to end of v1	v1 . push_back ( f ) ;
else	else
set gh to - 1	gh = - 1 ;
break loop	break ;
for i = 0 to size of v1 exclusive	for ( int i = 0 ; i < v1 . size ( ) ; i ++ )
create integer m with m = v1 [ i ]	int m = v1 [ i ] ;
create character g with g = v2 [ i ]	char g = v2 [ i ] ;
while m is greater than 0	while ( m > 0 )
increment ans by g	ans += g ;
decrement m	m -- ;
create string sum with sum = " "	string sum = "  " ;
create integer our with our = k - 1	int our = k - 1 ;
while our is greater than or equal to 0	while ( our >= 0 )
increment sum by ans	sum += ans ;
decrement our	our -- ;
if gh is - 1	if ( gh == - 1 )
print - 1 print newline	cout << - 1 << endl ;
else	else
print sum print newline	cout << sum << endl ;
create integers i , Len , k , create integer array Arr with size 26 with Arr = { 0 }	int i , Len , k , Arr [ 26 ] = { 0 } ;
create strings s , kString	string s , kString ;
read k read s	cin >> k >> s ;
for i = 0 to length of s exclusive , increment Arr [ s [ i ] - ' a ' ]	for ( i = 0 ; i < s . length ( ) ; i ++ ) { Arr [ s [ i ] - ' a ' ] ++ ; }
for i = 0 to 26 exclusive	for ( i = 0 ; i < 26 ; i ++ )
if Arr [ i ] % k is not 0	if ( Arr [ i ] % k != 0 )
break loop	break ;
else	else
append ' a ' + i to kString ( Arr [ i ] / k ) times	kString . append ( Arr [ i ] / k , ' a ' + i ) ;
if i is 26	if ( i == 26 )
while decrement k is true , print kString	while ( k -- ) { cout << kString ; }
print newline	cout << endl ;
else	else
print - 1 print newline	cout << - 1 << endl ;
create constant double PI = acos ( - 1 )	const double PI = acos ( - 1 ) ;
let const integer MAX = 2e9 + 7	const int MAX = 2e9 + 7 ;
let const long long MOD = 1e9 + 7	const long long MOD = 1e9 + 7 ;
create map m of chars to ints	map < char , int > m ;
declare solve	void solve ( )
let int k	int k ;
read k	cin >> k ;
let string s	string s ;
read s	cin >> s ;
create int n = s . size ( )	int n = s . size ( ) ;
if n modulo k is not equal to 0	if ( n % k != 0 )
print - 1	cout << - 1 << endl ;
terminate function	return ;
create int need = n / k	int need = n / k ;
increment all contents of m [ s ]	for ( int i = 0 ; i < n ; i ++ ) { m [ s [ i ] ] ++ ; }
let string t = " "	string t = "  " ;
for i = 97 to 123 exclusive	for ( int i = 97 ; i < 123 ; i ++ )
if m [ char ( i ) ] modulo k is 0	if ( m [ char ( i ) ] % k == 0 )
for j = 0 to m [ char ( i ) ] / k exclusive , set t to t + char ( i )	for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { t += char ( i ) ; }
otherwise do	else
print - 1	cout << - 1 << endl ;
end function	return ;
for i = 0 to k exclusive , print t	for ( int i = 0 ; i < k ; i ++ ) { cout << t ; }
print new line	cout << endl ;
call solve	solve ( ) ;
ctn = int array of length 30	int cnt [ 30 ] ;
let n , k be int	int n , k ;
let s be a string	string s ;
read k and s	cin >> k >> s ;
set n to the lenght of s	n = s . length ( ) ;
for i = 0 to n exclusive increment cnt at s [ i ] - ' a '	for ( int i = 0 ; i < n ; i ++ ) { cnt [ s [ i ] - ' a ' ] ++ ; }
let can = true be a boolean	bool can = true ;
let ss be a blank string	string ss = "  " ;
for x = ' a ' to ' z ' inclusive	for ( char x = ' a ' ; x <= ' z ' ; x ++ )
if cnt [ x - ' a ' ] mod k is not 0	if ( cnt [ x - ' a ' ] % k != 0 )
can is false	can = false ;
else	else
for j = 0 to cnt [ x - ' a ' ] / k increment ss by x	for ( int j = 0 ; j < cnt [ x - ' a ' ] / k ; j ++ ) { ss += x ; }
if can	if ( can )
print ss for k times	for ( int i = 0 ; i < k ; i ++ ) { cout << ss ; }
print new line	cout << endl ;
else	else
print - 1 and new line	cout << - 1 << endl ;
create integers k , i and j	int k , i , j ;
declare string s	string s ;
create integer array c with size 26	int c [ 26 ] = { 0 } ;
read input to k and s	cin >> k >> s ;
if length of s % k ! = 0	if ( s . size ( ) % k != 0 )
print - 1 to the standart output	cout << - 1 << endl ;
for i = 0 to length of s exclusive ,	for ( i = 0 ; i < s . size ( ) ; i ++ ) { c [ s [ i ] - ' a ' ] ++ ; }
for i = 0 to 26 exclusive	for ( i = 0 ; i < 26 ; i ++ )
if c [ i ] % k ! = 0	if ( c [ i ] % k != 0 )
print - 1 to the standart output	cout << - 1 << endl ;
create string result	string result ;
for i = 0 to 26 exclusive	for ( i = 0 ; i < 26 ; i ++ )
for j from 0 to c [ i ] / k exclusive , append char ( ' a ' + i ) to result	for ( j = 0 ; j < c [ i ] / k ; j ++ ) { result = result + char ( ' a ' + i ) ; }
for i from 0 to k exclusive , print result to the standart output	for ( i = 0 ; i < k ; i ++ ) { cout << result ; }
print new line	cout << endl ;
create constant integer N with N = 100 + 5	const int N = 100 + 5 ;
create contant integer mod with mod = 1000000000 + 7	const int mod = 1000000000 + 7 ;
declare boolean ok with character a as argument , returning boolean	bool ok ( char a )
if a is greater than or equal to ' a ' and a is less than or equal to ' z ' , return 1 from function	if ( a >= ' a ' && a <= ' z ' ) return 1 ;
if a is greater than or equal to ' A ' and a is less than or equal to ' Z ' , return 1 from function	if ( a >= ' A ' && a <= ' Z ' ) return 1 ;
if a is greater than or equal to ' 0 ' and a is less than or equal to ' 9 ' , return 1 from function	if ( a >= ' 0 ' && a <= ' 9 ' ) return 1 ;
if a is ' _ ' , return 1 from function	if ( a == ' _ ' ) return 1 ;
create character array a with size N	char a [ N ] ;
read a + 1	cin >> a + 1 ;
create integer len with len = string length of ( a + 1 )	int len = strlen ( a + 1 ) ;
create integer op with op = 1	int op = 1 ;
create boolean flag with flag = 1	bool flag = 1 ;
create integers cnt1 , cnt2 , ccnt , cnt3 , with cnt1 = 0 , cnt2 = 0 , ccnt = 0 , cnt3 = 0	int cnt1 = 0 , cnt2 = 0 , ccnt = 0 , cnt3 = 0 ;
for i = 1 to len and flag inclusive	for ( int i = 1 ; i <= len && flag ; i ++ )
if op is 1	if ( op == 1 )
increment cnt1	cnt1 ++ ;
if a [ i ] is ' @ '	if ( a [ i ] == ' @ ' )
decrement cnt1	cnt1 -- ;
set op to 2	op = 2 ;
break current loop iteration	continue ;
if result of run ok with a [ i ] as argument is false , set flag to 0	if ( ! ok ( a [ i ] ) ) { flag = 0 ; }
if cnt1 is greater than 16 , set flag to 0	if ( cnt1 > 16 ) flag = 0 ;
else if op is 2	else if ( op == 2 )
increment ccnt	ccnt ++ ;
if cnt is 0 or cnt1 is greater than 16 , set flag to 0	if ( cnt1 == 0 || cnt1 > 16 ) flag = 0 ;
if a [ i ] is ' . '	if ( a [ i ] == ' . ' )
if cnt2 is 0 or cnt2 is greater than 16 , set flag to 0	if ( cnt2 == 0 || cnt2 > 16 ) flag = 0 ;
set cnt2 to 0	cnt2 = 0 ;
break current loop iteration	continue ;
if a [ i ] is ' / '	if ( a [ i ] == ' / ' )
decrement ccnt	ccnt -- ;
set op to 3	op = 3 ;
break current loop iteration	continue ;
if result of run ok with a [ i ] as argument is false , set flag to 0	if ( ! ok ( a [ i ] ) ) { flag = 0 ; }
increment cnt2	cnt2 ++ ;
if cnt2 is greater than 16 , set flag to 0	if ( cnt2 > 16 ) flag = 0 ;
else	else
if cnt2 is 0 or cnt2 is greater than 16 , set flag to 0	if ( cnt2 == 0 || cnt2 > 16 ) flag = 0 ;
if ccnt is 0 or ccnt is greater than 32 , set flag to 0	if ( ccnt == 0 || ccnt > 32 ) flag = 0 ;
if result of run ok with a [ i ] as argument is false , set flag to 0	if ( ! ok ( a [ i ] ) ) flag = 0 ;
increment cnt3	cnt3 ++ ;
if cnt3 is greater than 16 , set flag to 0	if ( cnt3 > 16 ) flag = 0 ;
if op is 1 , set flag to 0	if ( op == 1 ) flag = 0 ;
if op is 2 and ( cnt2 is 0 or cnt2 is greater than 16 ) , set flag to 0	if ( op == 2 && ( cnt2 == 0 || cnt2 > 16 ) ) flag = 0 ;
if op is 3 and ( cnt3 is 0 or cnt3 is greater than 16 ) , set flag to 0	if ( op == 3 && ( cnt3 == 0 || cnt3 > 16 ) ) flag = 0 ;
if flag is true	if ( flag )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create constant integer N = 100 + 5	const int N = 100 + 5 ;
create constant integer mod = 1000000000 + 7	const int mod = 1000000000 + 7 ;
bool function ok with char argument a	bool ok ( char a )
if a is a letter character return 1	if ( a >= ' a ' && a <= ' z ' ) return 1 ;
if a is a capital letter character return 1	if ( a >= ' A ' && a <= ' Z ' ) return 1 ;
if a is a digit return 1	if ( a >= ' 0 ' && a <= ' 9 ' ) return 1 ;
if a is ' _ ' return 1	if ( a == ' _ ' ) return 1 ;
declare array of characters of size N	char a [ N ] ;
read a + 1	cin >> a + 1 ;
create integer len with value = length of ( a + 1 )	int len = strlen ( a + 1 ) ;
set integer op to 1	int op = 1 ;
set boolean flag to 1	bool flag = 1 ;
integers cnt1 = 0 , cnt2 = 0 , ccnt = 0 and cnt3 = 0	int cnt1 = 0 , cnt2 = 0 , ccnt = 0 , cnt3 = 0 ;
for integer i = 1 to len and flag inclusive	for ( int i = 1 ; i <= len && flag ; i ++ )
if op is equal to 1	if ( op == 1 )
increase cnt1	cnt1 ++ ;
if a [ i ] is ' @ '	if ( a [ i ] == ' @ ' )
decrement cnt1	cnt1 -- ;
set value of op to 2	op = 2 ;
go to the start of the loop	continue ;
if ok ( a [ i ] ) is false , set flag to 0	if ( ! ok ( a [ i ] ) ) { flag = 0 ; }
if cnt1 is greater than 16 , set flag to 0	if ( cnt1 > 16 ) flag = 0 ;
else if op is equal to 2	else if ( op == 2 )
increment ccnt	ccnt ++ ;
if cnt1 = 0 or cnt1 > 16 , set flag to 0	if ( cnt1 == 0 || cnt1 > 16 ) flag = 0 ;
if a [ i ] is ' . '	if ( a [ i ] == ' . ' )
if cnt2 = 0 or cnt2 > 16 , set flag to 0	if ( cnt2 == 0 || cnt2 > 16 ) flag = 0 ;
set cnt2 to 0	cnt2 = 0 ;
go to the start of the loop	continue ;
if a [ i ] is ' / '	if ( a [ i ] == ' / ' )
decrement ccnt	ccnt -- ;
op = 3	op = 3 ;
continue the loop	continue ;
if ok ( a [ i ] ) is false , set flag to 0	if ( ! ok ( a [ i ] ) ) { flag = 0 ; }
increase cnt2	cnt2 ++ ;
if cnt2 is greater than 16 , set flag to 0	if ( cnt2 > 16 ) flag = 0 ;
else	else
if cnt2 = 0 or cnt2 is greater than 16 , set flag to 0	if ( cnt2 == 0 || cnt2 > 16 ) flag = 0 ;
if ccnt = 0 or ccnt is greater than 32 , set flag to 0	if ( ccnt == 0 || ccnt > 32 ) flag = 0 ;
if ok ( a [ i ] ) is false , set flag to 0	if ( ! ok ( a [ i ] ) ) flag = 0 ;
increase cnt3	cnt3 ++ ;
if cnt3 is greater than 16 , set flag to 0	if ( cnt3 > 16 ) flag = 0 ;
if op is equal to 1 , set flag to 0	if ( op == 1 ) flag = 0 ;
if op = 2 and ( cnt2 = 0 or cnt2 is greater than 16 ) , set flag to 0	if ( op == 2 && ( cnt2 == 0 || cnt2 > 16 ) ) flag = 0 ;
if op = 3 and ( cnt3 = 0 or cnt3 is greater than 16 ) , set flag to 0	if ( op == 3 && ( cnt3 == 0 || cnt3 > 16 ) ) flag = 0 ;
if flag is true	if ( flag )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
declare myCompare with constant pair address ' s i , j , from string to integer	bool myCompare ( const pair < string , int > & i , const pair < string , int > & j )
return second element of i is less than second element of j	return i . second < j . second ;
create string s	string s ;
declare check with no arguments , returning integer	int check ( )
create integers x , y , 0 , with x = 0 , y = 0 , flag = 0	int x = 0 , y = 0 , flag = 0 ;
for i = 0 to size of s	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if flag is 0	if ( flag == 0 )
if s [ i ] is ' @ '	if ( s [ i ] == ' @ ' )
if i - x is greater than 16 or i - x is less than 1 or i + 1 is size of s , return 0 from function	if ( ( i - x ) > 16 || ( i - x ) < 1 || ( i + 1 == s . size ( ) ) ) return 0 ;
set x to i + 1	x = i + 1 ;
set y to i + 1	y = i + 1 ;
set flag to 1	flag = 1 ;
else if s [ i ] is alphanumeric or s [ i ] is digit or s [ i ] is ' _ '	else if ( isalpha ( s [ i ] ) || isdigit ( s [ i ] ) || s [ i ] == ' _ ' )
break current loop iteration	continue ;
else if s [ i ] is not alphanumeric or s [ i ] is not digit or s [ i ] is not ' _ '	else if ( ! isalpha ( s [ i ] ) || ! isdigit ( s [ i ] ) || s [ i ] != ' _ ' )
else if flag is 1	else if ( flag == 1 )
if s [ i ] is ' / '	if ( s [ i ] == ' / ' )
if i - x is greater than 32 or i - x is less than 1 or i + 1 is size of s or s [ i - 1 ] is ' . ' , return 0 from function	if ( ( i - x ) > 32 || ( i - x ) < 1 || ( i + 1 == s . size ( ) ) || s [ i - 1 ] == ' . ' ) return 0 ;
set x to i + 1	x = i + 1 ;
set flag to 2	flag = 2 ;
else if s [ i ] is ' . '	else if ( s [ i ] == ' . ' )
if i - y is greater than 16 or i - y is less than 1 or i + 1 is size of s , return 0 from function	if ( ( i - y ) > 16 || ( i - y ) < 1 || ( i + 1 == s . size ( ) ) ) return 0 ;
set y to i + 1	y = i + 1 ;
else if s [ i ] is alphanumeric or s [ i ] is digit or s [ i ] is ' . ' or s [ i ] is ' _ '	else if ( isalpha ( s [ i ] ) || isdigit ( s [ i ] ) || s [ i ] == ' . ' || s [ i ] == ' _ ' )
if i + 1 is size of s	if ( i + 1 == s . size ( ) )
if i - x + 1 is greater than 32 or i - x + 1 is less than 1 , return 0 from function	if ( ( i - x + 1 ) > 32 || ( i - x + 1 ) < 1 ) return 0 ;
if i - y + 1 is greater than 16 or i - y + 1 is less than 1 , return 0 from function	if ( ( i - y + 1 ) > 16 || ( i - y + 1 ) < 1 ) return 0 ;
break current loop iteration	continue ;
else if s [ i ] is not alphanumeric or s [ i ] is not digit or s [ i ] is not ' . ' or s [ i ] is not ' _ '	else if ( ! isalpha ( s [ i ] ) || ! isdigit ( s [ i ] ) || s [ i ] != ' . ' || s [ i ] != ' _ ' )
else	else
if s [ i ] is ' _ ' and i + 1 is size of s , return 0 from function	if ( s [ i ] == ' _ ' && i + 1 == s . size ( ) ) return 0 ;
if s [ i ] is alphanumeric or s [ i ] is digit or s [ i ] is ' _ '	if ( isalpha ( s [ i ] ) || isdigit ( s [ i ] ) || s [ i ] == ' _ ' )
if i + 1 is size of s	if ( i + 1 == s . size ( ) )
if i - x + 1 is greater than 16 or i - x + 1 is less than 1 , return 0 from function	if ( ( i - x + 1 ) > 16 || ( i - x + 1 ) < 1 ) return 0 ;
break current loop iteration	continue ;
if s [ i ] is not alphanumeric or s [ i ] is not digit or s [ i ] is not ' _ ' , return 0 from function	if ( ! isalpha ( s [ i ] ) || ! isdigit ( s [ i ] ) || s [ i ] != ' _ ' ) { return 0 ; }
if flag is greater than 0	if ( flag > 0 )
return 1 from function	return 1 ;
else	else
read s	cin >> s ;
print " YES " if result of run check is true , else " NO " print newline	cout << ( check ( ) ? " YES " : " NO " ) << endl ;
boolean function l that takes character c as argument	bool l ( char c )
return true if c is a letter	if ( c >= ' a ' && c <= ' z ' ) { return true ; }
return true if c is a capital letter	if ( c >= ' A ' && c <= ' Z ' ) { return true ; }
return true if c is a digit	if ( c >= ' 0 ' && c <= ' 9 ' ) { return true ; }
return true if c is an underscore	if ( c == ' _ ' ) { return true ; }
return false	return false ;
function un with string argument s	bool un ( string s )
set value of int n to length s	int n = s . size ( ) ;
if n is 0 or n > 16 return false	if ( n == 0 || n > 16 ) { return false ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if l ( s at index i ) is false return false	if ( ! l ( s [ i ] ) ) { return false ; }
return true	return true ;
function hn with string argument s	bool hn ( string s )
declare integers n = size of s , i , nw = 0	int n = s . size ( ) , i , nw = 0 ;
if n is 0 or n > 32 return false	if ( n == 0 || n > 32 ) { return false ; }
appen character ' . ' to s	s += ' . ' ;
for i = 0 to n + 1 exclusive	for ( i = 0 ; i < n + 1 ; i ++ )
if s [ i ] is character " . "	if ( s [ i ] == ' . ' )
if nw is equal to 0 or nw is greater than 16 return false	if ( nw == 0 || nw > 16 ) { return false ; }
nw = 0	nw = 0 ;
else	else
if l ( s at index i ) is false return false	if ( ! l ( s [ i ] ) ) { return false ; }
increase nw	nw ++ ;
return true	return true ;
boolean function r with string argument s	bool r ( string s )
return un ( s )	return un ( s ) ;
boolean function f with string argument s	bool f ( string s )
int n = length of s , i , j	int n = s . size ( ) , i , j ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if s at index i is " @ " break the loop	if ( s [ i ] == ' @ ' ) { break ; }
if i is equal to n return false	if ( i == n ) { return false ; }
if un ( substring of s from 0 to i ) is false return false	if ( ! un ( s . substr ( 0 , i ) ) ) { return false ; }
for j = from i + 1 to n exclusive	for ( j = i + 1 ; j < n ; j ++ )
if s [ j ] is " / " break the loop	if ( s [ j ] == ' / ' ) { break ; }
if hn ( substring of s from i + 1 to j - i - 1 ) is false return false	if ( ! hn ( s . substr ( i + 1 , j - i - 1 ) ) ) { return false ; }
if j is not equal to n and r ( substring of s from 0 to j + 1 ) is false return false	if ( j != n && ! r ( s . substr ( j + 1 ) ) ) { return false ; }
return true	return true ;
let s be string	string s ;
read s	cin >> s ;
if f ( s )	if ( f ( s ) )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
create ints i , j , flag = 1 , and dot = 0	int i , j , flag = 1 , dot = 0 ;
let string ch	string ch ;
read ch	cin >> ch ;
for i = 0 to length of ch exclusive	for ( i = 0 ; i < ch . length ( ) ; i ++ )
if ch [ i ] is equal to ' @ '	if ( ch [ i ] == ' @ ' )
if i is greater than 16 or i is less than 1	if ( i > 16 || i < 1 )
set flag to 0	flag = 0 ;
move to print	goto print ;
break loop	break ;
else if ch [ i ] is greater than or equal to ' a ' and ch [ i ] is less than or equal to ' z ' or if ch [ i ] is greater than or equal to ' A ' and ch [ i ] is less than or equal to ' Z '	else if ( ( ch [ i ] >= ' a ' && ch [ i ] <= ' z ' ) || ( ch [ i ] >= ' A ' && ch [ i ] <= ' Z ' ) )
continue to next loop	continue ;
else if ch [ i ] is greater than or equal to ' 0 ' and ch [ i ] is less than or equal to ' 9 ' and if ch [ i ] is equal to ' _ '	else if ( ( ch [ i ] >= ' 0 ' && ch [ i ] <= ' 9 ' ) || ( ch [ i ] == ' _ ' ) )
continue to next loop iteration	continue ;
else	else
set flag to 0	flag = 0 ;
go to print	goto print ;
identify dot	dot :
for j = i + 1 to length of ch exclusive	for ( j = i + 1 ; j < ch . length ( ) ; j ++ )
if ch [ j ] is equal to ' . '	if ( ch [ j ] == ' . ' )
if j - 1 is greater than 17 or j - i is less than 2	if ( j - i > 17 || j - i < 2 )
set flag to 0	flag = 0 ;
go to print	goto print ;
set i to j	i = j ;
else if ch [ j ] is greater than or equal to ' a ' and ch [ j ] is less than or equal to ' z ' or if ch [ j ] is greater than or equal to ' A ' and ch [ j ] is less than or equal to ' Z '	else if ( ( ch [ j ] >= ' a ' && ch [ j ] <= ' z ' ) || ( ch [ j ] >= ' A ' && ch [ j ] <= ' Z ' ) )
continue to next loop	continue ;
else if ch [ j ] is greater than or equal to ' 0 ' and ch [ j ] is less than or equal to ' 9 ' or if ch [ j ] is equal to ' _ '	else if ( ( ch [ j ] >= ' 0 ' && ch [ j ] <= ' 9 ' ) || ( ch [ j ] == ' _ ' ) )
continue to next loop	continue ;
else if ch [ j ] is equal to ' / '	else if ( ch [ j ] == ' / ' )
if j - 1 is greater than 17 or j - i is less than 2	if ( j - i > 17 || j - i < 2 )
set flag to 0	flag = 0 ;
go to print	goto print ;
set i to j	i = j ;
otherwise	else
set flag to 0	flag = 0 ;
move to print	goto print ;
if j - i is greater than 17 or j - i is less than 2 , set flag to 0	if ( j - i > 17 || j - i < 2 ) flag = 0 ;
identify print	print :
print " YES \ n " if flag is truthy or " NO \ n " if not	( flag ) ? ( cout << " YES\n " ) : ( cout << " NO\n " ) ;
declare integer n	int n ;
read n	cin >> n ;
print n	cout << n ;
for i = 1 to n exclusive , print ' ' and i	for ( int i = 1 ; i < n ; i ++ ) cout << '   ' << i ;
print ' \ n '	cout << ' \n ' ;
create integer n	int n ;
read n	cin >> n ;
print n	cout << n ;
for i = 1 to n exclusive , print " " print i	for ( int i = 1 ; i < n ; ++ i ) { cout << "   " << i ; }
print newline	cout << endl ;
create integer n	int n ;
read n	cin >> n ;
print n	cout << n ;
for i = 1 to n exclusive , print " " print i	for ( int i = 1 ; i < n ; ++ i ) { cout << "   " << i ; }
print newline	cout << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
print n	cout << n ;
for integer i = 1 to n exclusive print " " and i	for ( int i = 1 ; i < n ; ++ i ) { cout << "   " << i ; }
print new line	cout << endl ;
n = integer	int n ;
read n	cin >> n ;
print n	cout << n ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if i is not n print " "	if ( i != n ) cout << "   " ;
print i	cout << i ;
print new line	cout << endl ;
let n be a integer	int n ;
read n	cin >> n ;
print n	cout << n ;
for ( i = 1 to n - 1 inclusive ) , print space and i	for ( int i = 1 ; i <= n - 1 ; i ++ ) cout << "   " << i ;
print newline	cout << endl ;
declare integer a	int a ;
loop while reading a	while ( cin >> a )
print a	cout << a ;
for integer i = 1 to a exclusive , print ' ' and i	for ( int i = 1 ; i < a ; i ++ ) cout << '   ' << i ;
print new line	cout << endl ;
in the function desperate_optimization that takes integer precision	void desperate_optimization ( int precision )
print floats with a fixed number of decimals	cout . setf ( ios :: fixed ) ;
print floats with showpoint format	cout . setf ( ios :: showpoint ) ;
print precision with precision	cout . precision ( precision ) ;
call desperate_optimization on 10	desperate_optimization ( 10 ) ;
n = integer	int n ;
read n	cin >> n ;
print n	cout << n ;
for i = 1 to n exclusive , print i	for ( int i = 1 ; i < n ; i ++ ) cout << "   " << i ;
print new line	cout << ' \n ' ;
a = integer	int a ;
Read a	cin >> a ;
print a	cout << a ;
if a is greater than 1 , then print " "	if ( a > 1 ) cout << "   " ;
for i = 0 to a - 1 exclusive	for ( int i = 0 ; i < a - 1 ; i ++ )
print i + 1	cout << i + 1 ;
if i + 2 is not equal to a , then print " "	if ( i + 2 != a ) cout << "   " ;
print a new line	cout << endl ;
MOD = integer	int MOD ;
in function mod_pow with arguments of long long a and long long b and returns a long long	long long mod_pow ( long long a , long long b )
if b is 0 , then return 1	if ( b == 0 ) return 1 ;
if b is 1 , then return a modulo MOD	if ( b == 1 ) return a % MOD ;
if the last bit in binary of b is 1 , then return a modulo MOD * the result of calling mod_pow with arguments a , b - 1 and then modulo the result of that function by MOD	if ( b & 1 ) return ( ( a % MOD ) * mod_pow ( a , b - 1 ) ) % MOD ;
x = long long = the result of calling mod_pow with arguments a , and the b with its elements shifted to the right by one bit	long long x = mod_pow ( a , b >> 1 ) ;
return ( x * x ) modulo MOD	return ( x * x ) % MOD ;
n , m = integer	int n , m ;
read n , m	cin >> n >> m ;
MOD = m	MOD = m ;
r = integer = the result of calling mod_pow with arguments 3 , n	int r = mod_pow ( 3 , n ) ;
if r is 0	if ( r == 0 )
print the result of m - 1	cout << m - 1 << endl ;
else	else
print the result of r - 1	cout << r - 1 << endl ;
declare power with long longs x , integers y , m as arguments , returning long long	long long power ( long long x , int y , int m )
create long long res with res = 1	long long res = 1 ;
while y is greater than 0	while ( y > 0 )
if y bitwise and 1	if ( y & 1 )
set res to res * x	res = res * x ;
set res to res % m	res %= m ;
set y to y bitwise right 1	y = y >> 1 ;
set x to x * x	x = x * x ;
set x to x % m	x %= m ;
return res from function	return res ;
create integers n , m	int n , m ;
read n read m	cin >> n >> m ;
create integer ans with ans = result of run power with long long casted ( 3 ) , n , m as arguments	int ans = power ( ( long long ) 3 , n , m ) ;
if ans is 0	if ( ans == 0 )
print m - 1 print newline	cout << m - 1 << endl ;
else	else
print ans - 1 print newline	cout << ans - 1 << endl ;
in function modl taking three long longs n , k and p and returning a long long	long long modl ( long long n , long long k , long long p )
if n is 0 return 0	if ( n == 0 ) return 0 ;
if k is 0	if ( k == 0 )
return 1	return 1 ;
else if k is even	else if ( k % 2 == 0 )
return ( modl of n , k / 2 and p * ( modl of n , k / 2 and p ) ) mod p	return ( modl ( n , k / 2 , p ) * ( modl ( n , k / 2 , p ) ) ) % p ;
else	else
return ( n * modl of n , k - 1 and p ) mod p	return ( n * modl ( n , k - 1 , p ) ) % p ;
n , m = long long	long long n , m ;
read n then m	cin >> n >> m ;
z = long long with z = modl of 3 , n and m	long long z = modl ( 3 , n , m ) ;
if z is 0	if ( z == 0 )
print m - 1	cout << m - 1 << endl ;
else	else
print z - 1	cout << z - 1 << endl ;
declare integers n and m	int n , m ;
read n and m	cin >> n >> m ;
create long long a = 3	long long a = 3 ;
create integer i = 1	int i = 1 ;
create integer two = 0	int two = 0 ;
while n > 0	while ( n > 0 )
if n is odd , assign i * a % m to i	if ( n % 2 == 1 ) i = i * a % m ;
set n to n / 2	n = n / 2 ;
change a to a squared modulo m	a = ( a * a ) % m ;
print ( i - 1 + m ) % m	cout << ( i - 1 + m ) % m << endl ;
in function pow taking three long longs a , b and m and returning a long long	long long pow ( long long a , long long b , long long m )
res = long long with res = 1	long long res = 1 ;
loop while b is not 0	while ( b )
if b bitwise - and 1 is true then set res to ( res * a ) mod m	if ( b & 1 ) { res = ( res * a ) % m ; }
set a to ( a * a ) mod m	a = ( a * a ) % m ;
set b to b bithsift right by 1	b >>= 1 ;
return res	return res ;
n , m = long long	long long n , m ;
read n then m	cin >> n >> m ;
print ( ( pow of 3 , n and m ) - 1 + m ) mod m	cout << ( pow ( 3 , n , m ) - 1 + m ) % m << endl ;
MAX = const integer with MAX = 3e4 + 5	const int MAX = 3e4 + 5 ;
MAX2 = const long long with MAX2 = 11	const long long MAX2 = 11 ;
MOD = const integer with MOD = 1000000000 + 7	const int MOD = 1000000000 + 7 ;
INF = const long long with INF = 20000	const long long INF = 20000 ;
dr = const integer array with dr = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 }	const int dr [ ] = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;
dc = const integer array with dc = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 }	const int dc [ ] = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;
pi = const double with pi = acos ( - 1 )	const double pi = acos ( - 1 ) ;
eps = const double with eps = 1e - 9	const double eps = 1e-9 ;
n , m = long long	long long n , m ;
in the function pw that returns long long	long long pw ( )
ret = long long with ret = 1 , x = 3	long long ret = 1 , x = 3 ;
while n	while ( n )
if n bitwise and 1 , ret = ( ret * x ) modulo m	if ( n & 1 ) ret = ( ret * x ) % m ;
x = ( x * x ) modulo m	x = ( x * x ) % m ;
n = right shift n 1 place	n >>= 1 ;
return ret	return ret ;
read n , m	cin >> n >> m ;
print ( pw ( ) + m - 1 ) modulo m	cout << ( pw ( ) + m - 1 ) % m << " \n " ;
m = long long	long long m ;
in function pw taking two long longs x and p and returning a long long	long long pw ( long long x , long long p )
if p is 0 return 1 mod m	if ( ! p ) return 1 % m ;
z = long long with z = pw of x and p / 2	long long z = pw ( x , p / 2 ) ;
set z to z * z	z *= z ;
set z to z mod m	z %= m ;
if p is even return z	if ( p % 2 == 0 ) return z ;
set z to z * x	z *= x ;
set z to z mod m	z %= m ;
return z	return z ;
n = long long	long long n ;
raed n then m	cin >> n >> m ;
res = long long with res = 2 * ( ( pw of 3 and n ) - 1 ) / 2	long long res = 2 * ( pw ( 3 , n ) - 1 ) / ( 2 ) ;
set res to res mod m	res %= m ;
increment res by m	res += m ;
set res to res mod m	res %= m ;
print res	cout << res << endl ;
declare power taking in long long ints x , y , and MOD and returning long long int	long long power ( long long x , long long y , long long MOD )
create unsigned long long int res = 1	unsigned long long res = 1 ;
set x to x modulo MOD	x = x % MOD ;
while y is more than 0	while ( y > 0 )
if y & 1 is truthy , set res to ( res * x ) % MOD	if ( y & 1 ) { res = ( res * x ) % MOD ; }
set y to y > > 1	y = y >> 1 ;
set x to ( x * x ) % MOD	x = ( x * x ) % MOD ;
convert res to long long int and return it	return ( long long ) res ;
create long long ints n , m , and res	long long n , m , res ;
read n and m	cin >> n >> m ;
set res to power ( 3 , n , m ) - 1	res = power ( 3 , n , m ) - 1 ;
print ( res + m ) % m	cout << ( res + m ) % m << endl ;
declare long longs m and n	long long m , n ;
pw is a long long function with long long arguments a and b	long long pw ( long long a , long long b )
declare long long res with value 1	long long res = 1 ;
while b is not 0	while ( b )
if b & 1 is true , change res to ( res * a ) modulo m	if ( b & 1 ) res = ( res * a ) % m ;
set a to a squared modulo m	a = ( a * a ) % m ;
change the value of b to b divided by 2	b /= 2 ;
return res	return res ;
read input to n and m	cin >> n >> m ;
declare long long variable with name ans and value = pw of 3 and n	long long ans = ( pw ( 3 , n ) ) ;
decrement ans	ans -- ;
if ans is less than 0 , add m to ans	if ( ans < 0 ) ans += m ;
print ans to the standard output	cout << ans << endl ;
declare f taking in long long integers n and m and returning long long int	long long f ( long long n , long long m )
if n is equal to 0	if ( n == 0 )
return the result of 1 % m	return 1 % m ;
else if n is equal to 1	else if ( n == 1 )
return 3 % m	return 3 % m ;
create long long tmp = f ( n / 2 , m )	long long tmp = f ( n / 2 , m ) ;
if n modulo 2 is 0	if ( n % 2 == 0 )
return the result of tmp * tmp % m	return tmp * tmp % m ;
otherwise	else
return ( tmp * tmp % m ) * 3 % m	return ( tmp * tmp % m ) * 3 % m ;
create ints n and m	int n , m ;
read n and m	cin >> n >> m ;
create long long int fx = f ( n , m )	long long fx = f ( n , m ) ;
if fx is 0	if ( fx == 0 )
print m - 1	cout << m - 1 << endl ;
else	else
print fx - 1	cout << fx - 1 << endl ;
m = long long	long long m ;
in function power taking a long long a and an int n and returning an int	int power ( long long a , int n )
res = long long with res = 1	long long res = 1 ;
loop while n is greater than 0	while ( n > 0 )
if n is uneven	if ( n % 2 == 1 )
set res to res * a	res *= a ;
set res to res mod m	res %= m ;
set a to a * a	a *= a ;
set a to a mod m	a %= m ;
set n to n / 2	n /= 2 ;
return res	return res ;
n = int	int n ;
read n then m	cin >> n >> m ;
print ( ( ( power of 3 and n ) - 1 ) mod m + m ) mod m	cout << ( ( power ( 3 , n ) - 1 ) % m + m ) % m << endl ;
declare power with long longs a , b , m as arguments , returning long long	long long power ( long long a , long long b , long long m )
create long longs temp , ans with temp = a , ans = 1	long long temp = a , ans = 1 ;
while b is true	while ( b )
if b bitwise and 1 is true , set ans to ( ans % m * temp % m ) % m	if ( b & 1 ) ans = ( ans % m * temp % m ) % m ;
set temp to ( temp % m * temp % m ) % m	temp = ( temp % m * temp % m ) % m ;
set b to b / 2	b /= 2 ;
return ans from function	return ans ;
create long longs n , m	long long n , m ;
read n read m	cin >> n >> m ;
print ( result of run power with 3 , n , m as arguments - 1 + m ) % m print newline	cout << ( power ( 3 , n , m ) - 1 + m ) % m << endl ;
create long longs ax , ay , bx , by , cx , cy	long long ax , ay , bx , by , cx , cy ;
read ax read ay read bx read by read cx read cy	cin >> ax >> ay >> bx >> by >> cx >> cy ;
create long long ds with ds = ( bx * cy - by * cx ) - ( ax * cy - ay * cx ) + ( ax * by - ay * bx )	long long ds = ( bx * cy - by * cx ) - ( ax * cy - ay * cx ) + ( ax * by - ay * bx ) ;
if ds is 0	if ( ds == 0 )
print " TOWARDS "	cout << " TOWARDS " ;
else if ds is less than 0	else if ( ds < 0 )
print " RIGHT "	cout << " RIGHT " ;
else	else
print " LEFT "	cout << " LEFT " ;
print ' \ n '	cout << ' \n ' ;
function solve ( no args , no return value )	void solve ( )
a1 , a2 , b1 , b2 , c1 , c2 = long long	long long a1 , a2 , b1 , b2 , c1 , c2 ;
read a1 , a2 , b1 , b2 , c1 , c2	cin >> a1 >> a2 >> b1 >> b2 >> c1 >> c2 ;
d = ( b1 - a1 ) * ( c2 - a2 ) - ( b2 - a2 ) * ( c1 - a1 )	long long d = ( b1 - a1 ) * ( c2 - a2 ) - ( b2 - a2 ) * ( c1 - a1 ) ;
if d is 0	if ( d == 0 )
print " TOWARDS "	cout << " TOWARDS " << endl ;
else if d > 0	else if ( d > 0 )
print " LEFT "	cout << " LEFT " << endl ;
else	else
print " RIGHT "	cout << " RIGHT " << endl ;
set output precision to 12 digits	cout << setprecision ( 12 ) << fixed ;
solve ( )	solve ( ) ;
declare fp with long longs n , p as arguments , returning long long	long long fp ( long long n , long long p )
if p is 0 , return 1 from function	if ( p == 0 ) return 1 ;
if p is 1 , return n from function	if ( p == 1 ) return n ;
create long long res with res = result of run fp with n , p / 2 as arguments	long long res = fp ( n , p / 2 ) ;
set res to res * res	res = ( ( res ) * ( res ) ) ;
if p % 2 , set res to res * n	if ( p % 2 ) res = ( res * n ) ;
return res from function	return res ;
create pair of integer , integer array arr with size 5	pair < int , int > arr [ 5 ] ;
create integers a , b , c	int a , b , c ;
create soubles s , ss , with s = - 1 , ss = - 1	double s = - 1 , ss = - 1 ;
create boolean f with f = 0	bool f = 0 ;
for i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
read first element of arr [ i ] read second element of arr [ i ]	cin >> arr [ i ] . first >> arr [ i ] . second ;
if i is 1	if ( i == 1 )
if ( ( first element of arr [ i ] - first element of arr [ i - 1 ] ) is not 0 ) set s to ( second element of arr [ i ] - second element of arr [ i - 1 ] ) / ( first element of arr [ i ] - first element of arr [ i - 1 ] )	if ( ( arr [ i ] . first - arr [ i - 1 ] . first ) != 0 ) s = ( arr [ i ] . second - arr [ i - 1 ] . second ) / ( arr [ i ] . first - arr [ i - 1 ] . first ) ;
else if i is 2	else if ( i == 2 )
if ( ( first element of arr [ i ] - first element of arr [ i - 1 ] ) is not 0 ) set ss to ( second element of arr [ i ] - second element of arr [ i - 1 ] ) / ( first element of arr [ i ] - first element of arr [ i - 1 ] )	if ( ( arr [ i ] . first - arr [ i - 1 ] . first ) != 0 ) ss = ( arr [ i ] . second - arr [ i - 1 ] . second ) / ( arr [ i ] . first - arr [ i - 1 ] . first ) ;
if s is ss , set f to 1	if ( s == ss ) f = 1 ;
if f is true , return print " TOWARDS " print ' \ n ' , 0 from function	if ( f ) return cout << " TOWARDS " << ' \n ' , 0 ;
if second element of arr [ 0 ] is greater than second element of arr [ 1 ]	if ( arr [ 0 ] . second > arr [ 1 ] . second )
if first element of arr [ 2 ] is greater than first element of arr [ 1 ]	if ( arr [ 2 ] . first > arr [ 1 ] . first )
return print " LEFT " print ' \ n ' , 0 from function	return cout << " LEFT " << ' \n ' , 0 ;
else	else
return print " RIGHT " print ' \ n ' , 0 from function	return cout << " RIGHT " << ' \n ' , 0 ;
else if second element of arr [ 0 ] is less than second element of arr [ 1 ]	else if ( arr [ 0 ] . second < arr [ 1 ] . second )
if first element of arr [ 2 ] is less than first element of arr [ 1 ]	if ( arr [ 2 ] . first < arr [ 1 ] . first )
return print " LEFT " print ' \ n ' , 0 from function	return cout << " LEFT " << ' \n ' , 0 ;
else	else
return print " RIGHT " print ' \ n ' , 0 from function	return cout << " RIGHT " << ' \n ' , 0 ;
else if second element of arr [ 0 ] is second element of arr [ 1 ] and first element of arr [ 0 ] is less than first element of arr [ 1 ]	else if ( arr [ 0 ] . second == arr [ 1 ] . second && arr [ 0 ] . first < arr [ 1 ] . first )
if second element of arr [ 2 ] is greater than second element of arr [ 1 ]	if ( arr [ 2 ] . second > arr [ 1 ] . second )
return print " LEFT " print ' \ n ' , 0 from function	return cout << " LEFT " << ' \n ' , 0 ;
else	else
return print " RIGHT " print ' \ n ' , 0 from function	return cout << " RIGHT " << ' \n ' , 0 ;
else if second element of arr [ 0 ] is second element of arr [ 1 ] and first element of arr [ 0 ] is greater than first element of arr [ 1 ]	else if ( arr [ 0 ] . second == arr [ 1 ] . second && arr [ 0 ] . first > arr [ 1 ] . first )
if second element of arr [ 2 ] is less than second element of arr [ 1 ]	if ( arr [ 2 ] . second < arr [ 1 ] . second )
return print " LEFT " print ' \ n ' , 0 from function	return cout << " LEFT " << ' \n ' , 0 ;
else	else
return print " RIGHT " print ' \ n ' , 0 from function	return cout << " RIGHT " << ' \n ' , 0 ;
x1 , x2 , x3 , y1 , y2 , y3 = integers	long long int x1 , x2 , x3 , y1 , y2 , y3 ;
Read x1 , x2 , x3 , y1 , y2 , y3	cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
if ( y2 - y1 ) * ( x3 - x2 ) is equal to ( y3 - y2 ) * ( x2 - x1 )	if ( ( y2 - y1 ) * ( x3 - x2 ) == ( y3 - y2 ) * ( x2 - x1 ) )
print TOWARDS and a new line	cout << " TOWARDS " << endl ;
else if ( x3 - x2 ) * ( y2 - y1 ) - ( x2 - x1 ) * ( y3 - y2 ) is greater than 0	else if ( ( x3 - x2 ) * ( y2 - y1 ) - ( x2 - x1 ) * ( y3 - y2 ) > 0 )
print RIGHT and a new line	cout << " RIGHT " << endl ;
else do the following	else
print LEFT and a new line	cout << " LEFT " << endl ;
create long long integers xa , ya , xb , yb , xc , and yc	long long xa , ya , xb , yb , xc , yc ;
read xa , ya , xb , yb , xc , and yc	cin >> xa >> ya >> xb >> yb >> xc >> yc ;
create long long integer cp = ( xb - xa ) * ( yc - ya ) - ( yb - ya ) * ( xc - xa )	long long cp = ( xb - xa ) * ( yc - ya ) - ( yb - ya ) * ( xc - xa ) ;
if cp is greater than 0	if ( cp > 0 )
print " LEFT \ n "	cout << " LEFT\n " ;
else if cp is less than 0	else if ( cp < 0 )
print " RIGHT \ n "	cout << " RIGHT\n " ;
else	else
print " TOWARDS \ n "	cout << " TOWARDS\n " ;
create long long integers x1 , x2 , x3 , y1 , y2 , y3	long long int x1 , x2 , x3 , y1 , y2 , y3 ;
read x1 read y1 read x2 read y2 read x3 read y3	cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
if ( y2 - y1 ) * ( x3 - x2 ) is ( y3 - y2 ) * ( x2 - x1 )	if ( ( y2 - y1 ) * ( x3 - x2 ) == ( y3 - y2 ) * ( x2 - x1 ) )
print " TOWARDS " print newline	cout << " TOWARDS " << endl ;
else if ( x3 - x2 ) * ( y2 - y1 ) - ( x2 - x1 ) * ( y3 - y2 ) is greater than 0	else if ( ( x3 - x2 ) * ( y2 - y1 ) - ( x2 - x1 ) * ( y3 - y2 ) > 0 )
print " RIGHT " print newline	cout << " RIGHT " << endl ;
else	else
print " LEFT " print newline	cout << " LEFT " << endl ;
x1 , y1 , x2 , y2 , x3 , y3 = long longs	long long x1 , y1 , x2 , y2 , x3 , y3 ;
read x1 , y1 , x2 , y2 , x3 , y3	cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
vx1 = long long = x2 - x1 , vy1 = long long = y2 - y1 , vx2 = long long = x3 - x2 , vy2 = long long = y3 - y2	long long vx1 = x2 - x1 , vy1 = y2 - y1 , vx2 = x3 - x2 , vy2 = y3 - y2 ;
cha = long long = vx1 * vy2 - vx2 * vy1	long long cha = vx1 * vy2 - vx2 * vy1 ;
if cha > 0 , then print LEFT	if ( cha > 0 ) { cout << " LEFT " << endl ; }
if cha < 0 , then print RIGHT	if ( cha < 0 ) { cout << " RIGHT " << endl ; }
if cha is 0 , then print TOWARDS	if ( cha == 0 ) { cout << " TOWARDS " << endl ; }
f = integer = 0	int f = 0 ;
x1 , x2 , x3 , y1 , y , 2 , y3 = long longs	long long x1 , x2 , x3 , y1 , y2 , y3 ;
read x1 , y1 , x2 , y2 , x3 , y3	cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
temp = long long = ( x2 - x1 ) * ( y3 - y2 ) - ( y2 - y1 ) * ( x3 - x2 )	long long temp = ( x2 - x1 ) * ( y3 - y2 ) - ( y2 - y1 ) * ( x3 - x2 ) ;
if temp is 0	if ( temp == 0 )
f = 0	f = 0 ;
else if temp > 0	else if ( temp > 0 )
f = 1	f = 1 ;
else	else
f = 2	f = 2 ;
if f is 0	if ( f == 0 )
print TOWARDS	puts ( " TOWARDS " ) ;
else if f is 2	else if ( f == 2 )
print RIGHT	puts ( " RIGHT " ) ;
else	else
print LEFT	puts ( " LEFT " ) ;
let x = array of long integers of length 4 , y = array of long integers of length 4	long long x [ 4 ] , y [ 4 ] ;
for i = 1 to 3 inclusive , read x [ i ] and y [ i ]	for ( int i = 1 ; i <= ( 3 ) ; i ++ ) cin >> x [ i ] >> y [ i ] ;
let a1 be a long integer with a1 = y [ 1 ] - y [ 2 ]	long long a1 = y [ 1 ] - y [ 2 ] ;
let b1 be a long integer with b1 = x [ 2 ] - x [ 1 ]	long long b1 = x [ 2 ] - x [ 1 ] ;
let c1 be a long integer with c1 = x [ 1 ] * y [ 2 ] - x [ 2 ] * y [ 1 ]	long long c1 = x [ 1 ] * y [ 2 ] - x [ 2 ] * y [ 1 ] ;
let a2 be a long integer with a2 = y [ 2 ] - y [ 3 ]	long long a2 = y [ 2 ] - y [ 3 ] ;
let b2 be a long integer with b2 = x [ 3 ] - x [ 2 ]	long long b2 = x [ 3 ] - x [ 2 ] ;
let c2 be a long integer with c2 = x [ 2 ] * y [ 3 ] - x [ 3 ] * y [ 2 ]	long long c2 = x [ 2 ] * y [ 3 ] - x [ 3 ] * y [ 2 ] ;
if a1 * b2 is equal to a2 * b1 and b1 * c2 is equal to b2 * c1	if ( a1 * b2 == a2 * b1 && b1 * c2 == b2 * c1 )
print TOWARDS and newline	cout << " TOWARDS\n " ;
else do the following	else
if a1 * b2 is greater than a2 * b1	if ( a1 * b2 > a2 * b1 )
print LEFT and newline	cout << " LEFT\n " ;
else do the following	else
print RIGHT and newline	cout << " RIGHT\n " ;
declare cross with long longs x0 , y0 , x1 , y1 as arguments , returning long long	long long cross ( long long x0 , long long y0 , long long x1 , long long y1 )
return y1 * x0 - y0 * x1 from function	return y1 * x0 - y0 * x1 ;
create long long vectors X , Y with X initialized with 3 , Y initialized with 3	vector < long long > X ( 3 ) , Y ( 3 ) ;
for i = 0 to 3 exclusive , read X [ i ] read Y [ i ]	for ( long long i = 0 ; i < 3 ; ++ i ) cin >> X [ i ] >> Y [ i ] ;
create long long c with c = result of run cross with X [ 1 ] - X [ 0 ] , Y [ 1 ] - Y [ 0 ] , X [ 2 ] - X [ 1 ] , Y [ 2 ] - Y [ 1 ] as arguments	long long c = cross ( X [ 1 ] - X [ 0 ] , Y [ 1 ] - Y [ 0 ] , X [ 2 ] - X [ 1 ] , Y [ 2 ] - Y [ 1 ] ) ;
if c is 0	if ( c == 0 )
print " TOWARDS \ n "	cout << " TOWARDS\n " ;
else if c is less than 0	else if ( c < 0 )
print " RIGHT \ n "	cout << " RIGHT\n " ;
else	else
print " LEFT \ n "	cout << " LEFT\n " ;
x1 , y1 , x2 , y2 , x3 , y3 = integers	int x1 , y1 , x2 , y2 , x3 , y3 ;
Read x1 , y1 , x2 , y2 , x3 , y3	cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
if ( y2 - y1 ) * ( x3 - x2 ) is equal to ( y3 - y2 ) * ( x2 - x1 )	if ( ( y2 - y1 ) * ( x3 - x2 ) == ( y3 - y2 ) * ( x2 - x1 ) )
print TOWARDS and a new line	cout << " TOWARDS " << endl ;
else if y1 is equal to y2	else if ( y1 == y2 )
if x2 is greater than x1	if ( x2 > x1 )
if y3 is greater than y2	if ( y3 > y2 )
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
print RIGHT and a new line	cout << " RIGHT " << endl ;
else do the following	else
if y3 is less than y2	if ( y3 < y2 )
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
print RIGHT and a new line	cout << " RIGHT " << endl ;
else if x1 is equal to x2	else if ( x1 == x2 )
if y1 is less than y2	if ( y1 < y2 )
if x3 is greater than x2	if ( x3 > x2 )
print RIGHT and a new line	cout << " RIGHT " << endl ;
else do the following	else
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
if x3 is less than x2	if ( x3 < x2 )
print RIGHT and a new line	cout << " RIGHT " << endl ;
else do the following	else
print LEFT and a new line	cout << " LEFT " << endl ;
else if x1 is less than x2 and y1 is less than y2	else if ( x1 < x2 && y1 < y2 )
if x3 is less than x2	if ( x3 < x2 )
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
print RIGHT and a new line	cout << " RIGHT " << endl ;
else if x1 is greater than x2 and y1 is greater than y2	else if ( x1 > x2 && y1 > y2 )
if x3 is greater than x2	if ( x3 > x2 )
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
print RIGHT and a new line	cout << " RIGHT " << endl ;
else if x1 is less than x2 and y1 is greater than y2	else if ( x1 < x2 && y1 > y2 )
if x3 is greater than x2	if ( x3 > x2 )
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
print RIGHT and a new line	cout << " RIGHT " << endl ;
else do the following	else
if x3 is less than x2	if ( x3 < x2 )
print LEFT and a new line	cout << " LEFT " << endl ;
else do the following	else
print RIGHT and a new line	cout << " RIGHT " << endl ;
let n and m be integers	int n , m ;
declare string called st	string st ;
read n and m	cin >> n >> m ;
res is an integer array with size m	int res [ m ] ;
fill res with 0	for ( int i = 0 ; i < m ; i ++ ) { res [ i ] = 0 ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read st	cin >> st ;
if there is no character " 1 " in st	if ( st . find ( ' 1 ' ) == string :: npos )
print - 1 and a new line	cout << - 1 << endl ;
cur is an integer array with 3 * m elements	int cur [ 3 * m ] ;
curAns is an array of integers with size m	int curAns [ m ] ;
for j = 0 to 3 * m exclusive set cur [ j ] to st [ j % m ] - ' 0 '	for ( int j = 0 ; j < 3 * m ; j ++ ) { cur [ j ] = st [ j % m ] - ' 0 ' ; }
declare integer called counter = 0	int counter = 0 ;
for a = m - 1 to 0 inclusive counting down	for ( int a = m - 1 ; a >= 0 ; a -- )
if cur [ a ] = 1	if ( cur [ a ] == 1 )
break the loop	break ;
else	else
increase counter	counter ++ ;
for k = m to 2 * m exclusive	for ( int k = m ; k < 2 * m ; k ++ )
if cur [ k ] = 1	if ( cur [ k ] == 1 )
curAns [ k % m ] = 0	curAns [ k % m ] = 0 ;
set counter to 0	counter = 0 ;
else	else
increment counter and set curAns [ k % m ] = counter	curAns [ k % m ] = ++ counter ;
assign value of 0 to counter	counter = 0 ;
for a = 2 * m to 3 * m exclusive	for ( int a = 2 * m ; a < 3 * m ; a ++ )
if cur [ a ] = 1	if ( cur [ a ] == 1 )
stop the loop	break ;
else	else
increment counter	counter ++ ;
for integer k = 2 * m - 1 to m inclusive counting down	for ( int k = 2 * m - 1 ; k >= m ; k -- )
if cur [ k ] = 1	if ( cur [ k ] == 1 )
curAns [ k % m ] = 0	curAns [ k % m ] = 0 ;
set value of counter to 0	counter = 0 ;
else	else
increment counter	counter ++ ;
curAns [ k % m ] = min of curAns [ k % m ] and counter	curAns [ k % m ] = min ( curAns [ k % m ] , counter ) ;
for integer j = 0 to m exclusive increase res [ j ] by curAns [ j ]	for ( int j = 0 ; j < m ; j ++ ) { res [ j ] += curAns [ j ] ; }
declare integer variable called min = INT_MAX	int min = INT_MAX ;
for integer i = 0 to m exclusive	for ( int i = 0 ; i < m ; i ++ )
if min is greater than res [ i ] , set min to res [ i ]	if ( min > res [ i ] ) min = res [ i ] ;
print min and a new line	cout << min << endl ;
integer constant INF = 1 < < 29	const int INF = 1 << 29 ;
declare integer variables n and m	int n , m ;
read n and m	cin >> n >> m ;
a is an array of strings with size n	string a [ n ] ;
read n elements into a	for ( int i = 0 ; i < ( n ) ; i ++ ) cin >> a [ i ] ;
ans is an array of integers with size m	int ans [ m ] ;
set m elements of ans to 0	for ( int i = 0 ; i < ( m ) ; i ++ ) ans [ i ] = 0 ;
chk is integer	int chk ;
for i = 0 to n exclusive	for ( int i = 0 ; i < ( n ) ; i ++ )
set value of chk to 0	chk = 0 ;
for integer j = 0 to m exclusive , increment chk by 1 if a [ i ] [ j ] = ' 1 '	for ( int j = 0 ; j < ( m ) ; j ++ ) { chk += ( a [ i ] [ j ] == ' 1 ' ) ; }
if chk = 0	if ( chk == 0 )
print " - 1 \ n "	cout << " -1\n " ;
for i = 0 to n exclusive	for ( int i = 0 ; i < ( n ) ; i ++ )
declare integer called last	int last ;
declare boolean variable called found = 0	bool found = 0 ;
for j = m - 1 to 0 inclusive counting down	for ( int j = m - 1 ; j >= 0 ; -- j )
if a [ i ] [ j ] = ' 1 '	if ( a [ i ] [ j ] == ' 1 ' )
set value of last to j	last = j ;
stop the loop	break ;
, curr is an array of integers with size m	int curr [ m ] ;
for j = 0 to m exclusive , curr [ j ] = INT_MAX	for ( int j = 0 ; j < ( m ) ; j ++ ) curr [ j ] = INT_MAX ;
for j = 0 to m exclusive	for ( int j = 0 ; j < ( m ) ; j ++ )
if a [ i ] [ j ] = ' 1 '	if ( a [ i ] [ j ] == ' 1 ' )
set value of last to j	last = j ;
found = 1	found = 1 ;
if found is 0	if ( ! found )
curr [ j ] = min ( curr [ j ] , ( m - last ) + j )	curr [ j ] = min ( curr [ j ] , ( m - last ) + j ) ;
else	else
curr [ j ] = min of curr [ j ] and abs ( j - last )	curr [ j ] = min ( curr [ j ] , abs ( j - last ) ) ;
found = 0	found = 0 ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
if a [ i ] [ j ] = ' 1 '	if ( a [ i ] [ j ] == ' 1 ' )
last = j	last = j ;
break the loop	break ;
for integer j = m - 1 to 0 inclusive counting down	for ( int j = m - 1 ; j >= 0 ; -- j )
if a [ i ] [ j ] = ' 1 '	if ( a [ i ] [ j ] == ' 1 ' )
set value of last to j	last = j ;
assign value of 1 to found	found = 1 ;
if found is 0	if ( ! found )
curr [ j ] = min ( curr [ j ] , ( last + 1 ) + ( m - 1 - j ) )	curr [ j ] = min ( curr [ j ] , ( last + 1 ) + ( m - 1 - j ) ) ;
else	else
curr [ j ] = min ( curr [ j ] , abs ( j - last ) )	curr [ j ] = min ( curr [ j ] , abs ( j - last ) ) ;
for integer j = 0 to m exclusive increment ans [ j ] by curr [ j ]	for ( int j = 0 ; j < ( m ) ; j ++ ) ans [ j ] += curr [ j ] ;
res is integer = INT_MAX	int res = INT_MAX ;
for i = 0 to m exclusive , set res to min ( res , ans [ i ] )	for ( int i = 0 ; i < ( m ) ; i ++ ) res = min ( res , ans [ i ] ) ;
print res and a new line	cout << res << endl ;
create constant integer maxn with maxn = 2e5 + 10	const int maxn = 2e5 + 10 ;
create integers n , m	int n , m ;
create string array s with size 110	string s [ 110 ] ;
create 2d integer array l with size 110 by 10010	int l [ 110 ] [ 10010 ] ;
create 2d integer array r with size 110 by 10010	int r [ 110 ] [ 10010 ] ;
read n read m	cin >> n >> m ;
for i = 0 to n exclusive , read s [ i ]	for ( int i = 0 ; i < n ; ++ i ) cin >> s [ i ] ;
create boolean bad with bad = false	bool bad = false ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
create integer last with last = - 1	int last = - 1 ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
if s [ i ] [ j ] is ' 0 '	if ( s [ i ] [ j ] == ' 0 ' )
set l [ i ] [ j ] to - 1 if last is - 1 , else j - last	l [ i ] [ j ] = ( last == - 1 ? - 1 : j - last ) ;
else	else
set l [ i ] [ j ] to 0 , set last to j	l [ i ] [ j ] = 0 , last = j ;
if last is less than 0 , set bad to true	if ( last < 0 ) bad = true ;
set last to - 1	last = - 1 ;
for j = m - 1 to 0 inclusive , decrementing j	for ( int j = m - 1 ; j >= 0 ; -- j )
if s [ i ] [ j ] is ' 0 '	if ( s [ i ] [ j ] == ' 0 ' )
set r [ i ] [ j ] to - 1 if last is - 1 , else last - j	r [ i ] [ j ] = ( last == - 1 ? - 1 : last - j ) ;
else	else
set r [ i ] [ j ] to 0 , set last to j	r [ i ] [ j ] = 0 , last = j ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
if l [ i ] [ j ] is less than 0 , set l [ i ] [ j ] to j + l [ i ] [ m - 1 ] + 1	if ( l [ i ] [ j ] < 0 ) l [ i ] [ j ] = j + l [ i ] [ m - 1 ] + 1 ;
for j = m - 1 to 0 inclusive , decrementing j	for ( int j = m - 1 ; j >= 0 ; -- j )
if r [ i ] [ j ] is less than 0 , set r [ i ] [ j ] to ( m - 1 ) - j + r [ i ] [ 0 ] + 1	if ( r [ i ] [ j ] < 0 ) r [ i ] [ j ] = ( m - 1 ) - j + r [ i ] [ 0 ] + 1 ;
if bad is true	if ( bad )
print - 1 print " \ n "	cout << - 1 << " \n " ;
create long long ans with ans = n * m + 1	long long ans = n * m + 1 ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
create long long cur with cur = 0	long long cur = 0 ;
for i = 0 to n exclusive , increment cur by minimum of l [ i ] [ j ] and r [ i ] [ j ]	for ( int i = 0 ; i < n ; ++ i ) cur += min ( l [ i ] [ j ] , r [ i ] [ j ] ) ;
set ans to minimum of ans and cur	ans = min ( ans , cur ) ;
print ans print " \ n "	cout << ans << " \n " ;
assign value 11000 to constant integer maxn	const int maxn = 11000 ;
create integer INF = 1 < < 30	int INF = 1 << 30 ;
let m and n be integers	int m , n ;
da is an 2d array of integers with size 110 by maxn	int da [ 110 ] [ maxn ] ;
joo is an 2d array of integers with size 110 by maxn	int joo [ 110 ] [ maxn ] ;
read m and n	cin >> m >> n ;
create string s	string s ;
for i = 0 to m exclusive	for ( int i = 0 ; i < m ; i ++ )
read s	cin >> s ;
for integer j = 0 to n exclusive set da [ i ] [ j ] to 1 if s [ j ] = ' 1 ' , 0 if it is not	for ( int j = 0 ; j < n ; j ++ ) da [ i ] [ j ] = ( s [ j ] == ' 1 ' ? 1 : 0 ) ;
declare integers t and jj	int t , jj ;
for i = 0 to m exclusive	for ( int i = 0 ; i < m ; i ++ )
t = INF	t = INF ;
for j = 0 while j < n * 2	for ( int j = 0 ; j < n * 2 ; j ++ )
jj = j % n	jj = j % n ;
if da [ i ] [ jj ] = 1 , set t to 0	if ( da [ i ] [ jj ] == 1 ) t = 0 ;
set joo [ i ] [ jj ] = t and increment t	joo [ i ] [ jj ] = t ++ ;
t = INF	t = INF ;
for integer j = n * 2 to 0 inclusive counting down	for ( int j = n * 2 ; j >= 0 ; j -- )
jj = j % n	jj = j % n ;
if da [ i ] [ jj ] = 1 , set t to 0	if ( da [ i ] [ jj ] == 1 ) t = 0 ;
joo [ i ] [ jj ] = min of joo [ i ] [ jj ] and t	joo [ i ] [ jj ] = min ( joo [ i ] [ jj ] , t ++ ) ;
declare long longs mi = INF and sum	long long mi = INF , sum ;
for integer j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
assign value of 0 to sum	sum = 0 ;
for integer i = 0 to m exclusive add joo [ i ] [ j ] to sum	for ( int i = 0 ; i < m ; i ++ ) { sum += joo [ i ] [ j ] ; }
set mi to min of sum and mi	mi = min ( sum , mi ) ;
if mi > = INF	if ( mi >= INF )
print - 1 and a new line	cout << - 1 << endl ;
else	else
print mi and a new line	cout << mi << endl ;
dist = array of 2 by 10004 int	int dist [ 2 ] [ 10004 ] ;
n , m = int	int n , m ;
read n and m	cin >> n >> m ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
str = string	string str ;
read str	cin >> str ;
firstone = - 1	int firstone = - 1 ;
ff = 0	int ff = 0 ;
while ff < m and str [ ff ] is not ' 1 ' increment ff	while ( ff < m && str [ ff ] != ' 1 ' ) ff ++ ;
if ff is m	if ( ff == m )
print - 1	cout << - 1 << endl ;
firstone = ff	firstone = ff ;
dist [ 0 ] [ ff ] = 0	dist [ 0 ] [ ff ] = 0 ;
j = ff + 1 modulo m	int j = ( ff + 1 ) % m ;
while true	while ( true )
if str [ j ] is ' 1 '	if ( str [ j ] == ' 1 ' )
dist [ 0 ] [ j ] = 0	dist [ 0 ] [ j ] = 0 ;
k = j	int k = j ;
while dist [ 0 ] [ k ] < dist [ 0 ] [ k - 1 + m modulo m	while ( dist [ 0 ] [ k ] < dist [ 0 ] [ ( k - 1 + m ) % m ] )
k = k - 1 + m modulo m	k = ( k - 1 + m ) % m ;
dist [ 0 ] [ k ] = dist [ 0 ] [ k + 1 modulo m ] + 1	dist [ 0 ] [ k ] = dist [ 0 ] [ ( k + 1 ) % m ] + 1 ;
if j is firstone break	if ( j == firstone ) break ;
else	else
dist [ 0 ] [ j ] = dist [ 0 ] [ j + m - 1 modulo m ] + 1	dist [ 0 ] [ j ] = dist [ 0 ] [ ( j + m - 1 ) % m ] + 1 ;
j = j + 1 modulo m	j = ( j + 1 ) % m ;
for z = 0 to m exclusive	for ( int z = 0 ; z < m ; z ++ )
increment dist [ 1 ] [ z ] by dist [ 0 ] [ z ]	dist [ 1 ] [ z ] += dist [ 0 ] [ z ] ;
dist [ 0 ] [ z ] = 0	dist [ 0 ] [ z ] = 0 ;
minn = dist [ 1 ] [ 0 ]	int minn = dist [ 1 ] [ 0 ] ;
for h = 1 to m exclusive	for ( int h = 1 ; h < m ; h ++ )
if dist [ 1 ] [ h ] < minn minn = dist [ 1 ] [ h ]	if ( dist [ 1 ] [ h ] < minn ) { minn = dist [ 1 ] [ h ] ; }
print minn	cout << minn << endl ;
create integers n , m	int n , m ;
read n read m	cin >> n >> m ;
create 2d character array a of size n by m	char a [ n ] [ m ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
for j = 0 to m exclusive , read a [ i ] [ j ]	for ( int j = 0 ; j < m ; ++ j ) { cin >> a [ i ] [ j ] ; }
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if not count of ' 1 ' from a [ i ] to a [ i ] + m	if ( ! count ( a [ i ] , a [ i ] + m , ' 1 ' ) )
print - 1 print ' \ n '	cout << - 1 << ' \n ' ;
create 2d integer arrays nearest , l , r , with nearest size n by m , l size n by m , r size n by m	int nearest [ n ] [ m ] , l [ n ] [ m ] , r [ n ] [ m ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
create integer lst with lst = - 1	int lst = - 1 ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
if a [ i ] [ j ] is ' 1 ' , set lst to j	if ( a [ i ] [ j ] == ' 1 ' ) lst = j ;
create boolean c with c = true	bool c = true ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
set lst to j if a [ i ] [ j ] is ' 1 ' , else lst	lst = ( a [ i ] [ j ] == ' 1 ' ? j : lst ) ;
set c to ( c bitwise and a [ i ] [ j ] ) is 0	c &= a [ i ] [ j ] == ' 0 ' ;
set l [ i ] [ j ] to m - lst + j if c is true , else absolute value of j - lst	l [ i ] [ j ] = ( c ? m - lst + j : abs ( j - lst ) ) ;
set lst to - 1	lst = - 1 ;
set c to true	c = true ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
if a [ i ] [ j ] is ' 1 '	if ( a [ i ] [ j ] == ' 1 ' )
set lst to j	lst = j ;
break loop	break ;
for j = m - 1 to 0 inclusive , decrementing j	for ( int j = m - 1 ; j >= 0 ; -- j )
set lst to j if a [ i ] [ j ] is ' 1 ' , else lst	lst = ( a [ i ] [ j ] == ' 1 ' ? j : lst ) ;
set c to ( c bitwise and a [ i ] [ j ] ) is 0	c &= a [ i ] [ j ] == ' 0 ' ;
set r [ i ] [ j ] to lst + 1 + m - ( j + 1 ) if c is true , else absolute value of j - lst	r [ i ] [ j ] = ( c ? lst + 1 + m - ( j + 1 ) : abs ( j - lst ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
for j = 0 to m exclusive , set nearest [ i ] [ j ] to minimum of r [ i ] [ j ] and l [ i ] [ j ]	for ( int j = 0 ; j < m ; ++ j ) { nearest [ i ] [ j ] = min ( r [ i ] [ j ] , l [ i ] [ j ] ) ; }
create integer ans with ans = 0x3f3f3f3f	int ans = 0x3f3f3f3f ;
for j = 0 to m exclusive	for ( int j = 0 ; j < m ; ++ j )
create integer cur with cur = 0	int cur = 0 ;
for i = 0 to n exclusive , increment cur by nearest [ i ] [ j ]	for ( int i = 0 ; i < n ; ++ i ) { cur += nearest [ i ] [ j ] ; }
set ans to minimum of ans and cur	ans = min ( ans , cur ) ;
print ans print ' \ n '	cout << ans << ' \n ' ;
declare integer n	int n ;
read n	cin >> n ;
if n is odd	if ( n % 2 == 1 )
print - 1	cout << - 1 << endl ;
else	else
print " 2 1 "	cout << " 2 1 " ;
for integer i = 3 to n exclusive with increment step 2 , print " " , i + 1 , " " and i	for ( int i = 3 ; i < n ; i += 2 ) { cout << "   " << i + 1 << "   " << i ; }
print new line	cout << endl ;
create int n	int n ;
read n	cin >> n ;
if n mod 2 = 1	if ( n % 2 == 1 )
print - 1	cout << - 1 << endl ;
otherwise	else
print 2 1	cout << " 2 1 " ;
for i = 3 to n exclusive , print " " , i + 1 , " " , i	for ( int i = 3 ; i < n ; i += 2 ) { cout << "   " << i + 1 << "   " << i ; }
print a new line	cout << endl ;
create int t and i	int t , i ;
read t	cin >> t ;
if t mod 2 = 1	if ( t % 2 == 1 )
print - 1	cout << - 1 << endl ;
else	else
print 2 1	cout << " 2 1 " ;
for i = 3 to t exclusive , print " " , i + 1 , " " , i	for ( i = 3 ; i < t ; i += 2 ) { cout << "   " << i + 1 << "   " << i ; }
print a new line	cout << endl ;
let num be integer array with size 101	int num [ 101 ] ;
declare integer variable n	int n ;
read n	cin >> n ;
for integer i = 0 to n exclusive , set num [ i ] to i + 1	for ( int i = 0 ; i < n ; i ++ ) num [ i ] = i + 1 ;
if n is even	if ( n % 2 )
print - 1	cout << - 1 << endl ;
else	else
for i = 1 to n exclusive swap num [ i - 1 ] and num [ i ]	for ( int i = 1 ; i < n ; i += 2 ) { swap ( num [ i - 1 ] , num [ i ] ) ; }
for integer i = 0 to n - 1 exclusive print num [ i ] and " "	for ( int i = 0 ; i < n - 1 ; i ++ ) cout << num [ i ] << "   " ;
print num [ n - 1 ]	cout << num [ n - 1 ] << endl ;
n = long long	long long n ;
read n	cin >> n ;
if n is uneven	if ( n % 2 == 1 )
print - 1	cout << - 1 << endl ;
else	else
i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
if i is uneven	if ( i % 2 == 1 )
print i + 1	cout << i + 1 ;
else	else
print i - 1	cout << i - 1 ;
if i equals n	if ( i == n )
print newline	cout << endl ;
else	else
print " "	cout << "   " ;
n = integer	int n ;
read n	cin >> n ;
if n modulo 2 is 1	if ( n % 2 == 1 )
print - 1	cout << - 1 << endl ;
else	else
temp = integer with temp = 2	int temp = 2 ;
count = integer with count = 0	int count = 0 ;
while not temp is n - 1	while ( temp != n - 1 )
print temp , " "	cout << temp << "   " ;
increment count	count ++ ;
if count modulo 2 is 1	if ( count % 2 == 1 )
temp = temp - 1	temp -= 1 ;
else	else
temp = temp + 3	temp += 3 ;
print temp	cout << temp << endl ;
a , b = integer	int a , b ;
read a	cin >> a ;
if a modulo not 2 is 0	if ( a % 2 != 0 )
print - 1	cout << - 1 << endl ;
else	else
for b = 2 to a - 2 inclusive with b = b + 2 then print b , ' ' , b - 1	for ( b = 2 ; b <= a - 2 ; b += 2 ) cout << b << '   ' << b - 1 << '   ' ;
print a , ' ' , a - 1	cout << a << '   ' << a - 1 << endl ;
p = integer	int p ;
read p	cin >> p ;
if p modulo 2 is 1	if ( p % 2 == 1 )
print - 1	cout << " -1\n " ;
else	else
print 2 1	cout << " 2 1 " ;
for i = 4 to p inclusive with i = i + 2 then print i , i - 1	for ( int i = 4 ; i <= p ; i += 2 ) cout << "   " << i << "   " << i - 1 ;
print new line	cout << endl ;
declare fastIo with no arguments , returning void	void fastIo ( ) { }
run fastIo	fastIo ( ) ;
create integer n	int n ;
read n	cin >> n ;
create pair of ( pair of ( integer and integer ) and integer ) m	map < pair < int , int > , int > m ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integers x , y	int x , y ;
read x read y	cin >> x >> y ;
increment m [ new pair with x and y ]	m [ make_pair ( x , y ) ] ++ ;
create map iterator it from pair of integer and integer to integer with it = beginning of m	map < pair < int , int > , int > :: iterator it = m . begin ( ) ;
create integer cnt with cnt = 1	int cnt = 1 ;
while it is not end of m	while ( it != m . end ( ) )
if second element of it is greater than cnt , set cnt to second element of it	if ( it -> second > cnt ) cnt = it -> second ;
increment it	it ++ ;
print cnt print newline	cout << cnt << endl ;
create constant int N = 1e5 + 5	const int N = 1e5 + 5 ;
create integers n , res and Max with res and Max = 1	int n , res = 1 , Max = 1 ;
a is an array of int / int pairs with N elements	pair < int , int > a [ N ] ;
void function Input	void Input ( )
read n	cin >> n ;
for i from 1 to n inclusive incrementing i , read a [ i ] . first and a [ i ] . second	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] . first >> a [ i ] . second ;
sort a from index 1 to n + 1	sort ( a + 1 , a + n + 1 ) ;
Solve is a void function	void Solve ( )
declare integer curr = 1	int curr = 1 ;
loop i from 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if a [ i ] . first = a [ i - 1 ] . first and a [ i ] . second = a [ i - 1 ] . second	if ( a [ i ] . first == a [ i - 1 ] . first && a [ i ] . second == a [ i - 1 ] . second )
increment curr and set res to max of res and curr	curr ++ , res = max ( res , curr ) ;
else	else
change curr to 1	curr = 1 ;
print res and ' \ n '	cout << res << ' \n ' ;
call function Input	Input ( ) ;
call function Solve	Solve ( ) ;
n , temp = integer 2d array of size [ 24 ] [ 60 ] , maxi , h , m = integers with temp = { 0 } , maxi = 0	int n , temp [ 24 ] [ 60 ] = { 0 } , maxi = 0 , h , m ;
read n	cin >> n ;
while n	while ( n -- )
read h , m	cin >> h >> m ;
increment temp [ h ] [ m ]	temp [ h ] [ m ] ++ ;
if temp [ h ] [ m ] > maxi , maxi = temp [ h ] [ m ]	if ( temp [ h ] [ m ] > maxi ) maxi = temp [ h ] [ m ] ;
print maxi	cout << maxi << endl ;
n , h , m , t , c , rest = integer with t = - 1 , c = 0 , res = 1	int n , h , m , t = - 1 , c = 0 , res = 1 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
read h and m	cin >> h >> m ;
t0 = integer with t0 = h * 60 + m	int t0 = h * 60 + m ;
c = if t0 is t , c + 1 else 1	c = t0 == t ? c + 1 : 1 ;
if c > res , res = c	if ( c > res ) res = c ;
t = t0	t = t0 ;
print res	cout << res << endl ;
create integers n , i , j	int n , i , j ;
create integer arrays h , m , count with h size 100000 , m size 100000 , count size 100000	int h [ 100000 ] , m [ 100000 ] , count [ 100000 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read h [ i ] read m [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> h [ i ] >> m [ i ] ; }
for i = 0 to n exclusive , set count [ i ] to 1	for ( i = 0 ; i < n ; i ++ ) count [ i ] = 1 ;
for i = 0 , j = 0 to i is less than n - 1 , incrementing i	for ( i = 0 , j = 0 ; i < n - 1 ; i ++ )
if h [ i ] is h [ i + 1 ] and m [ i ] is m [ i + 1 ]	if ( h [ i ] == h [ i + 1 ] && m [ i ] == m [ i + 1 ] )
increment count [ j ]	count [ j ] ++ ;
else if count [ j ] is not 1	else if ( count [ j ] != 1 )
increment j	j ++ ;
create integer ans with ans = count [ 0 ]	int ans = count [ 0 ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if count [ i ] is greater than ans , set ans to count [ i ]	if ( count [ i ] > ans ) ans = count [ i ] ;
print ans print newline	cout << ans << endl ;
n , i , c = int with c = 0 and x , y = int array of size 100010 each	int n , i , x [ 100010 ] , y [ 100010 ] , c = 0 ;
v = int vector	vector < int > v ;
read n	cin >> n ;
mp = map of pair of int and int and int	map < pair < int , int > , int > mp ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
read x [ i ] then y [ i ]	cin >> x [ i ] >> y [ i ] ;
increment mp [ make_pair of x [ i ] and y [ i ] ]	mp [ make_pair ( x [ i ] , y [ i ] ) ] ++ ;
for i = 0 to n append mp [ make_pair of x [ i ] and y [ i ] ] to v	for ( i = 0 ; i < n ; i ++ ) { v . push_back ( mp [ make_pair ( x [ i ] , y [ i ] ) ] ) ; }
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
if last element of v is 0	if ( v [ v . size ( ) - 1 ] == 0 )
print " 1 "	cout << " 1 " << endl ;
else	else
print last element of v	cout << v [ v . size ( ) - 1 ] << endl ;
n , a , b , c , d , co , m = integers with c = - 1 , d = - 1 , co = 0 , m = 0	int n , a , b , c = - 1 , d = - 1 , co = 0 , m = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a and b	cin >> a >> b ;
if a is c and b is d	if ( a == c && b == d )
increment co	co ++ ;
m = max of m and co	m = max ( m , co ) ;
else	else
co = 1	co = 1 ;
c = a	c = a ;
d = b	d = b ;
if m is 0	if ( m == 0 )
print 1	cout << 1 << endl ;
else	else
print m	cout << m << endl ;
let n , h , m , a = two dimensional array of int with lengths 100 , 100	int n , h , m , a [ 100 ] [ 100 ] ;
while reading new values for n	while ( cin >> n )
let maxa = int = 0	int maxa = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read h , m	cin >> h >> m ;
increment a [ h ] [ m ]	a [ h ] [ m ] ++ ;
if a [ h ] [ m ] > maxa , maxa = a [ h ] [ m ]	if ( a [ h ] [ m ] > maxa ) maxa = a [ h ] [ m ] ;
print maxa	cout << maxa << endl ;
create integers n , i	int n , i ;
read n	cin >> n ;
create integer arrays a , b , with a size n + 2 , b size n + 2	int a [ n + 2 ] , b [ n + 2 ] ;
create integer m with m = 0	int m = 0 ;
create 2d integer array c with size 24 by 60 , with c = { 0 }	int c [ 24 ] [ 60 ] = { 0 } ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ] read b [ i ]	cin >> a [ i ] >> b [ i ] ;
increment c [ a [ i ] ] [ b [ i ] ]	c [ a [ i ] ] [ b [ i ] ] ++ ;
for i = 0 to n exclusive , set m to maximum of m and c [ a [ i ] ] [ b [ i ] ]	for ( i = 0 ; i < n ; i ++ ) { m = max ( m , c [ a [ i ] ] [ b [ i ] ] ) ; }
print m print " \ n "	cout << m << " \n " ;
n , hh , mm , h , m , res , k = integers with hh and mm value of - 1 , res value of 0 and k value of 1	int n , hh = - 1 , mm = - 1 , h , m , res = 0 , k = 1 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read h and m	cin >> h >> m ;
if h equals hh and m equals mm	if ( h == hh && m == mm )
add 1 to k	k ++ ;
else	else
set hh to h	hh = h ;
set mm to m	mm = m ;
if res is greater than k then set res to res otherwise set res to k	res = res > k ? res : k ;
set k to 1	k = 1 ;
if res is greater than k then print res otherwise print k	cout << ( res > k ? res : k ) << endl ;
declare const int N = 1e5 + 5	const int N = 1e5 + 5 ;
let n , res and Max be ints with res and Max = 1	int n , res = 1 , Max = 1 ;
create an array of int / int pairs called a with N elements	pair < int , int > a [ N ] ;
function Input	void Input ( )
read n	cin >> n ;
loop i from 1 to n inclusive , read a [ i ] . first and a [ i ] . second	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] . first >> a [ i ] . second ;
sort a from index 1 to n + 1	sort ( a + 1 , a + n + 1 ) ;
void function Solve	void Solve ( )
declare int variable curr = 1	int curr = 1 ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if a [ i ] . first = a [ i - 1 ] . first and a [ i ] . second = a [ i - 1 ] . second	if ( a [ i ] . first == a [ i - 1 ] . first && a [ i ] . second == a [ i - 1 ] . second )
increment curr by one and set res to max of res and curr	curr ++ , res = max ( res , curr ) ;
else	else
assign 1 to curr	curr = 1 ;
print res and ' \ n '	cout << res << ' \n ' ;
call function Input	Input ( ) ;
call function Solve	Solve ( ) ;
n , ele1 , ele2 = integers	int n , ele1 , ele2 ;
read n	cin >> n ;
arr = integer array of size [ 24 * 60 ] with arr [ 24 * 60 ] = { }	int arr [ 24 * 60 ] = { } ;
while decrement n	while ( n -- )
read ele1 and ele2	cin >> ele1 >> ele2 ;
increment arr [ ele1 * 60 + ele2 ]	arr [ ele1 * 60 + ele2 ] ++ ;
max = integer with max = 0	int max = 0 ;
for i = 0 to 24 * 60 exclusive	for ( int i = 0 ; i < 24 * 60 ; i ++ )
if arr [ i ] > max , max = arr [ i ]	if ( arr [ i ] > max ) { max = arr [ i ] ; }
print max	cout << max << " \n " ;
integers = t	int t ;
read t	cin >> t ;
integers array = arr [ t ] [ 2 ]	int arr [ t ] [ 2 ] ;
read arr [ i ] [ 0 ] , arr [ i ] [ 1 ]	for ( int i = 0 ; i < t ; i ++ ) cin >> arr [ i ] [ 0 ] >> arr [ i ] [ 1 ] ;
set int count to 0 , temp to 1	int count = 0 , temp = 1 ;
for i = 1 to less than t do the following	for ( int i = 1 ; i < t ; i ++ )
set if ( temp > count ) count equals temp	if ( temp > count ) count = temp ;
if arr [ i - 1 ] [ 0 ] is arr [ i ] [ 0 ] & & arr [ i - 1 ] [ 1 ] equals arr [ i ] [ 1 ] then do next	if ( arr [ i - 1 ] [ 0 ] == arr [ i ] [ 0 ] && arr [ i - 1 ] [ 1 ] == arr [ i ] [ 1 ] )
add one to temp	temp ++ ;
else	else
set temp to 1	temp = 1 ;
set if ( temp > count ) count equals temp	if ( temp > count ) count = temp ;
output count	cout << count << endl ;
create integer n	int n ;
read n	cin >> n ;
create integers ans , cnt , ph , pm , with ans = 1 , cnt = 1 , ph = 99 , pm = 99	int ans = 1 , cnt = 1 , ph = 99 , pm = 99 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
create integers h , m	int h , m ;
read h read m	cin >> h >> m ;
if h is ph and m is pm	if ( h == ph && m == pm )
increment cnt	++ cnt ;
if ans is less than cnt , set ans to cnt	if ( ans < cnt ) ans = cnt ;
else	else
set cnt to 1	cnt = 1 ;
set ph to h	ph = h ;
set pm to m	pm = m ;
print ans print newline	cout << ans << endl ;
let n be a long integer	long long int n ;
read n	cin >> n ;
let Arr , Sum be long integers with Sum = 0 , Arr = array of long integers of length n + 2	long long int Arr [ n + 2 ] , Sum = 0 ;
for i = 1 to n inclusive , read Arr [ i ] , increment Sum by Arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> Arr [ i ] , Sum += Arr [ i ] ;
let s , t be long integers	long long int s , t ;
read s , t	cin >> s >> t ;
let Cnt be a long integer with Cnt = 0	long long int Cnt = 0 ;
if s is greater than t , swap s , t	if ( s > t ) swap ( s , t ) ;
for i = s to t exclusive , increment Cnt by Arr [ i ]	for ( int i = s ; i < t ; i ++ ) Cnt += Arr [ i ] ;
print minimum of Cnt , Sum - Cnt and newline	cout << min ( Cnt , Sum - Cnt ) << " \n " ;
a , i , s , t , n = int , b , c , l1 , l2 = 0 , arr = array of 105 int	int a , i , b = 0 , c = 0 , s , t , n , l1 = 0 , l2 = 0 , arr [ 105 ] ;
read n	cin >> n ;
for a = 1 to n inclusive read arr [ a ]	for ( a = 1 ; a <= n ; a ++ ) { cin >> arr [ a ] ; }
read s	cin >> s ;
read t	cin >> t ;
if s > t	if ( s > t )
b = t	b = t ;
c = s	c = s ;
else	else
b = s	b = s ;
c = t	c = t ;
for a = b to c exclusive add arr [ a ] to l1	for ( a = b ; a < c ; a ++ ) { l1 = l1 + arr [ a ] ; }
increment a from c while a is not b	for ( a = c ; a != b ; a ++ )
add arr [ a ] to l2	l2 = l2 + arr [ a ] ;
if a is n a = 0	if ( a == n ) a = 0 ;
if l1 < = l2	if ( l1 <= l2 )
print l1	cout << l1 << endl ;
else	else
print l2	cout << l2 << endl ;
let d , n , x be integers with d = 2d array of integers with 107 rows and 107 columns respectively	int d [ 100 + 7 ] [ 100 + 7 ] , n , x ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to n inclusive , d [ i ] [ j ] is equal to INT_MAX / 10	for ( int j = 1 ; j <= n ; j ++ ) d [ i ] [ j ] = INT_MAX / 10 ;
for i = 1 to n inclusive , d [ i ] [ i ] is equal to 0	for ( int i = 1 ; i <= n ; i ++ ) d [ i ] [ i ] = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read x	cin >> x ;
let j be a integer with j = i + 1	int j = i + 1 ;
if j is greater than n , decrement j by n	if ( j > n ) j -= n ;
d [ i ] [ j ] is equal to x	d [ i ] [ j ] = x ;
d [ j ] [ i ] is equal to x	d [ j ] [ i ] = x ;
for k = 1 to n inclusive	for ( int k = 1 ; k <= n ; k ++ )
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
if d [ i ] [ k ] + d [ k ] [ j ] is less than d [ i ] [ j ] , d [ i ] [ j ] is equal to d [ i ] [ k ] + d [ k ] [ j ]	if ( d [ i ] [ k ] + d [ k ] [ j ] < d [ i ] [ j ] ) d [ i ] [ j ] = d [ i ] [ k ] + d [ k ] [ j ] ;
let s , t be integers	int s , t ;
read s , t	cin >> s >> t ;
print d [ s ] [ t ] and newline	cout << d [ s ] [ t ] << endl ;
create ints K , X , Y , M , and N and int array A of size 105	int K , A [ 105 ] , X , Y , M , N ;
read K	cin >> K ;
for i = 1 to K	for ( int i = 1 ; i <= K ; i ++ )
read A [ i ]	cin >> A [ i ] ;
set N to N + A [ i ]	N += A [ i ] ;
read X and Y	cin >> X >> Y ;
for i = min ( X , Y ) to max ( X , Y ) , set M to M + A [ i ]	for ( int i = min ( X , Y ) ; i < max ( X , Y ) ; i ++ ) { M += A [ i ] ; }
print the min of M and N - M	cout << min ( M , N - M ) << ' \n ' ;
let int array arr of size 1000	int arr [ 1000 ] ;
let int n	int n ;
while cin > > n is truthy	while ( cin >> n )
let int total = 0	int total = 0 ;
set every index of arr to 0	memset ( arr , 0 , sizeof ( arr ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
set total to total + arr [ i ]	total += arr [ i ] ;
let ints s and t	int s , t ;
read s and t	cin >> s >> t ;
create int tmp	int tmp ;
if s is greater than t	if ( s > t )
set tmp to s	tmp = s ;
set s to t	s = t ;
set t to tmp	t = tmp ;
decrease s by 1	s -- ;
reduce t by 1	t -- ;
let ints a1 = 0 and a2 = 0	int a1 = 0 , a2 = 0 ;
for i = s to t exclusive , set a1 to a1 + arr [ i ]	for ( int i = s ; i < t ; i ++ ) { a1 += arr [ i ] ; }
set a2 to total - a1	a2 = total - a1 ;
print the min of a2 and a1	cout << min ( a2 , a1 ) << endl ;
n , sum , sum1 , a , b = int with sum = 0 and sum1 = 0	int n , sum = 0 , sum1 = 0 , a , b ;
read n	cin >> n ;
x = int array of size n	int x [ n ] ;
read n values into x	for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }
read a then b	cin >> a >> b ;
for i = min of a - 1 , b - 1 to max of b - 1 , a - 1 increment sum by x [ i ]	for ( int i = min ( a - 1 , b - 1 ) ; i < max ( b - 1 , a - 1 ) ; i ++ ) { sum += x [ i ] ; }
for i = min of a - 1 , b - 1 to 0 inclusive decrementing i increment sum1 by x [ i ]	for ( int i = min ( a - 1 , b - 1 ) - 1 ; i >= 0 ; i -- ) sum1 += x [ i ] ;
for i = n - 1 to max of b - 1 , a - 1 decrementing i increment sum1 by x [ i ]	for ( int i = n - 1 ; i >= max ( b - 1 , a - 1 ) ; i -- ) sum1 += x [ i ] ;
print min of sum , sum1	cout << min ( sum , sum1 ) << endl ;
create integer n	int n ;
read n	cin >> n ;
create integer array d with size n + 10	int d [ n + 10 ] ;
set d [ 0 ] to 0	d [ 0 ] = 0 ;
for i = 1 to n inclusive , read d [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> d [ i ] ; }
create integer array s with size n + 15	int s [ n + 15 ] ;
set s [ 0 ] to 0	s [ 0 ] = 0 ;
for i = 1 to n + 1 inclusive , set s [ i ] to s [ i - 1 ] + d [ i - 1 ]	for ( int i = 1 ; i <= n + 1 ; i ++ ) { s [ i ] = s [ i - 1 ] + d [ i - 1 ] ; }
create integers sr , t	int sr , t ;
read sr read t	cin >> sr >> t ;
if sr is greater than t , swap values between sr and t	if ( sr > t ) swap ( sr , t ) ;
create integer ans with ans = s [ t ] - s [ sr ]	int ans = s [ t ] - s [ sr ] ;
set ans to minimum of ( ans and s [ sr ] + s [ n + 1 ] - s [ t ] )	ans = min ( ans , s [ sr ] + s [ n + 1 ] - s [ t ] ) ;
print ans print newline	cout << ans << endl ;
create integers n , m , x , y , ans , ans1 , create integer arrays dist , prefs with dist size 100015 , prefs size 100015	int n , m , dist [ 100015 ] , x , y , prefs [ 100015 ] , ans , ans1 ;
read n	cin >> n ;
for i = 0 to n exclusive , read dist [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> dist [ i ] ; }
set prefs [ 0 ] to dist [ 0 ]	prefs [ 0 ] = dist [ 0 ] ;
for i = 1 to n exclusive , set prefs [ i ] to dist [ i ] + prefs [ i - 1 ]	for ( int i = 1 ; i < n ; i ++ ) { prefs [ i ] = dist [ i ] + prefs [ i - 1 ] ; }
read x read y	cin >> x >> y ;
decrement x	x -- ;
decrement y	y -- ;
if x is greater than y , swap values between x and y	if ( x > y ) { swap ( x , y ) ; }
set ans to prefs [ y - 1 ]	ans = prefs [ y - 1 ] ;
decrement ans by prefs [ x - 1 ]	ans -= prefs [ x - 1 ] ;
set ans1 to prefs [ n - 1 ] - ans	ans1 = prefs [ n - 1 ] - ans ;
print minimum of ans and ans1 print newline	cout << min ( ans , ans1 ) << endl ;
declare n , s , t , ans = 0 , tmp = 0 as integers , declare line as integer array with size 101 = { }	int n , s , t , line [ 101 ] = { } , ans = 0 , tmp = 0 ;
declare integer i	int i ;
read n	cin >> n ;
for i = 1 to n inclusive , read line [ i ]	for ( i = 1 ; i <= n ; ++ i ) cin >> line [ i ] ;
read s read t	cin >> s >> t ;
let i be s	i = s ;
while i is not t	while ( i != t )
increment tmp by line [ i ]	tmp += line [ i ] ;
increment i	++ i ;
if i is greater than n , let i be 1	if ( i > n ) i = 1 ;
while i is not s	while ( i != s )
increment ans by line [ i ]	ans += line [ i ] ;
increment i	++ i ;
if i is greater than n , let i be 1	if ( i > n ) i = 1 ;
if tmp is less than ans , let ans be tmp	if ( tmp < ans ) ans = tmp ;
print ans and newline	cout << ans << endl ;
n , i , s1 , s2 , s , t , a = integers with a = array of size 105	int n , i , s1 , s2 , s , t , a [ 105 ] ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
read s , t	cin >> s >> t ;
if s > t , swap s and t	if ( s > t ) swap ( s , t ) ;
for i = s to t exclusive , s1 = s1 + a [ i ]	for ( i = s ; i < t ; i ++ ) s1 += a [ i ] ;
for i = 1 to s exclusive , s2 = s2 + a [ i ]	for ( i = 1 ; i < s ; i ++ ) s2 += a [ i ] ;
for i = n to t , s2 = s2 + a [ i ]	for ( i = n ; i >= t ; i -- ) s2 += a [ i ] ;
print min of s1 and s2	cout << min ( s1 , s2 ) << endl ;
n = int	int n ;
read n	cin >> n ;
arr = int array of size n	int arr [ n ] ;
read n values into arr	for ( int i = 0 ; i < n ; ++ i ) cin >> arr [ i ] ;
a , b = int	int a , b ;
read a then b	cin >> a >> b ;
x = int with x = max of a and b	int x = max ( a , b ) ;
y = int with y = min of a and b	int y = min ( a , b ) ;
d1 = int with d1 = 0	int d1 = 0 ;
for i = x - 1 to n + y - 1 increment d1 by arr [ i mod n ]	for ( int i = x - 1 ; i < n + ( y - 1 ) ; i ++ ) { d1 += arr [ i % n ] ; }
d2 = int with d2 = 0	int d2 = 0 ;
for i = x - 2 to y - 1 inclusive decrementing i increment d2 by arr [ i mod n ]	for ( int i = x - 2 ; i >= y - 1 ; i -- ) { d2 += arr [ i % n ] ; }
print min of d1 and d2	cout << min ( d1 , d2 ) << endl ;
declare NumberOfStations as integer	int NumberOfStations ;
declare integers From , To	int From , To ;
declare integer SumOfDistance = 0	int SumOfDistance = 0 ;
read NumberOfStations	cin >> NumberOfStations ;
declare integer vector StationsDistance initialized with NumberOfStations	vector < int > StaionsDistance ( NumberOfStations ) ;
for Index = 0 to NumberOfStations exclusive	for ( int Index = 0 ; Index < NumberOfStations ; Index ++ )
read StationsDistance [ Index ]	cin >> StaionsDistance [ Index ] ;
increment SumOfDistance by StationsDistance [ Index ]	SumOfDistance += StaionsDistance [ Index ] ;
read From and To	cin >> From >> To ;
declare integers Start , End	int Start , End ;
if From is less than To	if ( From < To )
let Start be From	Start = From ;
let End be To	End = To ;
else	else
let Start be To	Start = To ;
let End be From	End = From ;
declare TheOtherDestance as integer = 0	int TheOtherDestance = 0 ;
for Start is less than End , incrementing Start , increment TheOtherDestance by StaionsDistance [ Start - 1 ]	for ( ; Start < End ; Start ++ ) TheOtherDestance += StaionsDistance [ Start - 1 ] ;
print minimum of TheOtherDestance and ( SumOfDistance - TheOtherDestance ) , newline	cout << min ( TheOtherDestance , ( SumOfDistance - TheOtherDestance ) ) << endl ;
n = long long int	long long int n ;
read n	cin >> n ;
d = long long int array of size n	long long int d [ n ] ;
read n values into d	for ( int i = 0 ; i < n ; i ++ ) { cin >> d [ i ] ; }
s , t = long long int	long long int s , t ;
read s then t	cin >> s >> t ;
if s is greater than t	if ( s > t )
temp = long long int with temp = s	long long int temp = s ;
set s to t	s = t ;
set t to temp	t = temp ;
dist1 , dist2 = long long int with dist1 = 0 and dist2 = 0	long long int dist1 = 0 , dist2 = 0 ;
for i = s - 1 to t - 1 increment dist1 by d [ i ]	for ( int i = s - 1 ; i < t - 1 ; i ++ ) { dist1 += d [ i ] ; }
flag = bool with flag = true	bool flag = true ;
for i = t - 1 to s - 1	for ( int i = t - 1 ; i != s - 1 ; i ++ )
if i is a multiple of n and flag is true	if ( i % n == 0 && flag )
set i to - 1	i = - 1 ;
set flag to false	flag = false ;
continue	continue ;
increment dist2 by d [ i ]	dist2 += d [ i ] ;
if dist2 > dist1	if ( dist2 > dist1 )
print dist1	cout << dist1 << endl ;
else	else
print dist2	cout << dist2 << endl ;
let n , d with 255 elements , s , and t be integers	int n , d [ 255 ] , s , t ;
let res1 and res2 be integers with value 0	int res1 = 0 , res2 = 0 ;
read n	cin >> n ;
read n values into array i	for ( int i = 1 ; i <= n ; i ++ ) { cin >> d [ i ] ; }
iterate and set 2 * n values into array d with element i - n	for ( int i = n + 1 ; i <= 2 * n ; i ++ ) { d [ i ] = d [ i - n ] ; }
read s and t	cin >> s >> t ;
if s is more than t , swap s and t	if ( s > t ) swap ( s , t ) ;
for i from s to t exclusive , add d at element i to res1	for ( int i = s ; i < t ; i ++ ) { res1 += d [ i ] ; }
for i from t to n + s exclusive , add d at element i to res2	for ( int i = t ; i < n + s ; i ++ ) { res2 += d [ i ] ; }
print min of res1 and res2	cout << min ( res1 , res2 ) << endl ;
n , s , t , sum , m1 = int with sum = 0 and m1 = 0	int n , s , t , sum = 0 , m1 = 0 ;
read n	cin >> n ;
arr = int array of size n	int arr [ n ] ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
increment sum by arr [ i ]	sum += arr [ i ] ;
read s then t	cin >> s >> t ;
decrement s	s -- ;
decrement t	t -- ;
l = int with l = min of s and t	int l = min ( s , t ) ;
h = int with h = max of s and t	int h = max ( s , t ) ;
for i = l to j increment m1 by arr [ i ]	for ( int i = l ; i < h ; i ++ ) { m1 += arr [ i ] ; }
print min of m1 and sum - m1	cout << min ( m1 , sum - m1 ) << " \n " ;
declare integer variables n , m , u , v , x and y	int n , m , u , v , x , y ;
read user input to n	cin >> n ;
a is a new array of integers with size 105	int a [ 105 ] = { 0 } ;
start for loop from i = 1 to n inclusive , reading user input to a [ i ] on each loop	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
read u and v from the user input	cin >> u >> v ;
if u is greater than v , swap u and v	if ( u > v ) { swap ( u , v ) ; }
declare int variables m1 and m2 = 0	int m1 = 0 , m2 = 0 ;
for integer i = u to v exclusive , change m1 to m1 + a [ i ]	for ( int i = u ; i < v ; i ++ ) { m1 += a [ i ] ; }
start for loop from i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if i < u or i > = v , add a [ i ] to m2	if ( i < u || i >= v ) { m2 += a [ i ] ; }
if u = v	if ( u == v )
print 0	cout << 0 << endl ;
else	else
print min of m1 and m2 to the standard output	cout << min ( m1 , m2 ) << endl ;
n , s , t , len1 , len2 = int with len1 = 0 and len2 = 0 and arr = int array of size 103	int n , arr [ 103 ] , s , t , len1 = 0 , len2 = 0 ;
read n	cin >> n ;
read n values into arr	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
read s then t	cin >> s >> t ;
if s is greater then t then swap s and t	if ( s > t ) swap ( s , t ) ;
for i = s - 1 to t - 1 increment len1 by arr [ i ]	for ( int i = s - 1 ; i < t - 1 ; i ++ ) len1 += arr [ i ] ;
f = int with f = n - t + s	int f = n - t + s ;
tt = int with tt = t - 1	int tt = t - 1 ;
loop f times	while ( f -- )
if tt is even set tt to 0	if ( tt % n == 0 ) tt = 0 ;
increment len2 by arr [ tt ]	len2 += arr [ tt ] ;
increment tt	tt ++ ;
print min of len1 and len2	cout << min ( len1 , len2 ) << endl ;
in function choose with arguments of long long integer n and long long integer m and returns a long long integer	long long int choose ( long long int n , long long int m )
ans = long long integer = 0	long long int ans = 0 ;
num = long long integer = 1	long long int num = 1 ;
den = long long integer = 1	long long int den = 1 ;
for i = 0 to m exclusive	for ( long long int i = 0 ; i < m ; i ++ )
num = num * ( n - i )	num *= ( n - i ) ;
num = num / ( i + 1 )	num = num / ( i + 1 ) ;
return num	return num ;
in function isPrime with argument integer n and returns a boolean	bool isPrime ( int n )
if n < = 1 , then return false	if ( n <= 1 ) return false ;
if n < = 3 , then return true	if ( n <= 3 ) return true ;
if n is even and n modulo 3 is 0 , then return false	if ( n % 2 == 0 || n % 3 == 0 ) return false ;
for i = 5 , where i is squared to n inclusive and i = i + 6	for ( int i = 5 ; i * i <= n ; i = i + 6 )
if n modulo i is 0 or n modulo the result of i + 2 is 0 , then return false	if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;
return true	return true ;
in function gcd with arguments of long long integer a and long long integer b and returns a long long integer	long long int gcd ( long long int a , long long int b )
if a is 0	if ( a == 0 )
return b	return b ;
else	else
return the result of calling gcd with arguments of b modulo a and a	return gcd ( b % a , a ) ;
i , j , k , n , m , t , c = long long integers	long long int i , j , k , n , m , t , c ;
read n	cin >> n ;
d = long long integer vector of size n	vector < long long int > d ( n ) ;
for i = 0 to n exclusive , read d [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> d [ i ] ; } ;
s = long long integer	long long int s ;
read s , t	cin >> s >> t ;
if s > t	if ( s > t )
m = s	m = s ;
s = t	s = t ;
t = m	t = m ;
ans1 = long long integer = 0 , ans2 = long long integer = 0	long long int ans1 = 0 , ans2 = 0 ;
for i = s - 1 to t - 1 exclusive , then ans1 = ans1 + d [ i ]	for ( i = s - 1 ; i < t - 1 ; i ++ ) { ans1 += d [ i ] ; }
i = t - 1	i = t - 1 ;
while i is not s - 1	while ( i != s - 1 )
ans2 = ans2 + d [ i ]	ans2 += d [ i ] ;
increase i by 1	i ++ ;
if i is n , then i = 0	if ( i == n ) i = 0 ;
print the lower value between ans1 and ans2	cout << min ( ans1 , ans2 ) << endl ;
declare long longs i , x , j , y , tn = 1 , ans = 0 , long long array ar size 100000	long long ar [ 100000 ] , i , x , j , y , tn = 1 , ans = 0 ;
declare n , m as integers	int n , m ;
declare tc as long long	long long tc ;
read n	cin >> n ;
declare v , v1 as long long vectors	vector < long long > v , v1 ;
add 0 to end of v	v . push_back ( 0 ) ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read x	cin >> x ;
add x to end of v	v . push_back ( x ) ;
let v1 be v	v1 = v ;
for i = 1 to size of v exclusive , increment v [ i ] by v [ i - 1 ]	for ( i = 1 ; i < v . size ( ) ; i ++ ) v [ i ] += v [ i - 1 ] ;
read x read y	cin >> x >> y ;
if x is greater than y , swap values between x and y	if ( x > y ) swap ( x , y ) ;
if x is y	if ( x == y )
print 0 , newline	cout << 0 << endl ;
declare integer t1 = v [ y - 1 ] - v [ x - 1 ]	int t1 = v [ y - 1 ] - v [ x - 1 ] ;
declare integer t2 = v [ size of v - 1 ] - v [ y ] + v1 [ y ] + v [ x - 1 ]	int t2 = v [ v . size ( ) - 1 ] - v [ y ] + v1 [ y ] + v [ x - 1 ] ;
print minimum of t1 and t2 , newline	cout << min ( t1 , t2 ) << endl ;
let N be int	int N ;
let x , s and t = int	int x , s , t ;
let d be vector of int	vector < int > d ;
read N	cin >> N ;
read x and d . push_back of x N times exclusive	for ( int i = 0 ; i < N ; ++ i ) cin >> x , d . push_back ( x ) ;
read s and t	cin >> s >> t ;
if decremented s is greater than decremented t then swap s and t	if ( ( -- s ) > ( -- t ) ) swap ( s , t ) ;
let d1 be integer set to 0	int d1 = 0 ;
add d of i to d1 i times from s to t exclusive	for ( int i = s ; i < t ; ++ i ) d1 += d [ i ] ;
let d2 be integer set to 0	int d2 = 0 ;
add d of i to d2 i times from t to N exclusive	for ( int i = t ; i < N ; ++ i ) d2 += d [ i ] ;
add d of i to d2 i times from 0 to s exclusive	for ( int i = 0 ; i < s ; ++ i ) d2 += d [ i ] ;
print min of d1 and d2	cout << min ( d1 , d2 ) << endl ;
create string s	string s ;
create integers i and j , and an array of integers arr with 10000 elements	int i , j , arr [ 10000 ] ;
create integers a , b , c , d , t , cnt and cn where cnt and cn = 0	int a , b , c , d , t , cnt = 0 , cn = 0 ;
read from the input to t	cin >> t ;
in a for loop , change k from 1 to t inclusive , reading variable arr [ k ] from the input	for ( int k = 1 ; k <= t ; k ++ ) { cin >> arr [ k ] ; }
read variables a and b from the input	cin >> a >> b ;
if a is greater than b , swap a and b	if ( a > b ) { swap ( a , b ) ; }
in the for loop , change i from a to b exclusive , increasing cnt by arr [ i ]	for ( i = a ; i < b ; i ++ ) { cnt += arr [ i ] ; }
start for loop with i = b , incrementing i by 1	for ( i = b ; ; i ++ )
if i = a , stop the loop	if ( i == a ) break ;
change cn to cn + arr [ i ]	cn += arr [ i ] ;
if i = t , set i to 0	if ( i == t ) { i = 0 ; }
if cnt is greater than cn	if ( cnt > cn )
print cn to the standard output	cout << cn << endl ;
else	else
print cnt	cout << cnt << endl ;
n , s , t = integers , arr = integer array of size 100	int n , arr [ 100 ] , s , t ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
read s , t	cin >> s >> t ;
m1 = integer = lower value between s , t	int m1 = min ( s , t ) ;
m2 = integer = bigger value between s , t	int m2 = max ( s , t ) ;
decrease m1 by 1	m1 -- ;
decrease m2 by 1	m2 -- ;
R1 = integer = 0 , R2 = integer = 0	int R1 = 0 , R2 = 0 ;
for i = m1 to m2 , then R1 = R1 + arr [ i ]	for ( int i = m1 ; i < m2 ; i ++ ) R1 += arr [ i ] ;
for i = m2 to mn , then R2 = R1 + arr [ i ]	for ( int i = m2 ; i < n ; i ++ ) R2 += arr [ i ] ;
for i = 0 to m1 , then R2 = R2 + arr [ i ]	for ( int i = 0 ; i < m1 ; i ++ ) R2 += arr [ i ] ;
R = integer = lower value between R2 and R1	int R = min ( R2 , R1 ) ;
print R	cout << R << endl ;
declare array of integers arr with size 10005	int arr [ 10005 ] ;
create int n	int n ;
read n	cin >> n ;
for i = 0 to i = n - 1 read arr [ i + 1 ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i + 1 ] ; }
let s and t be integers	int s , t ;
read s and t	cin >> s >> t ;
if s is greater than t then swap s and t	if ( s > t ) { swap ( s , t ) ; }
create integer aa and set it to 0	int aa = 0 ;
for i = s to i = t exclusive set aa to aa + arr [ i ]	for ( int i = s ; i < t ; i ++ ) { aa += arr [ i ] ; }
create integer bb = 0	int bb = 0 ;
for i = 1 to i = t exclusive assign bb + arr [ i ] to bb	for ( int i = 1 ; i < s ; i ++ ) { bb += arr [ i ] ; }
for i = t to i = n do bb = bb + arr [ i ]	for ( int i = t ; i <= n ; i ++ ) { bb += arr [ i ] ; }
print min of aa and bb	cout << min ( aa , bb ) << endl ;
create constant integer maxn with maxn = 105	const int maxn = 105 ;
create integers n , s , t , create integer array d with size maxn	int n , d [ maxn ] , s , t ;
read n	cin >> n ;
for i = 1 to n inclusive , read d [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> d [ i ] ;
read s read t	cin >> s >> t ;
create integers clock , revert , i with clock = 0 , revert = 0	int clock = 0 , revert = 0 , i ;
create integers front , tail , with front = minimum of s and t , tail = maximum of s and t	int front = min ( s , t ) , tail = max ( s , t ) ;
for i = front to tail exclusive , increment clock by d [ i ]	for ( i = front ; i < tail ; i ++ ) { clock += d [ i ] ; }
for i = tail to i is not front , incrementing i	for ( i = tail ; i != front ; i ++ )
if i is greater than n , set i to i % n	if ( i > n ) i %= n ;
if i is front , break loop	if ( i == front ) break ;
increment revert by d [ i ]	revert += d [ i ] ;
print minimum of clock and revert print newline	cout << min ( clock , revert ) << endl ;
declare int variables n , s , t , sum , res and mini with sum , res and mini = 0 , and an array of integers d with 100 elements	int n , d [ 100 ] , s , t , sum = 0 , res = 0 , mini = 0 ;
read n	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read d [ i ]	cin >> d [ i ] ;
increase sum by d [ i ]	sum += d [ i ] ;
read input to s and t	cin >> s >> t ;
for i from min of s - 1 and t - 1 to max of t - 1 and s - 1 exclusive , add d [ i ] to res	for ( int i = min ( s - 1 , t - 1 ) ; i < max ( t - 1 , s - 1 ) ; i ++ ) { res += d [ i ] ; }
change mini to min of res and sum - res	mini = min ( res , sum - res ) ;
print mini	cout << mini << endl ;
create int n	int n ;
read n	cin >> n ;
create int vector x	vector < int > x ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let int m	int m ;
read m	cin >> m ;
add m to the end of x	x . push_back ( m ) ;
let ints s and t	int s , t ;
read s and t	cin >> s >> t ;
create ints count1 = 0 and count2 = 0	int count1 = 0 , count2 = 0 ;
set s to s + n	s = s + n ;
for i = s - 1 to infinity	for ( int i = s - 1 ; ; i ++ )
if i modulo n is equal to t - 1	if ( i % n == t - 1 )
break loop	break ;
otherwise	else
set count1 to count1 + x [ i % n ]	count1 = count1 + x [ i % n ] ;
decrease s by 1	s -- ;
for i = s - 1 to infinity decreasing by 1 each time	for ( int i = s - 1 ; ; i -- )
if i modulo n is equal to t - 1	if ( i % n == t - 1 )
set count2 to count2 + x [ i % n ]	count2 = count2 + x [ i % n ] ;
break loop	break ;
otherwise do	else
set count2 to count2 + x [ i % n ]	count2 = count2 + x [ i % n ] ;
if count1 is less than or equal to count2	if ( count1 <= count2 )
print count1	cout << count1 << endl ;
otherwise do	else
print count2	cout << count2 << endl ;
create ints n , ans1 = 0 , ans2 = 0 , f , t , and tot = 0 and int array d of size 105	int n , ans1 = 0 , ans2 = 0 , d [ 105 ] , f , t , tot = 0 ;
read n	cin >> n ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
read d [ i ]	cin >> d [ i ] ;
set tot to tot + d [ i ]	tot += d [ i ] ;
read f and t	cin >> f >> t ;
if f is greater than t , swap the values of f and t	if ( f > t ) swap ( f , t ) ;
for i = f to t exclusive , set ans1 to ans1 + d [ i ]	for ( int i = f ; i < t ; i ++ ) ans1 += d [ i ] ;
set ans2 to tot - ans1	ans2 = tot - ans1 ;
print the min of ans1 and ans2	cout << min ( ans1 , ans2 ) << ' \n ' ;
mod = long long = 1000000007	const long long int MOD = 1000000007 ;
N , M , K , H , W , L , R = long long integer	long long int N , M , K , H , W , L , R ;
read N	cin >> N ;
v = integer vector of size N + 1	vector < int > v ( N + 1 ) ;
for i = 1 to N inclusive , then read v [ i ]	for ( int i = 1 ; i <= N ; i ++ ) cin >> v [ i ] ;
M = sum of all values of v	M = accumulate ( v . begin ( ) , v . end ( ) , 0 ) ;
for i = 1 to N inclusive , v [ i ] = v [ i ] + v [ i - 1 ]	for ( int i = 1 ; i <= N ; i ++ ) v [ i ] += v [ i - 1 ] ;
read L , R	cin >> L >> R ;
if L > R swap the values of L , R	if ( L > R ) swap ( L , R ) ;
print the result of the lower value between v [ R - 1 ] - v [ L - 1 ] and M in integer form - v [ R - 1 ] + v [ L - 1 ]	cout << min ( v [ R - 1 ] - v [ L - 1 ] , ( int ) M - v [ R - 1 ] + v [ L - 1 ] ) << endl ;
create character array c with size 4 by 4	char c [ 4 ] [ 4 ] ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive read c [ i ] [ j ]	for ( int j = 0 ; j < 4 ; j ++ ) { cin >> c [ i ] [ j ] ; }
declare integers x , y , z and v = 0	int x = 0 , y = 0 , z = 0 , v = 0 ;
in the infinite loop	while ( true )
for j = z to z + 2 exclusive	for ( int j = z ; j < z + 2 ; j ++ )
if c [ v ] [ j ] = ' # ' increment x	if ( c [ v ] [ j ] == ' # ' ) x ++ ;
if c [ v ] [ j ] = ' . ' increment y	if ( c [ v ] [ j ] == ' . ' ) y ++ ;
if c [ v + 1 ] [ j ] = ' # ' increment x	if ( c [ v + 1 ] [ j ] == ' # ' ) x ++ ;
if c [ v + 1 ] [ j ] = ' . ' increment y	if ( c [ v + 1 ] [ j ] == ' . ' ) y ++ ;
if x > y or y is greater than x	if ( x > y || y > x )
print " YES "	cout << " YES " << endl ;
set x to 0	x = 0 ;
set y to 0	y = 0 ;
increase z by one	z ++ ;
if z = 3	if ( z == 3 )
increase v by one	v ++ ;
set z to 0	z = 0 ;
if v = 3 , break the loop	if ( v == 3 ) { break ; }
print " NO "	cout << " NO " << endl ;
create 2d boolean array a with size 4 by 4	bool a [ 4 ] [ 4 ] ;
declare f with no arguments , returning boolean	bool f ( )
for i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
for j = 0 to 3 exclusive	for ( int j = 0 ; j < 3 ; j ++ )
create boolean bol with bol = a [ i ] [ j ]	bool bol = a [ i ] [ j ] ;
if a [ i + 1 ] [ j ] is bol and a [ i + 1 ] [ j + 1 ] is bol and a [ i ] [ j + 1 ] is bol , return true from function	if ( a [ i + 1 ] [ j ] == bol && a [ i + 1 ] [ j + 1 ] == bol && a [ i ] [ j + 1 ] == bol ) { return true ; }
return false from function	return false ;
create character h	char h ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive	for ( int j = 0 ; j < 4 ; j ++ )
set h to read character	h = getchar ( ) ;
if h is ' # '	if ( h == ' # ' )
set a [ i ] [ j ] to true	a [ i ] [ j ] = true ;
else	else
set a [ i ] [ j ] to false	a [ i ] [ j ] = false ;
set h to read character	h = getchar ( ) ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive	for ( int j = 0 ; j < 4 ; j ++ )
set a [ i ] [ j ] to false if a [ i ] [ j ] is true , else true	a [ i ] [ j ] = ( a [ i ] [ j ] == true ? false : true ) ;
if result of run f is true	if ( f ( ) == true )
print " YES " print newline	cout << " YES " << endl ;
set a [ i ] [ j ] to false if a [ i ] [ j ] is true , else true	a [ i ] [ j ] = ( a [ i ] [ j ] == true ? false : true ) ;
print " NO " print newline	cout << " NO " << endl ;
create string vector vs initialized with 4	vector < string > vs ( 4 ) ;
for i = 0 to 4 exclusive , read vs [ i ]	for ( size_t i = 0 ; i < 4 ; ++ i ) { cin >> vs [ i ] ; }
create boolean pass with pass = false	bool pass = false ;
for top = 0 to top is less than or equal to 2 and not pass , incrementing top	for ( size_t top = 0 ; top <= 2 && ! pass ; ++ top )
for left = 0 to 2 inclusive	for ( size_t left = 0 ; left <= 2 ; ++ left )
create integer dot with dot = 0	int dot = 0 ;
for r = 0 to 2 exclusive	for ( size_t r = 0 ; r < 2 ; ++ r )
for c = 0 to 2 exclusive	for ( size_t c = 0 ; c < 2 ; ++ c )
if vs [ top + r ] [ left + c ] is ' . ' , increment dot by 1	if ( vs [ top + r ] [ left + c ] == ' . ' ) { dot += 1 ; }
if dot is not 2	if ( dot != 2 )
set pass to true	pass = true ;
break loop	break ;
print " YES " if pass is true , else " NO " , print newline	cout << ( pass ? " YES " : " NO " ) << endl ;
declare compute	void compute ( )
create 2d character array a with size 4 by 4	char a [ 4 ] [ 4 ] ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive , read a [ i ] [ j ]	for ( int j = 0 ; j < 4 ; j ++ ) cin >> a [ i ] [ j ] ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive	for ( int j = 0 ; j < 4 ; j ++ )
if j is less than or equal to 2 and i is less than or equal to 2	if ( j <= 2 && i <= 2 )
create integers hutch , dots with hutch = 0 , dots = 0	int hutch = 0 , dots = 0 ;
for k = 0 to 2 exclusive	for ( int k = 0 ; k < 2 ; k ++ )
for l = 0 to 2 exclusive	for ( int l = 0 ; l < 2 ; l ++ )
if a [ i + k ] [ j + l ] is ' # '	if ( a [ i + k ] [ j + l ] == ' # ' )
increment hutch	++ hutch ;
else	else
increment dots	++ dots ;
if hutch is greater than or equal to 3 or dots is greater than or equal to 3	if ( hutch >= 3 || dots >= 3 )
print " YES \ n "	cout << " YES\n " ;
return from function	return ;
print " NO \ n "	cout << " NO\n " ;
run compute	compute ( ) ;
let s = array of strings of length 5	string s [ 5 ] ;
for ( i = 0 to 4 exclusive ) , read ith element of array s	for ( int i = 0 ; i < 4 ; i ++ ) cin >> s [ i ] ;
for ( x = 1 to 4 exclusive )	for ( int x = 1 ; x < 4 ; x ++ )
for ( y = 1 to 4 exclusive )	for ( int y = 1 ; y < 4 ; y ++ )
let cnt be a integer with value assigned as 0	int cnt = 0 ;
for i = 0 to 2 ( exclusive )	for ( int i = 0 ; i < 2 ; i ++ )
for j = 0 to 2 ( exclusive )	for ( int j = 0 ; j < 2 ; j ++ )
if ( s [ x - i ] [ y - j ] is not equal to s [ x ] [ y ] ) , increase cnt value by 1	if ( s [ x - i ] [ y - j ] != s [ x ] [ y ] ) cnt ++ ;
check if ( cnt power 2 ) , then return print YES and newline	if ( cnt ^ 2 ) return cout << " YES\n " , 0 ;
print NO and newline	cout << " NO\n " ;
create constant long long mod with mod = 10e9 + 7	const long long mod = 10e9 + 7 ;
create constant double eps with eps = 1e - 11	const double eps = 1e-11 ;
create constant double PI with PI = 2 * acosign of 0 . 0	const double PI = 2 * acos ( 0.0 ) ;
create 2d character array arr of size 4 by 4	char arr [ 4 ] [ 4 ] ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive , read arr [ i ] [ j ]	for ( int j = 0 ; j < 4 ; j ++ ) { cin >> arr [ i ] [ j ] ; }
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
for j = 0 to 4 exclusive	for ( int j = 0 ; j < 4 ; j ++ )
if arr [ i ] [ j ] is ' . ' or arr [ i ] [ j ] is ' # '	if ( arr [ i ] [ j ] == ' . ' or arr [ i ] [ j ] == ' # ' )
if arr [ i ] [ j - 1 ] is ' # ' and j - 1 is greater than or eqaul to 0	if ( arr [ i ] [ j - 1 ] == ' # ' and j - 1 >= 0 )
if arr [ i - 1 ] [ j ] is ' # ' and i - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j ] == ' # ' and i - 1 >= 0 )
if arr [ i - 1 ] [ j - 1 ] is ' # ' and i - 1 is greater than or equal to 0 and j - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j - 1 ] == ' # ' and i - 1 >= 0 and j - 1 >= 0 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j + 1 ] is ' # ' and j + 1 is less than 4	if ( arr [ i ] [ j + 1 ] == ' # ' and j + 1 < 4 )
if arr [ i - 1 ] [ j ] is ' # ' and i - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j ] == ' # ' and i - 1 >= 0 )
if arr [ i - 1 ] [ j + 1 ] is ' # ' and j + 1 is less than 4 and i - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j + 1 ] == ' # ' and j + 1 < 4 and i - 1 >= 0 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j - 1 ] is ' # ' and j - 1 is greater than or equal to 0	if ( arr [ i ] [ j - 1 ] == ' # ' and j - 1 >= 0 )
if arr [ i + 1 ] [ j ] is ' # ' and i + 1 is less than 4	if ( arr [ i + 1 ] [ j ] == ' # ' and i + 1 < 4 )
if arr [ i + 1 ] [ j - 1 ] is ' # ' and i + 1 is less than 4 and j - 1 is greater than or equal to 0	if ( arr [ i + 1 ] [ j - 1 ] == ' # ' and i + 1 < 4 and j - 1 >= 0 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j + 1 ] is ' # ' and j + 1 is less than 4	if ( arr [ i ] [ j + 1 ] == ' # ' and j + 1 < 4 )
if arr [ i + 1 ] [ j ] is ' # ' and i + 1 is less than 4	if ( arr [ i + 1 ] [ j ] == ' # ' and i + 1 < 4 )
if arr [ i + 1 ] [ j + 1 ] is ' # ' and i + 1 is less than 4 and j + 1 is less than 4	if ( arr [ i + 1 ] [ j + 1 ] == ' # ' and i + 1 < 4 and j + 1 < 4 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j - 1 ] is ' . ' and j - 1 is greater than or equal to 0	if ( arr [ i ] [ j - 1 ] == ' . ' and j - 1 >= 0 )
if arr [ i - 1 ] [ j ] is ' . ' and i - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j ] == ' . ' and i - 1 >= 0 )
if arr [ i - 1 ] [ j - 1 ] is ' . ' and i - 1 is greater than or equal to 0 and j - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j - 1 ] == ' . ' and i - 1 >= 0 and j - 1 >= 0 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j + 1 ] is ' . ' and j + 1 is less than 4	if ( arr [ i ] [ j + 1 ] == ' . ' and j + 1 < 4 )
if arr [ i - 1 ] [ j ] is ' . ' and i - 1 is greater than or equal to 0	if ( arr [ i - 1 ] [ j ] == ' . ' and i - 1 >= 0 )
if arr [ i - 1 ] [ j + 1 ] is ' . ' and i - 1 is greater than or equal to 0 and j + 1 is less than 4	if ( arr [ i - 1 ] [ j + 1 ] == ' . ' and i - 1 >= 0 and j + 1 < 4 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j - 1 ] is ' . ' and j - 1 is greater than or equal to 0	if ( arr [ i ] [ j - 1 ] == ' . ' and j - 1 >= 0 )
if arr [ i + 1 ] [ j ] is ' . ' and i + 1 is less than 4	if ( arr [ i + 1 ] [ j ] == ' . ' and i + 1 < 4 )
if arr [ i + 1 ] [ j - 1 ] is ' . ' and i + 1 is less than 4 and j - 1 is greater than or equal to 0	if ( arr [ i + 1 ] [ j - 1 ] == ' . ' and i + 1 < 4 and j - 1 >= 0 )
print " YES "	puts ( " YES " ) ;
if arr [ i ] [ j + 1 ] is ' . ' and j + 1 is less than 4	if ( arr [ i ] [ j + 1 ] == ' . ' and j + 1 < 4 )
if arr [ i + 4 ] [ j ] is ' . ' and i + 1 is less than 4	if ( arr [ i + 1 ] [ j ] == ' . ' and i + 1 < 4 )
if arr [ i + 1 ] [ j + 1 ] is ' . ' and i + 1 is less than 4 and j + 1 is less than 4	if ( arr [ i + 1 ] [ j + 1 ] == ' . ' and i + 1 < 4 and j + 1 < 4 )
print " YES "	puts ( " YES " ) ;
print " NO "	puts ( " NO " ) ;
let grid = array of strings of length 4	string grid [ 4 ] ;
read the 0th element of grid , 1st element of grid , 2nd element of grid and 3rd element of grid	cin >> grid [ 0 ] >> grid [ 1 ] >> grid [ 2 ] >> grid [ 3 ] ;
boolean found is equal to false	bool found = false ;
for i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
for j = 0 to 3 exclusive	for ( int j = 0 ; j < 3 ; j ++ )
let the integers c1 , c2 are assigned as c1 is equal to 0 and c2 is equal to 0 respectively	int c1 = 0 , c2 = 0 ;
for ( int i1 = i to i + 1 inclusive )	for ( int i1 = i ; i1 <= i + 1 ; i1 ++ )
for ( int j1 = j to j + 1 inclusive )	for ( int j1 = j ; j1 <= j + 1 ; j1 ++ )
if ( the 2d array grid [ i1 ] [ j1 ] is equal to . )	if ( grid [ i1 ] [ j1 ] == ' . ' )
increase c1 by 1	c1 ++ ;
else do the following	else
increase c2 by 1	c2 ++ ;
if ( c1 is not equal to 2 ) , found is equal to true	if ( c1 != 2 ) { found = true ; }
print YES if found else print NO	cout << ( found ? " YES " : " NO " ) << endl ;
declare character array a with size 6 by 6	char a [ 6 ] [ 6 ] ;
int function nCount with integer arguments x and y and character argument c	int nCount ( int x , int y , char c )
create integer res = 0	int res = 0 ;
increment res if a [ x + 1 ] [ y ] = c	if ( a [ x + 1 ] [ y ] == c ) { res ++ ; }
increment res if a [ x ] [ y + 1 ] = c	if ( a [ x ] [ y + 1 ] == c ) { res ++ ; }
increment res if a [ x + 1 ] [ y + 1 ] = c	if ( a [ x + 1 ] [ y + 1 ] == c ) { res ++ ; }
return res	return res ;
declare character z	char z ;
for integer i = 1 to 4 inclusive	for ( int i = 1 ; i <= 4 ; i ++ )
for integer j = 1 to 4 inclusive	for ( int j = 1 ; j <= 4 ; j ++ )
read z	cin >> z ;
a [ i ] [ j ] = z	a [ i ] [ j ] = z ;
for i = 1 to 4 inclusive	for ( int i = 1 ; i <= 4 ; i ++ )
for j = 1 to 4 inclusive	for ( int j = 1 ; j <= 4 ; j ++ )
if a [ i ] [ j ] = ' # '	if ( a [ i ] [ j ] == ' # ' )
if nCount ( i , j , ' # ' ) > = 2 | | nCount ( i , j , ' . ' ) > = 3	if ( nCount ( i , j , ' # ' ) >= 2 || nCount ( i , j , ' . ' ) >= 3 )
print " YES "	cout << " YES " << endl ;
else	else
if nCount ( i , j , ' . ' ) > = 2 | | nCount ( i , j , ' # ' ) > = 3	if ( nCount ( i , j , ' . ' ) >= 2 || nCount ( i , j , ' # ' ) >= 3 )
print " YES "	cout << " YES " << endl ;
print " NO "	cout << " NO " << endl ;
create character array m with 4 by 4 elements	char m [ 4 ] [ 4 ] ;
function check with integer arguments i and j that returns boolean	bool check ( int i , int j )
declare integers cnt and cnt2 = 0	int cnt = 0 , cnt2 = 0 ;
for k = i to i + 2 exclusive	for ( int k = i ; k < i + 2 ; k ++ )
for d = j to j + 2 exclusive	for ( int d = j ; d < j + 2 ; d ++ )
if m [ k ] [ d ] is ' # '	if ( m [ k ] [ d ] == ' # ' )
increment cnt	++ cnt ;
else	else
increment cnt2	++ cnt2 ;
return true if cnt = 3 | | cnt = 4 | | cnt2 = 3 | | cnt2 = 4	if ( cnt == 3 || cnt == 4 || cnt2 == 3 || cnt2 == 4 ) return true ;
return false	return false ;
for integer i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; i ++ )
declare string variable s	string s ;
read s	cin >> s ;
for integer j = 0 to 4 exclusive , set m [ i ] [ j ] to s [ j ]	for ( int j = 0 ; j < 4 ; j ++ ) { m [ i ] [ j ] = s [ j ] ; }
declare boolean variable sol = false	bool sol = false ;
for integer i = 0 to 3 exclusive	for ( int i = 0 ; i < 3 ; i ++ )
for j = 0 to 3 exclusive	for ( int j = 0 ; j < 3 ; j ++ )
if check ( i , j ) is true , set sol to true	if ( check ( i , j ) ) sol = true ;
if sol is true	if ( sol )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
num = array of 225 integers	int num [ 225 ] ;
n , m , i , j , k = integers	int n , m , i , j , k ;
read n and k	cin >> n >> k ;
set a index of num to k	num [ ' a ' ] = k ;
for i = 1 to k exclusive increment num [ ' a ' + i ]	for ( i = 1 ; i < k ; i ++ ) num [ ' a ' + i ] ++ ;
if k > n	if ( k > n )
print - 1	cout << - 1 << endl ;
else if n is 1	else if ( n == 1 )
print a	cout << ' a ' << endl ;
else if k is 1 and n > 1	else if ( k == 1 && n > 1 )
print - 1	cout << - 1 << endl ;
else	else
set f to 1	int f = 1 ;
for i = 1 to n - ( k - 2 ) inclusive	for ( i = 1 ; i <= n - ( k - 2 ) ; i ++ )
if i modulo 2	if ( i % 2 )
print a	cout << ' a ' ;
else	else
print b	cout << ' b ' ;
for i = 1 to k - 2 inclusive print ( char ) ( ' b ' + i )	for ( i = 1 ; i <= k - 2 ; i ++ ) { cout << ( char ) ( ' b ' + i ) ; }
print a new line	cout << endl ;
create integers n , k , sig with sig = 0	int n , k , sig = 0 ;
create string s	string s ;
read n read k	cin >> n >> k ;
if k is 1 and n is greater than 1	if ( k == 1 && n > 1 )
print " - 1 \ n "	cout << " -1\n " ;
else if k is greater than n	else if ( k > n )
print " - 1 \ n "	cout << " -1\n " ;
else if n is 1 and k is 1	else if ( n == 1 && k == 1 )
print " a \ n "	cout << " a\n " ;
else	else
create integers i , j with j = n - k + 1	int i , j = n - k + 1 ;
if ( j bitwise and 1 ) is 0 , decrement j , set sig to 1	if ( ( j & 1 ) == 0 ) { j -- , sig = 1 ; }
for i = 0 to j inclusive , increment i by 2 , increment s by " ab "	for ( i = 0 ; i <= j ; i += 2 ) s += " ab " ;
if sig is true , increment s by " a " , set a to j + 2	if ( sig ) { s += " a " , i = j + 2 ; }
create character c with c = ' b '	char c = ' b ' ;
for i is less than n , incrementing i , increment s by character casted ( c + 1 ) , set c to s [ i ]	for ( ; i < n ; i ++ ) s += ( char ) ( c + 1 ) , c = s [ i ] ;
print s print newline	cout << s << endl ;
create integers n and k	int n , k ;
read n and k	cin >> n >> k ;
if n < k or ( k = 1 and n ! = 1 )	if ( n < k || ( k == 1 && n != 1 ) )
print - 1	cout << - 1 << endl ;
else if k = 1 and n = 1	else if ( k == 1 && n == 1 )
print ' a '	cout << ' a ' << endl ;
else	else
for i = 1 to n - ( k - 2 ) inclusive	for ( int i = 1 ; i <= n - ( k - 2 ) ; i ++ )
if i & 1	if ( i & 1 )
print ' a '	cout << ' a ' ;
else	else
print ' b '	cout << ' b ' ;
declare integer variable x = n - ( k - 2 )	int x = n - ( k - 2 ) ;
declare character ch = ' c '	char ch = ' c ' ;
for i = 1 to k - 2 inclusive print ch and increment it	for ( int i = 1 ; i <= k - 2 ; i ++ ) { cout << ch ++ ; }
print new line	cout << endl ;
create n , k and zzz	int n , k , zzz ;
read n , k	cin >> n >> k ;
if n < k or k = 1 and n is different from 1	if ( n < k || ( k == 1 && n != 1 ) )
print - 1	cout << - 1 << endl ;
else if k = 1 and n = 1	else if ( k == 1 && n == 1 )
print a and a new line	cout << ' a ' << endl ;
else	else
for i = 1 to n - k - 2 inclusive	for ( int i = 1 ; i <= n - ( k - 2 ) ; i ++ )
if i is odd	if ( i & 1 )
print a	cout << ' a ' ;
els	else
print b and a new line	cout << ' b ' ;
set x to n - k - 2	int x = n - ( k - 2 ) ;
assign c to ch	char ch = ' c ' ;
for i = 1 to k inclusive , print increment ch	for ( int i = 1 ; i <= k - 2 ; i ++ ) { cout << ch ++ ; }
print a new line	cout << endl ;
declare long long variables n and k	long long n , k ;
read n and k	cin >> n >> k ;
if k > n | | ( k = 1 & & n > 1 )	if ( k > n || ( k == 1 && n > 1 ) )
print - 1	cout << - 1 << endl ;
else if k = 1	else if ( k == 1 )
print ' a '	cout << ' a ' << endl ;
else	else
declare long long x = n - ( k - 2 )	long long x = n - ( k - 2 ) ;
declare string str = " "	string str = "  " ;
declare long long variable i = 0	long long i = 0 ;
while i is less than x	while ( i < x )
if i is even	if ( i % 2 == 0 )
append " a " to str	str += " a " ;
else	else
append " b " to str	str += " b " ;
increase i	i ++ ;
for long long i = 2 to k exclusive	for ( long long i = 2 ; i < k ; i ++ )
declare character ch = ( i + ' a ' )	char ch = ( i + ' a ' ) ;
append ch to str	str += ch ;
print str	cout << str << endl ;
let n , k be ints	int n , k ;
read n , k	cin >> n >> k ;
if k is less than n do the following	if ( k > n )
print - 1 and one newline	cout << - 1 << endl ;
if ke equals 1 do the following	if ( k == 1 )
if n equals 1 do the following	if ( n == 1 )
print a and one newline	cout << ' a ' << endl ;
else	else
print - 1 and one newline	cout << - 1 << endl ;
if k equals 2 do the following	if ( k == 2 )
for int = 0 to n exclusive print char ( ' a ' + ( i & 1 ) )	for ( int i = 0 ; i < n ; i ++ ) { cout << char ( ' a ' + ( i & 1 ) ) ; }
print one newline	cout << endl ;
for i = 0 to n - k + 2 exclusive print char ( ' a ' + ( i & 1 ) )	for ( int i = 0 ; i < n - k + 2 ; i ++ ) { cout << char ( ' a ' + ( i & 1 ) ) ; }
for i = 0 to k - 2 exclusive print char ( ' c ' + i )	for ( int i = 0 ; i < k - 2 ; i ++ ) { cout << char ( ' c ' + i ) ; }
print one newline	cout << endl ;
declare integer variables i , j , k , l , n and m	int i , j , k , l , n , m ;
read n and m	cin >> n >> m ;
k = m	k = m ;
if n < m or ( m = 1 and n is greater than 1 )	if ( n < m || ( m == 1 && n > 1 ) )
print - 1	cout << - 1 << endl ;
create a map from integers to characters called mm	map < int , char > mm ;
create character h = ' a '	char h = ' a ' ;
for i = 0 to 26 exclusive	for ( i = 0 ; i < 26 ; i ++ )
set value of mm [ i ] to h	mm [ i ] = h ;
increase h by one	h ++ ;
declare string variable st = " "	string st = "  " ;
if n = m	if ( n == m )
for i = 0 to n exclusive , apped mm [ i ] to st	for ( i = 0 ; i < n ; i ++ ) { st += mm [ i ] ; }
print st	cout << st << endl ;
for i = 0 to n - ( m - 2 ) exclusive	for ( i = 0 ; i < n - ( m - 2 ) ; i ++ )
if i is even	if ( i % 2 == 0 )
append mm [ 0 ] to st	st += mm [ 0 ] ;
else	else
append mm [ 1 ] to st	st += mm [ 1 ] ;
for i = 0 to m - 2 exclusive , append mm [ i + 2 ] to st	for ( i = 0 ; i < m - 2 ; i ++ ) { st += mm [ i + 2 ] ; }
print st	cout << st << endl ;
declare integers a and b	int a , b ;
while read a and b	while ( cin >> a >> b )
declare integer i	int i ;
if a = 1	if ( a == 1 )
if b is greater than 1	if ( b > 1 )
print " - 1 "	cout << " -1 " << endl ;
else	else
print " a "	cout << ' a ' << endl ;
else	else
declare character variable q = ' c '	char q = ' c ' ;
declare integer pl = 0	int pl = 0 ;
if b > a or ( b = 1 and a > 1 )	if ( b > a || ( b == 1 && a > 1 ) )
print " - 1 "	cout << " -1 " << endl ;
else	else
for i = 0 to a - ( b - 2 ) exclusive	for ( i = 0 ; i < a - ( b - 2 ) ; i ++ )
if pl is even	if ( pl % 2 == 0 )
increase pl by one	pl ++ ;
print ' a '	cout << ' a ' ;
else	else
increment pl	pl ++ ;
print ' b '	cout << ' b ' ;
for i = 0 to b - 2 exclusive	for ( i = 0 ; i < b - 2 ; i ++ ) { cout << q ++ ; }
print new line	cout << endl ;
let s , s1 be strings	string s , s1 ;
let n , k be integers	int n , k ;
read n , k	cin >> n >> k ;
if ( k is greater than n or ( k is equal to 1 and n is greater than 1 ) ) , and print - 1 and endline , return 0	if ( k > n || ( k == 1 && n > 1 ) ) return cout << " -1 " << endl , 0 ;
if ( k is equal to 1 ) print a and endline , return 0	if ( k == 1 ) return cout << " a " << endl , 0 ;
for ( i = 1 to k - 2 inclusive ) , s is equal to s + b + i	for ( int i = 1 ; i <= k - 2 ; i ++ ) s += ' b ' + i ;
for ( i = 1 to n - k + 2 inclusive ) , s1 = s1 + ( if i modulus 2 ) ? a else b	for ( int i = 1 ; i <= n - k + 2 ; i ++ ) s1 += i % 2 ? ' a ' : ' b ' ;
print s1 and s and newline	cout << s1 << s << endl ;
let xx be a char array of length 1000002	char xx [ 1000002 ] ;
n , k = integers	int n , k ;
while n and k are read	while ( cin >> n >> k )
if n is equal to or greater than 2 and k is less than 2 , or n is less than k	if ( n < k || ( n >= 2 && k < 2 ) )
print - 1 and a new line	cout << " -1 " << endl ;
otherwise	else
set integer a equal to k - 2	int a = k - 2 ;
set t = 0	int t = 0 ;
set all contents of xx to 0	memset ( xx , 0 , sizeof ( xx ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if i is less than n - ( k - 2 )	if ( i < n - ( k - 2 ) )
if i modulo 2 equal to 0	if ( i % 2 == 0 )
set xx [ i ] = a	xx [ i ] = ' a ' ;
otherwise	else
set xx [ i ] equal to b	xx [ i ] = ' b ' ;
otherwise	else
if i is less than n	if ( i < n )
set xx [ i ] = 99 + t	xx [ i ] = 99 + t ;
increment t	t ++ ;
print xx and a new line	cout << xx << endl ;
create integers n and k	int n , k ;
read n , k	cin >> n >> k ;
if n < k or k equal to 1 and n different from 1	if ( n < k || ( k == 1 && n != 1 ) )
print - 1	cout << - 1 << endl ;
otherwise	else
if n equal to or greater than 2	if ( n >= 2 )
for i = 1 to n inclusive	for ( int i = 1 ; i <= n - k ; i ++ )
if 1 modulo 2 equal to 0	if ( i % 2 == 0 )
print b	cout << " b " ;
other	else
print a	cout << " a " ;
if n - k mod 2 = 0	if ( ( n - k ) % 2 == 0 )
print ab	cout << " ab " ;
for i = 3 to k inclusive , print i + a - 1	for ( int i = 3 ; i <= k ; i ++ ) cout << char ( i + ' a ' - 1 ) ;
else	else
print ba	cout << " ba " ;
for i = 3 to k inclusive , print i + a - 1	for ( int i = 3 ; i <= k ; i ++ ) cout << char ( i + ' a ' - 1 ) ;
print a new line	cout << endl ;
otherwise	else
print a and a new line	cout << " a " << endl ;
let b , d , sum , i , n , resh , ans1 , ans2 , ans3 , ans4 , j and k be long longs and a be long long array with length 10001	long long a [ 10001 ] , b , d , sum , i , n , resh , ans1 , ans2 , ans3 , ans4 , j , k ;
create strings s and s1	string s , s1 ;
create char array c with length 10001	char c [ 10001 ] ;
read n and k	cin >> n >> k ;
if ( n is smaller than k ) or ( k is equal to 1 and n is greater than 1 ) return 0 and print - 1	if ( n < k or ( k == 1 and n > 1 ) ) return cout << - 1 << " \n " , 0 ;
if n is equal to 1 return 0 and print a and newline	if ( n == 1 ) return cout << " a\n " , 0 ;
for i = 0 to ( n - ( k - 2 ) ) / 2 exclusive print " ab "	for ( int i = 0 ; i < ( n - ( k - 2 ) ) / 2 ; ++ i ) cout << " ab " ;
if ( n - ( k - 2 ) mod 2 ) print " a "	if ( ( n - ( k - 2 ) ) % 2 ) cout << " a " ;
for i = 0 to k - 2 exclusive print char ( i + ' c ' )	for ( int i = 0 ; i < k - 2 ; ++ i ) cout << char ( i + ' c ' ) ;
print newline	cout << " \n " ;
create character array ab with size 2 , with ab = { ' a ' , ' b ' }	char ab [ 2 ] = { ' a ' , ' b ' } ;
create integers n , k	int n , k ;
read n read k	cin >> n >> k ;
if ( k is 1 and n is not 1 ) or ( k is greater than n )	if ( ( k == 1 && n != 1 ) || ( k > n ) )
print - 1 print newline	cout << - 1 << endl ;
create integer frst with frst = n - k + 2	int frst = n - k + 2 ;
create boolean flag with flag = 0	bool flag = 0 ;
create integer i with i = 0	int i = 0 ;
for i is less than frst and i is less than n , incrementing i	for ( ; i < frst && i < n ; i ++ )
print ab [ flag ]	cout << ab [ flag ] ;
set flag to ( not flag bitwise and 1 )	flag = ( ! flag & 1 ) ;
create character c with c = ' c '	char c = ' c ' ;
for i is less than n , incrementing i	for ( ; i < n ; i ++ )
print c	cout << c ;
increment c	c ++ ;
print newline	cout << endl ;
create integers n and k	int n , k ;
read n and k	cin >> n >> k ;
if n * ( n - 1 ) / 2 < = k	if ( n * ( n - 1 ) / 2 <= k )
print " no solution \ n "	cout << " no solution\n " ;
else	else
print " 0 " , n and " \ n	for ( ; n -- ; ) cout << " 0  " << n << " \n " ;
declare integers n and k	int n , k ;
while reading n and k	while ( cin >> n >> k )
create long long temp = 0	long long temp = 0 ;
declare long long variable a	long long a ;
declare integer j = 1	int j = 1 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
if temp - ( i - 1 ) * ( n - i ) * a is less than k	if ( temp - ( i - 1 ) * ( n - i ) * a < k )
print j	cout << j << endl ;
decrease i and n	i -- , n -- ;
else	else
increase temp by ( i - 1 ) * a	temp += ( i - 1 ) * a ;
increase j	j ++ ;
create long long integers n , i , k , x , b , with x = 1 to b = 0	long long int n , i , k , x = 1 , b = 0 ;
read n read k	cin >> n >> k ;
create long long integer array a with size n	long long int a [ n ] ;
for i = 0 to n exclusive , read a [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
if b - x * a [ i ] * ( n - i - 1 ) is less than k	if ( b - x * a [ i ] * ( n - i - 1 ) < k )
print i + 1 print newline	cout << i + 1 << endl ;
else	else
increment by by x * a [ i ]	b += x * a [ i ] ;
increment x	x ++ ;
create long longs n , k	long long n , k ;
read n readk	cin >> n >> k ;
create long long sum with sum = 0	long long sum = 0 ;
create long long pos with pos = 1	long long pos = 1 ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
create long long x	long long x ;
read x	cin >> x ;
create long long d with d = sum - ( pos - 1 ) * ( n - i ) * x	long long d = sum - ( pos - 1 ) * ( n - i ) * x ;
if d is less than k	if ( d < k )
print i print ' \ n '	cout << i << ' \n ' ;
else	else
increment sum by x * ( pos - 1 )	sum += x * ( pos - 1 ) ;
increment pos	pos ++ ;
create long longs n , k , sum , cur with sum = 0 , cur = 0	long long n , k , sum = 0 , cur = 0 ;
read n read k	cin >> n >> k ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
create integer a	int a ;
read a	cin >> a ;
if i is greater than 1 and sum - ( i - cur - 1 ) * ( n - 1 ) * a is less than k	if ( i > 1 && sum - ( i - cur - 1 ) * ( n - i ) * a < k )
print i print newline	cout << i << endl ;
increment cur	cur ++ ;
else	else
increment sum by a * ( i - cur - 1 )	sum += a * ( i - cur - 1 ) ;
let n , k be integers	int n , k ;
while ( read the values of n and k )	while ( cin >> n >> k )
let temp be a long integer with value as 0	long long temp = 0 ;
let a be a long integer	long long a ;
let j be a integer with value as 1	int j = 1 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
if ( temp - ( i - 1 ) * ( n - i ) * a is less than k )	if ( temp - ( i - 1 ) * ( n - i ) * a < k )
print j and newline	cout << j << endl ;
decrease the value of i by 1 , decrease the value of n by 1	i -- , n -- ;
else do the following	else
temp is equal to temp + ( i - 1 ) * a	temp += ( i - 1 ) * a ;
increase j value by 1	j ++ ;
create integer T with T = 1	int T = 1 ;
while decrement T is true	while ( T -- )
create integers n , k	int n , k ;
read n read k	cin >> n >> k ;
create long long integer vector arr initialized with n + 1	vector < long long int > arr ( n + 1 ) ;
set arr [ 0 ] to 0	arr [ 0 ] = 0 ;
for i = 0 to n exclusive , read arr [ i + 1 ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i + 1 ] ; }
create long long integer c with c = 1	long long int c = 1 ;
create integer p_1 with p_1 = 1	int p_i = 1 ;
create long long integers cur_d , prev_d , di , with cur_d = 0 , prev_d = 0 , di = 0	long long int cur_d = 0 , prev_d = 0 , di = 0 ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
set cur_d to prev_d + 1LL * arr [ p_i ] * ( c - 1 )	cur_d = prev_d + 1LL * arr [ p_i ] * ( c - 1 ) ;
set di to cur_d - 1LL * ( n - i ) * ( c ) * arr [ i ]	di = cur_d - 1LL * ( n - i ) * ( c ) * arr [ i ] ;
if di is less than k	if ( di < k )
print i print ' \ n '	cout << i << ' \n ' ;
else	else
increment c	c ++ ;
set p_i to i	p_i = i ;
set prev_d to cur_d	prev_d = cur_d ;
create long long vector v	vector < long long > v ;
create long longs n , k , a , s , j , p , i with s = 0 , j = 2	long long n , k , a , s = 0 , j = 2 , p , i ;
read n read k	cin >> n >> k ;
create long long m with m = n	long long m = n ;
read a	cin >> a ;
for i = 2 to n inclusive	for ( i = 2 ; i <= n ; i ++ )
read a	cin >> a ;
set p to s - ( j - 1 ) * ( m - j ) * a	p = s - ( j - 1 ) * ( m - j ) * a ;
if p is less than k	if ( p < k )
add element i to end of v	v . push_back ( i ) ;
set m to m - 1	m = m - 1 ;
else	else
set s to s + ( j - 1 ) * a	s = s + ( j - 1 ) * a ;
set j to j + 1	j = j + 1 ;
for i = 0 to size of v exclusive , print v [ i ] print newline	for ( i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << endl ;
create long longs n , k , a , sum and l	long long n , k , a , sum , l ;
read n and k	cin >> n >> k ;
for long long i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
if i ! = 1	if ( i != 1 )
if sum - ( n - i ) * ( i - 1 ) * a is less than k	if ( sum - ( n - i ) * ( i - 1 ) * a < k )
print i + l	cout << i + l << endl ;
decrease i	i -- ;
decrease n by one	n -- ;
increment l	l ++ ;
else	else
increase sum by a * ( i - 1 )	sum += a * ( i - 1 ) ;
declare prn with integer pos as argument , returning void	void prn ( int pos )
print pos print " \ n "	cout << pos << " \n " ;
create long longs n , k	long long n , k ;
read n read k	cin >> n >> k ;
create long long sz with sz = n	long long sz = n ;
create integer pos with pos = 1	int pos = 1 ;
create long long ai	long long ai ;
read ai	cin >> ai ;
create long long sum with sum = 0	long long sum = 0 ;
for i = 2 to sz inclusive	for ( int i = 2 ; i <= sz ; ++ i )
increment pos	++ pos ;
read ai	cin >> ai ;
create long long d with d = sum - ( n - pos ) * ( pos - 1 ) * ai	long long d = sum - ( n - pos ) * ( pos - 1 ) * ai ;
if d is less than k	if ( d < k )
run prn with i as argument	prn ( i ) ;
decrement pos	-- pos ;
decrement n	-- n ;
else	else
increment sum by ai * ( pos - 1 )	sum += ai * ( pos - 1 ) ;
create long longs n , k , a , sum , l	long long n , k , a , sum , l ;
read n read k	cin >> n >> k ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
if i is not 1	if ( i != 1 )
if sum - ( n - 1 ) * ( i - 1 ) * a is less than k	if ( sum - ( n - i ) * ( i - 1 ) * a < k )
print i + l print newline	cout << i + l << endl ;
decrement i	i -- ;
decrement n	n -- ;
increment l	l ++ ;
else	else
increment sum by a * ( i - 1 )	sum += a * ( i - 1 ) ;
integer function Get	int Get ( )
declare character c	char c ;
read c from the input , then loop , while c is not a digit or ' - '	while ( c = getchar ( ) , ( c < ' 0 ' || c > ' 9 ' ) && ( c != ' - ' ) )
create boolean Flag = true if c = ' - ' , or false otherwise	bool Flag = ( c == ' - ' ) ;
if Flag is true , read c from the input	if ( Flag ) c = getchar ( ) ;
create int X = 0	int X = 0 ;
while c > = ' 0 ' & & c < = ' 9 '	while ( c >= ' 0 ' && c <= ' 9 ' )
set X to X * 10 + c - 48	X = X * 10 + c - 48 ;
read c from the input	c = getchar ( ) ;
return - X if Flag if set , else return X	return Flag ? - X : X ;
function Output with int argument X	void Output ( int X )
if X is less than 0	if ( X < 0 )
print ' - '	putchar ( ' - ' ) ;
invert the sign of X	X = - X ;
declare int Len = 0 and int array Data with size 10	int Len = 0 , Data [ 10 ] ;
while X is not 0	while ( X )
set Data [ Len ] to X % 10 and increment Len	Data [ Len ++ ] = X % 10 ;
divide X by 10	X /= 10 ;
if Len is false , change Data [ Len ] to 0 and increment Len	if ( ! Len ) Data [ Len ++ ] = 0 ;
decrement Len and loop further , while Len ! = 0 , printing Data [ Len ] + 48 on each iteration	while ( Len -- ) putchar ( Data [ Len ] + 48 ) ;
print ' \ n '	putchar ( ' \n ' ) ;
declare integer N = Get ( )	int N = Get ( ) ;
create long longs Sum = 0 and K = Get ( )	long long K = Get ( ) , Sum = 0 ;
declare integers Top and Number = 0 and Total = N	int Top = 0 , Total = N , Number = 0 ;
for integer i = 0 to N exclusive	for ( int i = 0 ; i < N ; i ++ )
declare long long X = Get ( )	long long X = Get ( ) ;
if Sum - X * Number * ( Total - Number - 1 ) < K	if ( Sum - X * Number * ( Total - Number - 1 ) < K )
call Output of i + 1	Output ( i + 1 ) ;
decrement Total	Total -- ;
else	else
increase Sum by Number * X	Sum += Number * X ;
increment Number	Number ++ ;
integers = n , a , b , c , d , w , h , x1 = 2e9 , y1 = 2e9 , x2 = 0 , y2 = 0 , area = 0	int n , a , b , c , d , w , h , x1 = 2e9 , y1 = 2e9 , x2 = 0 , y2 = 0 , area = 0 ;
read n	cin >> n ;
if n is true do the following	while ( n -- )
read a , b , c , d	cin >> a >> b >> c >> d ;
set w to c - a	w = c - a ;
set h to d - b	h = d - b ;
area equals area plus w * h	area += w * h ;
set x1 to min ( x1 , a )	x1 = min ( x1 , a ) ;
set y1 to min ( y1 , b )	y1 = min ( y1 , b ) ;
set x2 to max ( x2 , c )	x2 = max ( x2 , c ) ;
set y2 to max ( y2 , d )	y2 = max ( y2 , d ) ;
set w to x2 - x1	w = x2 - x1 ;
set h to y2 - y1	h = y2 - y1 ;
if w = h and area = w * h print YES else NO )	cout << ( w == h && area == w * h ? " YES " : " NO " ) << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
declare integers x0 , y0 , x1 , y1 and a with a = 0	int x0 , y0 , x1 , y1 , a = 0 ;
change x0 and y0 to 1e9 + 87	x0 = y0 = 1e9 + 87 ;
change x1 and y1 to - 9e8	x1 = y1 = - 9e8 ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
declare ints l , b , r and u	int l , b , r , u ;
read l , b , r and u	cin >> l >> b >> r >> u ;
add ( r - l ) * ( u - b ) to a	a += ( r - l ) * ( u - b ) ;
change x0 to min of x0 and l	x0 = min ( x0 , l ) ;
change x1 to max of x1 and r	x1 = max ( x1 , r ) ;
change y0 to min of y0 and b	y0 = min ( y0 , b ) ;
change y1 to max of y1 and u	y1 = max ( y1 , u ) ;
subtract x0 from x1	x1 -= x0 ;
decrease y1 by y0	y1 -= y0 ;
print " YES \ n " if x1 = y1 and x1 * y1 = a , or " NO \ n " otherwise	cout << ( x1 == y1 && x1 * y1 == a ? " YES\n " : " NO\n " ) ;
declare integer n	int n ;
read n	cin >> n ;
create integers xmin and ymin = 1000000000 and xmax and ymax = - 1	int xmin = 1000000000 , xmax = - 1 , ymin = 1000000000 , ymax = - 1 ;
create integer act = 0	int act = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create ints a , b , c and d	int a , b , c , d ;
read a , b , c and d	cin >> a >> b >> c >> d ;
set xmin to min of xmin and a	xmin = min ( xmin , a ) ;
set xmin to min of xmin and c	xmin = min ( xmin , c ) ;
set xmax to min of xmax and a	xmax = max ( xmax , a ) ;
set xmax to max of xmax and a	xmax = max ( xmax , c ) ;
set ymin to min of ymin and b	ymin = min ( ymin , b ) ;
set ymin to min of ymin and d	ymin = min ( ymin , d ) ;
set ymax to max of ymax and b	ymax = max ( ymax , b ) ;
set ymax to max of ymax and d	ymax = max ( ymax , d ) ;
add abs ( a - c ) * abs ( b - d ) to act	act += ( abs ( a - c ) * abs ( b - d ) ) ;
if ymax - ymin = xmax - xmin and act = ( ( ymax - ymin ) * ( xmax - xmin ) )	if ( ymax - ymin == xmax - xmin && act == ( ( ymax - ymin ) * ( xmax - xmin ) ) )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
declare integer variable n	int n ;
read n	cin >> n ;
x1 , y1 , x2 , y2 and sum are long long ints where sum = 0	long long int x1 , y1 , x2 , y2 , sum = 0 ;
declare long long int minmum = INT_MIN , maxmum = INT_MIN , p = INT_MAX and q = INT_MAX	long long int minmum = INT_MIN , maxmum = INT_MIN , p = INT_MAX , q = INT_MAX ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read input to x1 , y1 , x2 and y2	cin >> x1 >> y1 >> x2 >> y2 ;
change maxmum to max of maxmum and max ( x2 and x1 )	maxmum = max ( maxmum , max ( x2 , x1 ) ) ;
change minmum to max of minmum and max ( y2 and y1 )	minmum = max ( minmum , max ( y2 , y1 ) ) ;
assign min of p and min ( y2 and y1 ) to p	p = min ( p , min ( y2 , y1 ) ) ;
set q to min of q and min ( x2 and x1 )	q = min ( q , min ( x2 , x1 ) ) ;
add fabs ( x2 - x1 ) * fabs ( y2 - y1 ) to sum	sum += fabs ( x2 - x1 ) * fabs ( y2 - y1 ) ;
if sum = ( ( minmum - p ) * ( maxmum - q ) ) and ( maxmum - q ) = = ( minmum - p )	if ( sum == ( ( minmum - p ) * ( maxmum - q ) ) && ( maxmum - q ) == ( minmum - p ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO \ n "	cout << " NO\n " ;
integers = i , n , x1 , x2 , y1 , y2 , mx = 99999 , my = 99999 , Mx = - 1 , My = - 1 , R = 0	int i , n , x1 , x2 , y1 , y2 , mx = 99999 , my = 99999 , Mx = - 1 , My = - 1 , R = 0 ;
read n	cin >> n ;
for = 0 to less than n do the following	for ( i = 0 ; i < n ; i ++ )
read x1 , y1 , x2 , y2	cin >> x1 >> y1 >> x2 >> y2 ;
R equals R plus ( x2 - x1 ) * ( y2 - y1 )	R += ( x2 - x1 ) * ( y2 - y1 ) ;
if Mx is less than x2 then do the following Mx = x2	if ( Mx < x2 ) Mx = x2 ;
if My is less than y2 then do the following My = y2	if ( My < y2 ) My = y2 ;
if mx is greater than x1 then do the following mx = x1	if ( mx > x1 ) mx = x1 ;
if my is greater than y1 then do the following my = y1	if ( my > y1 ) my = y1 ;
if is R and Mx - mx equals My - my then do the following	if ( ( Mx - mx ) * ( My - my ) == R && Mx - mx == My - my )
output YES	cout << " YES " << endl ;
else	else
output NO	cout << " NO " << endl ;
n = integer	int n ;
S = integer array of size 10	int S [ 10 ] ;
while read n	while ( cin >> n )
set all contents of S to 0	memset ( S , 0 , sizeof ( S ) ) ;
maxx , maxy = integers with maxx = 0 , maxy = 0	int maxx = 0 , maxy = 0 ;
minx , miny = integers with minx = 10000000 , miny = 10000000	int minx = 10000000 , miny = 10000000 ;
C = integer with C = 0	int C = 0 ;
x1 , x2 , y1 , y2 = integers	int x1 , x2 , y1 , y2 ;
for i = 1 to n	for ( int i = 1 ; i <= n ; ++ i )
read x1 , x2 , y1 , y2	cin >> x1 >> y1 >> x2 >> y2 ;
S [ i ] = ( x2 - x1 ) * ( y2 - y1 )	S [ i ] = ( x2 - x1 ) * ( y2 - y1 ) ;
C = C + S [ i ]	C += S [ i ] ;
if x1 < minx , minx = x1	if ( x1 < minx ) minx = x1 ;
if x2 > maxx , maxx = x2	if ( x2 > maxx ) maxx = x2 ;
if y1 < miny , miny = y1	if ( y1 < miny ) miny = y1 ;
if y2 > maxy , maxy = y2	if ( y2 > maxy ) maxy = y2 ;
if C is ( maxx - minx ) * ( maxy - miny ) and ( maxx - minx ) is ( maxy - miny )	if ( C == ( maxx - minx ) * ( maxy - miny ) && ( maxx - minx ) == ( maxy - miny ) )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
change output format flag to ios : : fixed	cout . setf ( ios :: fixed ) ;
change output precision to 20	cout . precision ( 20 ) ;
declare ints n , x1 , y1 , x2 and y2	int n , x1 , y1 , x2 , y2 ;
declare int variables xl and yl = 2139062143 and xr and yr = - 2139062143	int xl = 2139062143 , xr = - 2139062143 , yl = 2139062143 , yr = - 2139062143 ;
read input to n	cin >> n ;
declare long long area = 0	long long area = 0 ;
loop , decrementing n , while it is not 0	while ( n -- )
read x1 , y1 , x2 and y2	cin >> x1 >> y1 >> x2 >> y2 ;
set xl to min of xl and x1	xl = min ( xl , x1 ) ;
change xr to xr if xr > x2 , else to x2	xr = ( xr > x2 ? xr : x2 ) ;
set yl to min of yl and y1	yl = min ( yl , y1 ) ;
change yr to yr if yr > y2 , else to y2	yr = ( yr > y2 ? yr : y2 ) ;
add 1LL * ( x2 - x1 ) * ( y2 - y1 ) to area	area += 1LL * ( x2 - x1 ) * ( y2 - y1 ) ;
if xr - xl = yr - yl and area = 1LL * ( xr - xl ) * ( yr - yl )	if ( xr - xl == yr - yl && area == 1LL * ( xr - xl ) * ( yr - yl ) )
print " YES " to stdout	puts ( " YES " ) ;
else	else
print " NO " to stdout	puts ( " NO " ) ;
let n be a integer	int n ;
read n	cin >> n ;
create ints x0 , y0 , x1 , y1 , a with a = 0	int x0 , y0 , x1 , y1 , a = 0 ;
set x0 and y0 to 1e9 + 87	x0 = y0 = 1e9 + 87 ;
assign - 9e8 to y1 and x1	x1 = y1 = - 9e8 ;
for n iterations	for ( int i = 0 ; i < n ; ++ i )
create integers l , b , r , u	int l , b , r , u ;
read l , b , r and u	cin >> l >> b >> r >> u ;
add a to ( r - l ) * ( u - b ) and assign the result to a	a += ( r - l ) * ( u - b ) ;
set x0 to min ( x0 , l )	x0 = min ( x0 , l ) ;
assign the greater of x1 and r to x1	x1 = max ( x1 , r ) ;
set y0 to min ( y0 , b )	y0 = min ( y0 , b ) ;
set y1 to max of y1 and u	y1 = max ( y1 , u ) ;
x1 = x1 - x0	x1 -= x0 ;
set y1 to y1 - y0	y1 -= y0 ;
print ( x1 = = y1 & & x1 * y1 = = a ? " YES \ n " : " NO \ n " )	cout << ( x1 == y1 && x1 * y1 == a ? " YES\n " : " NO\n " ) ;
mn , mn2 = integers with mn = 50000 , mn2 = mn	int mn = 50000 , mn2 = mn ;
N , mx , mx2 , Ar = integers with mx = - 1 , mx2 = mx , Ar = 0	int N , mx = - 1 , mx2 = mx , Ar = 0 ;
read N	cin >> N ;
for i = 1 to N	for ( int i = 1 ; i <= N ; ++ i )
a , b , x , y = integers	int a , b , x , y ;
read a , b , x , y	cin >> a >> b >> x >> y ;
Ar = Ar + ( x - a ) * ( y - b )	Ar += ( x - a ) * ( y - b ) ;
mn = min of mn and min ( a , x )	mn = min ( mn , min ( a , x ) ) ;
mn2 = min of mn2 and min ( b , y )	mn2 = min ( mn2 , min ( b , y ) ) ;
mx = max of mx and max ( a , x )	mx = max ( mx , max ( a , x ) ) ;
mx2 = max of mx2 and max ( b , y )	mx2 = max ( mx2 , max ( b , y ) ) ;
if ( mx - mn is mx2 - mn2 and Ar is ( mx - mn ) * ( mx2 - mn2 ) )	if ( mx - mn == mx2 - mn2 && Ar == ( mx - mn ) * ( mx2 - mn2 ) )
print YES	cout << " YES\n " ;
else	else
print NO	cout << " NO\n " ;
create long long n	long long n ;
read n	cin >> n ;
while n % 3 is 0 , set n to n / 3	while ( n % 3 == 0 ) n /= 3 ;
print n / 3 + 1 print newline	cout << n / 3 + 1 << endl ;
create unsigned long long n , t , coi with coi = 1	unsigned long long n , t , coi = 1 ;
read n	cin >> n ;
while n % 3 is 0 , set n to n / 3	while ( n % 3 == 0 ) n /= 3 ;
print ( n - 1 ) / 3 + 1 print ' \ n '	cout << ( n - 1 ) / 3 + 1 << ' \n ' ;
n , ans = long long with ans = 0	long long n , ans = 0 ;
read n	cin >> n ;
while n modulo 3 is 0 , n = n / 3	while ( n % 3 == 0 ) n /= 3 ;
ans = n / 3 + 1	ans = n / 3 + 1 ;
print ans	cout << ans << endl ;
in function cil taking two long longs x and y and returning a long long	long long cil ( long long x , long long y )
if x is a multiple if y	if ( x % y == 0 )
return x / y	return x / y ;
else	else
return x / y + 1	return x / y + 1 ;
n , i , j = long long with j = 0	long long n , i , j = 0 ;
read n	cin >> n ;
set i to n	i = n ;
loop while n is a multiple of 3 and greater than 0	while ( n % 3 == 0 && n > 0 )
increment j	j ++ ;
set n to n / 3	n /= 3 ;
l = long long with l = pow of 3 and j + 1	long long l = pow ( 3 , j + 1 ) ;
print cil of i and l	cout << cil ( i , l ) << endl ;
let n be a long integer	long long n ;
read n	cin >> n ;
let sum , x be long integers with x = 3	long long sum , x = 3 ;
while n modulo x is equal to 0 , x is equal to x * 3	while ( n % x == 0 ) { x *= 3 ; }
n / x + 1 is assigned to sum	sum = n / x + 1 ;
print sum and newline	cout << sum << endl ;
define integers i , j , k , and n	long long i , j , k , n ;
read n	cin >> n ;
define j and set to 3 ; for i from 1 to 35 , set j to itself * 3	for ( i = 1 , j = 3 ; i <= 35 ; i ++ , j *= 3 )
if n modulo j isn ' t 0 , then break out	if ( n % j != 0 ) break ;
print n / j + 1 and a newline	cout << ( n / j ) + 1 << endl ;
create FILE pointer stream	FILE * stream ;
create long long n	long long n ;
read n	cin >> n ;
create long long x with x = 1	long long x = 1 ;
while n % x is 0 , set x to x * 3	while ( n % x == 0 ) { x *= 3 ; }
print ( n / x ) + 1 print newline	cout << ( n / x ) + 1 << endl ;
n = integer	long long n ;
while reading values n	while ( cin >> n )
while n modulo 3 is 0 , then set n to n / 3	while ( n % 3 == 0 ) n /= 3 ;
print n / 3 + 1 and a new line	cout << n / 3 + 1 << endl ;
set first 4 elements of dx to 0 , 0 , - 1 , 1	int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;
assign 1 , - 1 , 0 , 0 to first 4 elements of dy	int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;
create long long int n	long long int n ;
read n	cin >> n ;
set x and ans to 1	long long int x = 1 , ans = 1 ;
while x less than n	while ( x < n )
if n mod x different from 0 , set ans = max of ans and n / x + 1	if ( n % x != 0 ) ans = max ( ans , n / x + 1 ) ;
set x = x * 3	x = x * 3 ;
print ans and a newline	cout << ans << ' \n ' ;
create long long n	long long n ;
read n and loop further	while ( cin >> n )
declare long long a	long long a ;
declare long long t = 3	long long t = 3 ;
while n % t = 0 , multiply t by 3	while ( ! ( n % t ) ) t *= 3 ;
print n / t + 1	cout << n / t + 1 << endl ;
create long longs n and a	long long n , a ;
read n and keep looping	while ( cin >> n )
set a to 3	a = 3 ;
while n modulo a is 0	while ( n % a == 0 ) a *= 3 ;
print n / a + 1	cout << n / a + 1 << endl ;
cil is a long long function with long long arguments x and y	long long cil ( long long x , long long y )
if x % y is equal to 0	if ( x % y == 0 )
return x / y	return x / y ;
else	else
return x / y + 1	return x / y + 1 ;
declare long long variables n , i and j with j = 0	long long n , i , j = 0 ;
read input to n	cin >> n ;
change i to n	i = n ;
while n % 3 is 0 and n > 0	while ( n % 3 == 0 && n > 0 )
increment j	j ++ ;
divide n by 3	n /= 3 ;
create long long l = 3 raised to power j + 1	long long l = pow ( 3 , j + 1 ) ;
print cil ( i , l )	cout << cil ( i , l ) << endl ;
create long longs n , m , i , j , k	long long n , m , i , j , k ;
read n	cin >> n ;
set k to 3	k = 3 ;
while 1 is true	while ( 1 )
if n % k is not 0	if ( n % k != 0 )
set m to ( n / k ) + 1	m = ( n / k ) + 1 ;
break loop	break ;
set value of k to 3	k *= 3 ;
print m print newline	cout << m << endl ;
declare const int maxn = 100001	const int maxn = 100001 ;
declare long long n	long long n ;
read n	cin >> n ;
while n modulo 3 = 0 , divide n by 3	while ( n % 3 == 0 ) n /= 3 ;
print n / 3 + 1	cout << n / 3 + 1 << endl ;
in function power_of_two taking int n and returning bool	bool power_of_two ( int n )
m = int	int m ;
set m to n - 1	m = n - 1 ;
if not n bitwise - and m	if ( ! n & m )
return true	return true ;
else	else
return false	return false ;
n , m , a , mn = int with mn = 10000	int n , m , a , mn = 10000 ;
read n then m	cin >> n >> m ;
v = int vector	vector < int > v ;
for i = 0 to m	for ( int i = 0 ; i < m ; i ++ )
read a	cin >> a ;
append a to v	v . push_back ( a ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
for i = n - 1 to m set mn to min of mn and v [ i ] - v [ i - n + 1 ]	for ( int i = n - 1 ; i < m ; i ++ ) { mn = min ( mn , v [ i ] - v [ i - n + 1 ] ) ; }
print mn	cout << mn << endl ;
let integers n , m , i , and ans = INT_MAX and int array a of size 1000	int n , m , a [ 1000 ] , i , ans = INT_MAX ;
read n and m	cin >> n >> m ;
for i = 0 to m exclusive , read a [ i ]	for ( i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort array a	sort ( a , a + m ) ;
for i = 0 to m - n , set ans to the min of ans and a [ i + n - 1 ] - a [ i ]	for ( i = 0 ; i <= m - n ; i ++ ) ans = min ( ans , a [ i + n - 1 ] - a [ i ] ) ;
print ans	cout << ans << endl ;
let n , m , and f with 1000 indices be int	int n , m , f [ 1000 ] ;
read n and m	cin >> n >> m ;
read f of i i times from 0 to m exclusive	for ( int i = 0 ; i < m ; ++ i ) { cin >> f [ i ] ; }
sort f and f plus m	sort ( f , f + m ) ;
let least be f [ n - 1 ] - f [ 0 ]	int least = f [ n - 1 ] - f [ 0 ] ;
for i from to 1 m - n inclusive	for ( int i = 1 ; i <= m - n ; ++ i )
if f [ i + n - 1 ] - f [ i ] < least set least to least = f [ i + n - 1 ] - f [ i ]	if ( f [ i + n - 1 ] - f [ i ] < least ) { least = f [ i + n - 1 ] - f [ i ] ; }
print least	cout << least << endl ;
create integers array dx initialized with 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1	int dx [ ] = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;
create integers array dy initialized with 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1	int dy [ ] = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;
in the function fast	void fast ( ) { }
declare const long long md = 1e9 + 7	const long long md = 1e9 + 7 ;
call fast ( )	fast ( ) ;
create long longs n and m	long long n , m ;
read n and m	cin >> n >> m ;
declare an array of long longs a with m + 5 elements	long long a [ m + 5 ] ;
read a from the input m times	for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort first m elements of a	sort ( a , a + m ) ;
declare long long variable ans = LLONG_MAX	long long ans = LLONG_MAX ;
for i from 0 to m - n inclusive , change ans to min of ans and a [ i + ( n - 1 ) ] - a [ i ]	for ( int i = 0 ; i <= m - n ; i ++ ) { ans = min ( ans , a [ i + ( n - 1 ) ] - a [ i ] ) ; }
print ans	cout << ans << endl ;
n , m = integers	int n , m ;
read n , m	cin >> n >> m ;
arr = integer array of size 100000	int arr [ 100000 ] ;
for i = 0 to m exclusive , read arr [ i ]	for ( int i = 0 ; i < m ; ++ i ) { cin >> arr [ i ] ; }
sort arr and arr + m	sort ( arr , arr + m ) ;
mindiff = integer with mindiff = INT_MAX	int mindiff = INT_MAX ;
for i = 0 to m - ( n - 1 ) exclusive	for ( int i = 0 ; i < m - ( n - 1 ) ; i ++ )
diff = integer with diff = arr [ i + n - 1 ] - arr [ i ]	int diff = arr [ i + n - 1 ] - arr [ i ] ;
if diff < mindiff , mindiff = diff	if ( diff < mindiff ) { mindiff = diff ; }
print mindiff	cout << mindiff << endl ;
create new variables n , m , i , j , total , val , diff and mini be ints with total = 0 and mini = 10000	int n , m , i , j , total = 0 , val , diff , mini = 10000 ;
declare new vector of integers called v	vector < int > v ;
read variables n and m from the input	cin >> n >> m ;
for i = 0 to m exclusive	for ( i = 0 ; i < m ; i ++ )
read val	cin >> val ;
push val to the end of v	v . push_back ( val ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
start for loop from i = 0 to m - n inclusive incrementing i	for ( i = 0 ; i <= m - n ; i ++ )
change val to abs ( v [ i ] - v [ i + n - 1 ] )	val = abs ( v [ i ] - v [ i + n - 1 ] ) ;
change mini to min of mini and val	mini = min ( mini , val ) ;
print mini	cout << mini << endl ;
create integers n and m , and an array of integers f with size 1000	int n , m , f [ 1000 ] ;
read input to n and m	cin >> n >> m ;
for integer i = 0 to m exclusive , read input to f [ i ]	for ( int i = 0 ; i < m ; ++ i ) { cin >> f [ i ] ; }
sort m elements of f	sort ( f , f + m ) ;
create integer least = f [ n - 1 ] - f [ 0 ]	int least = f [ n - 1 ] - f [ 0 ] ;
for i from 1 to m - n inclusive	for ( int i = 1 ; i <= m - n ; ++ i )
if f [ i + n - 1 ] - f [ i ] is less than least , assign f [ i + n - 1 ] - f [ i ] to least	if ( f [ i + n - 1 ] - f [ i ] < least ) { least = f [ i + n - 1 ] - f [ i ] ; }
print least	cout << least << endl ;
let n , m , mn be integers wtih mn = 1005 and a be an integer array of size 60	int n , m , a [ 60 ] , mn = 1005 ;
input n	cin >> n ;
input m	cin >> m ;
input m number of items into a	for ( int i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }
call sort with parameters a , a + m	sort ( a , a + m ) ;
for i = 0 to m - n	for ( int i = 0 ; i < m - n + 1 ; i ++ )
set integer d to a [ i + n - 1 ] - a [ i ]	int d = a [ i + n - 1 ] - a [ i ] ;
if d < mn set mn = d	if ( d < mn ) mn = d ;
print mn	cout << mn << endl ;
declare x , y as integers	int x , y ;
read x , y	cin >> x >> y ;
declare integer array m size y	int m [ y ] ;
declare integer array arr size y	int arr [ y ] ;
for i = 0 to y exclusive , read arr [ i ]	for ( int i = 0 ; i < y ; i ++ ) { cin >> arr [ i ] ; }
sort elements from arr to arr + y	sort ( arr , arr + y ) ;
declare integer k with k = 0	int k = 0 ;
for i = 0 to y - x + 1 exclusive	for ( int i = 0 ; i < y - x + 1 ; i ++ )
let m [ k ] be arr [ x - 1 + i ] - arr [ i ]	m [ k ] = arr [ x - 1 + i ] - arr [ i ] ;
increment k	k ++ ;
let integer min be 99999	int min = 99999 ;
for j = 0 to k exclusive	for ( int j = 0 ; j < k ; j ++ )
if min is greater than m [ j ] , let min be m [ j ]	if ( min > m [ j ] ) min = m [ j ] ;
print min , newline	cout << min << endl ;
let i , a , b , j , s , c , d be integers with c = array of integers of length 1000 , d = array of integers of length 1000	int i , a , b , j , s , c [ 1000 ] , d [ 1000 ] ;
read a , b	cin >> a >> b ;
for i = 0 to b exclusive , read c [ i ]	for ( i = 0 ; i < b ; i ++ ) { cin >> c [ i ] ; }
sort the values c and c + b	sort ( c , c + b ) ;
for i = 0 , j = 0 , i is less than b - a + 1 , increment i , j by 1 , d [ j ] is equal to c [ i + a - 1 ] - c [ i ]	for ( i = 0 , j = 0 ; i < b - a + 1 ; i ++ , j ++ ) { d [ j ] = c [ i + a - 1 ] - c [ i ] ; }
sort the values d , d + b - a + 1	sort ( d , d + b - a + 1 ) ;
print d [ 0 ] and newline	cout << d [ 0 ] << endl ;
create int array A of size 1000100	int A [ 100010 ] ;
let ints n and m	int n , m ;
read n and m	cin >> n >> m ;
for i = 0 to m exclusive , read A [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> A [ i ] ;
sort A	sort ( A , A + m ) ;
create ints high = n - 1 and low = 0	int high = n - 1 , low = 0 ;
let int mini = A [ high ] - A [ low ]	int mini = A [ high ] - A [ low ] ;
while high is less than m	while ( high < m )
increment low	low ++ ;
increment high	high ++ ;
if high is less than m , set mini to the min of mini and A [ high ] - A [ low ]	if ( high < m ) mini = min ( mini , A [ high ] - A [ low ] ) ;
print mini	cout << mini << ' \n ' ;
create ints num and buy	int num , buy ;
create int vector v	vector < int > v ;
read num and buy	cin >> num >> buy ;
for i = 0 to buy exclusive	for ( int i = 0 ; i < buy ; i ++ )
let int x	int x ;
read x	cin >> x ;
append x to vector v	v . push_back ( x ) ;
sort vector v	sort ( v . begin ( ) , v . end ( ) ) ;
let ints max = 0 , min = 0 , and differ = 1000000	int max = 0 , min = 0 , differ = 1000000 ;
for i = 0 to size of v exclusive	for ( int i = 0 ; i < v . size ( ) ; i ++ )
if i + num is greater than the size of v	if ( ( i + num ) > v . size ( ) )
break loop	break ;
otherwise do	else
set min to the min value in v	min = min_element ( v . begin ( ) + i , v . begin ( ) + ( i + num ) ) - v . begin ( ) ;
set max to the max value in v	max = max_element ( v . begin ( ) + i , v . begin ( ) + ( i + num ) ) - v . begin ( ) ;
if v . at ( max ) - v . at ( min ) is less than differ , set differ to v . at ( max ) - v . at ( min )	if ( ( v . at ( max ) - v . at ( min ) ) < differ ) { differ = v . at ( max ) - v . at ( min ) ; }
for i = 0 to size of v exclusive	for ( int i = 0 ; i < v . size ( ) ; i ++ )
let int total = count ( v . begin ( ) , v . end ( ) , v . at ( i ) ) ;	int total = count ( v . begin ( ) , v . end ( ) , v . at ( i ) ) ;
if total is greater than or equal to num	if ( total >= num )
set differ to 0	differ = 0 ;
break loop	break ;
print differ	cout << differ << endl ;
let n , m be integers	int n , m ;
read n and m	cin >> n >> m ;
a = array of integers of length m	int a [ m ] ;
for i = 0 to m exclusive , read a [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort the values a and a + m	sort ( a , a + m ) ;
let min be a integer with min = 1000000	int min = 1000000 ;
for i = 0 to m - n + 1 exclusive	for ( int i = 0 ; i < m - n + 1 ; i ++ )
if a [ i + n - 1 ] - a [ i ] is less than min , the value of min is equal to a [ i + n - 1 ] - a [ i ]	if ( ( a [ i + n - 1 ] - a [ i ] ) < min ) { min = a [ i + n - 1 ] - a [ i ] ; }
if min is equal to 1000000	if ( min == 1000000 )
print 0 and newline	cout << " 0\n " ;
else do the following	else
print min and newline	cout << min << " \n " ;
set precision to 10	cout . precision ( 10 ) ;
print fixed	cout << fixed ;
n , m = integers	int n , m ;
read n , m	cin >> n >> m ;
v = vector of integer with v = m	vector < int > v ( m ) ;
for i = 0 to m exclusive , print v [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> v [ i ] ;
sort v . begin ( ) and v . end ( )	sort ( v . begin ( ) , v . end ( ) ) ;
diff = vector of integer	vector < int > diff ;
for i = 0 to m - n + 1 exclusive , append ( abs ( v [ i ] - v [ n + i - 1 ] ) ) in diff	for ( int i = 0 ; i < m - n + 1 ; i ++ ) { diff . push_back ( abs ( v [ i ] - v [ n + i - 1 ] ) ) ; }
print pointer min_element ( diff . begin ( ) , diff . end ( ) )	cout << * min_element ( diff . begin ( ) , diff . end ( ) ) << endl ;
declare int variables n and m	int n , m ;
read n and m from the input	cin >> n >> m ;
arr is a new array ofintegers with m elements	int arr [ m ] ;
in the for loop , change i from 0 to m exclusive , reading variable arr [ i ] from the input	for ( int i = 0 ; i < m ; ++ i ) cin >> arr [ i ] ;
sort arr from index 0 to m exclusive	sort ( arr , arr + m ) ;
declare integer mn = 1e9	int mn = 1e9 ;
for i = 0 to m - n inclusive , change mn to min of mn and arr [ i + n - 1 ] - arr [ i ]	for ( int i = 0 ; i <= m - n ; ++ i ) mn = min ( mn , arr [ i + n - 1 ] - arr [ i ] ) ;
print mn to the standard output	cout << mn << endl ;
numbuy = int	int num , buy ;
v = vector of int	vector < int > v ;
read num , buy	cin >> num >> buy ;
for i = 0 to buy exclusive	for ( int i = 0 ; i < buy ; i ++ )
x = int	int x ;
read x	cin >> x ;
add x at end of v	v . push_back ( x ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
max , min = 0 , differ = 1000000	int max = 0 , min = 0 , differ = 1000000 ;
for i = 0 to size of v exclusive	for ( int i = 0 ; i < v . size ( ) ; i ++ )
if i + num > size of v	if ( ( i + num ) > v . size ( ) )
break	break ;
else	else
min = min_element ( first item of v + i , first item of v + i + num ) - first item of v	min = min_element ( v . begin ( ) + i , v . begin ( ) + ( i + num ) ) - v . begin ( ) ;
max = max_element ( first item of v + i , first item of v + i + num ) - first item of v	max = max_element ( v . begin ( ) + i , v . begin ( ) + ( i + num ) ) - v . begin ( ) ;
if pos of max in v - pos of min in v < differ differ = pos of max in v - pos of min in v	if ( ( v . at ( max ) - v . at ( min ) ) < differ ) { differ = v . at ( max ) - v . at ( min ) ; }
for i = 0 to size of v exclusive	for ( int i = 0 ; i < v . size ( ) ; i ++ )
total = count ( occurrences of i in v )	int total = count ( v . begin ( ) , v . end ( ) , v . at ( i ) ) ;
if total > = num	if ( total >= num )
differ = 0	differ = 0 ;
break	break ;
print differ	cout << differ << endl ;
declare integers n , m	int n , m ;
read n , m	cin >> n >> m ;
declare integer array a size m	int a [ m ] ;
for i = 0 to m exclusive , read a [ i ]	for ( int i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }
sort from a to a + m	sort ( a , a + m ) ;
declare integers i = 0 , j = n - 1	int i = 0 , j = n - 1 ;
declare psum = a [ j ] - a [ i ] as integer	int psum = a [ j ] - a [ i ] ;
while j is less than m	while ( j < m )
declare sum = a [ j ] - a [ i ] as integer	int sum = a [ j ] - a [ i ] ;
if sum is less than or equal to psum , let psum = sum	if ( sum <= psum ) psum = sum ;
increment i	i ++ ;
increment j	j ++ ;
print psum , " \ n "	cout << psum << " \n " ;
noOfStudents , noOfprizes , minimum = int with minimum = 100000	int noOfStudents , noOfprizes , minimum = 100000 ;
read noOfStudents then noOfprizes	cin >> noOfStudents >> noOfprizes ;
a = int array of size noOfprizes	int a [ noOfprizes ] ;
read noOfprizes values into a	for ( int i = 0 ; i < noOfprizes ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a , a + noOfprizes ) ;
for i = 0 to noOfprizes - noOfStudents + 1 set minimum to min of a [ i + noOfStudents - 1 ] - a [ i ] , minimum	for ( int i = 0 ; i + noOfStudents - 1 < noOfprizes ; i ++ ) { minimum = min ( a [ i + noOfStudents - 1 ] - a [ i ] , minimum ) ; }
print minimum	cout << minimum << endl ;
create long long ans = 1000000	long long ans = 1000000 ;
declare long long int variables n and m	long long int n , m ;
read input to n and m	cin >> n >> m ;
declare long long int array a with m + 2 elements	long long int a [ m + 2 ] ;
for integer i = 0 to m exclusive , read a [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort m elements of a	sort ( a , a + m ) ;
declare long long int k = m - n	long long int k = m - n ;
for i from 0 to k inclusive , assign min of ans and a [ i + ( n - 1 ) ] - a [ i ] to ans	for ( int i = 0 ; i <= k ; i ++ ) { ans = min ( ans , a [ i + ( n - 1 ) ] - a [ i ] ) ; }
print ans	cout << ans << endl ;
n , m = int	int n , m ;
while read n , m	while ( cin >> n >> m )
a = array of 55 int	int a [ 55 ] ;
for i = 0 to m exclusive read a [ i ]	for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort first m items of a	sort ( a , a + m ) ;
min2 = 999999999 , t = int	int min2 = 999999999 , t ;
for i = n - 1 to m exclusive	for ( int i = n - 1 ; i < m ; i ++ )
t = a [ i ] - a [ i - n + 1 ]	t = a [ i ] - a [ i - n + 1 ] ;
if min2 > t min2 = t	if ( min2 > t ) min2 = t ;
print min2	cout << min2 << endl ;
create long longs n , m	long long n , m ;
read n read m	cin >> n >> m ;
create long long vector a initialized with ( m , 0 )	vector < long long > a ( m , 0 ) ;
for i = 0 to m exclusive , read a [ i ]	for ( long long i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }
sort elements from beginning of a to end of a	sort ( a . begin ( ) , a . end ( ) ) ;
create long longs l , r	long long l , r ;
set l to r to 0	l = r = 0 ;
set r to n - 1	r = n - 1 ;
create long long mn with mn = a [ m - 1 ] - a [ 0 ]	long long mn = a [ m - 1 ] - a [ 0 ] ;
while r is not m	while ( r != m )
set mn to minimum of ( mn and a [ r ] - a [ l ] )	mn = min ( mn , a [ r ] - a [ l ] ) ;
increment l	l ++ ;
increment r	r ++ ;
print mn print newline	cout << mn << endl ;
let n , m be integers	int n , m ;
read n and m	cin >> n >> m ;
arr = vector	vector < int > arr ;
while m is greater than 0	while ( m > 0 )
let i be int	int i ;
read i	cin >> i ;
push_back i onto r	arr . push_back ( i ) ;
decrement m	m -- ;
sort with functions arr . begin and arr . end	sort ( arr . begin ( ) , arr . end ( ) ) ;
let distance be integer with value 1e9	int distance = 1e9 ;
for i from 0 to arr size minus n + 1 exclusive	for ( int i = 0 ; i < arr . size ( ) - n + 1 ; i ++ )
if arr [ i + n - 1 ] - arr [ i ] < distance then set distance to arr [ i + n - 1 ] - arr [ i ]	if ( arr [ i + n - 1 ] - arr [ i ] < distance ) { distance = arr [ i + n - 1 ] - arr [ i ] ; }
print distance	cout << distance << endl ;
declare integers k , d and i	int k , d , i ;
read k and d	cin >> k >> d ;
if d = 0	if ( d == 0 )
if k = 1	if ( k == 1 )
print 0 and a new line	cout << 0 << endl ;
else	else
print " No solution \ n "	cout << " No solution\n " ;
else	else
print d	cout << d ;
for i = 1 to k exclusive , print 0	for ( i = 1 ; i < k ; i ++ ) { cout << 0 ; }
print new line	cout << endl ;
create integers k , d	int k , d ;
read k read d	cin >> k >> d ;
if d is 0 and k is greater than 1	if ( d == 0 && k > 1 )
print " No solution \ n "	cout << " No solution\n " ;
print d	cout << d ;
decrement k	k -- ;
while decrement k is true , print 0	while ( k -- ) cout << 0 ;
print newline	cout << endl ;
k and d = integers	int k , d ;
read k and d	cin >> k >> d ;
if d = 0	if ( d == 0 )
if k = 1	if ( k == 1 )
print " 0 " and a new line	cout << " 0 " << endl ;
else	else
print " No solution " and a new line	cout << " No solution " << endl ;
else	else
print d	cout << d ;
print " 0 " k - 1 times	for ( int i = 0 ; i < k - 1 ; ++ i ) { cout << " 0 " ; }
print new line	cout << endl ;
let k be a integer	int k ;
let d be a character	char d ;
read the values k and d	cin >> k >> d ;
if ( d is equal to 0 and k is greater than 1 )	if ( d == ' 0 ' && k > 1 )
print No solution and newline	cout << " No solution " << endl ;
let temp be a string	string temp ;
push temp vector to back when element d is given ( temp . push_back ( d ) )	temp . push_back ( d ) ;
for ( int i is equal to 1 , i is less than k ; increment i value by 1 ) , temp . push_back ( ' 0 ' )	for ( int i = 1 ; i < k ; i ++ ) temp . push_back ( ' 0 ' ) ;
print temp and newline	cout << temp << endl ;
create integers k , d	int k , d ;
read k read d	cin >> k >> d ;
if k is 1 and d is 0	if ( k == 1 && d == 0 )
print " 0 " print newline	cout << " 0 " << endl ;
else if k is greater than 1 and d is 0	else if ( k > 1 && d == 0 )
print " No solution " print newline	cout << " No solution " << endl ;
else	else
print d	cout << d ;
for i = 0 to k - 1 exclusive , print " 0 "	for ( int i = 0 ; i < k - 1 ; i ++ ) { cout << " 0 " ; }
print newline	cout << endl ;
k , d = integers	int k , d ;
Read k and d	cin >> k >> d ;
if d is equal to 0 and k is greater than 1	if ( d == 0 && k > 1 )
print No solution and a new line	cout << " No solution " << endl ;
else do the following	else
print d	cout << d ;
for i = 1 to k , exclusive , print 0	for ( int i = 1 ; i < k ; i ++ ) cout << 0 ;
print a new line	cout << endl ;
k , d = integers	int k , d ;
Read k , d	cin >> k >> d ;
if d is equal to 0 and k is greater than 1	if ( d == 0 && k > 1 )
print No solution and a new line	cout << " No solution " << endl ;
print d	cout << d ;
for j = 1 to k exclusive , print 0	for ( int i = 1 ; i < k ; i ++ ) { cout << 0 ; }
print a new line	cout << endl ;
k , d , i , j = integers	int k , d , i , j ;
Read k and d	cin >> k >> d ;
if d is equal to 0	if ( d == 0 )
if k is greater than 1	if ( k > 1 )
print No solution and a new line	cout << " No solution " << endl ;
else do the following	else
print 0 and a new line	cout << 0 << endl ;
print d	cout << d ;
for i = 0 to k exclusive , print 0	for ( i = 1 ; i < k ; i ++ ) cout << 0 ;
print a new line	cout << endl ;
k , d = integers	int k , d ;
read k and d	cin >> k >> d ;
if k is greater than 1 and d is 0	if ( k > 1 && d == 0 )
print No solution	cout << " No solution\n " ;
print d	cout << d ;
for i = 1 to k exclusive print 0	for ( int i = 1 ; i < k ; i ++ ) { cout << 0 ; }
print new line	cout << endl ;
d = large long	long long k , d ;
read k and d	cin >> k >> d ;
if d = 0 and k > 1	if ( d == 0 && k > 1 )
print No Solution	cout << " No solution " << endl ;
else	else
print d	cout << d ;
increment k	k -- ;
while k > -	while ( k )
print 0	cout << 0 ;
decrement k	k -- ;
print newline	cout << endl ;
declare desperate_optimization with integer precision as argument , returning void	void desperate_optimization ( int precision )
set cout stream flag ios : : fixed	cout . setf ( ios :: fixed ) ;
set cout stream flag ios : : showpoint	cout . setf ( ios :: showpoint ) ;
set cout floating point precision to precision	cout . precision ( precision ) ;
run desperate_optimization with 10 as argument	desperate_optimization ( 10 ) ;
create integers n , k	int n , k ;
read n read k	cin >> n >> k ;
if k is 0 and n is not 1	if ( k == 0 && n != 1 )
print " No solution " print ' \ n '	cout << " No solution " << ' \n ' ;
if k is 0	if ( k == 0 )
print 0 print ' \ n	cout << 0 << ' \n ' ;
else	else
print k	cout << k ;
for i = 1 to n exclusive , print 0	for ( int i = 1 ; i < n ; i ++ ) cout << 0 ;
print ' \ n '	cout << ' \n ' ;
create integers k , d	int k , d ;
read k read d	cin >> k >> d ;
if d is 0 and k is greater than 1	if ( d == 0 && k > 1 )
print " No solution " print newline	cout << " No solution " << endl ;
print d	cout << d ;
decrement k	k -- ;
while decrement k is true , print 0	while ( k -- ) cout << 0 ;
print newline	cout << endl ;
create integers k , q , with q = 1	int k , q = 1 ;
create character d	char d ;
create string s with s = " "	string s = "  " ;
read k read d	cin >> k >> d ;
if d - ' 0 ' is 0	if ( d - ' 0 ' == 0 )
if k is 1	if ( k == 1 )
print 0 print newline	cout << 0 << endl ;
else	else
print " No solution " print newline	cout << " No solution " << endl ;
else	else
increment s by d	s += d ;
for i = 1 to k exclusive , increment s by " 0 "	for ( int i = 1 ; i < k ; i ++ ) s += " 0 " ;
print s print newline	cout << s << endl ;
declare integers k and d	int k , d ;
read k and d	cin >> k >> d ;
if k is greater than 1 and d is 0	if ( k > 1 && ! d )
print " No solution " and a new line	cout << " No solution " << endl ;
print d	cout << d ;
decrease k by one	k -- ;
print 0 in the loop while decrementing k	while ( k -- ) cout << 0 ;
print new line	cout << endl ;
Mod = const int with Mod = 1e9 + 7	const int Mod = 1e9 + 7 ;
n , p = integers	int n , p ;
choose , ans = long long with choose = 2d array of 30025 rows and 600 columns , ans = 1	long long choose [ 30000 + 25 ] [ 600 ] , ans = 1 ;
Pedy = map from int to int	map < int , int > Pedy ;
read n	cin >> n ;
index 0 , 0 of choose = 1	choose [ 0 ] [ 0 ] = 1 ;
for i = 1 to 30024	for ( int i = 1 ; i < 30000 + 25 ; i ++ )
index i and 0 of choose = 1	choose [ i ] [ 0 ] = 1 ;
for j = 1 to n index i and j of choose = ( choose [ i - 1 ] [ j - 1 ] + choose [ i - 1 ] [ j ] ) modulo Mod	for ( int j = 1 ; j <= n ; j ++ ) choose [ i ] [ j ] = ( choose [ i - 1 ] [ j - 1 ] + choose [ i - 1 ] [ j ] ) % Mod ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read p	cin >> p ;
for j = 2 to j * j < = p	for ( int j = 2 ; j * j <= p ; j ++ )
if p modulo j is 0	if ( p % j == 0 )
while not ( p modulo j )	while ( not ( p % j ) )
p = p / j	p /= j ;
increment Pedy [ j ]	Pedy [ j ] ++ ;
if p > 1 , increment Pedy [ p ]	if ( p > 1 ) Pedy [ p ] ++ ;
for it = Pedy . begin ( ) to it is not Pedy . end ( )	for ( map < int , int > :: iterator it = Pedy . begin ( ) ; it != Pedy . end ( ) ; it ++ )
p = second in it	p = it -> second ;
ans = ( ans * choose [ p + n - 1 ] [ n - 1 ] ) modulo Mod	ans = ( ans * choose [ p + n - 1 ] [ n - 1 ] ) % Mod ;
print ans	cout << ans << endl ;
me is a map of long long to long long	map < long long , long long > me ;
create long long array fine with 100000 + 5 elements	long long fine [ 100000 + 5 ] ;
pre is a void function	void pre ( )
for long long i = 2 to 100000 inclusive	for ( long long i = 2 ; i <= 100000 ; i ++ )
if fine [ i ] is equal to 0	if ( fine [ i ] == 0 )
for j from 2 * i to 100000 inclusive increasing j by i , assign 1 to fine [ j ]	for ( long long j = 2 * i ; j <= 100000 ; j += i ) { fine [ j ] = 1 ; }
create an arrays of long longs fact and invfact with 100000 elements each	long long fact [ 100000 ] , invfact [ 100000 ] ;
pow is a long long function with long long arguments a , b and m	long long pow ( long long a , long long b , long long m )
declare long long variable ans = 1	long long ans = 1 ;
while b is not 1	while ( b )
if b & 1 is not 0 , assign ( ans * a ) % m to ans	if ( b & 1 ) ans = ( ans * a ) % m ;
divide b by 2	b /= 2 ;
change a to ( a * a ) % m	a = ( a * a ) % m ;
return ans	return ans ;
long long function modinv with long long argument k	long long modinv ( long long k )
return pow ( k , 1000000007 - 2 , 1000000007 )	return pow ( k , 1000000007 - 2 , 1000000007 ) ;
define function precompute	void precompute ( )
set fact [ 0 ] to set fact [ 1 ] to 1	fact [ 0 ] = fact [ 1 ] = 1 ;
for i from 2 to 100000 exclusive	for ( long long i = 2 ; i < 100000 ; i ++ )
assign fact [ i - 1 ] * i to fact [ i ]	fact [ i ] = fact [ i - 1 ] * i ;
fact [ i ] % = 1000000007	fact [ i ] %= 1000000007 ;
set invfact [ 100000 - 1 ] to modinv ( fact [ 100000 - 1 ] )	invfact [ 100000 - 1 ] = modinv ( fact [ 100000 - 1 ] ) ;
for i from 100000 - 2 to 0 inclusive decrementing i	for ( long long i = 100000 - 2 ; i >= 0 ; i -- )
change invfact [ i ] to invfact [ i + 1 ] * ( i + 1 )	invfact [ i ] = invfact [ i + 1 ] * ( i + 1 ) ;
invfact [ i ] % = 1000000007	invfact [ i ] %= 1000000007 ;
function nCr with long long arguments x and y that returns long long	long long nCr ( long long x , long long y )
if y is greater than x , return 0	if ( y > x ) return 0 ;
set long long num to fact [ x ]	long long num = fact [ x ] ;
multiply num by invfact [ y ]	num *= invfact [ y ] ;
num % = 1000000007	num %= 1000000007 ;
multiply num by invfact [ x - y ]	num *= invfact [ x - y ] ;
num % = 1000000007	num %= 1000000007 ;
return num	return num ;
create long long n	long long n ;
read n	cin >> n ;
call precompute ( )	precompute ( ) ;
call pre ( )	pre ( ) ;
loop i from 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
create long long temp	long long temp ;
read temp	cin >> temp ;
for j = 2 to 100000 inclusive	for ( long long j = 2 ; j <= 100000 ; j ++ )
create long long cur = 0	long long cur = 0 ;
if temp < = 1 , stop the loop	if ( temp <= 1 ) break ;
while temp modulo j = 0 & & temp > 1	while ( temp % j == 0 && temp > 1 )
increment cur	cur ++ ;
divide temp by j	temp /= j ;
if cur ! = 0 , increase me [ j ] by cur	if ( cur != 0 ) me [ j ] += cur ;
if temp ! = 1 , increase me [ temp ] by 1	if ( temp != 1 ) me [ temp ] += 1 ;
create map iterator it	map < long long , long long > :: iterator it ;
declare long long ans = 1	long long ans = 1 ;
move it through me in a loop	for ( it = me . begin ( ) ; it != me . end ( ) ; it ++ )
declare long long variable temp = it - > second	long long temp = it -> second ;
multiply ans by nCr ( temp + n - 1 , temp )	ans *= nCr ( temp + n - 1 , temp ) ;
ans % = 1000000007	ans %= 1000000007 ;
print ans	cout << ans << endl ;
n , l , r , a , b , sum = int with sum = 0 and my = int array of size 105 with all values set to 0	int n , my [ 105 ] = { 0 } , l , r , a , b , sum = 0 ;
read n	cin >> n ;
read l then r	cin >> l >> r ;
for i = 0 to n - 1	for ( int i = 0 ; i < n - 1 ; i ++ )
read a then b	cin >> a >> b ;
for j = a + 1 to b inclusive set m [ j ] to 1	for ( int j = a + 1 ; j <= b ; j ++ ) my [ j ] = 1 ;
for i = l + 1 to r inclusive	for ( int i = l + 1 ; i <= r ; i ++ )
if m [ i ] is 0 increment sum	if ( my [ i ] == 0 ) sum ++ ;
print sum	cout << sum << endl ;
create integer array arrx with size 101	int arrx [ 101 ] ;
create integer n	int n ;
read n	cin >> n ;
create integers l , r	int l , r ;
read l read r	cin >> l >> r ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
create integers a , b	int a , b ;
read a read b	cin >> a >> b ;
for j = a to b exclusive , set arrx [ j ] to 1	for ( int j = a ; j < b ; j ++ ) arrx [ j ] = 1 ;
create integer total with total = 0	int total = 0 ;
for i = l to r exclusive , increment total by 0 if arrx [ i ] is true , else 1	for ( int i = l ; i < r ; i ++ ) { total += arrx [ i ] ? 0 : 1 ; }
print total print newline	cout << total << endl ;
declare constant integer N = 100 + 5	const int N = 100 + 5 ;
declare boolean array mark with N elements	bool mark [ N ] ;
declare int variables n , st and en	int n , st , en ;
read input to n , st and en	cin >> n >> st >> en ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
create integers l and r	int l , r ;
read l and r	cin >> l >> r ;
for j from l to r exclusive , set mark [ j ] to true	for ( int j = l ; j < r ; j ++ ) mark [ j ] = true ;
create int ans = 0	int ans = 0 ;
for i = st to en exclusive , increase ans by ! mark [ i ]	for ( int i = st ; i < en ; i ++ ) ans += ! mark [ i ] ;
print ans	cout << ans << endl ;
N = 105	const int N = 105 ;
mm = array of N bool	bool mm [ N ] ;
n = int	int n ;
read n	cin >> n ;
k1 , k2 = int	int k1 , k2 ;
read k1 , k2	cin >> k1 >> k2 ;
fill mm with false	memset ( mm , false , sizeof ( mm ) ) ;
for i = k1 to k2 exclusive mm [ i ] = true	for ( int i = int ( k1 ) ; i < int ( k2 ) ; ++ i ) mm [ i ] = true ;
for i = 0 to n - 1 exclusive	for ( int i = int ( 0 ) ; i < int ( n - 1 ) ; ++ i )
read k1 , k2	cin >> k1 >> k2 ;
for j = k1 to k2 exclusive mm [ j ] = false	for ( int j = int ( k1 ) ; j < int ( k2 ) ; ++ j ) mm [ j ] = false ;
ans = 0	int ans = 0 ;
for i = 0 to 101 exclusive	for ( int i = int ( 0 ) ; i < int ( 101 ) ; ++ i )
if mm [ i ] increment ans	if ( mm [ i ] ) ans ++ ;
print ans	cout << ans << endl ;
create int arr [ 1000 ]	int arr [ 1000 ] ;
let n be int	int n ;
read n	cin >> n ;
create int l and r	int l , r ;
read l , r	cin >> l >> r ;
decrement n	n -- ;
while decrement n	while ( n -- )
create integers x and y	int x , y ;
read x , y	cin >> x >> y ;
for i = x to y exclusive , increment arr [ i ]	for ( int i = x ; i < y ; i ++ ) arr [ i ] ++ ;
assign 0 to ans	int ans = 0 ;
for i = l to r exclusive	for ( int i = l ; i < r ; i ++ )
if arr [ i ] = 0 , add 1 to ans	if ( arr [ i ] == 0 ) ans ++ ;
print ans	cout << ans << endl ;
create int n , l , r , a [ 200 ] , x , y , ans , z , w , set ans to 0	int n , l , r , a [ 200 ] , x , y , ans = 0 , z , w ;
read n	cin >> n ;
read x and y	cin >> x >> y ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
read l and r	cin >> l >> r ;
for j = l to r exclusive , set a [ j ] to 1	for ( int j = l ; j < r ; j ++ ) a [ j ] = 1 ;
for i = x to y exclusive	for ( int i = x ; i < y ; i ++ )
if a [ i ] is 0 , increment ans	if ( ! a [ i ] ) ans ++ ;
print ans	cout << ans << endl ;
n = int	int n ;
l , r = int	int l , r ;
vis = array of 101 int	int vis [ 101 ] ;
while read n	while ( cin >> n )
fill vis with 0	memset ( vis , 0 , sizeof ( vis ) ) ;
read l , r	cin >> l >> r ;
for i = l + 1 to r inclusive vis [ i ] = 1	for ( int i = l + 1 ; i <= r ; i ++ ) { vis [ i ] = 1 ; }
x , y = int	int x , y ;
for i = 1 to n - 1 inclusive	for ( int i = 1 ; i <= n - 1 ; i ++ )
read x , y	cin >> x >> y ;
for j = x + 1 to y inclusive vis [ j ] = 0	for ( int j = x + 1 ; j <= y ; j ++ ) { vis [ j ] = 0 ; }
cnt = 0	int cnt = 0 ;
for i = l + 1 to r inclusive add vis [ i ] to cnt	for ( int i = l + 1 ; i <= r ; i ++ ) { cnt += vis [ i ] ; }
print cnt	cout << cnt << endl ;
in int function miniel which takes an int vecotr v and an int x	int minel ( vector < int > v , int x )
let l = int = 11111111	int l = 11111111 ;
for i = 0 to x inclusive	for ( int i = 0 ; i <= x ; i ++ )
if v at i < l then set l = v at 1	if ( v [ i ] < l ) { l = v [ i ] ; }
return l	return l ;
let n , s , e , p be integers	int n , s , e , p ;
read n , s , e	cin >> n >> s >> e ;
let arr be an integer array of length 100 , with arr [ 0 ] = 0	int arr [ 100 ] = { 0 } ;
sum = int = 0	int sum = 0 ;
l = int = - 111	int l = - 111 ;
for i = 1 to n	for ( int i = 1 ; i < n ; i ++ )
let x , y be int	int x , y ;
read x and y	cin >> x >> y ;
if e < = y	if ( e <= y )
set p to e	p = e ;
else	else
set p to y	p = y ;
for i = x to p , set arr [ i ] to arr [ i ] + 1	for ( int i = x ; i < p ; i ++ ) { arr [ i ] = arr [ i ] + 1 ; }
for i = s to e	for ( int i = s ; i < e ; i ++ )
if arr at i is 0 then increment sum	if ( arr [ i ] == 0 ) { sum ++ ; }
print sum and new line	cout << sum << endl ;
create int n , a , b , c , d , ans	int n , a , b , c , d , ans ;
create int array dryer of length 101	int dryer [ 101 ] ;
read n , a and b	cin >> n >> a >> b ;
while pre decrement n	while ( -- n )
read c and d	cin >> c >> d ;
for i = c to d exclusive , set dryer [ i ] to 1	for ( int i = c ; i < d ; i ++ ) { dryer [ i ] = 1 ; }
for i = a to b exclusive	for ( int i = a ; i < b ; i ++ )
if dryer [ i ] equal to 0 , increment ans	if ( dryer [ i ] == 0 ) { ans ++ ; }
print ans	cout << ans << endl ;
create const int maxn = 100 + 10	const int maxn = 100 + 10 ;
let bool array mark size of maxn	bool mark [ maxn ] ;
let int n	int n ;
read n	cin >> n ;
make ints L and R	int L , R ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let ints l and r	int l , r ;
read l and r	cin >> l >> r ;
if i is greater than 0	if ( i > 0 )
for j = l to r exclusive , set mark [ j ] to true	for ( int j = l ; j < r ; j ++ ) mark [ j ] = true ;
else	else
set L to l and R to r	L = l , R = r ;
make integer ans = 0	int ans = 0 ;
for i = 0 to maxn exclusive	for ( int i = 0 ; i < maxn ; i ++ )
if ! mark [ i ] is truthy and L is less than or equal to i and i is less than R , increment ans	if ( ! mark [ i ] && L <= i && i < R ) ans ++ ;
print ans	cout << ans << endl ;
b , a , n , i , c , d , m , j = integers	int b , a , n , i , c , d , m , j ;
v = integer array of size 110	int v [ 110 ] ;
while read n , c , d	while ( cin >> n >> c >> d )
m = 0	m = 0 ;
for i = 0 to 100 , v [ i ] = 0	for ( i = 0 ; i < 101 ; i ++ ) v [ i ] = 0 ;
for i = 0 to n - 1 exclusive	for ( i = 0 ; i < n - 1 ; i ++ )
read a , b	cin >> a >> b ;
for j = a + 1 to b , v [ j ] = - 1	for ( j = a + 1 ; j <= b ; j ++ ) v [ j ] = - 1 ;
for i = c + 1 to d	for ( i = c + 1 ; i <= d ; i ++ )
if v [ i ] is 0 , increment m	if ( v [ i ] == 0 ) m ++ ;
print m	cout << m << endl ;
N = 100011	const int N = 1e5 + 11 ;
use = array of N bool	bool use [ N ] ;
n = int	int n ;
read n	cin >> n ;
l , r = int	int l , r ;
read l , r	cin >> l >> r ;
for i = 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
l , r = int	int l , r ;
read l , r	cin >> l >> r ;
for j = l to r exclusive use [ j ] = 1	for ( int j = l ; j < r ; j ++ ) use [ j ] = 1 ;
ans = 0	int ans = 0 ;
for i = l to r exclusive	for ( int i = l ; i < r ; i ++ )
if use [ i ] is 0 increment ans	if ( use [ i ] == 0 ) ans ++ ;
print ans	cout << ans << endl ;
n = int	int n ;
read n	cin >> n ;
i = int	int i ;
x = int vector of size n	vector < int > x ( n ) ;
y = int vector of size n	vector < int > y ( n ) ;
z = int vector of size 101 with all values set to 1	vector < int > z ( 101 , 1 ) ;
read n values into x then y	for ( i = 0 ; i < n ; i ++ ) { cin >> x [ i ] >> y [ i ] ; }
k = int	int k ;
for i = 1 to n	for ( i = 1 ; i < n ; i ++ )
for j = x [ i ] to y [ i ] set z [ k ] to 0	for ( k = x [ i ] ; k < y [ i ] ; k ++ ) { z [ k ] = 0 ; }
ct = int with ct = 0	int ct = 0 ;
for i = x [ 0 ] to y [ 0 ]	for ( i = x [ 0 ] ; i < y [ 0 ] ; i ++ )
if z [ i ] is 1 increment ct	if ( z [ i ] == 1 ) { ct ++ ; }
print ct	cout << ct << endl ;
let n be a integer	int n ;
read n	cin >> n ;
let x , y be integers	int x , y ;
read x , y	cin >> x >> y ;
let d be a integer with d = y - x	int d = y - x ;
a = array of integers of length d	int a [ d ] ;
for i = 0 to d exclusive , the value of a [ i ] is equal to 1	for ( int i = 0 ; i < d ; i ++ ) a [ i ] = 1 ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
let m , n be integers	int m , n ;
read m , n	cin >> m >> n ;
decrement n by 1	n -- ;
for p = m to n inclusive	for ( int p = m ; p <= n ; p ++ )
if p > = y or p is less than x , proceed to next	if ( p >= y || p < x ) continue ;
the value of a [ p - x ] is equal to 0	a [ p - x ] = 0 ;
let sum be a integer with sum = 0	int sum = 0 ;
for j = 0 to d exclusive , increment sum by a [ j ]	for ( int j = 0 ; j < d ; j ++ ) sum += a [ j ] ;
print sum and newline	cout << sum << " \n " ;
create int array v [ 105 ]	int v [ 105 ] ;
create long long n and sum , set sum to 0	long long n , sum = 0 ;
read n	cin >> n ;
let x and y be int	int x , y ;
read x , y	cin >> x >> y ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; ++ i )
create int a and b	int a , b ;
read a and b	cin >> a >> b ;
for j = a + 1 to b inclusive , set v [ j ] to 1	for ( int j = a + 1 ; j <= b ; ++ j ) v [ j ] = 1 ;
for i = x + 1 to y inclusive , assign sum + 1 - v [ i ] to sum	for ( int i = x + 1 ; i <= y ; ++ i ) sum += 1 - v [ i ] ;
print sum and a newline	cout << sum << ' \n ' ;
create int array a of length 105	int a [ 105 ] ;
create integers n , x , y , i , l , r	int n , x , y , i , l , r ;
let sum and j be integers	int sum , j ;
read n	cin >> n ;
read x and y	cin >> x >> y ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
read l and r	cin >> l >> r ;
for j = l to r exclusive , set a [ j ] to 1	for ( j = l ; j < r ; j ++ ) { a [ j ] = 1 ; }
assign 0 to sum	sum = 0 ;
for i = x to y exclusive	for ( i = x ; i < y ; i ++ )
if a [ i ] equal to 0 , sum = sum + 1	if ( a [ i ] == 0 ) sum ++ ;
print sum	cout << sum << endl ;
n , i , j , sum , alexeyI and alexeyJ are integers with sum = 0	int n , i , j , sum = 0 , alexeyI , alexeyJ ;
create int array dryer with size 101	int dryer [ 101 ] ;
call fill_n ( dryer , 101 , 1 )	fill_n ( dryer , 101 , 1 ) ;
read n	cin >> n ;
read input to alexeyI and alexeyJ	cin >> alexeyI >> alexeyJ ;
for integer l = 0 to n - 1 exclusive	for ( int l = 0 ; l < n - 1 ; l ++ )
read i and j	cin >> i >> j ;
for k from i to j exclusive , set dryer [ k ] to 0	for ( int k = i ; k < j ; k ++ ) { dryer [ k ] = 0 ; }
for k from alexeyI to alexeyJ exclusive , add dryer [ k ] to sum	for ( int k = alexeyI ; k < alexeyJ ; k ++ ) { sum += dryer [ k ] ; }
print sum	cout << sum << endl ;
create int array arr with size 1000	int arr [ 1000 ] ;
declare integer variable n	int n ;
read n	cin >> n ;
create integers l and r	int l , r ;
read l and r	cin >> l >> r ;
decrement n by one	n -- ;
while n ! = 0 , decrement it and continue the loop	while ( n -- )
create ints x and y	int x , y ;
read input to x and y	cin >> x >> y ;
for i = y to x exclusive counting down , increment arr [ i ] by one	for ( int i = y ; i > x ; i -- ) arr [ i ] ++ ;
declare int variable ans = 0	int ans = 0 ;
for i = r to l exclusive counting down	for ( int i = r ; i > l ; i -- )
if arr [ i ] is equal to 0 , increment ans by one	if ( arr [ i ] == 0 ) ans ++ ;
print ans	cout << ans << endl ;
in function File	void File ( )
call freopen of " output . txt " , " w " and stdout	freopen ( " output.txt " , " w " , stdout ) ;
call freopen of " input . txt " , " r " and stdin	freopen ( " input.txt " , " r " , stdin ) ;
define empty function fast	void fast ( ) { }
pi = const double with pi = 2 * acos of 0 . 0	const double pi = 2 * acos ( 0.0 ) ;
nn = const int with nn = 2e5 + 5	const int nn = 2e5 + 5 ;
oo = const int with oo = 0x3f3f3f3f	const int oo = 0x3f3f3f3f ;
call fast	fast ( ) ;
n , b , e , ans = int with ans = 0	int n , b , e , ans = 0 ;
arr = int array of size nn	int arr [ nn ] = { } ;
read n	cin >> n ;
read b then e	cin >> b >> e ;
for i = 0 to n - 1	for ( int i = 0 ; i < n - 1 ; i ++ )
x , y = int	int x , y ;
read x then y	cin >> x >> y ;
for j = x to y increment arr [ j ]	for ( int j = x ; j < y ; j ++ ) arr [ j ] ++ ;
for i = b to e	for ( int i = b ; i < e ; i ++ )
if arr8i ] is 0 increment ans	if ( ! arr [ i ] ) ans ++ ;
print ans	cout << ans << " \n " ;
create long longs A , B , ans with ans = - 0x7fffffff	long long A , B , ans = - 0x7fffffff ;
create long longs bxb , bex , bob , bpb	long long bxb , bex , bob , bpb ;
read A read B	cin >> A >> B ;
if B is 0	if ( B == 0 )
print A * A print newline	cout << A * A << endl ;
for i = 0 to A exclusive print " o "	for ( int i = 0 ; i < A ; i ++ ) cout << " o " ;
print newline	cout << endl ;
if B is 1	if ( B == 1 )
print A * A - 1 print newline	cout << A * A - 1 << endl ;
for i = 0 to A exclusive , print " o "	for ( int i = 0 ; i < A ; i ++ ) cout << " o " ;
print " x " print newline	cout << " x " << endl ;
if A is 0	if ( A == 0 )
print - B * B print newline	cout << - B * B << endl ;
for i = 0 to B exclusive , print " x '	for ( int i = 0 ; i < B ; i ++ ) cout << " x " ;
print newline	cout << endl ;
for xb = 2 to minimum of ( B and A + 1 ) inclusive	for ( int xb = 2 ; xb <= min ( B , A + 1 ) ; xb ++ )
create integer ob with ob = xb - 1	int ob = xb - 1 ;
create long long score with score = ob - 1	long long score = ob - 1 ;
increment score by ( A - ( ob - 1 ) ) * ( A - ( ob - 1 ) )	score += ( A - ( ob - 1 ) ) * ( A - ( ob - 1 ) ) ;
end statement	;
create long long pb with pb = B / xb	long long pb = B / xb ;
create long long ex with ex = B % xb	long long ex = B % xb ;
decrement score by ( xb - ex ) * pb * pb	score -= ( xb - ex ) * pb * pb ;
decrement score by ex * ( pb + 1 ) * ( pb + 1 )	score -= ex * ( pb + 1 ) * ( pb + 1 ) ;
if score is greater than ans	if ( score > ans )
set ans to score	ans = score ;
set bxb to xb	bxb = xb ;
set bex to ex	bex = ex ;
set bob to ob	bob = ob ;
set bpb to pb	bpb = pb ;
print ans print newline	cout << ans << endl ;
for i = 0 to bxb exclusive	for ( int i = 0 ; i < bxb ; i ++ )
for j = 0 to bpb exclusive , print " x "	for ( int j = 0 ; j < bpb ; j ++ ) cout << " x " ;
if i is less than bex , print " x "	if ( i < bex ) cout << " x " ;
if i is 0	if ( i == 0 )
for j = 0 to A - ( bob - 1 ) exclusive , print " o "	for ( int j = 0 ; j < A - ( bob - 1 ) ; j ++ ) cout << " o " ;
else if i + 1 is less than bxb	else if ( i + 1 < bxb )
print " o "	cout << " o " ;
print newline	cout << endl ;
declare integer variables co and cx	int co , cx ;
create const long long inf = - 1e16	const long long inf = - 1e16 ;
inlined long long function gox with int argument num	inline long long gox ( int num )
return inf if num is greater than cx	if ( num > cx ) return inf ;
declare int ex = cx % num	int ex = cx % num ;
declare int variable anch = cx / num	int anch = cx / num ;
declare long long variable ans = 1LL * ( anch + 1 ) * ( anch + 1 ) * ex	long long ans = 1LL * ( anch + 1 ) * ( anch + 1 ) * ex ;
increase ans by 1LL * anch * anch * ( num - ex )	ans += 1LL * anch * anch * ( num - ex ) ;
return - ans	return - ans ;
inlined long long function goo with int argument num	inline long long goo ( int num )
if num is greater than co	if ( num > co ) return inf ;
declare int variable juntos = co - num + 1	int juntos = co - num + 1 ;
create long long ans = 1LL * juntos * juntos	long long ans = 1LL * juntos * juntos ;
increase ans by num - 1	ans += num - 1 ;
return ans	return ans ;
inlined void function build with int arguments x and o	inline void build ( int x , int o )
create string s	string s ;
declare integer xx = cx / x	int xx = cx / x ;
create bool flag = true if x > o , else false	bool flag = ( x > o ) ;
declare bool variable fst = true	bool fst = true ;
create integer ex = cx % x	int ex = cx % x ;
declare integer prim = co - o + 1	int prim = co - o + 1 ;
while either x or o is true	while ( x || o )
if flag is true	if ( flag )
push ' x ' into s xx times	for ( int i = int ( 0 ) ; i < int ( xx ) ; ++ i ) s . push_back ( ' x ' ) ;
if ex is greater than 0 , push ' x ' into s and decrement ex	if ( ex > 0 ) s . push_back ( ' x ' ) , ex -- ;
decrement x	x -- ;
else	else
if fst is true	if ( fst )
push ' o ' into s prim times	for ( int i = int ( 0 ) ; i < int ( prim ) ; ++ i ) s . push_back ( ' o ' ) ;
set fst to false	fst = false ;
else	else
push ' o ' into s	s . push_back ( ' o ' ) ;
decrement o	o -- ;
invert the value of flag	flag = ( ! flag ) ;
print s	cout << s << endl ;
read co and cx	cin >> co >> cx ;
if co is 0 or cx is 0	if ( co == 0 || cx == 0 )
if co is greater than 0	if ( co > 0 )
print 1LL * co * co	cout << 1LL * co * co << endl ;
print ' o ' co times	for ( int i = int ( 0 ) ; i < int ( co ) ; ++ i ) cout << ' o ' ;
print a new line	cout << endl ;
if cx is greater than 0	if ( cx > 0 )
print - 1LL * cx * cx	cout << - 1LL * cx * cx << endl ;
print ' x ' cx times	for ( int i = int ( 0 ) ; i < int ( cx ) ; ++ i ) cout << ' x ' ;
print	cout << endl ;
declare int lim = min of co and cx	int lim = min ( co , cx ) ;
create long long ans = LLONG_MIN	long long ans = LLONG_MIN ;
pos is a pair of integers	pair < int , int > pos ;
for integer i = 1 to lim + 1 exclusive	for ( int i = int ( 1 ) ; i < int ( lim + 1 ) ; ++ i )
if ans is less than gox ( i ) + goo ( i )	if ( ans < gox ( i ) + goo ( i ) )
assign gox ( i ) + goo ( i ) to ans	ans = gox ( i ) + goo ( i ) ;
pos = { i , i }	pos = { i , i } ;
for i = 2 to cx + 1 exclusive	for ( int i = int ( 2 ) ; i < int ( cx + 1 ) ; ++ i )
if ans is less than gox ( i ) + goo ( i - 1 )	if ( ans < gox ( i ) + goo ( i - 1 ) )
change ans to gox ( i ) + goo ( i - 1 )	ans = gox ( i ) + goo ( i - 1 ) ;
pos = { i , i - 1 }	pos = { i , i - 1 } ;
for i = 2 to co + 1 exclusive	for ( int i = int ( 2 ) ; i < int ( co + 1 ) ; ++ i )
if ans is less than gox ( i - 1 ) + goo ( i )	if ( ans < gox ( i - 1 ) + goo ( i ) )
set ans to gox ( i - 1 ) + goo ( i )	ans = gox ( i - 1 ) + goo ( i ) ;
pos = { i - 1 , i }	pos = { i - 1 , i } ;
print ans	cout << ans << endl ;
call build with arguments pos . first and pos . second	build ( pos . first , pos . second ) ;
create long long a and b	long long a , b ;
read a , b	cin >> a >> b ;
if a equal to 0	if ( a == 0 )
print - 1 * b * b	cout << - 1 * b * b << endl ;
for i = 0 to b exclusive , print x	for ( int ( i ) = ( 0 ) ; ( i ) < ( b ) ; ++ ( i ) ) cout << ' x ' ;
print a newline	cout << endl ;
else if b = 0	else if ( b == 0 )
print a * a	cout << a * a << endl ;
for i = 0 to a exclusive , print o	for ( int ( i ) = ( 0 ) ; ( i ) < ( a ) ; ++ ( i ) ) cout << ' o ' ;
print a newline	cout << endl ;
else if b equal to 1	else if ( b == 1 )
print a * a - 1	cout << a * a - 1 << endl ;
for i = 0 to a exclusive , print o	for ( int ( i ) = ( 0 ) ; ( i ) < ( a ) ; ++ ( i ) ) cout << ' o ' ;
print x	cout << ' x ' ;
print a newline	cout << endl ;
else	else
ser ret to LLONG_MIN	long long ret = LLONG_MIN ;
set foo = 0	long long foo = 0 ;
for j = 1 to min of b - 1 and a	for ( long long j = 1 ; j <= min ( b - 1 , a ) ; j ++ )
assign ( a - j + 1 ) * ( a - j + 1 ) + ( j - 1 ) to pos	long long pos = ( a - j + 1 ) * ( a - j + 1 ) + ( j - 1 ) ;
set q = b / ( j + 1 ) and r to b % ( j + 1 )	long long q = b / ( j + 1 ) , r = b % ( j + 1 ) ;
set neg = r * ( q + 1 ) * ( q + 1 ) + ( j + 1 - r ) * q * q	long long neg = r * ( q + 1 ) * ( q + 1 ) + ( j + 1 - r ) * q * q ;
if pos - neg greater than ret	if ( pos - neg > ret )
ret = pos - neg	ret = pos - neg ;
assign j + 1 to foo	foo = j + 1 ;
print ret	cout << ret << endl ;
set q = b / foo , r = b % foo	long long q = b / foo , r = b % foo ;
assign ( a - ( foo - 1 ) + 1 ) to g	long long g = ( a - ( foo - 1 ) + 1 ) ;
for j = 1 to foo + 1 exclusive	for ( int ( j ) = ( 1 ) ; ( j ) < ( foo + 1 ) ; ++ ( j ) )
for i = 0 to q exclusive , print x	for ( int ( i ) = ( 0 ) ; ( i ) < ( q ) ; ++ ( i ) ) cout << ' x ' ;
if < = r , print x	if ( j <= r ) cout << ' x ' ;
if j different from foo	if ( j != foo )
if j equal to 1	if ( j == 1 )
for i = 0 to g exclusive , print o	for ( int ( i ) = ( 0 ) ; ( i ) < ( g ) ; ++ ( i ) ) cout << ' o ' ;
else	else
print o	cout << ' o ' ;
print a newline	cout << endl ;
create integer vector v	vector < int > v ;
create integers n , p , k	int n , p , k ;
read n read p read k	cin >> n >> p >> k ;
for x = p - k to p + k inclusive	for ( int x = p - k ; x <= p + k ; x ++ )
if x is less than 1 , break current loop iteration	if ( x < 1 ) continue ;
if x is greater than n , break current loop iteration	if ( x > n ) continue ;
add element x to end of v	v . push_back ( x ) ;
if v [ 0 ] is not 1 , print " < < "	if ( v [ 0 ] != 1 ) cout << " <<  " ;
for i = 0 to integer casted size of v exclusive	for ( int ( i ) = ( 0 ) ; ( i ) < ( ( ( int ) v . size ( ) ) ) ; ++ ( i ) )
if v [ i ] is p , print " ( "	if ( v [ i ] == p ) cout << " ( " ;
print v [ i ]	cout << v [ i ] ;
if v [ i ] is p , print " ) "	if ( v [ i ] == p ) cout << " ) " ;
if i is integer casted size of v - 1	if ( i == ( ( int ) v . size ( ) ) - 1 )
if v [ i ] is less than n	if ( v [ i ] < n )
print " > > " print newline	cout << "  >> " << endl ;
else	else
print newline	cout << endl ;
else	else
print " "	cout << "   " ;
create integer queue q	queue < int > q ;
create boolean array p with size 10000 with p = { }	bool p [ 10000 ] = { } ;
create integer pe	int pe ;
declare print with integers c , a , b as arguments , returning void	void print ( int c , int a , int b )
if a is less than c or a is greater than b or p [ a ] or a is greater than pe or a is less than 1 , return from function	if ( a < c || a > b || p [ a ] || a > pe || a < 1 ) return ;
set p [ a ] to true	p [ a ] = true ;
run print with c , a - 1 , b as arguments	print ( c , a - 1 , b ) ;
add element a to end of q	q . push ( a ) ;
run print with c , a + 1 , b as arguments	print ( c , a + 1 , b ) ;
create integers n , k	int n , k ;
read pe read n read k	cin >> pe >> n >> k ;
if n - k is greater than 1 , print " < < "	if ( n - k > 1 ) { cout << " <<  " ; }
run print with n - k , n , n + k as arguments	print ( n - k , n , n + k ) ;
while q is not empty	while ( ! q . empty ( ) )
if size of q is not 1 and front of q is not n	if ( q . size ( ) != 1 && q . front ( ) != n )
print front of q print " "	cout << q . front ( ) << "   " ;
else if front of q is n	else if ( q . front ( ) == n )
print " ( " print front of q	cout << " ( " << q . front ( ) ;
if size of q is not 1	if ( q . size ( ) != 1 )
print " ) "	cout << " )  " ;
else	else
print " ) "	cout << " ) " ;
else	else
print front of q	cout << q . front ( ) ;
remove element from end of q	q . pop ( ) ;
if n + k is less than pe , print " > > "	if ( n + k < pe ) { cout << "  >> " ; }
print newline	cout << endl ;
in the function desperate_optimization	void desperate_optimization ( int precision )
set format flag ios : : fixed of the output	cout . setf ( ios :: fixed ) ;
set format flag ios : : showpoint of the output	cout . setf ( ios :: showpoint ) ;
set output precision to precision	cout . precision ( precision ) ;
call desperate_optimization ( 10 )	desperate_optimization ( 10 ) ;
let n , p and k be integers	int n , p , k ;
read n , p and k	cin >> n >> p >> k ;
if p - k is greater than 1	if ( p - k > 1 ) cout << " <<  " ;
for i = max of 1 and p - k to p exclusive , print i and " "	for ( int i = max ( 1 , p - k ) ; i < p ; i ++ ) { cout << i << "   " ; }
print " ( " , p and " ) "	cout << " ( " << p << " ) " ;
for i = p + 1 to min of n and p + k inclusive , print " " and i	for ( int i = p + 1 ; i <= min ( n , p + k ) ; i ++ ) { cout << "   " << i ; }
if p + k is less than n , print " > > "	if ( p + k < n ) cout << "  >> " ;
print ' \ n '	cout << ' \n ' ;
create integers n , p , k	int n , p , k ;
create booleans start , end with start = 1 , end = 0	bool start = 1 , end = 0 ;
read n read p read k	cin >> n >> p >> k ;
for i = p - k to p + k inclusive	for ( int i = p - k ; i <= p + k ; i ++ )
if start is true	if ( start )
if i is less than or equal to 1	if ( i <= 1 )
if p is 1	if ( p == 1 )
print " ( " print 1 print " ) "	cout << " ( " << 1 << " ) " ;
else	else
print 1	cout << 1 ;
set i to 1	i = 1 ;
else	else
print " < < " print i	cout << " <<  " << i ;
set start to 0	start = 0 ;
break current loop iteration	continue ;
if i is greater than or equal to n	if ( i >= n )
set end to 1	end = 1 ;
if p is n	if ( p == n )
print " ( " print n print " ) "	cout << "  ( " << n << " ) " ;
else	else
print " " print n	cout << "   " << n ;
break loop	break ;
if i is p	if ( i == p )
print " ( " print i print " ) "	cout << "  ( " << i << " ) " ;
else	else
print " " print i	cout << "   " << i ;
if not end print " > > "	if ( ! end ) cout << "  >> " ;
print ' \ n '	cout << ' \n ' ;
pi = const double with pi = 3 . 14159265359	const double pi = 3.14159265359 ;
MOD = const long long with MOD = 1000 * 1000 * 1000 + 7	const long long MOD = 1000 * 1000 * 1000 + 7 ;
N = const int with N = 200 * 1000 + 10	const int N = 200 * 1000 + 10 ;
a , b = int	int a , b ;
read a then b	cin >> a >> b ;
aa , bb = int with aa = a * a and bb = b * b	int aa = a * a , bb = b * b ;
as = int vector	vector < int > as ;
bs = int vector	vector < int > bs ;
for i = 1 to aa	for ( int i = 1 ; i < aa ; i ++ )
int sq = sqrt of aa - i * -	int sq = sqrt ( aa - i * i ) ;
if sq * sq + i * i is aa then append i to as	if ( sq * sq + i * i == aa ) as . push_back ( i ) ;
for i = 1 to bb	for ( int i = 1 ; i < bb ; i ++ )
sq = int with sq = sqrt of bb - i * i	int sq = sqrt ( bb - i * i ) ;
if sq * sq + i * i is bb then append i to bs	if ( sq * sq + i * i == bb ) bs . push_back ( i ) ;
for i = 0 to size of as	for ( int i = 0 ; i < as . size ( ) ; i ++ )
for j = 0 to size of bs	for ( int j = 0 ; j < bs . size ( ) ; j ++ )
xa = int with xa = as [ i ]	int xa = as [ i ] ;
ya = int with ya = sqrt of aa - xa * xa	int ya = sqrt ( aa - xa * xa ) ;
xb = int with xb = bs [ j ]	int xb = bs [ j ] ;
yb = int with yb = sqrt of bb - xb * xb	int yb = sqrt ( bb - xb * xb ) ;
if ( xb - xa ) * ( xb - xa ) + ( ya + yb ) * ( ya + yb ) is aa + bb and xb is not xa	if ( ( xb - xa ) * ( xb - xa ) + ( ya + yb ) * ( ya + yb ) == aa + bb && xb != xa )
print " YES "	cout << " YES\n " ;
print xa and ya	cout << xa << "   " << ya << ' \n ' ;
print xb and - yb	cout << xb << "   " << - yb << ' \n ' ;
print 0 and 0	cout << 0 << "   " << 0 << ' \n ' ;
print " NO "	cout << " NO\n " ;
create integers n and v	int n , v ;
read n and v	cin >> n >> v ;
a is an array of doubles with size n	double a [ n ] ;
read n elements into array a	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
declare double called minvalue = INT_MAX	double minvalue = INT_MAX ;
b is an array of doubles with size n	double b [ n ] ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read b [ i ]	cin >> b [ i ] ;
assign value of min of minvalue and b [ i ] to the minvalue	minvalue = min ( minvalue , b [ i ] ) ;
l is double = 0	double l = 0 ;
let r be double = 1e18	double r = 1e18 ;
answer is double = 0	double answer = 0 ;
for integer i = 1 to 100 inclusive	for ( int i = 1 ; i <= 100 ; i ++ )
double mid = ( l + ( r - l ) / 2 )	double mid = ( l + ( r - l ) / 2 ) ;
sum is double = 0	double sum = 0 ;
flag is integer = 0	int flag = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
set double value to a [ i ] * mid	double value = a [ i ] * mid ;
if value is greater than b [ i ]	if ( value > b [ i ] )
set flag to 1	flag = 1 ;
break the loop	break ;
else	else
increase sum by ( a [ i ] * mid )	sum += ( a [ i ] * mid ) ;
if flag = 1	if ( flag == 1 )
set value of r to mid - 1	r = mid - 1 ;
skip the rest of the loop	continue ;
if sum < = v	if ( sum <= v )
set answer to sum	answer = sum ;
l = mid + 1	l = mid + 1 ;
else	else
r = mid - 1	r = mid - 1 ;
print setprecision ( 6 ) , fixed , answer and " \ n "	cout << setprecision ( 6 ) << fixed << answer << " \n " ;
declare integer variable n	int n ;
read input to n	cin >> n ;
let A be integer array with size n	int A [ n ] ;
read n elements into A	for ( int i = 0 ; i < n ; i ++ ) { cin >> A [ i ] ; }
create integer ansf = 1	int ansf = 1 ;
create integer j = 0	int j = 0 ;
create integer ch = 0	int ch = 0 ;
create integer max1 = 1	int max1 = 1 ;
create integer x = 1	int x = 0 ;
declare integer array dp with size n filled with 0	int dp [ n ] = { 0 } ;
for integer i = 1 to n exclusive incrementing i	for ( int i = 1 ; i < n ; i ++ )
if A [ i ] is greater than A [ i - 1 ]	if ( A [ i ] > A [ i - 1 ] )
change dp [ i ] to dp [ i - 1 ] + 1	dp [ i ] = dp [ i - 1 ] + 1 ;
else	else
assign 0 to dp [ i ]	dp [ i ] = 0 ;
loop i from 1 to n exclusive	for ( int i = 1 ; i < n ; i ++ )
if A [ i ] is greater than A [ i - 1 ]	if ( A [ i ] > A [ i - 1 ] )
increment ansf by one	ansf ++ ;
else	else
if ch is 0	if ( ch == 0 )
assign A [ i ] to x	x = A [ i ] ;
assign A [ i - 1 ] + 1 to A [ i ]	A [ i ] = A [ i - 1 ] + 1 ;
change j to i	j = i ;
assign 1 to ch	ch = 1 ;
increment ansf by one	ansf ++ ;
else	else
assign i - j to ansf	ansf = i - j ;
change A [ j ] to x	A [ j ] = x ;
if ansf = 1	if ( ansf == 1 )
if A [ i ] is greater than A [ i - 1 ]	if ( A [ i ] > A [ i - 1 ] )
increment ansf by one	ansf ++ ;
change x to A [ i - 2 ]	x = A [ i - 2 ] ;
increment ansf by one	ansf ++ ;
assign i - 2 to j	j = i - 2 ;
change A [ i - 2 ] to A [ i - 1 ] - 1	A [ i - 2 ] = A [ i - 1 ] - 1 ;
if i > = 3 and A [ i - 2 ] > A [ i - 3 ] , increase ansf by dp [ i - 2 ]	if ( i >= 3 && A [ i - 2 ] > A [ i - 3 ] ) ansf = ansf + dp [ i - 2 ] ;
else	else
increment ansf	ansf ++ ;
assign A [ i - 1 ] to x	x = A [ i - 1 ] ;
assign i - 1 to j	j = i - 1 ;
change A [ i - 1 ] to A [ i ] - 1	A [ i - 1 ] = A [ i ] - 1 ;
if A [ i - 1 ] is greater than A [ i - 2 ] , increase ansf by dp [ i - 1 ]	if ( A [ i - 1 ] > A [ i - 2 ] ) ansf = ansf + dp [ i - 1 ] ;
else	else
if A [ j ] is less than A [ j + 1 ] , increment ansf	if ( A [ j ] < A [ j + 1 ] ) ansf ++ ;
change x to A [ i ]	x = A [ i ] ;
set j to i	j = i ;
change A [ i ] to A [ i - 1 ] + 1	A [ i ] = A [ i - 1 ] + 1 ;
change max1 to max of max1 and ansf	max1 = max ( max1 , ansf ) ;
print max1 and " \ n "	cout << max1 << " \n " ;
v = vector array of long long of size 100005	vector < long long > v [ 100005 ] ;
in the function solve	void solve ( )
n , x , b , y , ans = long long with x = 0 , ans = 0	long long n , x = 0 , b , y , ans = 0 ;
read n	cin >> n ;
a = array of long long of size n	long long a [ n ] ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if i is 0	if ( i == 0 )
append a [ i ] in v [ x ]	v [ x ] . push_back ( a [ i ] ) ;
continue iteration	continue ;
if a [ i ] < = a [ i - 1 ] , increment x	if ( a [ i ] <= a [ i - 1 ] ) x ++ ;
append a [ i ] in v [ x ]	v [ x ] . push_back ( a [ i ] ) ;
if x is 0	if ( x == 0 )
print v [ 0 ] . size ( )	cout << v [ 0 ] . size ( ) << ' \n ' ;
return	return ;
for i = 0 to x + 1	for ( long long i = 0 ; i < x + 1 ; i ++ )
if i is x	if ( i == x )
y = v [ i ] . size ( ) + 1	y = v [ i ] . size ( ) + 1 ;
else	else
n = long long with n = v [ i ] . size ( )	long long n = v [ i ] . size ( ) ;
m = long long with m = v [ i + 1 ] . size ( )	long long m = v [ i + 1 ] . size ( ) ;
if m is 1	if ( m == 1 )
y = n + 1 ;	y = n + 1 ;
else if n is 1	else if ( n == 1 )
y = m + 1	y = m + 1 ;
else if v [ i + 1 ] [ 1 ] - v [ i ] [ n - 1 ] > 1	else if ( v [ i + 1 ] [ 1 ] - v [ i ] [ n - 1 ] > 1 )
y = n + m	y = n + m ;
else if v [ i + 1 ] [ 0 ] - v [ i ] [ n - 2 ] > 1	else if ( v [ i + 1 ] [ 0 ] - v [ i ] [ n - 2 ] > 1 )
y = n + m	y = n + m ;
else	else
y = n + 1	y = n + 1 ;
ans = max of ans and y	ans = max ( ans , y ) ;
print ans	cout << ans << ' \n ' ;
return	return ;
TESTS = long long with TESTS = 1	long long TESTS = 1 ;
while postfix decrement TESTS , call solve	while ( TESTS -- ) { solve ( ) ; }
create constant integer max4 with max4 = 10004	const int max4 = 10004 ;
create constant integer maxx with maxx = 200005	const int maxx = 200005 ;
create constant integer max6 with max6 = 1000006	const int max6 = 1000006 ;
create constant integer lg5 with lg5 = 17	const int lg5 = 17 ;
create constant integer INF with INF = 1000000007	const int INF = 1000000007 ;
create constant long long INFLL with INFLL = 4LL * 1000000000 * 1000000000	const long long INFLL = 4LL * 1000000000 * 1000000000 ;
declare powmod with integers a , b , mod as arguments , returning integer	int powmod ( int a , int b , int mod )
create integer res with res = 1	int res = 1 ;
set a to a % mod	a %= mod ;
for b , setting b to b bitshift right 1	for ( ; b ; b >>= 1 )
if b bitwise and 1 , set res to 1LL * res * a % mod	if ( b & 1 ) { res = 1LL * res * a % mod ; }
set a to 1LL * a * a % mod	a = 1LL * a * a % mod ;
return res from function	return res ;
declare gcd with integers a , b as arguments , returning integer	int gcd ( int a , int b )
while b is greater than 0	while ( b > 0 )
create integer t with t = a % b	int t = a % b ;
set a to b , set b to t	a = b , b = t ;
return a from function	return a ;
declare lcm with integers a , b as arguments , returning integer	int lcm ( int a , int b )
return ( a / ( result of run gcd with a , b as arguments ) ) * b	return ( a / gcd ( a , b ) ) * b ;
declare is_prime with integer n as argument , returning integer	int is_prime ( int n )
if n is less than or equal to 1 or n is greater than 3 and ( n % 2 is 0 or n % 3 is 0 ) , return 0 from function	if ( n <= 1 || n > 3 && ( n % 2 == 0 || n % 3 == 0 ) ) return 0 ;
for i = 5 , t = 2 to i * i is less than or equal to n , incrementing i by t , setting t to 6 - t	for ( int i = 5 , t = 2 ; i * i <= n ; i += t , t = 6 - t )
if n % i is 0 , return 0 from function	if ( n % i == 0 ) return 0 ;
return 1 from function	return 1 ;
create integer n , create integer arrays arr , pref , suff , with arr size maxx , pref size maxx , suff size maxx	int n , arr [ maxx ] , pref [ maxx ] , suff [ maxx ] ;
read n	cin >> n ;
if n is 1 , return print 1 print ' \ n ' , 0 from function	if ( n == 1 ) { return cout << 1 << ' \n ' , 0 ; }
for i = 1 to n inclusive , read arr [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> arr [ i ] ; }
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if arr [ i ] is greater than arr [ i - 1 ]	if ( arr [ i ] > arr [ i - 1 ] )
set pref [ i ] to pref [ i - 1 ] + 1	pref [ i ] = pref [ i - 1 ] + 1 ;
else	else
set pref [ i ] to 1	pref [ i ] = 1 ;
for i = n to 1 inclusive , decrementing i	for ( int i = n ; i >= 1 ; i -- )
if i is n or arr [ i ] is less than arr [ i + 1 ]	if ( i == n || arr [ i ] < arr [ i + 1 ] )
set suff [ i ] to suff [ i + 1 ] + 1	suff [ i ] = suff [ i + 1 ] + 1 ;
else	else
set suff [ i ] to 1	suff [ i ] = 1 ;
create integer res with res = 2	int res = 2 ;
for i = 2 to n exclusive	for ( int i = 2 ; i < n ; i ++ )
if arr [ i + 1 ] is greater than arr [ i - 1 ] + 1 , set res to maximum of ( res and pref [ i - 1 ] + suff [ i + 1 ] + 1 )	if ( arr [ i + 1 ] > arr [ i - 1 ] + 1 ) { res = max ( res , pref [ i - 1 ] + suff [ i + 1 ] + 1 ) ; }
for i = 2 to n exclusive , set res to maximum of ( res and maximum of ( pref [ i ] and suff [ i ] ) + 1 )	for ( int i = 2 ; i < n ; i ++ ) { res = max ( res , max ( pref [ i ] , suff [ i ] ) + 1 ) ; }
print res print ' \ n '	cout << res << ' \n ' ;
create const long long inf = 1e9 + 7	const long long inf = 1e9 + 7 ;
declare integer n	int n ;
read from the input to n	cin >> n ;
create long long ans = 0 and long long arrays a , left and right with size n + 2	long long a [ n + 2 ] , left [ n + 2 ] , right [ n + 2 ] , ans = 0 ;
change a [ 0 ] to - 1	a [ 0 ] = - 1 ;
assign inf to a [ n + 1 ]	a [ n + 1 ] = inf ;
loop i from 1 to n inclusive incrementing i	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
set right [ 0 ] to 0	right [ 0 ] = 0 ;
loop i from 1 to n inclusive , change right [ i ] to right [ i - 1 ] + 1 if a [ i ] > a [ i - 1 ] , or else 1	for ( int i = 1 ; i <= n ; i ++ ) right [ i ] = ( a [ i ] > a [ i - 1 ] ? right [ i - 1 ] + 1 : 1 ) ;
set left [ n + 1 ] to 0	left [ n + 1 ] = 0 ;
loop i from n to 0 inclusive decrementing i , change left [ i ] to left [ i + 1 ] + 1 if a [ i ] < a [ i + 1 ] , or else 1	for ( int i = n ; i > 0 ; i -- ) left [ i ] = ( a [ i ] < a [ i + 1 ] ? left [ i + 1 ] + 1 : 1 ) ;
loop i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i - 1 ] + 1 is less than a [ i + 1 ]	if ( a [ i - 1 ] + 1 < a [ i + 1 ] )
set ans to max of ans and 1 + left [ i + 1 ] + right [ i - 1 ]	ans = max ( ans , 1 + left [ i + 1 ] + right [ i - 1 ] ) ;
else	else
set ans to max of ans and ( max of left [ i ] and right [ i ] + 1 )	ans = max ( ans , max ( left [ i ] , right [ i ] ) + 1 ) ;
print ans	cout << ans << endl ;
maxn = const integer with maxn = 100005	const int maxn = 100005 ;
INF = const integer with INF = 0x3fffffff	const int INF = 0x3fffffff ;
eps = double with eps = 1e - 8	double eps = 1e-8 ;
pi = double with pi = acos of - 1	double pi = acos ( - 1 ) ;
f = integer array of size maxn	int f [ maxn ] ;
g = integer array of size maxn	int g [ maxn ] ;
a = integer array of size maxn	int a [ maxn ] ;
n = integer	int n ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] > a [ i - 1 ]	if ( a [ i ] > a [ i - 1 ] )
f [ i ] = f [ i - 1 ] + 1	f [ i ] = f [ i - 1 ] + 1 ;
else	else
f [ i ] = 1	f [ i ] = 1 ;
for i = n down to 1	for ( int i = n ; i >= 1 ; i -- )
if a [ i ] < a [ i + 1 ]	if ( a [ i ] < a [ i + 1 ] )
g [ i ] = g [ i + 1 ] + 1	g [ i ] = g [ i + 1 ] + 1 ;
else	else
g [ i ] = 1	g [ i ] = 1 ;
ans = integer with ans = 0	int ans = 0 ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if a [ i + 1 ] - a [ i - 1 ] > 1	if ( a [ i + 1 ] - a [ i - 1 ] > 1 )
ans = max of ans and f [ i - 1 ] + g [ i + 1 ] + 1	ans = max ( ans , f [ i - 1 ] + g [ i + 1 ] + 1 ) ;
else	else
ans = max of ans and max ( f [ i - 1 ] + 1 , g [ i + 1 ] + 1 )	ans = max ( ans , max ( f [ i - 1 ] + 1 , g [ i + 1 ] + 1 ) ) ;
print ans	cout << ans << endl ;
a , dp1 , dp2 = int array of size 100005 each	int a [ 100005 ] , dp1 [ 100005 ] , dp2 [ 100005 ] ;
n = int	int n ;
read n	cin >> n ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
set a [ 0 ] to 0x3f3f3f3f	a [ 0 ] = 0x3f3f3f3f ;
set a [ n + 1 ] to 0x3f3f3f3f	a [ n + 1 ] = 0x3f3f3f3f ;
ans = int with ans = 0	int ans = 0 ;
for i = 1 to n inclusive set dp1 [ i ] and dp2 [ i ] to 1	for ( int i = 1 ; i <= n ; i ++ ) { dp1 [ i ] = dp2 [ i ] = 1 ; }
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] is greater than a [ i - 1 ] then set dp1 [ i ] to dp1 [ i - 1 ] + 1	if ( a [ i ] > a [ i - 1 ] ) { dp1 [ i ] = dp1 [ i - 1 ] + 1 ; }
set ans to max of ans and dp1 [ i ]	ans = max ( ans , dp1 [ i ] ) ;
for i = n to 0 decrementing i	for ( int i = n ; i > 0 ; i -- )
if a [ i ] is less than a [ i + 1 ] then set dp2 [ i ] to dp2 [ i + 1 ] + 1	if ( a [ i ] < a [ i + 1 ] ) { dp2 [ i ] = dp2 [ i + 1 ] + 1 ; }
set ans to max of ans and dp2 [ i ]	ans = max ( ans , dp2 [ i ] ) ;
for i = 2 to n inclusive set ans to max of ans and dp2 [ i ] + 1	for ( int i = 2 ; i <= n ; i ++ ) { ans = max ( ans , dp2 [ i ] + 1 ) ; }
for i = 1 to n set ans to max of ans and dp1 [ i ] + 1	for ( int i = 1 ; i < n ; i ++ ) { ans = max ( ans , dp1 [ i ] + 1 ) ; }
for i = 2 to n	for ( int i = 2 ; i < n ; i ++ )
if a [ i + 1 ] - a [ i - 1 ] is greater than 1 then set ans to max of ans and dp2 [ i + 1 ] + dp1 [ i - 1 ] + 1	if ( a [ i + 1 ] - a [ i - 1 ] > 1 ) { ans = max ( ans , dp2 [ i + 1 ] + dp1 [ i - 1 ] + 1 ) ; }
print ans	cout << ans << endl ;
a , n , b , c = int	int a , n , b , c ;
s = array of 8 char	char s [ 8 ] ;
w = array of 8 char filled with " jolteon " , q = array of 8 char filled with " flareon "	char w [ 8 ] = " jolteon " , q [ 8 ] = " flareon " ;
v = array of 8 char filled with " umbreon " , z = array of 8 char filled with " leafeon " , l = array of 8 char filled with " glaceeon " , m = array of 8 char filled with " sylveon "	char v [ 8 ] = " umbreon " , z [ 8 ] = " leafeon " , l [ 8 ] = " glaceon " , m [ 8 ] = " sylveon " ;
read n	cin >> n ;
read s	cin >> s ;
if n is 8	if ( n == 8 )
print " vaporeon "	cout << " vaporeon " << endl ;
else if n is 6	else if ( n == 6 )
print " espeon "	cout << " espeon " << endl ;
else	else
a = 0	a = 0 ;
b = 0	b = 0 ;
c = 0	c = 0 ;
d = 0	int d = 0 ;
e = 0	int e = 0 ;
f = 0	int f = 0 ;
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
if s [ i ] is w [ i ] increment a	if ( s [ i ] == w [ i ] ) { a ++ ; }
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
if s [ i ] is q [ i ] increment b	if ( s [ i ] == q [ i ] ) { b ++ ; }
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
if s [ i ] is v [ i ] increment c	if ( s [ i ] == v [ i ] ) { c ++ ; }
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
if s [ i ] is z [ i ] increment d	if ( s [ i ] == z [ i ] ) { d ++ ; }
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
if s [ i ] is l [ i ] increment e	if ( s [ i ] == l [ i ] ) { e ++ ; }
for i = 0 to 8 exclusive	for ( int i = 0 ; i < 8 ; i ++ )
if s [ i ] is m [ i ] increment f	if ( s [ i ] == m [ i ] ) { f ++ ; }
if a > b and a > c and a > d and a > e and a > f	if ( a > b && a > c && a > d && a > e && a > f )
print " jolteon "	cout << " jolteon " << endl ;
if b > a and b > c and b > d and b > e and b > f	else if ( b > a && b > c && b > d && b > e && b > f )
print " flareon "	cout << " flareon " << endl ;
if c > a and c > b and c > d and c > e and c > f	else if ( c > a && c > b && c > d && c > e && c > f )
print " umbreon "	cout << " umbreon " << endl ;
if d > a and d > b and d > c and d > e and d > f	else if ( d > a && d > c && d > b && d > e && d > f )
print " leafeon "	cout << " leafeon " << endl ;
if e > a and e > b and e > c and e > d and e > f	else if ( e > a && e > c && e > d && e > b && e > f )
print " glaceon "	cout << " glaceon " << endl ;
if f > a and f > b and f > c and f > d and f > e	else if ( f > a && f > c && f > d && f > e && f > b )
print " sylveon "	cout << " sylveon " << endl ;
create pair of integer , integer array par with size 10001	pair < int , int > par [ 10001 ] ;
create string set str	set < string > str ;
create string s	string s ;
create integers n , i	int n , i ;
read n read s	cin >> n >> s ;
if n is 8	if ( n == 8 )
print " vaporeon " print newline	cout << " vaporeon " << endl ;
else if n is 6	else if ( n == 6 )
print " espeon " print newline	cout << " espeon " << endl ;
else if n is 7	else if ( n == 7 )
if s [ 0 ] is ' . '	if ( s [ 0 ] == ' . ' )
if s [ 1 ] is ' o '	if ( s [ 1 ] == ' o ' )
print " jolteon " print newline	cout << " jolteon " << endl ;
if s [ 1 ] is ' m '	if ( s [ 1 ] == ' m ' )
print " umbreon " print newline	cout << " umbreon " << endl ;
if s [ 1 ] is ' e '	if ( s [ 1 ] == ' e ' )
print " leafeon " print newline	cout << " leafeon " << endl ;
if s [ 1 ] is ' y '	if ( s [ 1 ] == ' y ' )
print " sylveon " print newline	cout << " sylveon " << endl ;
if s [ 1 ] is ' l '	if ( s [ 1 ] == ' l ' )
if s [ 3 ] is ' r '	if ( s [ 3 ] == ' r ' )
print " flareon " print newline	cout << " flareon " << endl ;
else	else
print " glaceon " print newline	cout << " glaceon " << endl ;
if s [ 1 ] is ' . '	if ( s [ 1 ] == ' . ' )
if s [ 2 ] is ' b '	if ( s [ 2 ] == ' b ' )
print " umbreon " print newline	cout << " umbreon " << endl ;
if s [ 2 ] is ' l '	if ( s [ 2 ] == ' l ' )
if s [ 3 ] is ' t '	if ( s [ 3 ] == ' t ' )
print " jolteon " print newline	cout << " jolteon " << endl ;
else	else
print " sylveon " print newline	cout << " sylveon " << endl ;
if s [ 2 ] is ' a '	if ( s [ 2 ] == ' a ' )
if s [ 3 ] is ' r '	if ( s [ 3 ] == ' r ' )
print " flareon " print newline	cout << " flareon " << endl ;
if s [ 3 ] is ' c '	if ( s [ 3 ] == ' c ' )
print " glaceon " print newline	cout << " glaceon " << endl ;
else	else
print " leafeon " print newline	cout << " leafeon " << endl ;
if s [ 2 ] is ' . '	if ( s [ 2 ] == ' . ' )
if s [ 3 ] is ' r '	if ( s [ 3 ] == ' r ' )
print " flareon " print newline	cout << " flareon " << endl ;
if s [ 3 ] is ' c '	if ( s [ 3 ] == ' c ' )
print " glaceon " print newline	cout << " glaceon " << endl ;
if s [ 3 ] is ' f '	if ( s [ 3 ] == ' f ' )
print " leafeon " print newline	cout << " leafeon " << endl ;
if s [ 3 ] is ' t '	if ( s [ 3 ] == ' t ' )
print " jolteon " print newline	cout << " jolteon " << endl ;
if s [ 3 ] is ' v '	if ( s [ 3 ] == ' v ' )
print " sylveon " print newline	cout << " sylveon " << endl ;
else	else
print " umbreon " print newline	cout << " umbreon " << endl ;
if s [ 0 ] is ' j '	if ( s [ 0 ] == ' j ' )
print " jolteon " print newline	cout << " jolteon " << endl ;
if s [ 0 ] is ' f '	if ( s [ 0 ] == ' f ' )
print ' flareon " print newline	cout << " flareon " << endl ;
if s [ 0 ] is ' u '	if ( s [ 0 ] == ' u ' )
print " umbreon " print newline	cout << " umbreon " << endl ;
if s [ 0 ] is ' l '	if ( s [ 0 ] == ' l ' )
print " leafeon " print newline	cout << " leafeon " << endl ;
if s [ 0 ] is ' g '	if ( s [ 0 ] == ' g ' )
print " glaceon " print newline	cout << " glaceon " << endl ;
if s [ 0 ] is ' s '	if ( s [ 0 ] == ' s ' )
print " sylveon " print newline	cout << " sylveon " << endl ;
str = string array of size 12	string str [ 12 ] ;
n , i , j , ck = int	int n , i , j , ck ;
read n then str [ 0 ]	cin >> n >> str [ 0 ] ;
set str [ 1 ] to " vaporeon "	str [ 1 ] = " vaporeon " ;
set str [ 2 ] to " jolteon "	str [ 2 ] = " jolteon " ;
set str [ 3 ] to " flareon "	str [ 3 ] = " flareon " ;
set str [ 4 ] to " espeon "	str [ 4 ] = " espeon " ;
set str [ 5 ] to " umbreon "	str [ 5 ] = " umbreon " ;
set str [ 6 ] to " leafeon "	str [ 6 ] = " leafeon " ;
set str [ 7 ] to " glaceon "	str [ 7 ] = " glaceon " ;
set str [ 8 ] to " sylveon "	str [ 8 ] = " sylveon " ;
for i = 1 to 8 inclusive	for ( i = 1 ; i <= 8 ; i ++ )
if size of str [ i ] is n	if ( str [ i ] . size ( ) == n )
set ck to 1	ck = 1 ;
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if str [ 0 ] [ j ] > = ' a ' and str [ 0 ] [ j ] < = ' z '	if ( str [ 0 ] [ j ] >= ' a ' && str [ 0 ] [ j ] <= ' z ' )
if str [ 0 ] [ j ] is not str [ i ] [ j ]	if ( str [ 0 ] [ j ] != str [ i ] [ j ] )
set ck to 0	ck = 0 ;
break	break ;
if ck is 1	if ( ck == 1 )
print str [ i ]	cout << str [ i ] << endl ;
print newline	cout << endl ;
create integer N	int N ;
create string jolteon with jolteon = " jolteaon "	string jolteon = " jolteon " ;
create integer jol with jol = 0	int jol = 0 ;
create string flareon with flareon = " flareon "	string flareon = " flareon " ;
create integer fla with fla = 0	int fla = 0 ;
create string umbreon with umbreon = " umbreon "	string umbreon = " umbreon " ;
create integer umb with umb = 0	int umb = 0 ;
create string leafeon with leafeon = " leafeon "	string leafeon = " leafeon " ;
create integer leaf with leaf = 0	int leaf = 0 ;
create string glaceon with glaceon = " glaceon "	string glaceon = " glaceon " ;
create integer gla with gla = 0	int gla = 0 ;
create string sylveon with sylveon = " sylveon "	string sylveon = " sylveon " ;
create integer syl with syl = 0	int syl = 0 ;
create string eevee	string eevee ;
read N	cin >> N ;
read eevee	cin >> eevee ;
if N is 8	if ( N == 8 )
print " vaporeon \ n "	cout << " vaporeon\n " ;
else if N is 6	else if ( N == 6 )
print " espeon \ n "	cout << " espeon\n " ;
else	else
for x = 0 to N exclusive	for ( int x = 0 ; x < N ; x ++ )
if eevee [ x ] is not ' . '	if ( eevee [ x ] != ' . ' )
iif eevee [ x ] is flareon [ x ] and fla is 0	if ( eevee [ x ] == flareon [ x ] && fla == 0 )
if x is not 2 , set leaf to 1	if ( x != 2 ) { leaf = 1 ; }
set jol to 1	jol = 1 ;
set syl to 1	syl = 1 ;
set umb to 1	umb = 1 ;
if x is not 1 and x is not 2 , set gla to 1	if ( x != 1 && x != 2 ) { gla = 1 ; }
if eevee [ x ] is glaceon [ x ] and gla is 0	if ( eevee [ x ] == glaceon [ x ] && gla == 0 )
if x is not 2 , set leaf to 1	if ( x != 2 ) { leaf = 1 ; }
set jol to 1	jol = 1 ;
set syl to 1	syl = 1 ;
set umb to 1	umb = 1 ;
if x is not 1 and x is not 2 , set fla to 1	if ( x != 1 && x != 2 ) { fla = 1 ; }
if eevee [ x ] is leafeon [ x ] and leaf is 0	if ( eevee [ x ] == leafeon [ x ] && leaf == 0 )
if x is not 2	if ( x != 2 )
set fla to 1	fla = 1 ;
set gla to 1	gla = 1 ;
set jol to 1	jol = 1 ;
set syl to 1	syl = 1 ;
set umb to 1	umb = 1 ;
if eevee [ x ] is jolteon [ x ] and jol is 0	if ( eevee [ x ] == jolteon [ x ] && jol == 0 )
set leaf to 1	leaf = 1 ;
set fla to 1	fla = 1 ;
if x is not 2 , set syl to 1	if ( x != 2 ) { syl = 1 ; }
set umb to 1	umb = 1 ;
set gla to 1	gla = 1 ;
if eevee [ x ] is umbreon [ x ] and umb is 0	if ( eevee [ x ] == umbreon [ x ] && umb == 0 )
set leaf to 1	leaf = 1 ;
set jol to 1	jol = 1 ;
set syl to 1	syl = 1 ;
set fla to 1	fla = 1 ;
set gla to 1	gla = 1 ;
if eevee [ x ] is sylveon [ x ] and syl is 0	if ( eevee [ x ] == sylveon [ x ] && syl == 0 )
set leaf to 1	leaf = 1 ;
set fla to 1	fla = 1 ;
if x is not 2 , set jol to 1	if ( x != 2 ) { jol = 1 ; }
set umb to 1	umb = 1 ;
set gla to 1	gla = 1 ;
if syl + leaf + jol + umb + gla + fla is 5	if ( syl + leaf + jol + umb + gla + fla == 5 )
if syl is 0 , print sylveon print " \ n "	if ( syl == 0 ) { cout << sylveon << " \n " ; }
if gla is 0 , print glaceon print " \ n "	if ( gla == 0 ) { cout << glaceon << " \n " ; }
if fla is 0 , print flareon print " \ n "	if ( fla == 0 ) { cout << flareon << " \n " ; }
if jol is 0 , print jolteon print " \ n "	if ( jol == 0 ) { cout << jolteon << " \n " ; }
if umb is 0 print umbreon print " \ n "	if ( umb == 0 ) { cout << umbreon << " \n " ; }
if leaf is 0 print leafon print " \ n "	if ( leaf == 0 ) { cout << leafeon << " \n " ; }
break loop	break ;
let n be an integer	int n ;
read n	cin >> n ;
define n number of pair pr with two integer elements	pair < int , int > pr [ n ] ;
for i = 0 to n exclusive , read	for ( int i = 0 ; i < n ; i ++ ) { cin >> pr [ i ] . first >> pr [ i ] . second ; }
sort pr , pr + n	sort ( pr , pr + n ) ;
for j = 0 to n - 1 ( exclusive )	for ( int j = 0 ; j < n - 1 ; j ++ )
if first element of jth pair is less than j + 1 th pair , and second element of jth pair is greater than j + 1th pair , do the following	if ( pr [ j ] . first < pr [ j + 1 ] . first && pr [ j ] . second > pr [ j + 1 ] . second )
print Happy Alex and a new line	cout << " Happy Alex " << endl ;
print Poor Alex and a new line	cout << " Poor Alex " << endl ;
t , a , b , h , p = int with h = 0 and p = 0	int t , a , b , h = 0 , p = 0 ;
read t	cin >> t ;
loop t times	while ( t -- )
read a then b	cin >> a >> b ;
if a is not equal to b increment p	if ( a != b ) p ++ ;
if p is not equal 0	if ( p != 0 )
print " Happy Alex "	cout << " Happy Alex " << endl ;
else	else
print " Poor Alex "	cout << " Poor Alex " << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
create doubles x and y	double x , y ;
create double z	double z ;
double pointer * arr points to new array of doubles with size n	double * arr = new double [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x and y	cin >> x >> y ;
declare double variable q = x + ( y / 100000 )	double q = x + ( y / 100000 ) ;
set value of arr [ i ] to q	arr [ i ] = q ;
sort arr	sort ( arr , arr + n ) ;
for integer i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if arr [ i ] ! = arr [ i + 1 ]	if ( int ( arr [ i ] ) != int ( arr [ i + 1 ] ) )
if arr [ i + 1 ] - arr [ i ] is less than 1	if ( arr [ i + 1 ] - arr [ i ] < 1 )
print " Happy Alex "	cout << " Happy Alex " << endl ;
print " Poor Alex "	cout << " Poor Alex " << endl ;
count , i , j , n = int with count = 0 and a , b = int array of size 100001 each	int a [ 100001 ] , b [ 100001 ] , count = 0 , i , j , n ;
read n	cin >> n ;
read n values into a then b	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i ] ; }
for j = 0 to n	for ( j = 0 ; j < n ; j ++ )
if a [ j ] is not b [ j ]	if ( a [ j ] != b [ j ] )
print " Happy Alex "	cout << " Happy Alex " << endl ;
set count to 1	count = 1 ;
break loop	break ;
if count is 0 then print " Poor Alex "	if ( count == 0 ) cout << " Poor Alex " << endl ;
create integer n	int n ;
read n	cin >> n ;
create pair array of integer , integer pr with size n	pair < int , int > pr [ n ] ;
for i = 0 to n exclusive , read first element of pr [ i ] read second element of pr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> pr [ i ] . first >> pr [ i ] . second ; }
sort elements from pr to pr + n	sort ( pr , pr + n ) ;
for j = 0 to n - 1 exclusive	for ( int j = 0 ; j < n - 1 ; j ++ )
if first element of pr [ j ] is less than first element of pr [ j + 1 ] and second element of pr [ j ] is greater than second element of pr [ j + 1 ]	if ( pr [ j ] . first < pr [ j + 1 ] . first && pr [ j ] . second > pr [ j + 1 ] . second )
print " Happy Alex " print newline	cout << " Happy Alex " << endl ;
print " Poor Alex " print newline	cout << " Poor Alex " << endl ;
declare integer variables n , a and b	int n , a , b ;
read input to n	cin >> n ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a and b	cin >> a >> b ;
if a ! = b	if ( a != b )
print " Happy Alex "	cout << " Happy Alex " << endl ;
print " Poor Alex "	cout << " Poor Alex " << endl ;
create constant integer MAXN with MAXN = 100000 + 10	const int MAXN = 100000 + 10 ;
create constant long double eps with eps = 1e - 10	const long double eps = 1e-10 ;
create integer array cnt with size MAXN	int cnt [ MAXN ] ;
declare check with integer n as argument , returning integer	int check ( int n )
for i = 0 to i + 2 is less than n , incrementing i	for ( int i = 0 ; i + 2 < n ; i ++ )
if cnt [ i ] is 0 , break current loop iteration	if ( cnt [ i ] == 0 ) continue ;
if cnt [ i ] is greater than or equal to 2 and cnt [ i + 1 ] is greater than or equal to 0 , return 1 from function	if ( cnt [ i ] >= 2 && cnt [ i + 1 ] >= 0 ) return 1 ;
if cnt [ i ] is less than or equal to - 2 and cnt [ i + 1 ] is less than or equal to 0 , return - 1 from function	if ( cnt [ i ] <= - 2 && cnt [ i + 1 ] <= 0 ) return - 1 ;
increment cnt [ i + 1 ] by cnt [ i ]	cnt [ i + 1 ] += cnt [ i ] ;
increment cnt [ i + 2 ] by cnt [ i ]	cnt [ i + 2 ] += cnt [ i ] ;
create long double p with p = square root of ( long double casted 5 ) + 1	long double p = sqrt ( ( long double ) 5 ) + 1 ;
set p to p / 2	p /= 2 ;
create long double ret with ret = p * cnt [ n - 2 ] + cnt [ n - 1 ]	long double ret = p * cnt [ n - 2 ] + cnt [ n - 1 ] ;
if absolute value of ret is less than eps , return 0 from function	if ( fabs ( ret ) < eps ) return 0 ;
if ret is greater than 0 , return 1 from function	if ( ret > 0 ) return 1 ;
return - 1 from function	return - 1 ;
create strings s1 , s2	string s1 , s2 ;
read s1 read s2	cin >> s1 >> s2 ;
create integer n with n = maximum of size of s1 and size of s2	int n = max ( s1 . size ( ) , s2 . size ( ) ) ;
if size of s1 is less than n , set s1 to string initialized with ( n - size of s1 , ' 0 ' ) + s1	if ( s1 . size ( ) < n ) s1 = string ( n - s1 . size ( ) , ' 0 ' ) + s1 ;
if size of s2 is less than n , set s2 to string initialized with ( n - size of s2 , ' 0 ' ) + s2	if ( s2 . size ( ) < n ) s2 = string ( n - s2 . size ( ) , ' 0 ' ) + s2 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create integer a with a = s1 [ i ] - ' 0 '	int a = s1 [ i ] - ' 0 ' ;
create integer b with b = s2 [ i ] - ' 0 '	int b = s2 [ i ] - ' 0 ' ;
set cnt [ i ] to a - b	cnt [ i ] = a - b ;
create integer ret with ret = result of run check with n as argument	int ret = check ( n ) ;
if ret is 0	if ( ret == 0 )
print " = " print newline	cout << " = " << endl ;
else if ret is - 1	else if ( ret == - 1 )
print " < " print newline	cout << " < " << endl ;
else	else
print " > " print newline	cout << " > " << endl ;
s1 , s2 = string	string s1 , s2 ;
read a line into s1 using cin	getline ( cin , s1 ) ;
read a line into s2 using cin	getline ( cin , s2 ) ;
sz1 = int with sz1 = size of s1	int sz1 = s1 . size ( ) ;
sz2 = int with sz2 = size of s2	int sz2 = s2 . size ( ) ;
swaped = bool with swaped = false	bool swaped = 0 ;
if sz1 is less than sz2	if ( sz1 < sz2 )
call swap on s1 and s2	swap ( s1 , s2 ) ;
call swap on sz1 and sz2	swap ( sz1 , sz2 ) ;
set swaped to true	swaped = 1 ;
if sz1 is greater than sz2	if ( sz1 > sz2 )
aux = string with aux = " "	string aux = "  " ;
for i = 1 to sz1 - sz2 inclusive append " 0 " to aux	for ( int i = 1 ; i + sz2 <= sz1 ; ++ i ) { aux += " 0 " ; }
prepend aux to s2	s2 = aux + s2 ;
prepend " 0 " to s1	s1 = " 0 " + s1 ;
prepend " 0 " to s2	s2 = " 0 " + s2 ;
increment sz1	sz1 ++ ;
for i = 1 to sz1 - 1	for ( int i = 1 ; i + 1 < sz1 ; ++ i )
if s1 [ i ] and s1 [ i + 1 ] are both ' 1 '	if ( s1 [ i ] == ' 1 ' and s1 [ i + 1 ] == ' 1 ' )
set s1 [ i - 1 ] to ' 1 '	s1 [ i - 1 ] = ' 1 ' ;
set s1 [ i ] to ' 0 '	s1 [ i ] = ' 0 ' ;
set s1 [ i + 1 ] to ' 0 '	s1 [ i + 1 ] = ' 0 ' ;
j = int with j = i - 2	int j = i - 2 ;
loop while j is greater than 0 and s1 [ j ] is ' 1 '	while ( j - 1 >= 0 and s1 [ j ] == ' 1 ' )
set s1 [ j - 1 ] to ' 1 '	s1 [ j - 1 ] = ' 1 ' ;
set s1 [ j ] to ' 0 '	s1 [ j ] = ' 0 ' ;
set s1 [ j + 1 ] to ' 0 '	s1 [ j + 1 ] = ' 0 ' ;
decrement j by 2	j -= 2 ;
if s2 [ i ] and s2 [ i + 1 ] are both ' 1 '	if ( s2 [ i ] == ' 1 ' and s2 [ i + 1 ] == ' 1 ' )
set s2 [ i - 1 ] to ' 1 '	s2 [ i - 1 ] = ' 1 ' ;
set s2 [ i ] to ' 0 '	s2 [ i ] = ' 0 ' ;
set s2 [ i + 1 ] to ' 0 '	s2 [ i + 1 ] = ' 0 ' ;
j = int with j = i - 2	int j = i - 2 ;
loop while j is greater than 0 and s2 [ j ] is ' 1 '	while ( j - 1 >= 0 and s2 [ j ] == ' 1 ' )
set s2 [ j - 1 ] to ' 1 '	s2 [ j - 1 ] = ' 1 ' ;
set s2 [ j ] to ' 0 '	s2 [ j ] = ' 0 ' ;
set s2 [ j + 1 ] to ' 0 '	s2 [ j + 1 ] = ' 0 ' ;
decrement j by 2	j -= 2 ;
for i = 0 to sz1	for ( int i = 0 ; i < sz1 ; ++ i )
if s1 [ i ] is greater than s2 [ i ]	if ( s1 [ i ] > s2 [ i ] )
if swaped is false	if ( ! swaped )
print ' > '	cout << ' > ' << ' \n ' ;
else	else
print ' < '	cout << ' < ' << ' \n ' ;
if s18i ] is less than s2 [ i ]	else if ( s1 [ i ] < s2 [ i ] )
if swaped is false	if ( ! swaped )
print ' < '	cout << ' < ' << ' \n ' ;
else	else
print ' > '	cout << ' > ' << ' \n ' ;
print ' = '	cout << ' = ' << ' \n ' ;
create constant double PI with PI = 3 . 14159265358979323846264338327	const double PI = 3.14159265358979323846264338327 ;
create strings a , b	string a , b ;
read a read b	cin >> a >> b ;
create integer vectors a1 , b1 with a1 initialized with 100020 , b1 initialized with 100020	vector < int > a1 ( 100020 ) , b1 ( 100020 ) ;
for i = size of a - 1 to 0 inclusive , decrementing i , set a1 [ size of a - 1 - i ] to a [ i ] - ' 0 '	for ( int i = a . size ( ) - 1 ; i >= 0 ; i -- ) a1 [ a . size ( ) - 1 - i ] = a [ i ] - ' 0 ' ;
for i = size of b - 1 to 0 inclusive , decrementing i , set b1 [ size of b - 1 - i ] to b [ i ] - ' 0 '	for ( int i = b . size ( ) - 1 ; i >= 0 ; i -- ) b1 [ b . size ( ) - 1 - i ] = b [ i ] - ' 0 ' ;
for i = 100010 to 0 inclusive , decrementing i	for ( int i = 100010 ; i >= 0 ; i -- )
for j = i to a1 [ j ] and a1 [ j + 1 ] , incrementing j by 2 , set a1 [ j ] to a1 [ j + 1 ] to 0 , set a1 [ j + 2 ] to 1	for ( int j = i ; a1 [ j ] && a1 [ j + 1 ] ; j += 2 ) a1 [ j ] = a1 [ j + 1 ] = 0 , a1 [ j + 2 ] = 1 ;
for j = i to b1 [ j ] and b1 [ j + 1 ] , incrementing j by 2 , set b1 [ j ] to b1 [ j + 1 ] to 0 , set b1 [ j + 2 ] to 1	for ( int j = i ; b1 [ j ] && b1 [ j + 1 ] ; j += 2 ) b1 [ j ] = b1 [ j + 1 ] = 0 , b1 [ j + 2 ] = 1 ;
for i = 100010 to 0 inclusive , decrementing i	for ( int i = 100010 ; i >= 0 ; i -- )
if a1 [ i ] is less than b1 [ i ] , return print ' < ' print newline , 0 from function	if ( a1 [ i ] < b1 [ i ] ) return cout << ' < ' << endl , 0 ;
if a1 [ i ] is greater than b1 [ i ] , return print ' > ' print newline , 0	if ( a1 [ i ] > b1 [ i ] ) return cout << ' > ' << endl , 0 ;
print ' = ' print newline	cout << ' = ' << endl ;
create a map from integers to strings with name m	map < int , string > m ;
create iterator it for map of int to strings	map < int , string > :: iterator it ;
s = array of characters of size 20	char s [ 20 ] ;
declare integer variable n	int n ;
m [ 0 ] = " January "	m [ 0 ] = " January " ;
m [ 1 ] = " February "	m [ 1 ] = " February " ;
m [ 2 ] = " March "	m [ 2 ] = " March " ;
m [ 3 ] = " April "	m [ 3 ] = " April " ;
m [ 4 ] = " May "	m [ 4 ] = " May " ;
m [ 5 ] = " June "	m [ 5 ] = " June " ;
m [ 6 ] = " July "	m [ 6 ] = " July " ;
m [ 7 ] = " August "	m [ 7 ] = " August " ;
m [ 8 ] = " September "	m [ 8 ] = " September " ;
m [ 9 ] = " October "	m [ 9 ] = " October " ;
m [ 10 ] = " November "	m [ 10 ] = " November " ;
m [ 11 ] = " December "	m [ 11 ] = " December " ;
while cin > > s > > n	while ( cin >> s >> n )
create integer j with value 0	int j = 0 ;
move it through m from the beginning	for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ )
increment j	++ j ;
if it - > second = s . break	if ( it -> second == s ) break ;
print m [ ( j + n - 1 ) % 12 ] and a new line	cout << m [ ( j + n - 1 ) % 12 ] << endl ;
create map m from integer to string	map < int , string > m ;
create map iterator it from integer to string	map < int , string > :: iterator it ;
create character array s with size 20	char s [ 20 ] ;
create integer n	int n ;
set m [ 0 ] to " January "	m [ 0 ] = " January " ;
set m [ 1 ] to " February "	m [ 1 ] = " February " ;
set m [ 2 ] to " March "	m [ 2 ] = " March " ;
set m [ 3 ] to " April "	m [ 3 ] = " April " ;
set m [ 4 ] to " May "	m [ 4 ] = " May " ;
set m [ 5 ] to " June "	m [ 5 ] = " June " ;
set m [ 6 ] to " July "	m [ 6 ] = " July " ;
set m [ 7 ] to " August "	m [ 7 ] = " August " ;
set m [ 8 ] to " September "	m [ 8 ] = " September " ;
set m [ 9 ] to " October "	m [ 9 ] = " October " ;
set m [ 10 ] to " November "	m [ 10 ] = " November " ;
set m [ 11 ] to " December "	m [ 11 ] = " December " ;
while read s read n	while ( cin >> s >> n )
create integer j with j = 0	int j = 0 ;
for it = beginning of m to it is not end of m , incrementing it	for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ )
increment j	++ j ;
if second element of it is s , break loop	if ( it -> second == s ) break ;
print m [ ( j + n - 1 ) % 12 ] print newline	cout << m [ ( j + n - 1 ) % 12 ] << endl ;
let a be string	string a ;
s = integer	int s ;
read a and s	cin >> a >> s ;
declare integer variable d	int d ;
if a is equal to " January "	if ( a == " January " )
set d to 1	d = 1 ;
else if a is equal to " February "	else if ( a == " February " )
set value of d to 2	d = 2 ;
else if a is equal to " March "	else if ( a == " March " )
set value of d to 3	d = 3 ;
else if a is equal to " April "	else if ( a == " April " )
set value of d to 4	d = 4 ;
else if a is equal to " May "	else if ( a == " May " )
set d to 5	d = 5 ;
else if a is equal to " June "	else if ( a == " June " )
set value of d to 6	d = 6 ;
else if a is equal to " July "	else if ( a == " July " )
set value of d to 7	d = 7 ;
else if a is equal to " August "	else if ( a == " August " )
set value of d to 8	d = 8 ;
else if a is equal to " September "	else if ( a == " September " )
set d to 9	d = 9 ;
else if a is equal to " October "	else if ( a == " October " )
set d to 10	d = 10 ;
else if a is equal to " November "	else if ( a == " November " )
d = 11	d = 11 ;
else	else
d = 12	d = 12 ;
decrease d by one	d -- ;
d = d + s	d = d + s ;
d = d % 12	d = d % 12 ;
if d is equal to 0	if ( d == 0 )
a = " January "	a = " January " ;
else if d is equal to 1	else if ( d == 1 )
a = " February "	a = " February " ;
else if d is equal to 2	else if ( d == 2 )
a = " March "	a = " March " ;
else if d is equal to 3	else if ( d == 3 )
a = " April "	a = " April " ;
else if d is equal to 4	else if ( d == 4 )
a = " May "	a = " May " ;
else if d is equal to 5	else if ( d == 5 )
a = " June "	a = " June " ;
else if d is equal to 6	else if ( d == 6 )
a = " July "	a = " July " ;
else if d is equal to 7	else if ( d == 7 )
a = " August "	a = " August " ;
else if d is equal to 8	else if ( d == 8 )
a = " September "	a = " September " ;
else if d is equal to 9	else if ( d == 9 )
a = " October "	a = " October " ;
else if d is equal to 10	else if ( d == 10 )
a = " November "	a = " November " ;
else	else
a = " December "	a = " December " ;
print a and a new line	cout << a << endl ;
v is a vector of strings with 120 elements	vector < string > v ( 120 ) ;
for integer i = 0 to 120 exclusive	for ( int i = 0 ; i < 120 ; i += 12 )
v [ i ] = " January "	v [ i ] = " January " ;
v [ i + 1 ] = " February "	v [ i + 1 ] = " February " ;
v [ i + 2 ] = " March "	v [ i + 2 ] = " March " ;
v [ i + 3 ] = " April "	v [ i + 3 ] = " April " ;
v [ i + 4 ] = " May "	v [ i + 4 ] = " May " ;
v [ i + 5 ] = " June "	v [ i + 5 ] = " June " ;
v [ i + 6 ] = " July "	v [ i + 6 ] = " July " ;
v [ i + 7 ] = " August "	v [ i + 7 ] = " August " ;
v [ i + 8 ] = " September "	v [ i + 8 ] = " September " ;
v [ i + 9 ] = " October "	v [ i + 9 ] = " October " ;
v [ i + 10 ] = " November "	v [ i + 10 ] = " November " ;
v [ i + 11 ] = " December "	v [ i + 11 ] = " December " ;
x = string	string x ;
read x	cin >> x ;
declare integers n and z	int n , z ;
read n	cin >> n ;
for i = 0 to 120 exclusive	for ( int i = 0 ; i < 120 ; i ++ )
if v [ i ] = x	if ( v [ i ] == x )
assign value of i to the z	z = i ;
break the loop	break ;
print v [ z + n ] and a new line	cout << v [ z + n ] << endl ;
let num be an array of integers of length 3005	int num [ 3005 ] ;
create a map from strings to integers with name ma	map < string , int > ma ;
set integer ans to 0	int ans = 0 ;
boolean function is_prime with integer arguments u	bool is_prime ( int u ) ;
s = string	string s ;
s = " January "	s = " January " ;
ma [ s ] = 1	ma [ s ] = 1 ;
s = " February "	s = " February " ;
ma [ s ] = 2	ma [ s ] = 2 ;
s = " March "	s = " March " ;
ma [ s ] = 3	ma [ s ] = 3 ;
s = " April "	s = " April " ;
set value of ma [ s ] to 4	ma [ s ] = 4 ;
s = " May "	s = " May " ;
ma [ s ] = 5	ma [ s ] = 5 ;
ma [ " June " ] = 6	ma [ " June " ] = 6 ;
ma [ " July " ] = 7	ma [ " July " ] = 7 ;
ma [ " August " ] = 8	ma [ " August " ] = 8 ;
ma [ " September " ] = 9	ma [ " September " ] = 9 ;
ma [ " October " ] = 10	ma [ " October " ] = 10 ;
ma [ " November " ] = 11	ma [ " November " ] = 11 ;
ma [ " December " ] = 12	ma [ " December " ] = 12 ;
n = integer	int n ;
read s	cin >> s ;
read n	cin >> n ;
if n % 12 = 0	if ( n % 12 == 0 )
print s and a new line	cout << s << endl ;
else	else
set integer a to ma [ s ]	int a = ma [ s ] ;
increase n by a	n += a ;
if n % 12 = 1 , print " January " and a new line	if ( n % 12 == 1 ) cout << " January " << endl ;
if n % 12 = 2 , print " February " and a new line	if ( n % 12 == 2 ) cout << " February " << endl ;
if n % 12 = 3 , print " March " and a new line	if ( n % 12 == 3 ) cout << " March " << endl ;
if n % 12 = 4 , print " April " and a new line	if ( n % 12 == 4 ) cout << " April " << endl ;
if n % 12 = 5 , print " May " and a new line	if ( n % 12 == 5 ) cout << " May " << endl ;
if n % 12 = 6 , print " June " and a new line	if ( n % 12 == 6 ) cout << " June " << endl ;
if n % 12 = 7 , print " July " and a new line	if ( n % 12 == 7 ) cout << " July " << endl ;
if n % 12 = 8 , print " August " and a new line	if ( n % 12 == 8 ) cout << " August " << endl ;
if n % 12 = 9 , print " September " and a new line	if ( n % 12 == 9 ) cout << " September " << endl ;
if n % 12 = 10 , print " October " and a new line	if ( n % 12 == 10 ) cout << " October " << endl ;
if n % 12 = 11 , print " November " and a new line	if ( n % 12 == 11 ) cout << " November " << endl ;
if n % 12 = 0 , print " December " and a new line	if ( n % 12 == 0 ) cout << " December " << endl ;
declare inline nxt with no arguments , returning long long	inline long long nxt ( )
create long longs _x , _tmp with _x = 0 , _tmp = 1	long long _x = 0 , _tmp = 1 ;
create character _tc with _tc = read character	char _tc = getchar ( ) ;
while _tc is less than ' 0 ' or _tc is greater than ' 9 ' and _tc is not ' - ' , set _tc to read character	while ( ( _tc < ' 0 ' || _tc > ' 9 ' ) && _tc != ' - ' ) _tc = getchar ( ) ;
if _tc is ' - ' , set _tc to read character , set _tmp to - 1	if ( _tc == ' - ' ) _tc = getchar ( ) , _tmp = - 1 ;
while _tc is greater than or equal to ' 0 ' and _tc is less than or equal to ' 9 ' , set _x to _x * 10 , increment _x by ( _tc - ' 0 ' ) , set _tc to read character	while ( _tc >= ' 0 ' && _tc <= ' 9 ' ) _x *= 10 , _x += ( _tc - ' 0 ' ) , _tc = getchar ( ) ;
return _x * _tmp from function	return _x * _tmp ;
create string array s with size 170	string s [ 170 ] ;
for i = 1 to 160 inclusive	for ( int i = 1 ; i <= 160 ; ++ i )
if ( i % 12 = = 1 ) s [ i ] = " January " ;	if ( i % 12 == 1 ) s [ i ] = " January " ;
if ( i % 12 = = 2 ) s [ i ] = " February " ;	if ( i % 12 == 2 ) s [ i ] = " February " ;
if ( i % 12 = = 3 ) s [ i ] = " March " ;	if ( i % 12 == 3 ) s [ i ] = " March " ;
if ( i % 12 = = 4 ) s [ i ] = " April " ;	if ( i % 12 == 4 ) s [ i ] = " April " ;
if ( i % 12 = = 5 ) s [ i ] = " May " ;	if ( i % 12 == 5 ) s [ i ] = " May " ;
if ( i % 12 = = 6 ) s [ i ] = " June " ;	if ( i % 12 == 6 ) s [ i ] = " June " ;
if ( i % 12 = = 7 ) s [ i ] = " July " ;	if ( i % 12 == 7 ) s [ i ] = " July " ;
if ( i % 12 = = 8 ) s [ i ] = " August " ;	if ( i % 12 == 8 ) s [ i ] = " August " ;
if ( i % 12 = = 9 ) s [ i ] = " September " ;	if ( i % 12 == 9 ) s [ i ] = " September " ;
if ( i % 12 = = 10 ) s [ i ] = " October " ;	if ( i % 12 == 10 ) s [ i ] = " October " ;
if ( i % 12 = = 11 ) s [ i ] = " November " ;	if ( i % 12 == 11 ) s [ i ] = " November " ;
if ( i % 12 = = 0 ) s [ i ] = " December " ;	if ( i % 12 == 0 ) s [ i ] = " December " ;
create string str	string str ;
create integer n	int n ;
read str read n	cin >> str >> n ;
for i = 1 to 12 inclusive	for ( int i = 1 ; i <= 12 ; ++ i )
if s [ i ] is str , print s [ i + n ] print newline	if ( s [ i ] == str ) { cout << s [ i + n ] << endl ; }
declare map from integer to string m	map < int , string > m ;
declare map iterator from integer to string it	map < int , string > :: iterator it ;
declare character array s size 20	char s [ 20 ] ;
declare integer n	int n ;
let m [ 0 ] be " January "	m [ 0 ] = " January " ;
let m [ 1 ] be " February "	m [ 1 ] = " February " ;
let m [ 2 ] be " March "	m [ 2 ] = " March " ;
let m [ 3 ] be " April "	m [ 3 ] = " April " ;
let m [ 4 ] be " May "	m [ 4 ] = " May " ;
let m [ 5 ] be " June "	m [ 5 ] = " June " ;
let m [ 6 ] be " July "	m [ 6 ] = " July " ;
let m [ 7 ] be " August "	m [ 7 ] = " August " ;
let m [ 8 ] be " September "	m [ 8 ] = " September " ;
let m [ 9 ] be " October "	m [ 9 ] = " October " ;
let m [ 10 ] be " November "	m [ 10 ] = " November " ;
let m [ 11 ] be " December "	m [ 11 ] = " December " ;
while read s , n	while ( cin >> s >> n )
declare integer j = 0	int j = 0 ;
for it = beginning of m to it is not end of m , incrementing it	for ( it = m . begin ( ) ; it != m . end ( ) ; it ++ )
increment j	++ j ;
if second element of it is s , end loop	if ( it -> second == s ) break ;
print m [ ( j + n - 1 ) % 12 ] , newline	cout << m [ ( j + n - 1 ) % 12 ] << endl ;
declare integers n , m , a , b , rub , with rub = 0	int n , m , a , b , rub = 0 ;
read n , m , a and b	cin >> n >> m >> a >> b ;
while n is greater than 0	while ( n > 0 )
if n is less than m	if ( n < m )
set integer flag to n * a	int flag = n * a ;
if flag is less than b	if ( flag < b )
increase rub by flag	rub += flag ;
n = 0	n = 0 ;
else	else
increase rub by b	rub += b ;
decrease n by m	n -= m ;
else if ( a * m ) is greater than b	else if ( ( a * m ) > b )
decrease n by m	n -= m ;
increase rub by b	rub += b ;
else	else
increase rub by n * a	rub += n * a ;
assign value of 0 to the n	n = 0 ;
print rub and " \ n "	cout << rub << " \n " ;
create integers n , m , a , b , r , d , cost with cost = 0	int n , m , a , b , r , d , cost = 0 ;
read n read m read a read b	cin >> n >> m >> a >> b ;
set r to n % m	r = n % m ;
set d to n / m	d = n / m ;
if m is greater than n	if ( m > n )
if b is less than a * b	if ( b < a * n )
print b print newline	cout << b << endl ;
else	else
print a * n print newline	cout << a * n << endl ;
if d * b is less than a * ( n - r )	if ( d * b < a * ( n - r ) )
increment cost by d * b	cost += ( d * b ) ;
if r * a is less than b	if ( r * a < b )
increment cost by r * a	cost += ( r * a ) ;
else	else
increment cost by b	cost += b ;
else	else
increment cost by a * n	cost += ( a * n ) ;
print cost print newline	cout << cost << endl ;
n , m , a , b = integers	int n , m , a , b ;
Read n , m , a , b	cin >> n >> m >> a >> b ;
x = integer , set to ( n / m ) * b + ( n % m ) * a	int x = ( n / m ) * b + ( n % m ) * a ;
y = integer , set to ( n / m + 1 ) * b	int y = ( n / m + 1 ) * b ;
z = integer , set to n * a	int z = n * a ;
print minimum value of x and minimum value of y and z and a new line	cout << min ( x , min ( y , z ) ) << endl ;
create integer TESTS with TESTS = 1	int TESTS = 1 ;
while decrementing TESTS is true	while ( TESTS -- )
create long longs n , m , a , b	long long n , m , a , b ;
read n read m read a read b	cin >> n >> m >> a >> b ;
create long long integer vector v	vector < long long int > v ;
if b is greater than or equal to m * a	if ( b >= m * a )
read n * a read ' \ n '	cout << n * a << ' \n ' ;
else	else
create long long c with c = n / m	long long c = n / m ;
create long long ans with ans = c * b	long long ans = c * b ;
decrement n by c * m	n -= c * m ;
increment ans by minimum of b and a * n	ans += min ( b , a * n ) ;
print ans print ' \ n '	cout << ans << ' \n ' ;
n , m , a , b are long long	long long n , m , a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
if m * a < b	if ( m * a < b )
print n * a	cout << n * a << endl ;
else	else
price = n / m * b + min ( n modulo m * a , b )	long long price = ( n / m ) * b + min ( ( n % m ) * a , b ) ;
print price	cout << price << endl ;
create integers n , m , a , b	int n , m , a , b ;
read n read m read a read b	cin >> n >> m >> a >> b ;
if m * a is greater than b	if ( m * a > b )
print minimum of ( ( n / m ) * b + ( n % m ) * a and ( ( n / m ) + 1 ) * b ) print newline	cout << min ( ( n / m ) * b + ( n % m ) * a , ( ( n / m ) + 1 ) * b ) << endl ;
print minimum of n * a and ( ( n / m ) + 1 ) * b print newline	cout << min ( n * a , ( ( n / m ) + 1 ) * b ) << endl ;
create integers n , m	int n , m ;
create floats a , b	float a , b ;
read n read m read a read b	cin >> n >> m >> a >> b ;
create integer sum with sum = 0	int sum = 0 ;
if ( n % m ) * a is less than or equal to b	if ( ( n % m ) * a <= b )
increment sum by n / m * b + ( n % m ) * a	sum += n / m * b + ( n % m ) * a ;
else	else
set sum to ( n / m + 1 ) * b	sum = ( n / m + 1 ) * b ;
if sum is greater than n * a , set sum to n * a	if ( sum > n * a ) sum = n * a ;
print sum print newline	cout << sum << endl ;
create long long integers n , m , a , b	long long int n , m , a , b ;
read n read m read a read b	cin >> n >> m >> a >> b ;
if m * a is less than b	if ( m * a < b )
print n * a print newline	cout << n * a << endl ;
else	else
create long long integer price with price = ( n / m ) * b + minimum of ( n % m ) * b and b	long long int price = ( n / m ) * b + min ( ( n % m ) * a , b ) ;
print price print newline	cout << price << endl ;
declare long longs n , m , a and b	long long n , m , a , b ;
read n , m , a and b	cin >> n >> m >> a >> b ;
if m * a is less than b	if ( m * a < b )
print n * a and a new line	cout << n * a << endl ;
else	else
create variable price of type long long = ( n / m ) * b + min of ( n % m ) * a and b	long long price = ( n / m ) * b + min ( ( n % m ) * a , b ) ;
print price and a new line	cout << price << endl ;
create integers m , n , a , b and cost	int m , n , a , b , cost ;
read n , m , a and b	cin >> n >> m >> a >> b ;
if a is greater than b / m	if ( a > ( b / m ) )
cost = ( n / m ) * b	cost = ( n / m ) * b ;
if a * ( n % m ) is less than b	if ( a * ( n % m ) < b )
add a * ( n % m ) to cost	cost += a * ( n % m ) ;
else	else
increase cost by b	cost += b ;
else	else
cost = n * a	cost = n * a ;
print cost and a new line	cout << cost << endl ;
create integers n , m , a , b	int n , m , a , b ;
read n , m , a , b	cin >> n >> m >> a >> b ;
create integer sum with sum = a * n	int sum = a * n ;
create integer msum with msum = b	int msum = b ;
create integer rides with rides = m	int rides = m ;
do the following while rides less than or equal to n	while ( rides <= n )
add b to msum	msum += b ;
add m to rides	rides += m ;
subtract b from msum	msum -= b ;
subtract m from rides	rides -= m ;
if sum less than or equal to msum then do the following	if ( sum <= msum )
print sum and a new line	cout << sum << " \n " ;
else do the following	else
if rides less than n	if ( rides < n )
create integer newsum with newsum = msum + ( n - rides ) * a	int newsum = msum + ( n - rides ) * a ;
add b to msum	msum += b ;
add m to rides	rides += m ;
create numsum1 with newsum1 = msum	int newsum1 = msum ;
if newsum1 less than or equal to newsum then do the following	if ( newsum1 <= newsum )
print newsum1 and a new line	cout << newsum1 << endl ;
else do the following	else
print newsum and a new line	cout << newsum << endl ;
else if rides greater than n then do the following	else if ( rides > n )
create integer newsum with newsum = msum + ( n - rides ) * a	int newsum = msum + ( n - rides ) * a ;
add b to msum	msum += b ;
add m to rides	rides += m ;
create newsum1 with newsum1 = msum	int newsum1 = msum ;
if newsum1 less than or equal to newsum then do the following	if ( newsum1 <= newsum )
print newsum1 and a new line	cout << newsum1 << endl ;
else do the following	else
print newsum and a new line	cout << newsum << endl ;
else do the following	else
print msum and a new line	cout << msum << " \n " ;
n and m = integers with m = 2	int n , m = 2 ;
read n	cin >> n ;
print m	cout << m ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
increase m by i + 1	m += ( i + 1 ) ;
if m % n is equal to 0	if ( m % n == 0 )
print " " and n	cout << "   " << n ;
else	else
print " " and m % n	cout << "   " << m % n ;
print new line	cout << endl ;
create integers n , m with m = 2	int n , m = 2 ;
read n	cin >> n ;
print m	cout << m ;
for i = 1 to n - 1 exclusive	for ( int i = 1 ; i < n - 1 ; i ++ )
increment m by i + 1	m += ( i + 1 ) ;
if m % n is 0	if ( m % n == 0 )
print " " print n	cout << "   " << n ;
else	else
print " " print m % n	cout << "   " << m % n ;
print newline	cout << endl ;
n = integer	int n ;
read n	cin >> n ;
set integer cur to 0	int cur = 0 ;
for integer i = 1 to n exclusive	for ( int i = 1 ; i < n ; ++ i )
if i is greater than 1 print whitespace	if ( i > 1 ) cout << "   " ;
increase cur by i	cur += i ;
set cur to remainder of division of cur by n	cur %= n ;
print cur + 1	cout << cur + 1 ;
print new line	cout << endl ;
create integers n , i , create integer array a with size 200	int n , a [ 200 ] , i ;
read n	cin >> n ;
set a [ 0 ] to 1	a [ 0 ] = 1 ;
for i = 1 to n - 1 inclusive	for ( i = 1 ; i <= n - 1 ; i ++ )
set a [ i ] to ( a [ i - 1 ] + i ) % n	a [ i ] = ( a [ i - 1 ] + i ) % n ;
if a [ i ] is 0 , set a [ i ] to n	if ( a [ i ] == 0 ) a [ i ] = n ;
for i = 1 to n - 1 exclusive , print a [ i ] print " "	for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << "   " ; }
print a [ n - 1 ] print newline	cout << a [ n - 1 ] << endl ;
integers n and i , integer array a of size 200	int n , a [ 200 ] , i ;
read n	cin >> n ;
set value of a [ 0 ] to 1	a [ 0 ] = 1 ;
for i = 1 to n - 1 inclusive	for ( i = 1 ; i <= n - 1 ; i ++ )
a [ i ] = ( a [ i - 1 ] + i ) % n	a [ i ] = ( a [ i - 1 ] + i ) % n ;
set a [ i ] to n if a [ i ] is 0	if ( a [ i ] == 0 ) a [ i ] = n ;
for i = 1 to n - 1 exclusive print a [ i ] and " "	for ( i = 1 ; i < n - 1 ; i ++ ) { cout << a [ i ] << "   " ; }
print a [ n - 1 ] and a new line	cout << a [ n - 1 ] << endl ;
mp = map from long long to long long	map < long long , long long > mp ;
declare vector of strings called s	vector < string > s ;
declare vector of integers called v	vector < int > v ;
declare integer variable m	int m ;
read m	cin >> m ;
let k , i and j be integers with k = m , i = 1 and j = 1	int k = m , i = 1 , j = 1 ;
decrease m by one	m -- ;
while m - -	while ( m -- )
increase j by i	j += i ;
integer ans = j % k	int ans = j % k ;
if ans is equal to 0 set ans to j	if ( ans == 0 ) ans = j ;
print ans	cout << ans ;
if m is equal to 0	if ( m == 0 )
print new line	cout << endl ;
else	else
print " "	cout << "   " ;
increase i by one	i ++ ;
j % = k	j %= k ;
if j is equal to 0 , set j to ans	if ( j == 0 ) j = ans ;
declare integer vector v initialized with 6	vector < int > v ( 6 ) ;
read v [ 0 ] , v [ 1 ] , v [ 2 ] , v [ 3 ] , [ 4 ] , v [ 5 ]	cin >> v [ 0 ] >> v [ 1 ] >> v [ 2 ] >> v [ 3 ] >> v [ 4 ] >> v [ 5 ] ;
sort from beginning of v to end of v	sort ( v . begin ( ) , v . end ( ) ) ;
declare integers h , b	int h , b ;
if v [ 0 ] is v [ 3 ]	if ( v [ 0 ] == v [ 3 ] )
let h be 4	h = 4 ;
let b be 5	b = 5 ;
else if v [ 1 ] is v [ 4 ]	else if ( v [ 1 ] == v [ 4 ] )
let h be 0	h = 0 ;
let b be 5	b = 5 ;
else if v [ 2 ] is v [ 5 ]	else if ( v [ 2 ] == v [ 5 ] )
let h be 0	h = 0 ;
let b be 1	b = 1 ;
else	else
print " Alien \ n "	cout << " Alien\n " ;
print " Bear \ n " if v [ h ] is less than v [ b ] , else " Elephant \ n "	cout << ( v [ h ] < v [ b ] ? " Bear\n " : " Elephant\n " ) ;
declare const int INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create int array a with size 11	int a [ 11 ] ;
declare integer variables n , m and t	int n , m , t ;
declare integer variables i , j and k	int i , j , k ;
for i = 0 to 6 exclusive , read t and increment a [ t ]	for ( i = 0 ; i < 6 ; i ++ ) cin >> t , a [ t ] ++ ;
for i = 1 to 9 inclusive	for ( i = 1 ; i <= 9 ; i ++ )
if a [ i ] > = 4 , break	if ( a [ i ] >= 4 ) break ;
if i is greater than 9	if ( i > 9 )
print " Alien "	cout << " Alien " << endl ;
for i from 1 to 9 inclusive	for ( i = 1 ; i <= 9 ; i ++ )
if a [ i ] = 2 or a [ i ] = 6 , stop the loop	if ( a [ i ] == 2 || a [ i ] == 6 ) break ;
if i is greater than 9	if ( i > 9 )
print " Bear "	cout << " Bear " << endl ;
print " Elephant "	cout << " Elephant " << endl ;
declare new array of integers a with size 10	int a [ 10 ] ;
create new integer variable x	int x ;
for i from 1 to 6 inclusive incrementing i	for ( int i = 1 ; i <= 6 ; i ++ )
read variable x from the input	cin >> x ;
increment a [ x ]	a [ x ] ++ ;
declare new ints y and z = - 1	int y = - 1 , z = - 1 ;
start for loop from i = 1 to 9 inclusive	for ( int i = 1 ; i <= 9 ; i ++ )
if a [ i ] > = 4 , assign i to z	if ( a [ i ] >= 4 ) { z = i ; }
if z is not - 1	if ( z != - 1 )
assign a [ z ] - 4 to a [ z ]	a [ z ] = a [ z ] - 4 ;
for i = 1 to 9 inclusive	for ( int i = 1 ; i <= 9 ; i ++ )
if a [ i ] is equal to 1 and y = - 1 , change y to i	if ( a [ i ] == 1 && y == - 1 ) { y = i ; }
if a [ i ] = 1 and y is not - 1 , set z to i	if ( a [ i ] == 1 && y != - 1 ) { z = i ; }
if a [ i ] is equal to 2 , change y to set z to a [ i ]	if ( a [ i ] == 2 ) { y = z = a [ i ] ; }
if y is equal to z	if ( y == z )
print " Elephant "	cout << " Elephant " << endl ;
else	else
print " Bear " to the standard output	cout << " Bear " << endl ;
else	else
print " Alien "	cout << " Alien " << endl ;
create integers i , j , n , p , q , flag with p = 0 , flag = 0 , create integer array a with size 10 with a = { 0 }	int i , j , n , p = 0 , q , flag = 0 , a [ 10 ] = { 0 } ;
for i = 0 to 6 exclusive	for ( i = 0 ; i < 6 ; i ++ )
read n	cin >> n ;
increment a [ n ]	a [ n ] ++ ;
for i = 0 to 9 inclusive	for ( i = 0 ; i <= 9 ; i ++ )
if a [ i ] is greater than or equal to 4	if ( a [ i ] >= 4 )
decrement a [ i ] by 4	a [ i ] -= 4 ;
set flag to 1	flag = 1 ;
if flag is 0	if ( flag == 0 )
print " Alien " print newline	cout << " Alien " << endl ;
for i = 0 to 9 inclusive	for ( i = 0 ; i <= 9 ; i ++ )
if a [ i ] is 2	if ( a [ i ] == 2 )
print " Elephant " print newline	cout << " Elephant " << endl ;
print " Bear " print newline	cout << " Bear " << endl ;
ar = int array of size 12	int ar [ 12 ] ;
a , b , c , d , e , f = int	int a , b , c , d , e , f ;
read a then b then c then d then e then f	cin >> a >> b >> c >> d >> e >> f ;
increment ar [ a ]	ar [ a ] ++ ;
increment ar [ b ]	ar [ b ] ++ ;
increment ar [ c ]	ar [ c ] ++ ;
increment ar [ d ]	ar [ d ] ++ ;
increment ar [ e ]	ar [ e ] ++ ;
increment ar [ f ]	ar [ f ] ++ ;
paichi = bool with paichi = false	bool paichi = false ;
for i = 1 to 9 inclusive	for ( int i = 1 ; i <= 9 ; i ++ )
if ar [ i ] > = 4 set paichi to true	if ( ar [ i ] >= 4 ) { paichi = true ; }
if not paichi print " Alien " and return 0	if ( ! paichi ) return cout << " Alien\n " , 0 ;
cnt = int with cnt = 0	int cnt = 0 ;
for i = 1 to 9 inclusive	for ( int i = 1 ; i <= 9 ; i ++ )
if ar [ i ] is 2 or 6 print " Elephant " and return 0	if ( ar [ i ] == 2 or ar [ i ] == 6 ) return cout << " Elephant\n " , 0 ;
print " Bear "	cout << " Bear\n " ;
create integer A with size 6	int A [ 6 ] ;
for i = 0 to 6 exclusive , read A [ i ]	for ( int i = 0 ; i < 6 ; ++ i ) { cin >> A [ i ] ; }
sort elements from A to A + 6	sort ( A , A + 6 ) ;
create integers B , C	int B , C ;
if A [ 0 ] is A [ 3 ]	if ( A [ 0 ] == A [ 3 ] )
set B to A [ 4 ] , set C to A [ 5 ]	B = A [ 4 ] , C = A [ 5 ] ;
else if A [ 1 ] is A [ 4 ]	else if ( A [ 1 ] == A [ 4 ] )
set B to A [ 0 ] , set C to A [ 5 ]	B = A [ 0 ] , C = A [ 5 ] ;
else if A [ 2 ] is A [ 5 ]	else if ( A [ 2 ] == A [ 5 ] )
set B to A [ 0 ] , set C to A [ 1 ]	B = A [ 0 ] , C = A [ 1 ] ;
else	else
print " Alien " print newline	cout << " Alien " << endl ;
if B is C	if ( B == C )
print " Elephant " print newline	cout << " Elephant " << endl ;
if B is less than C	if ( B < C )
print " Bear " print newline	cout << " Bear " << endl ;
dp = two dimensional char array of sizes 10 and 10	char dp [ 10 ] [ 10 ] ;
mp = long long and long long map	map < long long , long long > mp ;
n , x = long long	long long n , x ;
a = long long array of size 10	long long a [ 10 ] ;
for i = 0 to 6	for ( int i = 0 ; i < 6 ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment mp [ a [ i ] ]	mp [ a [ i ] ] ++ ;
ok = bool with ok = false	bool ok = false ;
for i = 0 to 6	for ( int i = 0 ; i < 6 ; i ++ )
if mp [ a [ i ] ] is 6 set ok to true	if ( mp [ a [ i ] ] == 6 ) ok = true ;
if ok is true	if ( ok )
print " Elephant "	cout << " Elephant " << endl ;
for i = 0 to 6	for ( int i = 0 ; i < 6 ; i ++ )
if mp [ a [ i ] ] is 5 set ok to true	if ( mp [ a [ i ] ] == 5 ) ok = true ;
if ok is true	if ( ok )
print " Bear "	cout << " Bear " << endl ;
for i = 0 to 6	for ( int i = 0 ; i < 6 ; i ++ )
if mp [ a [ i ] ] is 4 set ok to true	if ( mp [ a [ i ] ] == 4 ) ok = true ;
if ok is false	if ( ! ok )
print " Alien "	cout << " Alien " << endl ;
for i = 0 to 6	for ( int i = 0 ; i < 6 ; i ++ )
if mp [ a [ i ] ] is 2 set ok to false	if ( mp [ a [ i ] ] == 2 ) ok = false ;
if ok is true	if ( ok )
print " Bear "	cout << " Bear " << endl ;
else	else
print " Elephant "	cout << " Elephant " << endl ;
declare int arrays b with size 10 and c with size 6	int b [ 10 ] , c [ 6 ] ;
declare an array of integers a with size 6 and integer variables i , x and j with j = 0	int a [ 6 ] , i , x , j = 0 ;
for i = 0 to 6 exclusive	for ( i = 0 ; i < 6 ; i ++ )
read a [ i ]	cin >> a [ i ] ;
assign a [ i ] to x	x = a [ i ] ;
increment b [ x ] by one	b [ x ] ++ ;
for i = 1 to 9 inclusive	for ( i = 1 ; i <= 9 ; i ++ )
if b [ i ] ! = 0	if ( b [ i ] != 0 )
set c [ j ] to b [ i ]	c [ j ] = b [ i ] ;
increment j by one	j ++ ;
sort first 3 elements of c	sort ( c , c + 3 ) ;
if c [ 0 ] = 1 and c [ 1 ] = 1 and c [ 2 ] = 4	if ( c [ 0 ] == 1 && c [ 1 ] == 1 && c [ 2 ] == 4 )
print " Bear "	cout << " Bear " << endl ;
else if c [ 0 ] = 0 and c [ 1 ] = 1 and c [ 2 ] = 5	else if ( c [ 0 ] == 0 && c [ 1 ] == 1 && c [ 2 ] == 5 )
print " Bear "	cout << " Bear " << endl ;
else if c [ 0 ] = 0 and c [ 1 ] = 2 and c [ 2 ] = 4	else if ( c [ 0 ] == 0 && c [ 1 ] == 2 && c [ 2 ] == 4 )
print " Elephant "	cout << " Elephant " << endl ;
else if c [ 2 ] is equal to 6	else if ( c [ 2 ] == 6 )
print " Elephant "	cout << " Elephant " << endl ;
else	else
print " Alien "	cout << " Alien " << endl ;
create integers i , j , n , p , q , flag , with p = 0 , flag = 0 , create integer array a with size 10 with a = { 0 }	int i , j , n , p = 0 , q , flag = 0 , a [ 10 ] = { 0 } ;
for i = 0 to 6 exclusive	for ( i = 0 ; i < 6 ; i ++ )
read n	cin >> n ;
increment a [ n ]	a [ n ] ++ ;
for i = 0 to 9 inclusive	for ( i = 0 ; i <= 9 ; i ++ )
if a [ i ] is greater than or equal to 4	if ( a [ i ] >= 4 )
decrement a [ i ] by 4	a [ i ] -= 4 ;
set flag to 1	flag = 1 ;
if flag is 0	if ( flag == 0 )
print " Alien " print newline	cout << " Alien " << endl ;
for i = 0 to 9 inclusive	for ( i = 0 ; i <= 9 ; i ++ )
if a [ i ] is 2	if ( a [ i ] == 2 )
print " Elephant " print newline	cout << " Elephant " << endl ;
print " Bear " print newline	cout << " Bear " << endl ;
declare integer array list size 10	int list [ 10 ] ;
set bytes from list to size of list to value 0	memset ( list , 0 , sizeof ( list ) ) ;
for i = 0 to 6 exclusive	for ( int i = 0 ; i < 6 ; i ++ )
declare temp as integer	int temp ;
read temp	cin >> temp ;
increment list [ temp ]	list [ temp ] ++ ;
for i = 0 to 10 exclusive	for ( int i = 0 ; i < 10 ; i ++ )
if list [ i ] is 4	if ( list [ i ] == 4 )
for j = 0 to 10 exclusive	for ( int j = 0 ; j < 10 ; j ++ )
if list [ j ] is 2	if ( list [ j ] == 2 )
print " Elephant " , newline	cout << " Elephant " << endl ;
print " Bear " , newline	cout << " Bear " << endl ;
else if list [ i ] is 5	else if ( list [ i ] == 5 )
print " Bear " , newline	cout << " Bear " << endl ;
else if list [ i ] is 6	else if ( list [ i ] == 6 )
print " Elephant " , newline	cout << " Elephant " << endl ;
print " Alien " , newline	cout << " Alien " << endl ;
create integer array mp with size 20	int mp [ 20 ] ;
create integer n	int n ;
create integer vector Q	vector < int > Q ;
set bytes from mp to size of mp to value 0	memset ( mp , 0 , sizeof mp ) ;
for i = 1 to 6 inclusive	for ( int i = 1 ; i <= 6 ; i ++ )
create integer p	int p ;
read p	cin >> p ;
increment mp [ p ]	mp [ p ] ++ ;
add character p to end of Q	Q . push_back ( p ) ;
create integers flag1 , flag2 with flag1 = 0 , flag2 = 0	int flag1 = 0 , flag2 = 0 ;
for i = 0 to size of Q exclusive	for ( int i = 0 ; i < Q . size ( ) ; i ++ )
if mp [ Q [ i ] ] is greater than or equal to 4 , set flag1 to 1	if ( mp [ Q [ i ] ] >= 4 ) { flag1 = 1 ; }
if mp [ Q [ i ] ] is 2 , set flag2 to 1	if ( mp [ Q [ i ] ] == 2 ) { flag2 = 1 ; }
if mp [ Q [ i ] ] is 6	if ( mp [ Q [ i ] ] == 6 )
set flag1 to 1	flag1 = 1 ;
set flag2 to 1	flag2 = 1 ;
if flag1 is 1 and flag2 is 0	if ( flag1 == 1 and flag2 == 0 )
print " Bear \ n "	cout << " Bear\n " ;
else if flag1 is 1 and flag2 is 1	else if ( flag1 == 1 and flag2 == 1 )
print " Elephant \ n "	cout << " Elephant\n " ;
else	else
print " Alien \ n "	cout << " Alien\n " ;
a , b , n = int and s = int array of size 10	int s [ 10 ] , a , b , n ;
for i = 0 to 6	for ( int i = 0 ; i < 6 ; i ++ )
read n	cin >> n ;
increment s [ n ]	s [ n ] ++ ;
for i = 0 to 10	for ( int i = 0 ; i < 10 ; i ++ )
if s [ i ] is greater or equal to 4 set b to 1	if ( s [ i ] >= 4 ) { b = 1 ; }
if s [ i ] is 2 or 6 set a to 1	if ( s [ i ] == 2 || s [ i ] == 6 ) { a = 1 ; }
if b is 0	if ( b == 0 )
print " Alien "	cout << " Alien " << endl ;
else if a is 1	else if ( a == 1 )
print " Elephant "	cout << " Elephant " << endl ;
else	else
print " Bear "	cout << " Bear " << endl ;
create a map from integers to integers with name mp	map < int , int > mp ;
for integer i = 0 to 6 exclusive	for ( int i = 0 ; i < 6 ; i ++ )
declare int p	int p ;
read p	cin >> p ;
increment mp [ p ]	mp [ p ] ++ ;
if length of mp is greater than 3	if ( mp . size ( ) > 3 )
print " Alien "	cout << " Alien " << endl ;
if length of mp is equal to 3	if ( mp . size ( ) == 3 )
create integer f = 0	int f = 0 ;
it is a map iterator	map < int , int > :: iterator it ;
move it through mp	for ( it = mp . begin ( ) ; it != mp . end ( ) ; it ++ )
if it - > second = 4	if ( it -> second == 4 )
change f to 1	f = 1 ;
break the loop	break ;
if f ! = 0	if ( f )
print " Bear "	cout << " Bear " << endl ;
else	else
print " Alien "	cout << " Alien " << endl ;
if length of mp is equal to 2	if ( mp . size ( ) == 2 )
declare integer variable f = 0	int f = 0 ;
it is a map iterator	map < int , int > :: iterator it ;
move it through mp	for ( it = mp . begin ( ) ; it != mp . end ( ) ; it ++ )
if it - > second = 2	if ( it -> second == 2 )
change f to 1	f = 1 ;
break the loop	break ;
if if it - > second = 3	if ( it -> second == 3 )
print " Alien "	cout << " Alien " << endl ;
if f ! = 0	if ( f )
print " Elephant "	cout << " Elephant " << endl ;
else	else
print " Bear "	cout << " Bear " << endl ;
if length of mp = 1	if ( mp . size ( ) == 1 )
print " Elephant "	cout << " Elephant " << endl ;
l , r = long long	long long l , r ;
read l then r	cin >> l >> r ;
if r - l is greater than 1	if ( r - l > 1 )
if l is even	if ( l % 2 == 0 )
print l then ' ' then l + 1 then ' ' then l + 2	cout << l << '   ' << l + 1 << '   ' << l + 2 << endl ;
else	else
if r - l is greater than 2	if ( r - l > 2 )
print l + 1 then ' ' then l + 2 then ' ' then l + 3	cout << l + 1 << '   ' << l + 2 << '   ' << l + 3 << endl ;
else	else
print - 1	cout << - 1 << endl ;
else	else
print - 1	cout << - 1 << endl ;
tmp , min1 , max1 , sum_n , index_max , index_min = int	int tmp , min1 , max1 , sum_n , index_max , index_min ;
arr1 = two dimensional int array of sizes 1000 and 1000	int arr1 [ 1000 ] [ 1000 ] ;
arr3 = char array of size 100	char arr3 [ 100 ] ;
arr = int array of size 10000	int arr [ 10000 ] ;
in function display_vector taking an int vector v	void display_vector ( vector < int > v )
for i = 0 to size of v print v [ i ] then " "	for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << "   " ;
print newline	cout << endl ;
define empty function speed	void speed ( ) { }
in function min_max taking an int vector v and an int l	void min_max ( vector < int > v , int l )
set min1 to INT_MAX	min1 = INT_MAX ;
set max1 to INT_MIN	max1 = INT_MIN ;
for i = l to size of v	for ( int i = l ; i < v . size ( ) ; i ++ )
if v [ i ] is less or equal to min1	if ( v [ i ] <= min1 )
set min1 to v [ i ]	min1 = v [ i ] ;
set index_min to i	index_min = i ;
if v [ i ] is greater or equal to max1	if ( v [ i ] >= max1 )
set max1 to v [ i ]	max1 = v [ i ] ;
set index_max to i	index_max = i ;
in function sum_v taking an int vector v and returning an int	int sum_v ( vector < int > v )
for i = 0 to size of v increment sum_n by v [ i ]	for ( int i = 0 ; i < v . size ( ) ; i ++ ) sum_n += v [ i ] ;
return sum_n	return sum_n ;
in function is_it_sorted_acs taking an int vector v and returning a bool	bool is_it_sorted_acs ( vector < int > v )
test1 = bool with test1 = false	bool test1 = false ;
for i = 0 to size of v - 1	for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ )
if v [ i + 1 ] is less or equal to v [ i ]	if ( v [ i + 1 ] <= v [ i ] )
set test1 to false	test1 = false ;
return test1	return test1 ;
set test1 to true	test1 = true ;
return test1	return test1 ;
in function is_it_sorted_des taking an int vector v and returning a bool	bool is_it_sorted_des ( vector < int > v )
test1 = bool with test1 = false	bool test1 = false ;
for i = 0 to size of v - 1	for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ )
if v [ i + 1 ] is greater or equal to v [ i ]	if ( v [ i + 1 ] >= v [ i ] )
set test1 to false	test1 = false ;
return test1	return test1 ;
set test1 to true	test1 = true ;
return test1	return test1 ;
call speed	speed ( ) ;
l , r = long long	long long l , r ;
read l then r	cin >> l >> r ;
if l is uneven then increment l	if ( l % 2 != 0 ) l ++ ;
if r - l is less than 2 then print - 1 and return 0	if ( r - l < 2 ) return cout << - 1 << endl , 0 ;
print l and l + 1 and l + 2	cout << l << "   " << l + 1 << "   " << l + 2 << endl ;
create long long l and r	long long l , r ;
read l and r	cin >> l >> r ;
if r - l + 1 less than 3	if ( r - l + 1 < 3 )
print - 1	cout << - 1 << endl ;
if l is odd	if ( l % 2 == 0 )
print l , ' ' , l + 1 , ' ' , l + 2	cout << l << '   ' << l + 1 << '   ' << l + 2 << endl ;
if r - l + 1 greater than 3	if ( r - l + 1 > 3 )
print l + 1 , ' ' , l + 2 , ' ' , l + 3	cout << l + 1 << '   ' << l + 2 << '   ' << l + 3 << endl ;
print - 1 and a newline	cout << - 1 << endl ;
create long long l and r	long long l , r ;
read l , r	cin >> l >> r ;
if r - l + 1 < 3	if ( r - l + 1 < 3 )
print - 1	cout << - 1 << endl ;
if l is even	if ( l % 2 == 0 )
print l , " " , l + 1 , " " , l + 2	cout << l << "   " << l + 1 << "   " << l + 2 << endl ;
if r - l + 1 greater than 3	if ( r - l + 1 > 3 )
print l + 1 , " " , l + 2 , " " , l + 3	cout << l + 1 << "   " << l + 2 << "   " << l + 3 << endl ;
print - 1 and a newline	cout << - 1 << endl ;
create integer long longs l , r	int long long l , r ;
read l read r	cin >> l >> r ;
if l % 2 is not 0 , increment l	if ( l % 2 != 0 ) l ++ ;
if l + 2 is greater than r	if ( l + 2 > r )
print - 1 print newline	cout << - 1 << endl ;
else	else
print l print " " print l + 1 print " " print l + 2 print newline	cout << l << "   " << l + 1 << "   " << l + 2 << endl ;
declare long long variables k and l	long long k , l ;
read k and l and keep looping	while ( cin >> k >> l )
if l - k is less than 2	if ( l - k < 2 )
print - 1	cout << - 1 << endl ;
else if k is even	else if ( ! ( k % 2 ) )
print k , " " , k + 1 , " " and k + 2	cout << k << "   " << k + 1 << "   " << k + 2 << endl ;
else if k is odd & & l - k > = 3	else if ( k % 2 && l - k >= 3 )
print k + 1 , " " , k + 2 , " " and k + 3	cout << k + 1 << "   " << k + 2 << "   " << k + 3 << endl ;
else	else
print - 1	cout << - 1 << endl ;
create long longs n , m	long long n , m ;
read n read m	cin >> n >> m ;
if m - n is less than 2	if ( m - n < 2 )
print - 1 print newline	cout << - 1 << endl ;
else	else
if n % 2 is 0	if ( n % 2 == 0 )
print n print " " print n + 1 print " " print n + 2 print newline	cout << n << "   " << n + 1 << "   " << n + 2 << endl ;
else if n % 2 is not 0 and n + 3 is less than or equal to m	else if ( n % 2 != 0 && n + 3 <= m )
print n + 1 print " " print n + 2 print " " print n + 3 print newline	cout << n + 1 << "   " << n + 2 << "   " << n + 3 << endl ;
else	else
print - 1 print newline	cout << - 1 << endl ;
a , b = long long integer	long long int a , b ;
read a , b	cin >> a >> b ;
if a modulo 2 is 0 and a + 2 < = b	if ( a % 2 == 0 && a + 2 <= b )
print a , " " , a + 1 , " " , a + 2	cout << a << "   " << a + 1 << "   " << a + 2 << endl ;
else if a modulo 2 is not 0 and a + 3 < = b	else if ( a % 2 != 0 && a + 3 <= b )
print a + 1 , " " , a + 2 , " " , a + 3	cout << a + 1 << "   " << a + 2 << "   " << a + 3 << endl ;
else	else
print - 1	cout << - 1 << endl ;
create long long l and r	long long l , r ;
read l and r	cin >> l >> r ;
if r - l + 1 < 3	if ( r - l + 1 < 3 )
read - 1	cout << - 1 << endl ;
if r - l + 1 = 3 and r mod 2 different from 0 or l mod 2 different from 0	if ( r - l + 1 == 3 && ( r % 2 != 0 || l % 2 != 0 ) )
print - 1	cout << - 1 << endl ;
if l is even and l + 2 is even	if ( l % 2 == 0 && ( l + 2 ) % 2 == 0 )
print l , " " , l + 1 , " " , l + 2	cout << l << "   " << l + 1 << "   " << l + 2 << endl ;
else	else
print l + 1 , " " , l + 2 , " " , l + 3	cout << l + 1 << "   " << l + 2 << "   " << l + 3 << endl ;
l , r = long long	long long l , r ;
read l , r	cin >> l >> r ;
if r - l + 1 < 3	if ( r - l + 1 < 3 )
print - 1	cout << - 1 << endl ;
if l modulo 2 is 0	if ( l % 2 == 0 )
print l , ' ' , l + 1 , ' ' , l + 2	cout << l << '   ' << l + 1 << '   ' << l + 2 << endl ;
if r - l + 1 > 3	if ( r - l + 1 > 3 )
print l + 1 , ' ' , l + 2 , ' ' , l + 3	cout << l + 1 << '   ' << l + 2 << '   ' << l + 3 << endl ;
print - 1	cout << - 1 << endl ;
create long long n1 and n2	long long n1 , n2 ;
read n1 , n2	cin >> n1 >> n2 ;
if n1 is odd , increase n1	if ( n1 % 2 != 0 ) n1 ++ ;
if n2 - n1 less than 2	if ( n2 - n1 < 2 )
print - 1	cout << " -1 " << endl ;
else	else
print n1 , " " , n1 + 1 , " " , n1 + 2	cout << n1 << "   " << n1 + 1 << "   " << n1 + 2 << endl ;
let l , r be long integers	long long l , r ;
read l and r	cin >> l >> r ;
if r - l is less than 2	if ( r - l < 2 )
print - 1 and newline	cout << - 1 << ' \n ' ;
else if r - l is equal to 2	else if ( r - l == 2 )
if r modulo 2	if ( r % 2 )
print - 1 and newline	cout << - 1 << ' \n ' ;
else do the following	else
print l and space and l + 1 and space and r and newline	cout << l << "   " << l + 1 << "   " << r << ' \n ' ;
else do the following	else
if l modulo 2	if ( l % 2 )
print l + 1 and space and l + 2 and space and l + 3 and newline	cout << l + 1 << "   " << l + 2 << "   " << l + 3 << ' \n ' ;
else do the following	else
print l and space and l + 1 and space and l + 2 and newline	cout << l << "   " << l + 1 << "   " << l + 2 << ' \n ' ;
create long long l and r	long long l , r ;
read l and r	cin >> l >> r ;
is l is even and l + 2 < = r	if ( l % 2 == 0 && l + 2 <= r )
print l , " " , l + 1 , " " , l + 2	cout << l << "   " << l + 1 << "   " << l + 2 << endl ;
else	else
l + 3 < = r	if ( l + 3 <= r )
print l + 1 , " " , l + 2 , " " , l + 3	cout << l + 1 << "   " << l + 2 << "   " << l + 3 << endl ;
else	else
print - 1 and a newline	cout << - 1 << endl ;
n , res = integer with res = 0	int n , res = 0 ;
read n	cin >> n ;
total = integer with total = 0	int total = 0 ;
while total < n	while ( total < n )
increment res	res ++ ;
total = total + res * ( res + 1 ) / 2	total += res * ( res + 1 ) / 2 ;
if total > n , decrement res	if ( total > n ) { res -- ; }
print res	cout << res << endl ;
create ints n , i , j , x , and mohi	int n , i , j , x , mohi ;
create long long int sum = 0	long long int sum = 0 ;
create integer vector v	vector < int > v ;
read n	cin >> n ;
for i = 1 to n	for ( i = 1 ; i <= n ; i ++ )
for j = 1 to i	for ( j = 1 ; j <= i ; j ++ )
set mohi to ( j * ( j + 1 ) ) / 2	mohi = ( j * ( j + 1 ) ) / 2 ;
set sum to sum + mohi	sum += mohi ;
if sum is less than n	if ( sum > n )
set x to i	x = i ;
break loop	break ;
set sum to 0	sum = 0 ;
if n is equal to 1	if ( n == 1 )
print 1	cout << 1 << endl ;
otherwise	else
print x - 1	cout << x - 1 << endl ;
n , ans , sum , sum2 = int	int n , ans , sum , sum2 ;
while read n	while ( cin >> n )
ans , sum , sum2 = 0	ans = sum = sum2 = 0 ;
while true	while ( true )
if sum2 > n break	if ( sum2 > n ) break ;
increment ans	ans ++ ;
add ans to sum	sum += ans ;
add sum to sum2	sum2 += sum ;
print ans - 1	cout << ans - 1 << endl ;
int function Addition with int argument n	int Addition ( int n )
declare new integer s	int s ;
set s to ( n * ( 1 + n ) ) / 2	s = ( n * ( 1 + n ) ) / 2 ;
return s	return s ;
a and i are integers with i = 0	int a , i = 0 ;
read input to a	cin >> a ;
if a is greater than 0	if ( a > 0 )
change a to a - the result of Addition ( i )	a = a - Addition ( i ) ;
while a > 0	while ( a > 0 )
increment i	i ++ ;
assign a - the result of Addition ( i + 1 ) to a	a = a - Addition ( i + 1 ) ;
print i to the standard output	cout << i << endl ;
else	else
print " 0 " to the standard output	cout << " 0 " << endl ;
n , a , b = integers with a = 0 , b = 0	int n , a = 0 , b = 0 ;
read n	cin >> n ;
for i = 1 to n exclusive	for ( int i = 1 ; a < n ; i ++ )
a = a + i	a += i ;
n = n - a	n -= a ;
if n > = 0 , increment b	if ( n >= 0 ) b ++ ;
print b	cout << b << endl ;
declare integer array a with size 151 ; create integers sum and sum1 where sum1 = 0	int a [ 151 ] , sum , sum1 = 0 ;
read variable sum from the input	cin >> sum ;
in the for loop , change i from 1 to 150 inclusive	for ( int i = 1 ; i <= 150 ; i ++ )
set a [ i ] to ( 1 + i ) * i / 2	a [ i ] = ( 1 + i ) * i / 2 ;
increase sum1 by a [ i ]	sum1 += a [ i ] ;
set a [ i + 1 ] to ( 2 + i ) * ( i + 1 ) / 2	a [ i + 1 ] = ( 2 + i ) * ( i + 1 ) / 2 ;
if sum > = sum1 and sum < sum1 + a [ i + 1 ]	if ( sum >= sum1 && sum < sum1 + a [ i + 1 ] )
print i to the standard output	cout << i << endl ;
break the loop	break ;
n = integer , s = integer = 0	int n , s = 0 ;
read n	cin >> n ;
loop indefinitely for i = 1 and increase i at the end of the loop	for ( int i = 1 ; ; i ++ )
if s > n	if ( s > n )
print the result of i - 2	cout << i - 2 << " \n " ;
exit the for loop	break ;
else	else
s = s + ( i * ( i + 1 ) ) / 2	s += ( i * ( i + 1 ) ) / 2 ;
var , n , aux , x = int with var = 1 and aux = 0 and x = 0	int var = 1 , n , aux = 0 , x = 0 ;
read n	cin >> n ;
level = int with level = 0	int level = 0 ;
loop infinitely	while ( 1 )
increment x by var	x += var ;
increment aux by x	aux += x ;
if aux > n break	if ( aux > n ) break ;
increment level	level ++ ;
increment var	var ++ ;
print level	cout << level << " \n " ;
create constant int INF = 1e9	const int INF = 1e9 ;
let const integer N = 1e5	const int N = 1e5 ;
let int array arr of size 10001	int arr [ 10001 ] ;
declare prework	void prework ( )
set arr [ 0 ] to 0	arr [ 0 ] = 0 ;
for i = 1 to 10000 , set arr [ i ] to arr [ i - 1 ] + i	for ( int i = 1 ; i <= 10000 ; i ++ ) { arr [ i ] = arr [ i - 1 ] + i ; }
call prework	prework ( ) ;
let ints n and cnt = 0	int n , cnt = 0 ;
read n	cin >> n ;
for i = 1 , loop indefinitely	for ( int i = 1 ; ; i ++ )
if n is less than arr [ i ] , break loop	if ( n < arr [ i ] ) break ;
set n to n - arr [ i ]	n -= arr [ i ] ;
increment cnt	cnt ++ ;
print cnt	cout << cnt << endl ;
create ints n , c = 0 , d , and count = 0	int n , c = 0 , d , count = 0 ;
read n	cin >> n ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
set c to c + 1	c += i ;
if n is greater than or equal to c , increment count	if ( n >= c ) count ++ ;
set n to n - c	n -= c ;
print count	cout << count << endl ;
n = int	int n ;
read n	cin >> n ;
h = int with h = 1	int h = 1 ;
temp = int with temp = ( ( h ) * ( h + 1 ) * ( h + 2 ) ) / 6	int temp = ( ( h ) * ( h + 1 ) * ( h + 2 ) ) / 6 ;
loop while temp < = n	while ( temp <= n )
increment h	h ++ ;
set temp to ( ( h ) * ( h + 1 ) * ( h + 2 ) ) / 6	temp = ( ( h ) * ( h + 1 ) * ( h + 2 ) ) / 6 ;
print h - 1	cout << h - 1 << endl ;
n = long long	long long n ;
read n	cin >> n ;
val , ans = long long with val = 0 and ans = 0	long long val = 0 , ans = 0 ;
for i = 0 to 10001	for ( long long i = 0 ; i < 10001 ; i ++ )
increment val by i	val += i ;
increment ans by val	ans += val ;
if ans > n	if ( ans > n )
print i - 1	cout << i - 1 << endl ;
in function sum taking an int n and returning an int	int sum ( int n )
s = int with s = ( n * ( n + 1 ) ) / 2	int s = ( n * ( n + 1 ) ) / 2 ;
return s	return s ;
n = int	int n ;
read n	cin >> n ;
i = int with i = 0	int i = 0 ;
s = int with s = 0	int s = 0 ;
loop infinitely	while ( true )
increment s by sum of i	s = s + sum ( i ) ;
if s > n	if ( s > n )
break	break ;
else	else
increment i	i ++ ;
print i - 1	cout << ( i - 1 ) << endl ;
n , count = int with count = 0	int n , count = 0 ;
read n	cin >> n ;
flag , i , x = int with flag = 0 and i = 2 and x = 1	int flag = 0 , i = 2 , x = 1 ;
loop while flag < = n	while ( flag <= n )
increment flag by x	flag += x ;
increment x by i	x += i ;
increment i	i ++ ;
if flag < = n increment count	if ( flag <= n ) count ++ ;
print count	cout << count << endl ;
n = int	int n ;
read n	cin >> n ;
tot , ans = int with tot = 0 and ans = 0	int tot = 0 , ans = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i += 1 )
increment tot by i * ( i + 1 ) / 2	tot += i * ( i + 1 ) / 2 ;
if tot > n break	if ( tot > n ) break ;
set ans to i	ans = i ;
print ans	cout << ans << endl ;
n = long long , x , count and boxes = 0	long long n , x = 0 , count = 0 , boxes = 0 ;
read n	cin >> n ;
i = 1	long long i = 1 ;
j = 1	long long j = 1 ;
while boxes + i + x < = n	while ( boxes + i + x <= n )
add i to x	x += i ;
add j to i	i += j ;
increment count	count ++ ;
add x to boxes	boxes += x ;
print count	cout << count << endl ;
let i , n , k be integers	int i , n , k ;
while read n	while ( cin >> n )
k is equal to 0	k = 0 ;
for i is equal to 1 , n > = 0 , increment i by 1	for ( i = 1 ; n >= 0 ; i ++ )
increment k by i	k += i ;
decrement n by k	n -= k ;
print i - 2 and newline	cout << ( i - 2 ) << endl ;
a = array of integers of length 10010	int a [ 10010 ] ;
1st element in a is equal to 1	a [ 1 ] = 1 ;
let sum , m be long integers	long long int sum , m ;
for i = 2 to 10000 inclusive , the value of a [ i ] is equal to a [ i - 1 ] + i	for ( int i = 2 ; i <= 10000 ; i ++ ) a [ i ] = a [ i - 1 ] + i ;
while reading m	while ( cin >> m )
for i = 1 to 10000 inclusive	for ( int i = 1 ; i <= 10000 ; i ++ )
decrement m by a [ i ]	m -= a [ i ] ;
if m is less than a [ i + 1 ]	if ( m < a [ i + 1 ] )
print i and newline	cout << i << endl ;
stop	break ;
declare integer vector sol	vector < int > sol ;
declare integer n	int n ;
read n	cin >> n ;
declare integer sum = 0	int sum = 0 ;
for i = 1 to 150 inclusive	for ( int i = 1 ; i <= 150 ; i ++ )
if sum is greater than n	if ( sum > n )
print i - 2 , newline	cout << i - 2 << endl ;
increment sum by ( ( i * ( i + 1 ) ) / 2 )	sum += ( ( i * ( i + 1 ) ) / 2 ) ;
create int array a of length 10010	int a [ 10010 ] ;
set a [ 0 ] to 0	a [ 0 ] = 0 ;
for i = 1 to 10000 inclusive set a [ i ] = a [ i - 1 ] + i	for ( int i = 1 ; i <= 10000 ; i ++ ) a [ i ] = a [ i - 1 ] + i ;
create int n	int n ;
while read n	while ( cin >> n )
ans = 0	int ans = 0 ;
loop over i starting from i = 1	for ( int i = 1 ; ; i ++ )
if n > = a [ i ]	if ( n >= a [ i ] )
set n to n - a [ i ] , increment ans	n -= a [ i ] , ans ++ ;
else	else
break	break ;
print ans	cout << ans << endl ;
n , i , l , s = long long integer with s = 0	long long int n , i , l , s = 0 ;
read n	cin >> n ;
for l = 0	for ( l = 0 ; ; l ++ )
s = s + l * ( l + 1 ) / 2	s += l * ( l + 1 ) / 2 ;
if s > n , break loop	if ( s > n ) { break ; }
print l - 1	cout << l - 1 << endl ;
create int n	int n ;
read n	cin >> n ;
create int ans , t and q , set ans to 0 and t , q to 1	int ans = 0 , t = 1 , q = 1 ;
ans = ans + t	ans = ans + t ;
while n > = ans	while ( n >= ans )
increment q	q ++ ;
set t to t + q	t = t + q ;
assign ans + t to ans	ans = ans + t ;
print q - 1	cout << q - 1 << endl ;
create int n	int n ;
read n	cin >> n ;
create int a , c , b and i , set a , c and b to 0	int a = 0 , c = 0 , b = 0 , i ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
set b to ( i * ( i + 1 ) ) / 2	b = ( i * ( i + 1 ) ) / 2 ;
set a to a + b	a += b ;
if a > n , break	if ( a > n ) break ;
increment c	c ++ ;
print c	cout << c << endl ;
create ints n and c	int n , c ;
read n	cin >> n ;
for c = 1 , loop as long as c * ( c + 1 ) * ( c + 2 ) / 6 < = n	for ( c = 1 ; c * ( c + 1 ) * ( c + 2 ) / 6 <= n ; c ++ )
end statement	;
print c - 1	cout << c - 1 << ' \n ' ;
let n be an integer	int n ;
get input in n	cin >> n ;
let i = 2 = int	int i = 2 ;
while n - i * ( i + 1 ) / 2 is positive	while ( n - i * ( i + 1 ) / 2 > 0 )
decrement n by i * ( i + 1 ) / 2	n -= i * ( i + 1 ) / 2 ;
increment i	i ++ ;
print i - 1	cout << i - 1 << endl ;
a is a new array of integers with size 10010	int a [ 10010 ] ;
set a [ 1 ] to 1	a [ 1 ] = 1 ;
declare new long long int variables sum and m	long long int sum , m ;
for i from 2 to 10000 inclusive , change a [ i ] to a [ i - 1 ] + i	for ( int i = 2 ; i <= 10000 ; i ++ ) a [ i ] = a [ i - 1 ] + i ;
read m and loop further	while ( cin >> m )
start for loop from i = 1 to 10000 inclusive incrementing i	for ( int i = 1 ; i <= 10000 ; i ++ )
decrease m by a [ i ]	m -= a [ i ] ;
if m is less than a [ i + 1 ]	if ( m < a [ i + 1 ] )
print i	cout << i << endl ;
break the loop	break ;
n = int	int n ;
a = int with a = 0	int a = 0 ;
b = int with b = 1	int b = 1 ;
c = int with c = 0	int c = 0 ;
read n	cin >> n ;
loop infinitely	while ( true )
for i = 1 to b inclusive increment a by i	for ( int i = 1 ; i <= b ; i ++ ) { a += i ; }
increment b	b ++ ;
if a > n break	if ( a > n ) { break ; }
increment c	c ++ ;
print c	cout << c << " \n " ;
n , r , t = int with r = 0 and t = 0	int n , r = 0 , t = 0 ;
read n	cin >> n ;
for i = 1	for ( int i = 1 ; ; ++ i )
increment r by i	r += i ;
increment t by r	t += r ;
if t > n	if ( t > n )
print i - 1	cout << ( i - 1 ) << endl ;
break	break ;
let int n	int n ;
read n and while n is truthy	while ( cin >> n )
let long long int sum = 0	long long sum = 0 ;
let int i	int i ;
for i = 1 loop indefinitely	for ( i = 1 ; ; i ++ )
make long long current = 1LL * i * ( i + 1 ) / 2	long long current = 1LL * i * ( i + 1 ) / 2 ;
if sum + current is less than or equal to n	if ( sum + current <= n )
set n to n - sum + current	n -= sum + current ;
else do	else
break loop	break ;
print i - 1	cout << i - 1 << endl ;
cube = long long	long long cube ;
res = long long	long long res ;
read cube	cin >> cube ;
for i = 0 loop while i * ( i + 1 ) * ( i + 2 ) < = 6 * cube set res to i	for ( long long i = 0 ; i * ( i + 1 ) * ( i + 2 ) <= 6 * cube ; ++ i ) { res = i ; }
print res	cout << res << endl ;
declare need with integer a as argument , returning integer	int need ( int a )
declare b as integer = 0	int b = 0 ;
for i = 1 to a inclusive , increment b by i	for ( int i = 1 ; i <= a ; i ++ ) { b += i ; }
return b from function	return b ;
declare integer a	int a ;
read a	cin >> a ;
declare integer i with i = 0	int i = 0 ;
while a is greater than or equal to result of run need with i as argument	while ( a >= need ( i ) )
decrement a by need ( 1 )	a -= need ( i ) ;
increment i	i ++ ;
print i - 1 print newline	cout << i - 1 << endl ;
n = int	int n ;
read n	cin >> n ;
sum , i , b = int	int sum , i , b ;
set sum , b , i to 1	sum = b = i = 1 ;
loop infinitely	for ( ; ; )
if sum is n	if ( sum == n )
print i	cout << i << endl ;
break	break ;
else	else
if sum > n	if ( sum > n )
print i - 1	cout << ( i - 1 ) << endl ;
break	break ;
else	else
increment i	i ++ ;
increment b by i	b += i ;
increment sum by b	sum += b ;
n = int	int n ;
read n	cin >> n ;
sum and height = 0	int sum = 0 , height = 0 ;
while sum < = n	while ( sum <= n )
increment height	height ++ ;
add height * ( height + 1 ) / 2 to sum	sum += height * ( height + 1 ) / 2 ;
print height - 1	cout << height - 1 << endl ;
let n , sum , level be integers	int n , sum , level ;
while read n	while ( cin >> n )
if n is equal to 1	if ( n == 1 )
print 1 and newline	cout << ' 1 ' << endl ;
proceed to next	continue ;
sum is equal to 1 , level is equal to 1	sum = 1 , level = 1 ;
for integer i is equal to 2 , the condition is always true , increment i by 1	for ( int i = 2 ; ; i ++ )
increment level by i	level += i ;
increment sum by level	sum += level ;
if sum is equal to n	if ( sum == n )
print i and newline	cout << i << endl ;
stop	break ;
else if sum is greater than n	else if ( sum > n )
print i - 1 and newline	cout << i - 1 << endl ;
stop	break ;
n = int	int n ;
read n	cin >> n ;
if n < 4	if ( n < 4 )
print 1	cout << 1 << endl ;
cnt = 0 , m = 1 , i = 1 , sum = 0	int cnt = 0 , m = 1 , i = 1 , sum = 0 ;
while sum + i < = n	while ( sum + i <= n )
addi to sum	sum = sum + i ;
increment cnt	cnt ++ ;
increment m	m ++ ;
add m to i	i += m ;
print cnt	cout << cnt << endl ;
let n be a integer	int n ;
read n	while ( cin >> n )
the 1000th element of sum1 is equal to 0	int sum1 [ 1000 ] = { 0 } ;
the 1000th element of sum2 is equal to 1	int sum2 [ 1000 ] = { 1 } ;
let sum be a integer with sum = 0	int sum = 0 ;
for i = 1 to 50 exclusive	for ( int i = 1 ; i < 50 ; i ++ )
increment sum by i	sum += i ;
sum1 [ i - 1 ] is equal to sum	sum1 [ i - 1 ] = sum ;
sum1 [ i ] is equal to sum1 [ i - 1 ] + i + 1	sum1 [ i ] = sum1 [ i - 1 ] + i + 1 ;
sum2 [ i ] is equal to sum2 [ i - 1 ] + sum1 [ i ]	sum2 [ i ] = sum2 [ i - 1 ] + sum1 [ i ] ;
if sum2 [ i - 1 ] < = n and sum2 [ i ] is greater than n , print i and newline	if ( ( sum2 [ i - 1 ] <= n ) && ( sum2 [ i ] > n ) ) cout << i << endl ;
declare integer n	int n ;
read n	cin >> n ;
declare integer cont = 0	int cont = 0 ;
declare integer sumador = 1	int sumador = 1 ;
declare i = 1 as integer	int i = 1 ;
while n is greater than 0 and n is greater than or equal to sumador	while ( n > 0 && n >= sumador )
let n be n - sumador	n = n - sumador ;
increment cont	cont ++ ;
increment i	i ++ ;
let sumador = sumador + 1	sumador = sumador + i ;
print cont , " \ n "	cout << cont << " \n " ;
declare int variables n and i	int n , i ;
read user input to n	cin >> n ;
for i from 1 to 40 inclusive incrementing i	for ( i = 1 ; i <= 40 ; i ++ )
if i * ( i + 1 ) * ( i + 2 ) / 6 is greater than n , stop the loop	if ( i * ( i + 1 ) * ( i + 2 ) / 6 > n ) break ;
print i - 1 to the standard output	cout << i - 1 << endl ;
declare integers n , tmp = 0 , hitung = 0	int n , tmp = 0 , hitung = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
increment hitung by ( ( i * ( i + 1 ) ) / 2 )	hitung += ( ( i * ( i + 1 ) ) / 2 ) ;
if hitung is n	if ( hitung == n )
set tmp to i	tmp = i ;
break loop	break ;
else if hitung is greater than n	else if ( hitung > n )
set tmp to i - 1	tmp = i - 1 ;
break loop	break ;
print tmp , newline	cout << tmp << endl ;
create integer length = 1e5	int length = 1e5 ;
let ints n , i , and sum = 0	int n , i , sum = 0 ;
read n	cin >> n ;
create int vector a of size n + 1	vector < int > a ( n + 1 ) ;
set a [ 0 ] to 0	a [ 0 ] = 0 ;
for i = 1 to n , set a [ i ] to a [ i - 1 ] + i	for ( i = 1 ; i <= n ; i ++ ) { a [ i ] = a [ i - 1 ] + i ; }
for i = 1 until sum < = n and i < = n are false , set sum to sum + a [ i ]	for ( i = 1 ; ( sum <= n ) && ( i <= n ) ; i ++ ) { sum += a [ i ] ; }
if n is equal to 1 , increase 1 by 1	if ( n == 1 ) i ++ ;
print the result of i - 2	cout << i - 2 << endl ;
declare new integer variable n	int n ;
read n and keep looping	while ( cin >> n )
declare new long long variable sum with value 0	long long sum = 0 ;
declare new integer called i	int i ;
set i to 1 and increment it in a for loop	for ( i = 1 ; ; i ++ )
declare new long long variable current with value 1LL * i * ( i + 1 ) / 2	long long current = 1LL * i * ( i + 1 ) / 2 ;
if sum + current < = n	if ( sum + current <= n )
subtract sum + current from n	n -= sum + current ;
else	else
break the loop	break ;
print i - 1 to the standard output	cout << i - 1 << endl ;
create integer n	int n ;
while get n do the following till valid input	while ( cin >> n )
create long long sum , prev , x and set them to 0	long long sum = 0 , prev = 0 , x = 0 ;
for integer i = 1 to n with increment i	for ( int i = 1 ; i <= n ; i ++ )
add sum to prev	prev += sum ;
add i to sum	sum += i ;
if sum + prev less than or equal to n	if ( sum + prev <= n )
increment x	x ++ ;
else do the following	else
break the loop	break ;
print x	cout << x << endl ;
in function inum taking pointer to an int a , int k , int i returning int	int inum ( int * a , int k , int i )
for l = 1 to k	for ( int l = 1 ; l < k ; l ++ )
if a [ l - 1 ] is not 1	if ( a [ l - 1 ] != - 1 )
set a [ l ] to a [ l - 1 ] + ( l + 1 )	a [ l ] = a [ l - 1 ] + ( l + 1 ) ;
else	else
set a [ l ] to ( inum of a , l , i ) + l + 1	a [ l ] = inum ( a , l , i ) + l + 1 ;
return value of ( a + ( k - 1 ) )	return * ( a + ( k - 1 ) ) ;
in function isum taking int i returning int	int isum ( int i )
arr , a = int array of size i each	int arr [ i ] , a [ i ] ;
set arr [ i ] to - 1	arr [ i ] = { - 1 } ;
set a [ i ] to - 1	a [ i ] = { - 1 } ;
set a [ 0 ] to 1	a [ 0 ] = 1 ;
set arr [ 0 ] to 1	arr [ 0 ] = 1 ;
if i is 1	if ( i == 1 )
return i	return i ;
else	else
j = int with j = 1	int j = 1 ;
for j to i	for ( j ; j < i ; j ++ )
if arr [ j - 1 ] is not - 1	if ( arr [ j - 1 ] != - 1 )
set arr [ j ] to arr [ j - 1 ] + inum of a , j + 1 , i	arr [ j ] = arr [ j - 1 ] + inum ( a , j + 1 , i ) ;
else	else
set arr [ j ] to isnum of j + j + 1	arr [ j ] = isum ( j ) + ( j + 1 ) ;
return value of arr + ( i - 1 )	return * ( arr + ( i - 1 ) ) ;
n , i = int with i = 1	int n , i = 1 ;
read n	cin >> n ;
loop while isnum of i < = n increment i	while ( isum ( i ) <= n ) { i ++ ; }
print i - 1	cout << ( i - 1 ) << endl ;
declare n , cnt , sum , ans , i as long long integers	long long int n , cnt , sum , ans , i ;
read n	cin >> n ;
let cnt be 0 , ans be 0 , sum be 0	cnt = 0 , ans = 0 , sum = 0 ;
for i = 1 to 10000 inclusive	for ( i = 1 ; i <= 10000 ; i ++ )
increment ans by i	ans += i ;
increment sum by ans	sum += ans ;
if sum is greater than n , break loop	if ( sum > n ) break ;
increment cnt	cnt ++ ;
print cnt print newline	cout << cnt << endl ;
create integer n	int n ;
create integer array a with dimension 100	int a [ 100 ] ;
while get n do till valid input	while ( cin >> n )
create integer i , sum with i = 2 , sum = 0	int i = 2 , sum = 0 ;
create integer cs with cs = 0	int cs = 0 ;
set a [ 1 ] to 1	a [ 1 ] = 1 ;
for integer i = 2 with increment i till sum less than n	for ( i = 2 ; sum < n ; i ++ )
set a [ i ] to i + a [ i - 1 ]	a [ i ] = i + a [ i - 1 ] ;
add a [ i ] to sum	sum += a [ i ] ;
set cs to i - 1	cs = i - 1 ;
print cs	cout << cs << endl ;
create integer variables n , i and l with i and l = 0	int n , i = 0 , l = 0 ;
read standard input to n	cin >> n ;
while l < = n	while ( l <= n )
increment i by one	i ++ ;
change l to sum of l and ( i * ( i + 1 ) ) / 2	l += ( i * ( i + 1 ) ) / 2 ;
print i - 1	cout << i - 1 << endl ;
cum = long long array of size 102	long long cum [ 100 + 2 ] ;
for i = 1 to 100 inclusive set cum [ i ] to i	for ( int i = 1 ; i <= 100 ; i ++ ) cum [ i ] = i ;
for i = 2 to 100 inclusive increment cum [ i ] by cum [ i - 1 ]	for ( int i = 2 ; i <= 100 ; i ++ ) { cum [ i ] += cum [ i - 1 ] ; }
n = int	int n ;
read n	cin >> n ;
sum = long long with sum = 0	long long sum = 0 ;
Count = int with Count = 0	int Count = 0 ;
i = int	int i ;
iterate i starting at 1 while sum < = n	for ( i = 1 ; sum <= n ; i ++ )
increment sum by cum [ i ]	sum += cum [ i ] ;
if sum > n	if ( sum > n )
break	break ;
else	else
increment Count	Count ++ ;
print Count	cout << Count << endl ;
create int sum = 1	int sum = 1 ;
make int levels = 1	int levels = 1 ;
make integer counter = 0	int counter = 0 ;
let int n	int n ;
read n	cin >> n ;
for i = 2 to n	for ( int i = 2 ; sum <= n ; i ++ )
increment counter	counter ++ ;
set levels to levels + i	levels = levels + i ;
set sum to sum + levels	sum = sum + levels ;
print counter	cout << counter << endl ;
declare long long n	long long n ;
while read n is true	while ( cin >> n )
declare i as integer	int i ;
declare long long t = 0	long long t = 0 ;
declare long long k = 0	long long k = 0 ;
declare last as integer	int last ;
for i = 1 , incrementing i	for ( i = 1 ; ; i ++ )
increment t by i	t += i ;
increment k by t	k += t ;
if n is greater than or equal to k	if ( n >= k )
let last be i	last = i ;
else	else
break loop	break ;
if n is 0 , let last be 0	if ( n == 0 ) { last = 0 ; }
print last , newline	cout << last << endl ;
integer function check with string argument s and integer arguments i and j	int check ( string s , int i , int j )
declare integer variables l = i and r = j	int l = i , r = j ;
while l is less than r	while ( l < r )
if s [ l ] = s [ r ]	if ( s [ l ] == s [ r ] )
increment l	l ++ ;
decrease r by one	r -- ;
skip the rest of the loop	continue ;
else	else
return 1	return 1 ;
declare string variable s	string s ;
read s	cin >> s ;
i , n and j are integers where n = length of s	int i , n = s . length ( ) , j ;
set value of i to 0	i = 0 ;
set j to n - 1	j = n - 1 ;
while i is less than j	while ( i < j )
if s [ i ] ! = s [ j ]	if ( s [ i ] != s [ j ] )
if i + 1 = j	if ( i + 1 == j )
insert s [ i ] at position s . begin ( ) + j + 1 of s	s . insert ( s . begin ( ) + j + 1 , s [ i ] ) ;
print s	cout << s << endl ;
else	else
if check ( s , i + 1 , j ) is 1	if ( check ( s , i + 1 , j ) )
insert s [ i ] at position s . begin ( ) + j + 1 of s	s . insert ( s . begin ( ) + j + 1 , s [ i ] ) ;
print s	cout << s << endl ;
else if check ( s , i , j - 1 ) is 1	else if ( check ( s , i , j - 1 ) )
insert s [ j ] at position s . begin ( ) + i of s	s . insert ( s . begin ( ) + i , s [ j ] ) ;
print s	cout << s << endl ;
else	else
print " NA "	cout << " NA " << endl ;
else	else
increase i	i ++ ;
decrease j by one	j -- ;
if length of s is even	if ( s . length ( ) % 2 == 0 )
push character ' a ' to s at position s . begin ( ) + n / 2	s . insert ( s . begin ( ) + n / 2 , ' a ' ) ;
print s	cout << s << endl ;
else	else
push character aat s [ n / 2 ] to s at position s . begin ( ) + n / 2 + 1	s . insert ( s . begin ( ) + n / 2 + 1 , s [ n / 2 ] ) ;
print s	cout << s << endl ;
let s1 be character array with size 15	char s1 [ 15 ] ;
set s2 be character array with size 15	char s2 [ 15 ] ;
set s be character array with size 15	char s [ 15 ] ;
declare integer variable f = 0	int f = 0 ;
read s1	cin >> s1 ;
declare integer variable n = length of s1	int n = strlen ( s1 ) ;
create boolean flag = 0	bool flag = 0 ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
for j = 0 to n inclusive	for ( int j = 0 ; j <= n ; j ++ )
set f to 0	f = 0 ;
for k = 0 to j exclusive , set s [ k ] to s1 [ k ]	for ( int k = 0 ; k < j ; k ++ ) { s [ k ] = s1 [ k ] ; }
s [ j ] = char ( ' a ' + i )	s [ j ] = char ( ' a ' + i ) ;
for k = j + 1 to n inclusive , set s [ k ] to s1 [ k - 1 ]	for ( int k = j + 1 ; k <= n ; k ++ ) { s [ k ] = s1 [ k - 1 ] ; }
for i = 0 , j = n while i < j increase i and decrease j	for ( int i = 0 , j = n ; i < j ; i ++ , j -- )
if s [ i ] ! = s [ j ]	if ( s [ i ] != s [ j ] )
increment f	f ++ ;
if f > = 1 , break	if ( f >= 1 ) { break ; }
if f = 0	if ( f == 0 )
print n elements of s	for ( int i = 0 ; i <= n ; i ++ ) { cout << s [ i ] ; }
print new line	cout << endl ;
print " NA "	cout << " NA " << endl ;
declare string s	string s ;
read s	cin >> s ;
declare integer variable pntr = length of s - 1	int pntr = s . size ( ) - 1 ;
declare character c	char c ;
for i = 0 to length of s / 2 exclusive	for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )
if s [ i ] ! = s [ pntr ]	if ( s [ i ] != s [ pntr ] )
declare boolean b = true	bool b = true ;
declare integer variable pntr2 = pntr	int pntr2 = pntr ;
for integer j = i + 1 to ( length of s + 1 ) / 2 exclusive	for ( int j = i + 1 ; j < ( s . size ( ) + 1 ) / 2 ; j ++ )
if s [ j ] ! = s [ pntr2 ]	if ( s [ j ] != s [ pntr2 ] )
set b to false	b = false ;
else	else
decrease pntr2	pntr2 -- ;
if b is true	if ( b )
assign value of s [ i ] to c	c = s [ i ] ;
for integer j = 0 to length of s exclusive	for ( int j = 0 ; j < s . size ( ) ; j ++ )
print s [ j ]	cout << s [ j ] ;
if j = pntr print c	if ( j == pntr ) cout << c ;
print new line	cout << endl ;
pntr2 = pntr - 1	pntr2 = pntr - 1 ;
set value of b to true	b = true ;
for integer j = i to ( length of s + 1 ) / 2 exclusive	for ( int j = i ; j < ( s . size ( ) + 1 ) / 2 ; j ++ )
if s [ j ] ! = s [ pntr2 ]	if ( s [ j ] != s [ pntr2 ] )
b = false	b = false ;
else	else
decrement pntr2	pntr2 -- ;
if b	if ( b )
assign value of s [ pntr ] to c	c = s [ pntr ] ;
for integer j = 0 to length of s exclusive	for ( int j = 0 ; j < s . size ( ) ; j ++ )
if j = i	if ( j == i ) cout << c ;
print s [ j ]	cout << s [ j ] ;
print new line	cout << endl ;
print " NA "	cout << " NA " << endl ;
else	else
decrement pntr	pntr -- ;
if length of s is an even number	if ( s . size ( ) % 2 )
for i = 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if i = ( length of s ) / 2	if ( i == ( s . size ( ) ) / 2 )
print s [ i ] and s [ i ]	cout << s [ i ] << s [ i ] ;
else	else
print s [ i ]	cout << s [ i ] ;
print new line	cout << endl ;
else	else
for integer i = 0 to length of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
if i = ( length of s / 2 )	if ( i == ( s . size ( ) / 2 ) )
print " a " and s [ i ]	cout << " a " << s [ i ] ;
else	else
print s [ i ]	cout << s [ i ] ;
print new line	cout << endl ;
declare string variable s	string s ;
read s	cin >> s ;
for char = ' a ' to ' z ' inclusive going alphabetically	for ( char c = ' a ' ; c <= ' z ' ; c ++ )
for integer i = 0 to length of s inclusive	for ( int i = 0 ; i <= s . size ( ) ; i ++ )
declare string t = s	string t = s ;
insert character c to the t at position i	t . insert ( i , 1 , c ) ;
create string k = t	string k = t ;
reverse k	reverse ( k . begin ( ) , k . end ( ) ) ;
if k = t	if ( k == t )
print t	cout << t << endl ;
print " NA "	cout << " NA " << endl ;
create string s	string s ;
read s	cin >> s ;
create integer flag with flag = - 1	int flag = - 1 ;
create integer sz with sz = size of s	int sz = s . size ( ) ;
for i = 0 to 26 exclusive	for ( int i = 0 ; i < 26 ; i ++ )
create string a	string a ;
add element ( ' a ' + i ) to end of a	a . push_back ( ' a ' + i ) ;
increment a by s	a += s ;
for j = 0 to sz exclusive	for ( int j = 0 ; j < sz ; j ++ )
create string b with b = 0	string b = a ;
reverse element order from beginning of b to end of b	reverse ( b . begin ( ) , b . end ( ) ) ;
if a is b	if ( a == b )
print a print newline	cout << a << endl ;
swap element values from a [ j ] to a [ j + 1 ]	swap ( a [ j ] , a [ j + 1 ] ) ;
create string b with b = a	string b = a ;
reverse element order from beginning of b to end of b	reverse ( b . begin ( ) , b . end ( ) ) ;
if a is b	if ( a == b )
print a print newline	cout << a << endl ;
print " NA " print newline	cout << " NA " << endl ;
create 2d integer array mp with size 1010 by 1010	int mp [ 1010 ] [ 1010 ] ;
create integers m , n , k	int m , n , k ;
read m read n read k	cin >> m >> n >> k ;
set bytes from m to size of m to value 0	memset ( mp , 0 , sizeof ( mp ) ) ;
create integer flog with flag = 0	int flog = 0 ;
create integer ans with ans = 0	int ans = 0 ;
for i = 1 to k inclusive	for ( int i = 1 ; i <= k ; i ++ )
create integers x , y	int x , y ;
read x read y	cin >> x >> y ;
set mp [ x ] [ y ] to 1	mp [ x ] [ y ] = 1 ;
if flag is 0	if ( flog == 0 )
if ( mp [ x - 1 ] [ y ] and mp [ x - 1 ] [ y - 1 ] and mp [ x ] [ y - 1 ] ) , set flog to 1	if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;
if ( mp [ x + 1 ] [ y ] and mp [ x + 1 ] [ y + 1 ] and mp [ x ] [ y + 1 ] ) , set flog to 1	if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;
if ( mp [ x - 1 ] [ y ] and mp [ x - 1 ] [ y + 1 ] and mp [ x ] [ y + 1 ] ) , set flog to 1	if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;
if ( mp [ x + 1 ] [ y ] and mp [ x + 1 ] [ y - 1 ] and mp [ x ] [ y - 1 ] ) , set flog to 1	if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;
if flog is true	if ( flog )
print i print newline	cout << i << endl ;
print " 0 " print newline	cout << " 0 " << endl ;
mp = two dimensional int array of sizes 1010 and 1010	int mp [ 1010 ] [ 1010 ] ;
m , n , k = int	int m , n , k ;
read m then n then k	cin >> m >> n >> k ;
set all values of mp to 0	memset ( mp , 0 , sizeof ( mp ) ) ;
flog = int with flog = 0	int flog = 0 ;
ans = int with ans = 0	int ans = 0 ;
for i = 1 to k inclusive	for ( int i = 1 ; i <= k ; i ++ )
x , y = int	int x , y ;
read x then y	cin >> x >> y ;
set mp [ x ] [ y ] to 1	mp [ x ] [ y ] = 1 ;
if flog is 0	if ( flog == 0 )
if mp [ x - 1 ] [ y ] is not 0 and mp [ x - 1 ] [ y - 1 ] is not 0 and mp [ x ] [ y - 1 ] is not 0 then set flog to 1	if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;
if mp [ x + 1 ] [ y ] is not 0 and mp [ x + 1 ] [ y + 1 ] is not 0 and mp [ x ] [ y + 1 ] is not 0 then set flog to 1	if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;
if mp [ x - 1 ] [ y ] is not 0 and mp [ x - 1 ] [ y + 1 ] is not 0 and mp [ x ] [ y + 1 ] is not 0 then set flog to 1	if ( mp [ x - 1 ] [ y ] && mp [ x - 1 ] [ y + 1 ] && mp [ x ] [ y + 1 ] ) flog = 1 ;
if mp [ x + 1 ] [ y ] is not 0 and mp [ x + 1 ] [ y - 1 ] is not 0 and mp [ x ] [ y - 1 ] is not 0 then set flog to 1	if ( mp [ x + 1 ] [ y ] && mp [ x + 1 ] [ y - 1 ] && mp [ x ] [ y - 1 ] ) flog = 1 ;
if flog is not 0	if ( flog )
print i	cout << i << endl ;
print " 0 "	cout << " 0 " << endl ;
let OO , NegOO , N , mod be constant integers with OO = 0x3f3f3f3f , NegOO = - 1 * OO , N = 1e3 + 5 , mod = 1e9 + 7	const int OO = 0x3f3f3f3f , NegOO = - 1 * OO , N = 1e3 + 5 , mod = 1e9 + 7 ;
black = 2d boolean array of N rows and N columns	bool black [ N ] [ N ] ;
boolean check of int x , int z	bool check ( int x , int z )
if black [ x + 1 ] [ z ] and black [ x + 1 ] [ z + 1 ] and black [ x ] [ z + 1 ] , return the value 1	if ( black [ x + 1 ] [ z ] && black [ x + 1 ] [ z + 1 ] && black [ x ] [ z + 1 ] ) return 1 ;
if black [ x ] [ z - 1 ] and black [ x + 1 ] [ z - 1 ] and black [ x + 1 ] [ z ] , return the value 1	if ( black [ x ] [ z - 1 ] && black [ x + 1 ] [ z - 1 ] && black [ x + 1 ] [ z ] ) return 1 ;
if black [ x ] [ z - 1 ] and black [ x - 1 ] [ z ] and black [ x - 1 ] [ z - 1 ] , return the value 1	if ( black [ x ] [ z - 1 ] && black [ x - 1 ] [ z ] && black [ x - 1 ] [ z - 1 ] ) return 1 ;
if black [ x ] [ z + 1 ] and black [ x - 1 ] [ z ] and black [ x - 1 ] [ z + 1 ] , return the value 1	if ( black [ x ] [ z + 1 ] && black [ x - 1 ] [ z ] && black [ x - 1 ] [ z + 1 ] ) return 1 ;
let n , m , k be integers	int n , m , k ;
read n , m , k	cin >> n >> m >> k ;
let ans be a integer with ans = 0	int ans = 0 ;
let x , z be integers	int x , z ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; ++ i )
read x , z	cin >> x >> z ;
set black [ x ] [ z ] to 1	black [ x ] [ z ] = 1 ;
if not ans	if ( ! ans )
if check ( x , z ) , ans is equal to i + 1	if ( check ( x , z ) ) ans = i + 1 ;
print ans and newline	cout << ans << " \n " ;
declare long longs n , m , i , k , v1 , v2 and f where f = 0 , and 2d long long array a with size 1007 by 1007	long long n , m , i , a [ 1007 ] [ 1007 ] , k , v1 , v2 , f = 0 ;
read n , m and k	cin >> n >> m >> k ;
for i from 1 to k inclusive	for ( i = 1 ; i <= k ; i ++ )
read v1 and v2	cin >> v1 >> v2 ;
change a [ v1 ] [ v2 ] to 1	a [ v1 ] [ v2 ] = 1 ;
if ( a [ v1 ] [ v2 ] + a [ v1 + 1 ] [ v2 ] + a [ v1 + 1 ] [ v2 + 1 ] + a [ v1 ] [ v2 + 1 ] ) = 4	if ( ( a [ v1 ] [ v2 ] + a [ v1 + 1 ] [ v2 ] + a [ v1 + 1 ] [ v2 + 1 ] + a [ v1 ] [ v2 + 1 ] ) == 4 )
print i	cout << i << endl ;
assign 1 to f	f = 1 ;
break the loop	break ;
if a [ v1 ] [ v2 ] + a [ v1 - 1 ] [ v2 ] + a [ v1 ] [ v2 + 1 ] + a [ v1 - 1 ] [ v2 + 1 ] = 4	if ( ( a [ v1 ] [ v2 ] + a [ v1 - 1 ] [ v2 ] + a [ v1 ] [ v2 + 1 ] + a [ v1 - 1 ] [ v2 + 1 ] ) == 4 )
print i	cout << i << endl ;
set f to 1	f = 1 ;
stop the loop	break ;
if a [ v1 ] [ v2 ] + a [ v1 ] [ v2 - 1 ] + a [ v1 + 1 ] [ v2 ] + a [ v1 + 1 ] [ v2 - 1 ] = 4	if ( ( a [ v1 ] [ v2 ] + a [ v1 ] [ v2 - 1 ] + a [ v1 + 1 ] [ v2 ] + a [ v1 + 1 ] [ v2 - 1 ] ) == 4 )
print i	cout << i << endl ;
set f to 1	f = 1 ;
stop the loop	break ;
if a [ v1 ] [ v2 ] + a [ v1 - 1 ] [ v2 ] + a [ v1 ] [ v2 - 1 ] + a [ v1 - 1 ] [ v2 - 1 ] = 4	if ( ( a [ v1 ] [ v2 ] + a [ v1 - 1 ] [ v2 ] + a [ v1 ] [ v2 - 1 ] + a [ v1 - 1 ] [ v2 - 1 ] ) == 4 )
print i	cout << i << endl ;
change f to 1	f = 1 ;
break the loop	break ;
if f is equal to 0 , print 0	if ( f == 0 ) cout << 0 << endl ;
create constant integer N with N = 1e5 + 5	const int N = 1e5 + 5 ;
create integers x , y , create integer array arr with size 1005 by 1005	int x , y , arr [ 1005 ] [ 1005 ] = { } ;
declare solve with integers st1 , st2 as arguments , returning boolean	bool solve ( int st1 , int st2 )
for z = st1 to st1 + 1 inclusive	for ( int z = st1 ; z <= st1 + 1 ; ++ z )
for v = st2 to st2 + 2 inclusive	for ( int v = st2 ; v <= st2 + 1 ; ++ v )
if not arr [ x + z ] [ y + v ] , return false from function	if ( ! arr [ x + z ] [ y + v ] ) return false ;
return true from function	return true ;
create integers n , m , k	int n , m , k ;
read n read m read k	cin >> n >> m >> k ;
for i = 1 to k inclusive	for ( int i = 1 ; i <= k ; ++ i )
read x read y	cin >> x >> y ;
set arr [ x ] [ y ] to 1	arr [ x ] [ y ] = 1 ;
for t = - 1 to 0 inclusive	for ( int t = - 1 ; t <= 0 ; ++ t )
for u = - 1 to 0 inclusive	for ( int u = - 1 ; u <= 0 ; ++ u )
if result of run solve with t , u as arguments is true , return print i print " \ n " , 0 from function	if ( solve ( t , u ) ) return cout << i << " \n " , 0 ;
return print 0 print " \ n " , 0 from function	return cout << 0 << " \n " , 0 ;
create 2d ingeger arrays a , vis , with a size 1005 by 1005 , vis size 1005 by 1005	int a [ 1005 ] [ 1005 ] , vis [ 1005 ] [ 1005 ] ;
create integer ans	int ans ;
create integers n , m	int n , m ;
create 2d integer array fang with size 4 by 2 with fang = { 1 , 0 , - 1 , 0 , 0 , 1 , 0 , - 1 }	int fang [ 4 ] [ 2 ] = { 1 , 0 , - 1 , 0 , 0 , 1 , 0 , - 1 } ;
declare dfs with integers x , y as arguments , returning void	void dfs ( int x , int y )
increment ans	ans ++ ;
for i = 0 to 4 exclusive	for ( int i = 0 ; i < 4 ; ++ i )
create integer nx with nx = x + fang [ i ] [ 0 ]	int nx = x + fang [ i ] [ 0 ] ;
create integer ny with ny = y + fang [ i ] [ 1 ]	int ny = y + fang [ i ] [ 1 ] ;
if nx is greater than 0 and nx is less than or equal to n and ny is greater than 0 and ny is less than or equal to m and a [ nx ] [ ny ] and not vis [ nx ] [ ny ]	if ( nx > 0 && nx <= n && ny > 0 && ny <= m && a [ nx ] [ ny ] && ! vis [ nx ] [ ny ] )
set vis [ nx ] [ ny ] to 1	vis [ nx ] [ ny ] = 1 ;
run dfs with nx , ny as arguments	dfs ( nx , ny ) ;
create integers k , i , j	int k , i , j ;
while read n read m read k	while ( cin >> n >> m >> k )
set ans to 0	ans = 0 ;
create integers x , y	int x , y ;
set bytes from a to size of a to value 0	memset ( a , 0 , sizeof ( a ) ) ;
create integer res with res = 0	int res = 0 ;
for i = 1 to k inclusive	for ( i = 1 ; i <= k ; ++ i )
read x read y	cin >> x >> y ;
set a [ x ] [ y ] to 1	a [ x ] [ y ] = 1 ;
if not res	if ( ! res )
increment ans	ans ++ ;
if ( a [ x ] [ y ] and a [ x + 1 ] [ y ] and a [ x ] [ y + 1 ] and a [ x + 1 ] [ y + 1 ] ) , set res to 1	if ( a [ x ] [ y ] && a [ x + 1 ] [ y ] && a [ x ] [ y + 1 ] && a [ x + 1 ] [ y + 1 ] ) res = 1 ;
if ( a [ x ] [ y ] and a [ x + 1 ] [ y ] and a [ x ] [ y - 1 ] and a [ x + 1 ] [ y - 1 ] ) , set res to 1	if ( a [ x ] [ y ] && a [ x + 1 ] [ y ] && a [ x ] [ y - 1 ] && a [ x + 1 ] [ y - 1 ] ) res = 1 ;
if ( a [ x ] [ y ] and a [ x - 1 ] [ y ] and a [ x ] [ y + 1 ] and a [ x - 1 ] [ y + 1 ] ) , set res to 1	if ( a [ x ] [ y ] && a [ x - 1 ] [ y ] && a [ x ] [ y + 1 ] && a [ x - 1 ] [ y + 1 ] ) res = 1 ;
if ( a [ x ] [ y ] and a [ x - 1 ] [ y ] and a [ x ] [ y - 1 ] and a [ x - 1 ] [ y - 1 ] ) , set res to 1	if ( a [ x ] [ y ] && a [ x - 1 ] [ y ] && a [ x ] [ y - 1 ] && a [ x - 1 ] [ y - 1 ] ) res = 1 ;
if not res , set ans to 0	if ( ! res ) ans = 0 ;
print ans print newline	cout << ans << endl ;
create bool a [ 1005 ] [ 1005 ]	bool a [ 1005 ] [ 1005 ] ;
create int n and m	int n , m ;
read n , m	cin >> n >> m ;
create int k	int k ;
read k	cin >> k ;
for c = 1 to k inclusive	for ( int c = 1 ; c <= k ; c ++ )
create int x and y	int x , y ;
read x , y	cin >> x >> y ;
set a [ x ] [ y ] = true	a [ x ] [ y ] = true ;
if a [ x ] [ y ] , a [ x + 1 ] [ y ] , a [ x ] [ y + 1 ] , a [ x + 1 ] [ y + 1 ] are true	if ( a [ x ] [ y ] && a [ x + 1 ] [ y ] && a [ x ] [ y + 1 ] && a [ x + 1 ] [ y + 1 ] )
print c	cout << c << endl ;
else if a [ x ] [ y ] and a [ x - 1 ] [ y ] and a [ x ] [ y + 1 ] and a [ x - 1 ] [ y + 1 ] are not false	else if ( a [ x ] [ y ] && a [ x - 1 ] [ y ] && a [ x ] [ y + 1 ] && a [ x - 1 ] [ y + 1 ] )
print c and a newline	cout << c << endl ;
else if a [ x ] [ y ] , a [ x - 1 ] [ y ] , a [ x ] [ y - 1 ] , a [ x - 1 ] [ y - 1 ] = true	else if ( a [ x ] [ y ] && a [ x - 1 ] [ y ] && a [ x ] [ y - 1 ] && a [ x - 1 ] [ y - 1 ] )
print c	cout << c << endl ;
else if a [ x ] [ y ] and a [ x + 1 ] [ y ] and a [ x ] [ y - 1 ] and a [ x + 1 ] [ y - 1 ] different from false	else if ( a [ x ] [ y ] && a [ x + 1 ] [ y ] && a [ x ] [ y - 1 ] && a [ x + 1 ] [ y - 1 ] )
print c	cout << c << endl ;
print 0 and a newline	cout << 0 << endl ;
create constant integer N with N = 1e3 + 5	const int N = 1e3 + 5 ;
create 2d boolean array mark with size N by N	bool mark [ N ] [ N ] ;
create integers n , m , k	int n , m , k ;
read n read m read k	cin >> n >> m >> k ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
create integers x , y	int x , y ;
read x read y	cin >> x >> y ;
set mark [ decrement x ] [ decrement y ] to true	mark [ -- x ] [ -- y ] = true ;
for a = x - 1 to x inclusive	for ( int a = x - 1 ; a <= x ; a ++ )
for b = y - 1 to y inclusive	for ( int b = y - 1 ; b <= y ; b ++ )
if bitwise not minimum of ( a and b ) and a + 1 is less than n and b + 1 is less than m	if ( ~ min ( a , b ) && a + 1 < n && b + 1 < m )
create boolean bad with bad = true	bool bad = true ;
for c = 0 to 4 exclusive , set bad to bad bitwise and mark [ a + ( c bitwise and 1 ) ] [ b + ( c bitshift right 1 bitwise and 1 ) ]	for ( int c = 0 ; c < 4 ; c ++ ) bad &= mark [ a + ( c & 1 ) ] [ b + ( c >> 1 & 1 ) ] ;
if bad , return print i + 1 print newline , 0	if ( bad ) return cout << i + 1 << endl , 0 ;
print " 0 \ n "	cout << " 0\n " ;
create integer n	int n ;
create strings str , s , ans , min with min = " z "	string str , s , ans , min = " z " ;
read str read n	cin >> str >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read s	cin >> s ;
if s is str	if ( s == str )
set min to str	min = str ;
break loop	break ;
if first index of str in s is 0 and s is less than min , set min to s	if ( ( s . find ( str ) == 0 ) && ( s < min ) ) min = s ;
if min is " z "	if ( min == " z " )
print str print newline	cout << str << endl ;
else	else
print min print newline	cout << min << endl ;
create string str , str2 , ans , set ans to a	string str , str2 , ans = " a " ;
create int n and flag , assign 0 to flag	int n , flag = 0 ;
read str	cin >> str ;
set len to length of str	int len = str . length ( ) ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read str2	cin >> str2 ;
set flag to 0	flag = 0 ;
for j = 0 to len	for ( int j = 0 ; j < len ; j ++ )
if str [ j ] different from str2 [ j ]	if ( str [ j ] != str2 [ j ] )
flag = 1	flag = 1 ;
break	break ;
if flag = 1 , continue	if ( flag == 1 ) { continue ; }
if ans equal to a	if ( ans == " a " )
set ans to str2	ans = str2 ;
else if str2 < ans	else if ( str2 < ans )
set ans = str2	ans = str2 ;
if ans different from a	if ( ans != " a " )
print ans	cout << ans << endl ;
else	else
print str and a newline	cout << str << endl ;
let str , s be strings with s = array of strings of length 105	string str , s [ 105 ] ;
create a vector of strings s1	vector < string > s1 ;
let n be a integer	int n ;
read str	cin >> str ;
read n	cin >> n ;
for i = 0 to n exclusive , read s [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
sort the values s and s + n	sort ( s , s + n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] . find ( str ) is equal to 0 , push_back s [ i ] in s1	if ( s [ i ] . find ( str ) == 0 ) s1 . push_back ( s [ i ] ) ;
if length of s1	if ( s1 . size ( ) )
print s1 [ 0 ] and newline	cout << s1 [ 0 ] << " \n " ;
else do the following	else
print str and newline	cout << str << " \n " ;
str = string	string str ;
read str	cin >> str ;
len = int with len = length of str	int len = str . length ( ) ;
n = int	int n ;
read n	cin >> n ;
vec = string vector	vector < string > vec ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
temp = string	string temp ;
read temp	cin >> temp ;
pos = int with pos = index of str in temp	int pos = temp . find ( str ) ;
if pos is 0	if ( pos == 0 )
suffix = string with suffix = substr of len on temp	string suffix = temp . substr ( len ) ;
append suffix to vec	vec . push_back ( suffix ) ;
if size of vec is 0	if ( vec . size ( ) == 0 )
pritn str	cout << str << endl ;
else	else
sort vec	sort ( vec . begin ( ) , vec . end ( ) ) ;
print str + vec [ 0 ]	cout << ( str + vec [ 0 ] ) << endl ;
s = string	string s ;
read s	cin >> s ;
n = integer	int n ;
read n	cin >> n ;
vs = vector string	vector < string > vs ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
ss = string	string ss ;
read ss	cin >> ss ;
append ss in vs	vs . push_back ( ss ) ;
sort vs . begin ( ) and vs . end ( )	sort ( vs . begin ( ) , vs . end ( ) ) ;
len = integer with len = s . size ( )	int len = s . size ( ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if vs [ i ] . substr ( 0 , len ) is s	if ( vs [ i ] . substr ( 0 , len ) == s )
print vs [ i ]	cout << vs [ i ] << endl ;
print s	cout << s << endl ;
let str be a string , s = array of strings of length 101	string str , s [ 101 ] ;
let n be a integer	int n ;
read str	cin >> str ;
read n	cin >> n ;
for i = 1 to n inclusive , read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
sort the values s + 1 and s + n + 1	sort ( s + 1 , s + n + 1 ) ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if s [ i ] . substr ( 0 , length of str ) is equal to str	if ( s [ i ] . substr ( 0 , str . length ( ) ) == str )
print s [ i ] and newline	cout << s [ i ] << endl ;
print str and newline	cout << str << endl ;
function subset ( get strings n1 and n2 and int len , return bool )	bool subset ( string n1 , string n2 , int len )
for i = 0 to len exclusive	for ( int i = 0 ; i < len ; i ++ )
if n1 [ i ] ! = n2 [ i ] return false	if ( n1 [ i ] != n2 [ i ] ) return false ;
return true	return true ;
function small_min ( get strings n1 and n2 , return string )	string small_min ( string n1 , string n2 )
if length of n1 < length of n2 return n1	if ( n1 . length ( ) < n2 . length ( ) ) return n1 ;
return n2	return n2 ;
s , ans = string	string s , ans ;
read s	cin >> s ;
ara = array of 110 string	string ara [ 110 ] ;
n = int	int n ;
read n	cin >> n ;
f = 0	int f = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read ara [ i ]	cin >> ara [ i ] ;
j = int	int j ;
for j = 0 to size of s exclusive	for ( j = 0 ; j < s . size ( ) ; j ++ )
if ara [ i ] [ j ] ! = s [ j ] break	if ( ara [ i ] [ j ] != s [ j ] ) break ;
if j is size of s	if ( j == s . size ( ) )
if f is 0 ans = ara [ i ]	if ( f == 0 ) ans = ara [ i ] ;
f = 1	f = 1 ;
ans = min ( ans , ara [ i ] )	ans = min ( ans , ara [ i ] ) ;
if f is 0	if ( f == 0 )
print s	cout << s << endl ;
else	else
print ans	cout << ans << endl ;
arr = int array of size 1000000 and a = int array of size 1000 and ar = int array of size 100000	int arr [ 1000000 ] , a [ 1000 ] , ar [ 100000 ] ;
m = char , int map	map < char , int > m ;
mm = char , int map	map < char , int > mm ;
s , m , k , n = string with k = " " and n = " "	string s , m , k = "  " , n = "  " ;
x = int	int x ;
read s then x	cin >> s >> x ;
for i = 0 to x	for ( int i = 0 ; i < x ; i ++ )
read m	cin >> m ;
if size of m > = size of s	if ( m . size ( ) >= s . size ( ) )
set n to first size of s chars of m	n = m . substr ( 0 , s . size ( ) ) ;
if n is s and ( m < = k | | k is " " ) set k to m	if ( n == s && ( m <= k || k == "  " ) ) { k = m ; }
if k is not " "	if ( k != "  " )
print k	cout << k << endl ;
else	else
print s	cout << s << endl ;
create string pointer ch , create string var	string * ch , var ;
create integer n	int n ;
read var read n	cin >> var >> n ;
set ch to new string array with size n	ch = new string [ n ] ;
for i = 0 to n exclusive , read ch [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> ch [ i ] ;
sort elements from ch to ch + n	sort ( ch , ch + n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if first index of var in ch [ i ] is 0	if ( ch [ i ] . find ( var ) == 0 )
print ch [ i ] print newline	cout << ch [ i ] << endl ;
print var print newline	cout << var << endl ;
create string s and string array s1 with dimension 101	string s , s1 [ 101 ] ;
create integer n , ok	int n , ok ;
get s , n	cin >> s >> n ;
for integer i = 1 to n with increment i do get s1 [ i ]	for ( int i = 1 ; i <= n ; ++ i ) cin >> s1 [ i ] ;
for integer i = n to 1 with decrement i	for ( int i = n ; i >= 1 ; -- i )
for integer j = 1 with increment j till j less than i	for ( int j = 1 ; j < i ; ++ j )
if s1 [ j ] greater than s1 [ j + 1 ] then swap s1 [ j ] and s1 [ j + 1 ]	if ( s1 [ j ] > s1 [ j + 1 ] ) swap ( s1 [ j ] , s1 [ j + 1 ] ) ;
for integer k = 1 to n with increment k	for ( int k = 1 ; k <= n ; ++ k )
set ok to 1	ok = 1 ;
for integer i = 0 to length of s - 1 with increment i	for ( int i = 0 ; i < s . length ( ) ; ++ i )
if s [ i ] not equal to s1 [ k ] [ i ] then	if ( s [ i ] != s1 [ k ] [ i ] )
set ok to 0	ok = 0 ;
break the loop	break ;
if ok not equal to 0 then	if ( ok )
print s1 [ k ]	cout << s1 [ k ] << endl ;
print s	cout << s << endl ;
M = 110	const int M = 110 ;
s = array of M by M char	char s [ M ] [ M ] ;
a = array of M char	char a [ M ] ;
f and t = array of M int	int f [ M ] , t [ M ] ;
b = array of M char	char b [ M ] ;
n = int	int n ;
while read a	while ( cin >> a )
read n	cin >> n ;
c = 0	int c = 0 ;
fill f with 0	memset ( f , 0 , sizeof ( f ) ) ;
fill t with 0	memset ( t , 0 , sizeof ( t ) ) ;
len = length of a	int len = strlen ( a ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read s [ i ]	cin >> s [ i ] ;
len1 = length of s [ i ]	int len1 = strlen ( s [ i ] ) ;
if len1 < len	if ( len1 < len )
t [ i ] = 1	t [ i ] = 1 ;
continue	continue ;
for j = 0 to len exclusive	for ( int j = 0 ; j < len ; j ++ )
if a [ j ] is not s [ i ] [ j ]	if ( a [ j ] != s [ i ] [ j ] )
t [ i ] = 1	t [ i ] = 1 ;
break	break ;
if t [ i ] is 0	if ( t [ i ] == 0 )
f [ i ] = 1	f [ i ] = 1 ;
fill b with 0	memset ( b , 0 , sizeof ( b ) ) ;
copy from s [ i ] to b	strcpy ( b , s [ i ] ) ;
increment c	c ++ ;
if c is 0	if ( c == 0 )
print a	cout << a << endl ;
else	else
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if f [ i ] is 1	if ( f [ i ] == 1 )
if b > s [ i ]	if ( strcmp ( b , s [ i ] ) > 0 )
fill b with 0	memset ( b , 0 , sizeof ( b ) ) ;
copy from s [ i ] to b	strcpy ( b , s [ i ] ) ;
print b	cout << b << endl ;
declare string variable with name ss	string ss ;
read standard input to ss	cin >> ss ;
create new integer n	int n ;
read variable n from the input	cin >> n ;
read and discard the input data	cin . ignore ( ) ;
create string res = ss	string res = ss ;
declare new boolean noe with value 0	bool noe = 0 ;
for integer i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
s is a new string	string s ;
read variable s from the input	cin >> s ;
declare string tmp with value " "	string tmp = "  " ;
for j = 0 and ii = 0 while j < length of s , increment j	for ( int j = 0 , ii = 0 ; j < s . length ( ) ; j ++ )
if ss [ ii ] = s [ j ]	if ( ss [ ii ] == s [ j ] )
increment ii	ii ++ ;
else	else
assign 0 to ii	ii = 0 ;
if ii is equal to length of ss	if ( ii == ss . length ( ) )
if noe is false	if ( ! noe )
set res to the substring of s from index j - ii + 1 to the end ; set noe to 1	res = s . substr ( j - ii + 1 , s . length ( ) ) , noe = 1 ;
else	else
change tmp to the substring of s from index j - ii + 1 to the end	tmp = s . substr ( j - ii + 1 , s . length ( ) ) ;
set res to min of res and tmp	res = min ( res , tmp ) ;
assign 0 to ii	ii = 0 ;
print res and ' \ n '	cout << res << ' \n ' ;
create string s	string s ;
read s	cin >> s ;
let int len = s . length ( )	int len = s . length ( ) ;
let int n	int n ;
read n	cin >> n ;
let string array array of size n	string array [ n ] ;
let string array output of size n	string output [ n ] ;
create integer count = 0	int count = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read array [ i ]	cin >> array [ i ] ;
let int flag = 0	int flag = 0 ;
if array [ i ] . length ( ) is less than len , continue to next loop iteration	if ( array [ i ] . length ( ) < len ) { continue ; }
for j = 0 to len exclusive	for ( int j = 0 ; j < len ; j ++ )
if array [ i ] [ j ] is not equal to s [ j ]	if ( array [ i ] [ j ] != s [ j ] )
set flag to 1	flag = 1 ;
break loop	break ;
if flag is equal to 0 , set output [ count + + ] to array [ i ]	if ( flag == 0 ) { output [ count ++ ] = array [ i ] ; }
if count is 0	if ( count == 0 )
print s	cout << s << endl ;
sort output using argument output + count	sort ( output , output + count ) ;
print output [ 0 ]	cout << output [ 0 ] << endl ;
v = string vector	vector < string > v ;
x = string	string x ;
read x	cin >> x ;
n , i = long long	long long n , i ;
y = string	string y ;
read n	cin >> n ;
while n is not 0 subtract 1 from n and do	while ( n -- )
read y	cin >> y ;
append y to the end of v	v . push_back ( y ) ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
for i = 0 to size of v exclusive	for ( i = 0 ; i < v . size ( ) ; i ++ )
f = long long with value of the position of x within v [ i ]	long long f = v [ i ] . find ( x ) ;
if f equals 0	if ( f == 0 )
print v [ i ]	cout << v [ i ] << " \n " ;
print x	cout << x << " \n " ;
create integer n	int n ;
create string array s with size 110 , create string st	string s [ 110 ] , st ;
read st read n	cin >> st >> n ;
for i = 0 to n exclusive , read s [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
sort elements from s to s + n	sort ( s , s + n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if substring of s [ i ] from 0 to size of st is st	if ( s [ i ] . substr ( 0 , st . size ( ) ) == st )
print s [ i ] print newline	cout << s [ i ] << endl ;
print st print newline	cout << st << endl ;
create constant integer INF = 1e9	const int INF = 1e9 ;
let string s	string S ;
create int N	int N ;
create string array A of size 128	string A [ 128 ] ;
read S and N	cin >> S >> N ;
for i = 0 to N exclusive , read A [ i ]	for ( int i = 0 ; i < N ; i ++ ) { cin >> A [ i ] ; }
sort A	sort ( A , A + N ) ;
let string ans = S	string ans = S ;
for i = 0 to N exclusive	for ( int i = 0 ; i < N ; i ++ )
let bool check = true	bool check = true ;
for j = 0 to size of S exclusive	for ( int j = 0 ; j < S . size ( ) ; j ++ )
if S [ j ] is not equal to A [ i ] [ j ]	if ( S [ j ] != A [ i ] [ j ] )
set check to false	check = false ;
break loop	break ;
if check is equal to false	if ( check == false )
continue loop	continue ;
else	else
set ans to A [ i ]	ans = A [ i ] ;
break loop	break ;
print ans	cout << ans << endl ;
s = string	string s ;
n = int	int n ;
read s , n	cin >> s >> n ;
trig = 0	int trig = 0 ;
c = 0	int c = 0 ;
a = string of n char	string * a = new string [ n ] ;
k = 0	int k = 0 ;
j = 0	int j = 0 ;
s2 = string	string s2 ;
z = length of s	int z = s . length ( ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read s2	cin >> s2 ;
a [ i ] = s2	a [ i ] = s2 ;
for i = 0 to length of s	for ( int i = 0 ; i < s . length ( ) ; i ++ )
if s [ i ] ! = a [ j ] [ k ]	if ( s [ i ] != a [ j ] [ k ] )
trig = 1	trig = 1 ;
increment c	c ++ ;
else	else
increment k	k ++ ;
if z is k	if ( z == k )
trig = 3	trig = 3 ;
break	break ;
if trig is 1	if ( trig == 1 )
increment j	j ++ ;
i = - 1	i = - 1 ;
k = 0	k = 0 ;
trig = 0	trig = 0 ;
if c is n	if ( c == n )
trig = 5	trig = 5 ;
break	break ;
if trig is 5	if ( trig == 5 )
print s	cout << s << endl ;
sort first n items of a	sort ( a , a + n ) ;
t = " "	string t = "  " ;
if trig is 3	if ( trig == 3 )
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
t = a [ i ]	t = a [ i ] ;
for ind = 0 to length of s exclusive	for ( int ind = 0 ; ind < s . length ( ) ; ind ++ )
if s [ ind ] ! = t [ ind ]	if ( s [ ind ] != t [ ind ] )
a [ i ] = ' 0 '	a [ i ] = ' 0 ' ;
break	break ;
t = " "	t = "  " ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is not " 0 "	if ( a [ i ] != " 0 " )
print a [ i ]	cout << a [ i ] << endl ;
print s	cout << s << endl ;
p , s , ans = string	string p , s , ans ;
n = int	int n ;
read p then n	cin >> p >> n ;
set ans to " "	ans = "  " ;
loop n times	while ( n -- )
read s	cin >> s ;
if size of s as int is greater or equal to size of p as int	if ( ( int ) s . size ( ) >= ( int ) p . size ( ) )
aux = string with aux = substr of 0 and size of p as int on s	string aux = s . substr ( 0 , ( int ) p . size ( ) ) ;
if aux is p and ( s is less than ans or ans is " " ) set ans to s	if ( aux == p && ( s < ans || ans == "  " ) ) { ans = s ; }
print p if ans is " " else print ans	cout << ( ans == "  " ? p : ans ) << " \n " ;
s , t = string	string s , t ;
n , j = int with j = 0	int n , j = 0 ;
read s then n	cin >> s >> n ;
ar = string array of size n	string ar [ n ] ;
slength = int with slength = length of s	int slength = s . size ( ) ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read t	cin >> t ;
if t starts with s	if ( t . substr ( 0 , slength ) == s )
set ar [ j ] to t	ar [ j ] = t ;
increment j	j ++ ;
if j is 0	if ( j == 0 )
print s	cout << s << ' \n ' ;
else	else
sort ar from position 0 to j	sort ( ar , ar + j ) ;
print ar [ 0 ]	cout << ar [ 0 ] << ' \n ' ;
create integer constants OO = 0x3f3f3f3f , NegOO = - 1 * OO , N = 2e5 + 5 and mod = 1e9 + 7	const int OO = 0x3f3f3f3f , NegOO = - 1 * OO , N = 2e5 + 5 , mod = 1e9 + 7 ;
create new string variable x	string x ;
read variable x from the input	cin >> x ;
create integer n	int n ;
read input to n	cin >> n ;
arr is a new array of strings with size n	string arr [ n ] ;
for c from 0 to n exclusive , read standard input to arr [ c ]	for ( int c = 0 ; c < n ; c ++ ) { cin >> arr [ c ] ; }
sort arr from 0 to n	sort ( arr , arr + n ) ;
start for loop from c = 0 to n exclusive incrementing c	for ( int c = 0 ; c < n ; c ++ )
declare boolean flag = 1	bool flag = 1 ;
for integer i = 0 to the size of x exclusive	for ( int i = 0 ; i < ( ( int ) ( ( x ) . size ( ) ) ) ; i ++ )
change flag to 0 if i is less than size of arr [ c ] and x [ i ] ! = arr [ c ] [ i ]	if ( i < ( ( int ) ( ( arr [ c ] ) . size ( ) ) ) && x [ i ] != arr [ c ] [ i ] ) flag = 0 ;
if flag is not 0 , return cout < < arr [ c ] < < " \ n " , 0	if ( flag ) return cout << arr [ c ] << " \n " , 0 ;
print x and " \ n " to the standard output	cout << x << " \n " ;
create string s	string s ;
read s	cin >> s ;
make integer n	int n ;
read n	cin >> n ;
make string vector a of size n	vector < string > a ( n ) ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; ++ i ) { cin >> a [ i ] ; }
let int opt = - 1	int opt = - 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if ( int ) ( a [ i ] ) . size ( ) is less than ( int ) ( s ) . size ( ) , continue to next loop iteration	if ( ( int ) ( a [ i ] ) . size ( ) < ( int ) ( s ) . size ( ) ) { continue ; }
if a [ i ] . substr ( 0 , ( int ) ( s ) . size ( ) ) is not equal to s , continue to next loop iteration	if ( a [ i ] . substr ( 0 , ( int ) ( s ) . size ( ) ) != s ) { continue ; }
if opt is equal to - 1 or a [ i ] is less than a [ opt ] , set opt to i	if ( opt == - 1 || a [ i ] < a [ opt ] ) { opt = i ; }
if opt is not equal to - 1	if ( opt != - 1 )
print a [ opt ]	cout << a [ opt ] ;
else	else
print s	cout << s ;
print new line	cout << " \n " ;
create new constant integer variable N with value 110	const int N = 110 ;
declare new string input and string array hist with size N	string hist [ N ] , input ;
declare vector of strings called prefixed	vector < string > prefixed ;
declare new integer n	int n ;
boolean function comp with string arguments s1 and s2	bool comp ( string s1 , string s2 )
return true if s1 is less than s2 in lexicographic order , or false otherwise	return strcmp ( s1 . c_str ( ) , s2 . c_str ( ) ) < 0 ;
isPref is a boolean function with string arguments s1 and s2	bool isPref ( string s1 , string s2 )
if length of s1 is less than length of s2 , return false	if ( s1 . size ( ) < s2 . size ( ) ) return false ;
for integer i = 0 to length of s2 exclusive	for ( int i = 0 ; i < s2 . size ( ) ; i ++ )
if s1 [ i ] ! = s2 [ i ] , return false	if ( s1 [ i ] != s2 [ i ] ) return false ;
return true	return true ;
read input and n from the input	cin >> input >> n ;
for integer i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
read hist [ i ] from the user input	cin >> hist [ i ] ;
if isPref ( hist [ i ] , input ) returned true , push hist [ i ] into prefixed	if ( isPref ( hist [ i ] , input ) ) prefixed . push_back ( hist [ i ] ) ;
if prefixed is not emptu	if ( ! prefixed . empty ( ) )
sort prefixed	sort ( prefixed . begin ( ) , prefixed . end ( ) , comp ) ;
print first element of prefixed to the standard output	cout << prefixed [ 0 ] << endl ;
else	else
print input	cout << input << endl ;
s is a new array of strings with size 101	string s [ 101 ] ;
declare integer variable n	int n ;
declare new string t	string t ;
read t from the user input	cin >> t ;
read standard input to n	cin >> n ;
in a for loop , change i from 0 to n exclusive , reading s [ i ] on each loop	for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
sort s	sort ( s , s + n ) ;
in a for loop , change i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if length of s [ i ] is less than length of t , skip the rest of the loop	if ( s [ i ] . length ( ) < t . length ( ) ) continue ;
declare integer j with value 0	int j = 0 ;
while j < length of t	while ( j < ( int ) t . length ( ) )
if s [ i ] [ j ] ! = t [ j ] , break	if ( s [ i ] [ j ] != t [ j ] ) break ;
increment j by one	j ++ ;
if j = length of t	if ( j == ( int ) t . length ( ) )
print s [ i ] to the standard output	cout << s [ i ] << endl ;
print t	cout << t << endl ;
s = string	string s ;
n = integer	int n ;
in function Run that returns nothing	inline void Run ( )
while s can be read as a valid string	while ( cin >> s )
ans , tmp = string	string ans = "  " , tmp = "  " ;
for i = 1 to 110 inclusive and increase i at the start of the loop , then ans = ans + z , tmp = tmp + z	for ( int i = 1 ; i <= 110 ; ++ i ) ans += ' z ' , tmp += ' z ' ;
read n	cin >> n ;
t = string t	string t ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
read t	cin >> t ;
if size of t < size of s , continue	if ( t . size ( ) < s . size ( ) ) continue ;
if contents of t from the beginning of t to size of s elements away is s , then ans = lower value between ans and t	if ( t . substr ( 0 , s . size ( ) ) == s ) ans = min ( ans , t ) ;
if ans is tmp , then ans = s	if ( ans == tmp ) ans = s ;
print ans	cout << ans << endl ;
call Run	Run ( ) ;
in the function lexi_comp that takes const string reference a , b and returns bool	bool lexi_comp ( const string & a , const string & b )
n = integer with n = min of a . size ( ) and b . size ( )	int n = min ( a . size ( ) , b . size ( ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is not b [ i ] , return a [ i ] < b [ i ]	if ( a [ i ] != b [ i ] ) { return a [ i ] < b [ i ] ; }
return a . size ( ) < b . size ( )	return a . size ( ) < b . size ( ) ;
in the function isPrefix that takes const string reference a , b and returns bool	bool isPrefix ( const string & a , const string & b )
if b . size ( ) < a . size ( ) , return false	if ( b . size ( ) < a . size ( ) ) { return false ; }
for i = 0 to a . size ( ) exclusive	for ( int i = 0 ; i < a . size ( ) ; i ++ )
if a [ i ] is not b [ i ] , return false	if ( a [ i ] != b [ i ] ) { return false ; }
return true	return true ;
a , b , ans = string	string a , b , ans ;
n = integer	int n ;
read a , n	cin >> a >> n ;
ans = a + string on 100 an z	ans = a + string ( 100 , ' z ' ) ;
ok = bool with ok = false	bool ok = false ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read b	cin >> b ;
if isPrefix on a and b	if ( isPrefix ( a , b ) )
ok = true	ok = true ;
if lexi_comp ( b , ans ) , swap b and ans	if ( lexi_comp ( b , ans ) ) { swap ( b , ans ) ; }
if ok	if ( ok )
print ans	cout << ans << endl ;
else	else
print a	cout << a << endl ;
create string st and string array st1 of size 102	string st , st1 [ 102 ] ;
let long long int n	long long n ;
read st and n	cin >> st >> n ;
for i = 1 to n , read st1 [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> st1 [ i ] ;
sort st1 + 1 using argument st1 + n + 1	sort ( st1 + 1 , st1 + n + 1 ) ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if st [ i ] . find ( st ) is equal to 0	if ( st1 [ i ] . find ( st ) == 0 )
print st1 [ i ]	cout << st1 [ i ] << endl ;
print st	cout << st << endl ;
a = pointer to string , s = string	string * a , s ;
n = int	int n ;
read s	cin >> s >> n ;
a = array of n string	a = new string [ n ] ;
for i = 0 to n exclusive read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort first n items of a	sort ( a , a + n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] begins with s	if ( a [ i ] . find ( s ) == 0 )
print a [ i ]	cout << a [ i ] << endl ;
print s	cout << s << endl ;
s = string	string s ;
n = integer	int n ;
read s , n	cin >> s >> n ;
v = vector of string with v = n + 1	vector < string > v ( n + 1 ) ;
for i = 0 to n exclusive , read v [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }
v [ n ] = s	v [ n ] = s ;
sort v . begin ( ) and v . end ( )	sort ( v . begin ( ) , v . end ( ) ) ;
for i = 0 to n	for ( int i = 0 ; i <= n ; i ++ )
if v [ i ] is s	if ( v [ i ] == s )
if i < n and v [ i ] is v [ i + 1 ] . substring ( 0 , ( int ) v [ i ] . size ( ) )	if ( i < n && v [ i ] == v [ i + 1 ] . substr ( 0 , ( int ) v [ i ] . size ( ) ) )
print v [ i + 1 ]	cout << v [ i + 1 ] << endl ;
break loop	break ;
else	else
print v [ i ]	cout << v [ i ] << endl ;
break loop	break ;
declare check taking in strings s and t and returning bool	bool check ( string s , string t )
if length of s is less than length of t , return false	if ( s . length ( ) < t . length ( ) ) return false ;
if i = 0 to length of t exclusive	for ( int i = 0 ; i < t . length ( ) ; i ++ )
if s [ i ] is not equal to t [ i ] , return false	if ( s [ i ] != t [ i ] ) return false ;
return true	return true ;
let string t	string t ;
read t	cin >> t ;
create integer n	int n ;
read n	cin >> n ;
let string array s of size 1000	string s [ 1000 ] ;
for i = 1 to n , read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
create string min = " "	string min = "  " ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if check ( s [ i ] , t ) is true	if ( check ( s [ i ] , t ) )
if min is equal to " " or s [ i ] is less than min , set min to s [ i ]	if ( min == "  " || s [ i ] < min ) min = s [ i ] ;
if min is equal to " "	if ( min == "  " )
print t	cout << t << endl ;
else	else
print min	cout << min << endl ;
var = string and str = pointer to a string	string * str , var ;
n = int	int n ;
read var then n	cin >> var >> n ;
set str to new string array of size n	str = new string [ n ] ;
read n values into str	for ( int i = 0 ; i < n ; i ++ ) cin >> str [ i ] ;
sort str	sort ( str , str + n ) ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if str [ i ] starts with var	if ( str [ i ] . find ( var ) == 0 )
print str [ i ]	cout << str [ i ] << endl ;
print var	cout << var << endl ;
create integer n	int n ;
read n	cin >> n ;
create vector of booleans called good with n elements filled with 1	vector < bool > good ( n , 1 ) ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
for j from 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
declare integer x	int x ;
read input to x	cin >> x ;
if x < = 0	if ( x <= 0 )
go to the start of the loop	continue ;
else if x = 1	else if ( x == 1 )
set good [ i ] to 0	good [ i ] = 0 ;
else if x = 2	else if ( x == 2 )
set good [ j ] to 0	good [ j ] = 0 ;
else	else
set good [ i ] and good [ j ] to 0	good [ i ] = good [ j ] = 0 ;
declare vector of integers called sol	vector < int > sol ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if good [ i ] is true , push i + 1 to sol	if ( good [ i ] ) sol . push_back ( i + 1 ) ;
print length of sol	cout << sol . size ( ) << endl ;
if length of sol > 0	if ( sol . size ( ) > 0 )
for integer i = 0 to length of sol exclusive	for ( int i = 0 ; i < sol . size ( ) ; i ++ )
if i ! = 0 , print ' '	if ( i != 0 ) cout << '   ' ;
print sol [ i ]	cout << sol [ i ] ;
print new line	cout << endl ;
n , i , j , k , flag = int , a = array of 100 by 100 int , b = array of 100 int filled with 0	int n , i , j , a [ 100 ] [ 100 ] , b [ 100 ] = { 0 } , k , flag ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
for j = 0 to n exclusive read a [ i ] [ j ]	for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }
k = 0	k = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
flag = 1	flag = 1 ;
for j = 0 to n exclusive	for ( j = 0 ; j < n ; j ++ )
if i ! = j	if ( i != j )
if a [ i ] [ j ] is 1 or 3 flag = 0	if ( a [ i ] [ j ] == 1 || a [ i ] [ j ] == 3 ) flag = 0 ;
if flag b [ k ] = i + 1 , increment k	if ( flag ) b [ k ++ ] = i + 1 ;
if b [ 0 ] is 0	if ( b [ 0 ] == 0 )
print " 0 "	cout << " 0 " << endl ;
else	else
print k	cout << k << endl ;
for i = 0 to k - 1 excluisve print b [ i ] , space	for ( i = 0 ; i < k - 1 ; i ++ ) { cout << b [ i ] << "   " ; }
print b [ k - 1 ]	cout << b [ k - 1 ] << endl ;
vis = array of 105 int , f = array of 105 by 105 int	int vis [ 105 ] , f [ 105 ] [ 105 ] ;
n = int	int n ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
read f [ i ] [ j ]	cin >> f [ i ] [ j ] ;
if f [ i ] [ j ] is 1	if ( f [ i ] [ j ] == 1 )
vis [ i ] = 1	vis [ i ] = 1 ;
else if f [ i ] [ j ] is 2	else if ( f [ i ] [ j ] == 2 )
vis [ j ] = 1	vis [ j ] = 1 ;
else if f [ i ] [ j ] is 3	else if ( f [ i ] [ j ] == 3 )
vis [ i ] = vis [ j ] = 1	vis [ i ] = vis [ j ] = 1 ;
a = array of 105 int , top = 0	int a [ 105 ] , top = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if not vis [ i ] a [ top ] = i , increment top	if ( ! vis [ i ] ) { a [ top ++ ] = i ; }
print top	cout << top << endl ;
for i = 0 to top exclusive	for ( int i = 0 ; i < top ; i ++ )
if i is top - 1	if ( i == top - 1 )
print a [ i ]	cout << a [ i ] << endl ;
else	else
print a [ i ] and space	cout << a [ i ] << "   " ;
declare vector of integers vec	vector < int > vec ;
declare int variable n	int n ;
read input to n	cin >> n ;
create 2d array of ints arr with size n by n	int arr [ n ] [ n ] ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
for j from 0 to n exclusive , read input to arr [ i ] [ j ]	for ( int j = 0 ; j < n ; j ++ ) { cin >> arr [ i ] [ j ] ; }
declare int cnt = 0	int cnt = 0 ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create bool t = true	bool t = true ;
for j = 0 to n exclusive	for ( int j = 0 ; j < n ; j ++ )
if arr [ i ] [ j ] = 1 or arr [ i ] [ j ] = 3	if ( arr [ i ] [ j ] == 1 || arr [ i ] [ j ] == 3 )
set t to false	t = false ;
stop the loop	break ;
if t is true	if ( t )
increment cnt by one	cnt ++ ;
push i + 1 into vec	vec . push_back ( i + 1 ) ;
print cnt	cout << cnt << endl ;
declare integer len = length of vec	int len = vec . size ( ) ;
print all elements of vec except last with " " after each one	for ( int i = 0 ; i < len - 1 ; i ++ ) { cout << vec [ i ] << "   " ; }
if cnt is greater than 0 , print last element of vec	if ( cnt > 0 ) cout << vec [ vec . size ( ) - 1 ] << endl ;
define ints n , i , j	int n , i , j ;
define 2 - dimensional int array a to be of 105 x 105 elements , int array f to be of 105 elements , int t , and int array b to be of 105 elements	int a [ 105 ] [ 105 ] , f [ 105 ] , t , b [ 105 ] ;
read n	cin >> n ;
assign zero to t	t = 0 ;
for i by 1 from 0 to n ( exclusive ) , set f [ i ] to 1	for ( i = 0 ; i < n ; i ++ ) f [ i ] = 1 ;
for i from 0 to n ( exclusive ) by 1	for ( i = 0 ; i < n ; i ++ )
for j from 0 to n ( exclusive ) by 1	for ( j = 0 ; j < n ; j ++ )
read a [ i ] [ j ]	cin >> a [ i ] [ j ] ;
if a [ i ] [ j ] is 1	if ( a [ i ] [ j ] == 1 )
set f [ i ] to 0	f [ i ] = 0 ;
else if a [ i ] [ j ] is two	else if ( a [ i ] [ j ] == 2 )
zero f [ j ]	f [ j ] = 0 ;
otherwise if a [ i ] j ] = three	else if ( a [ i ] [ j ] == 3 )
zero f [ i ] and f [ j ]	f [ i ] = f [ j ] = 0 ;
for i from 0 to n ( exclusive ) by 1	for ( i = 0 ; i < n ; i ++ )
if f [ i ] , then set b [ t ] to i + 1 and then increment t	if ( f [ i ] ) b [ t ++ ] = i + 1 ;
print t and newline	cout << t << endl ;
for i from 0 to t ( exclusive ) by 1	for ( i = 0 ; i < t ; i ++ )
if i isn ' t t - 1	if ( i != t - 1 )
print b [ i ] and " "	cout << b [ i ] << "   " ;
else	else
print b [ i ] and newline	cout << b [ i ] << endl ;
n , d , s = int , dist = array of 105 int	int n , d , dist [ 105 ] , s ;
read n	cin >> n ;
s = n	s = n ;
fill dist with 0	memset ( dist , 0 , sizeof ( dist ) ) ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
read d	cin >> d ;
if d is 1 increment dist [ i ]	if ( d == 1 ) dist [ i ] ++ ;
if d is 2 increment dist [ j ]	if ( d == 2 ) dist [ j ] ++ ;
if d is 3	if ( d == 3 )
increment dist [ i ]	dist [ i ] ++ ;
increment dist [ j ]	dist [ j ] ++ ;
for i = 0 to n inclusive	for ( int i = 0 ; i <= n ; i ++ )
if dist [ i ] ! = 0 decrement s	if ( dist [ i ] != 0 ) s -- ;
print s	cout << s << endl ;
flot = 1	int flot = 1 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if dist [ i ] is 0 and flot	if ( dist [ i ] == 0 && flot )
print i	cout << i ;
flot = 0	flot = 0 ;
else if dist [ i ] is 0 and not flot	else if ( dist [ i ] == 0 && ! flot )
print space , i	cout << "   " << i ;
if s print newline	if ( s ) cout << endl ;
define 2D int array r to be 200 x 200 , and define ints a , b , c , d , and e	int r [ 200 ] [ 200 ] , a , b , c , d , e ;
while read into a	while ( cin >> a )
define int dynamic array v2	vector < int > v2 ;
define 200 - elt . array v	int v [ 200 ] ;
for b from 1 to a by 1	for ( b = 1 ; b <= a ; b ++ )
set v [ b ] to 1	v [ b ] = 1 ;
for c by 1 from 1 to a , read into r [ b ] [ c ]	for ( c = 1 ; c <= a ; c ++ ) { cin >> r [ b ] [ c ] ; }
for b by 1 from 1 to a	for ( b = 1 ; b <= a ; b ++ )
for c from 1 to a by 1	for ( c = 1 ; c <= a ; c ++ )
if b is c , then continue	if ( b == c ) continue ;
if r [ b ] [ c ] is one , then zero v [ b ]	if ( r [ b ] [ c ] == 1 ) v [ b ] = 0 ;
if r [ b ] [ c ] is two , then set v [ c ] to zero	if ( r [ b ] [ c ] == 2 ) v [ c ] = 0 ;
if r [ b ] [ c ] is three , then set v [ b ] and v [ c ] to zero	if ( r [ b ] [ c ] == 3 ) v [ b ] = 0 , v [ c ] = 0 ;
assign zero to c	c = 0 ;
for b from 1 to a by 1	for ( b = 1 ; b <= a ; b ++ )
if v [ b ] is one	if ( v [ b ] == 1 )
increment c	c ++ ;
append b onto v2	v2 . push_back ( b ) ;
if c	if ( c )
print c and newline	cout << c << endl ;
for d from 1 to c by 1	for ( d = 1 ; d <= c ; d ++ )
if d is one	if ( d == 1 )
print v2 [ d - 1 ]	cout << v2 [ d - 1 ] ;
otherwise	else
print " " and v2 [ d - 1 ]	cout << "   " << v2 [ d - 1 ] ;
print newline	cout << endl ;
else	else
print c followed by newline	cout << c << endl ;
clear out v2	v2 . clear ( ) ;
create int n and a and int array ans of size 105	int n , a , ans [ 105 ] ;
while cin > > n is truthy	while ( cin >> n )
set all contents of ans to 0	memset ( ans , 0 , sizeof ( ans ) ) ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to n	for ( int j = 1 ; j <= n ; j ++ )
read a	cin >> a ;
if a is equal to 1 or a is equal to 3 , set ans [ i ] to 1	if ( a == 1 || a == 3 ) ans [ i ] = 1 ;
let int cnt = 0 and int array b of size 105	int cnt = 0 , b [ 105 ] ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if ans [ i ] is equal to 0 , set b [ cnt + + ] to i	if ( ans [ i ] == 0 ) b [ cnt ++ ] = i ;
if cnt is truthy	if ( cnt )
print cnt	cout << cnt << endl ;
for i = 0 to cnt - 1 exclusive , print b [ i ] and ' '	for ( int i = 0 ; i < cnt - 1 ; i ++ ) cout << b [ i ] << '   ' ;
print b [ cnt - 1 ]	cout << b [ cnt - 1 ] << endl ;
else	else
print 0	cout << 0 << endl ;
declare 2d boolean array good with size 200	bool good [ 200 ] ;
declare integer variable n	int n ;
declare 2d integer array a with size 300 by 300	int a [ 300 ] [ 300 ] ;
read input to n	cin >> n ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j = 1 to n inclusive , read a [ i ] [ j ]	for ( int j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; }
set sizeof ( good ) bytes at the pointer good to true	memset ( good , true , sizeof ( good ) ) ;
declare integer variable sum = 0	int sum = 0 ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
for j from 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
if a [ i ] [ j ] = 1 or a [ i ] [ j ] = 3	if ( a [ i ] [ j ] == 1 || a [ i ] [ j ] == 3 )
assign false to good [ i ]	good [ i ] = false ;
stop the loop	break ;
if good [ i ] is false , go to the start of the loop	if ( ! good [ i ] ) continue ;
for j from 1 to n inclusive	for ( int j = 1 ; j <= n ; j ++ )
if a [ j ] [ i ] is equal to 2 or a [ j ] [ i ] is equal to 3	if ( a [ j ] [ i ] == 2 || a [ j ] [ i ] == 3 )
change good [ i ] to false	good [ i ] = false ;
break the loop	break ;
if good [ i ] is true , increment sum	if ( good [ i ] ) sum ++ ;
print sum	cout << sum << endl ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if good [ i ] is true	if ( good [ i ] )
if sum is equal to 1	if ( sum == 1 )
print i	cout << i << endl ;
else	else
print i and ' '	cout << i << '   ' ;
decrement sum	sum -- ;
v is a vector of 6 integers	vector < int > v ( 6 ) ;
for integer i = 0 to 6 exclusive read v [ i ]	for ( int i = 0 ; i < 6 ; i ++ ) cin >> v [ i ] ;
declare integer suma = 0	int suma = 0 ;
create integer minA with value min of v [ 1 ] and v [ 5 ]	int minA = min ( v [ 1 ] , v [ 5 ] ) ;
create integer maxA with value max of v [ 1 ] and v [ 5 ]	int maxA = max ( v [ 1 ] , v [ 5 ] ) ;
declare integer inicial = v [ 0 ] * 2 + 1	int inicial = v [ 0 ] * 2 + 1 ;
for i = 0 to minA exclusive	for ( int i = 0 ; i < minA ; i ++ )
increase suma by inicial	suma += inicial ;
increase inicial by 2	inicial += 2 ;
decrement inicial if maxA ! = minA	if ( maxA != minA ) inicial -- ;
for i = minA to maxA exclusive , increase suma by inicial	for ( int i = minA ; i < maxA ; i ++ ) { suma += inicial ; }
assign value of min of v [ 2 ] and v [ 4 ] to minA	minA = min ( v [ 2 ] , v [ 4 ] ) ;
assign value of max of v [ 2 ] and v [ 4 ] to maxA	maxA = max ( v [ 2 ] , v [ 4 ] ) ;
inicial = v [ 3 ] * 2 + 1	inicial = v [ 3 ] * 2 + 1 ;
for i = 0 to minA exclusive	for ( int i = 0 ; i < minA ; i ++ )
increase suma by inicial	suma += inicial ;
increase inicial by 2	inicial += 2 ;
decrement inicial if maxA ! = minA	if ( maxA != minA ) inicial -- ;
if v [ 1 ] = v [ 5 ]	if ( v [ 1 ] == v [ 5 ] )
for integer i = minA to maxA exclusive , increase suma by inicial	for ( int i = minA ; i < maxA ; i ++ ) { suma += inicial ; }
print suma	cout << suma << endl ;
sq is a function that returns an integer and receive integer x	inline int sq ( int x )
return square of x	return x * x ;
a = array of integers of length 11	int a [ 11 ] ;
for ( integer i = 0 to 6 exclusive ) , read i th element of array a	for ( int i = 0 ; i < 6 ; i ++ ) cin >> a [ i ] ;
ans is an integer and equals square of ( a [ 0 ] + a [ 1 ] + a [ 2 ] )	int ans = sq ( a [ 0 ] + a [ 1 ] + a [ 2 ] ) ;
decrement ans by square of a [ 0 ] ) + sq ( a [ 2 ] ) + sq ( a [ 4 ]	ans -= sq ( a [ 0 ] ) + sq ( a [ 2 ] ) + sq ( a [ 4 ] ) ;
print ans and a new line	cout << ans << endl ;
declare long long array a with size 6	long long a [ 6 ] ;
read 6 elements into array a	for ( long long i = 0 ; i < 6 ; i ++ ) cin >> a [ i ] ;
create long longs ans = 0 and c = 2 * a [ 0 ] - 1	long long c = 2 * a [ 0 ] - 1 , ans = 0 ;
for i = 0 to a [ 1 ] + a [ 2 ] exclusive	for ( long long i = 0 ; i < a [ 1 ] + a [ 2 ] ; i ++ )
if i < = a [ 1 ] & & i < = a [ 5 ]	if ( i <= a [ 1 ] && i <= a [ 5 ] )
increase c by 2	c += 2 ;
else if i > a [ 1 ] & & i is greater than a [ 5 ]	else if ( i > a [ 1 ] && i > a [ 5 ] )
decrease c by 2	c -= 2 ;
if a [ 1 ] = a [ 5 ] & & i = a [ 1 ] decrease c by 2	if ( a [ 1 ] == a [ 5 ] && i == a [ 1 ] ) c -= 2 ;
if i ! = a [ 1 ] & & i = a [ 5 ] decrease c by 1	if ( i != a [ 1 ] && i == a [ 5 ] ) c -- ;
if i = a [ 1 ] & & i ! = a [ 5 ] decrease c by 1	if ( i == a [ 1 ] && i != a [ 5 ] ) c -- ;
increase ans by c	ans += c ;
print ans	cout << ans << endl ;
a1 , a2 , a3 , a4 , a5 , a6 = integers	int a1 , a2 , a3 , a4 , a5 , a6 ;
Read a1 , a2 , a3 , a4 , a5 , a6	cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 ;
print ( a1 + a2 + a3 ) * ( a1 + a2 + a3 ) - a1 * a1 - a3 * a3 - a5 * a5 and a new line	cout << ( a1 + a2 + a3 ) * ( a1 + a2 + a3 ) - a1 * a1 - a3 * a3 - a5 * a5 << endl ;
a , b , c , d , e , f , maxlevel = long	long a , b , c , d , e , f , maxlevel ;
read a , b , c , d , e , f	cin >> a >> b >> c >> d >> e >> f ;
maxlevel = b + c	maxlevel = b + c ;
curr = long with curr = a * 2 - 1	long curr = a * 2 - 1 ;
sum = long with sum = 0	long sum = 0 ;
for i = 0 to maxlevel exclusive	for ( int i = 0 ; i < maxlevel ; i ++ )
if b > 0	if ( b > 0 )
increment curr	curr ++ ;
else if b < 0	else if ( b < 0 )
decrement curr	curr -- ;
decrement b	b -- ;
if f > 0	if ( f > 0 )
increment curr	curr ++ ;
else if f < 0	else if ( f < 0 )
decrement curr	curr -- ;
decrement f	f -- ;
sum = sum + curr	sum += curr ;
print sum	cout << sum << endl ;
create integer array a with 6 elements	int a [ 6 ] ;
read 6 elements into a	for ( int i = 0 ; i < 6 ; ++ i ) cin >> a [ i ] ;
create integer n = a [ 0 ] + a [ 1 ]	int n = a [ 0 ] + a [ 1 ] ;
declare integer arrays l and r with size n	int l [ n ] = { } , r [ n ] = { } ;
for i = 0 to a [ 1 ] exclusive , set l [ i ] to 1	for ( int i = 0 ; i < a [ 1 ] ; ++ i ) l [ i ] = 1 ;
for integer i = a [ 1 ] + 1 to n exclusive , set l [ i ] to - 1	for ( int i = a [ 1 ] + 1 ; i < n ; ++ i ) l [ i ] = - 1 ;
for i = 0 to a [ 3 ] exclusive , set r [ i ] to 1	for ( int i = 0 ; i < a [ 3 ] ; ++ i ) r [ i ] = 1 ;
for i = a [ 3 ] + 1 to n exclusive , set r [ i ] to - 1	for ( int i = a [ 3 ] + 1 ; i < n ; ++ i ) r [ i ] = - 1 ;
declare integers ans = 0 and step = 2 * a [ 2 ] - 1	int ans = 0 , step = 2 * a [ 2 ] - 1 ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
increase step by l [ i ] + r [ i ]	step += l [ i ] + r [ i ] ;
increase ans by step	ans += step ;
print ans	cout << ans << endl ;
create integer arrays a , b , with a size 10 , b size 5005	int a [ 10 ] , b [ 5005 ] ;
set b [ 0 ] to 0	b [ 0 ] = 0 ;
set b [ 1 ] to 1	b [ 1 ] = 1 ;
for i = 2 to 5005 exclusive , set b [ i ] to i * i	for ( int i = 2 ; i < 5005 ; i ++ ) { b [ i ] = i * i ; }
create integer len with len = 0	int len = 0 ;
for i = 1 to 6 inclusive , read a [ i ]	for ( int i = 1 ; i <= 6 ; i ++ ) { cin >> a [ i ] ; }
create integer m with m = a [ 1 ] + a [ 2 ] + a [ 3 ]	int m = a [ 1 ] + a [ 2 ] + a [ 3 ] ;
set len to b [ m ] - ( b [ a [ 1 ] ] + b [ a [ 3 ] ] + b [ a [ 5 ] ] )	len = b [ m ] - ( b [ a [ 1 ] ] + b [ a [ 3 ] ] + b [ a [ 5 ] ] ) ;
print len print newline	cout << len << endl ;
declare long long variables a , b , c , d , e and f	long long a , b , c , d , e , f ;
read a , b , c , d , e and f	cin >> a >> b >> c >> d >> e >> f ;
print ( c + d + e ) * ( c + d + e ) - ( a * a ) - ( c * c ) - ( e * e ) and " \ n "	cout << ( c + d + e ) * ( c + d + e ) - ( a * a ) - ( c * c ) - ( e * e ) << " \n " ;
create integers a , b , c , d , e , and f	int a , b , c , d , e , f ;
print a b c d e and f	cin >> a >> b >> c >> d >> e >> f ;
set integer x equal to a + b + c	int x = a + b + c ;
let res be an integer equal to ( x * x ) - ( a * a ) - ( c * c ) - ( e * e )	int res = ( x * x ) - ( a * a ) - ( c * c ) - ( e * e ) ;
print res and a new line	cout << res << endl ;
let a , b , c , d , e , f be ints	int a , b , c , d , e , f ;
read a , b , c , d , e , f	cin >> a >> b >> c >> d >> e >> f ;
print ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e and one newline	cout << ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e << endl ;
maxn = const int with maxn = 1e6	const int maxn = 1e6 ;
inf = const double with inf = 0x3f3f3f3f3f3f3f3f	const double inf = 0x3f3f3f3f3f3f3f3f ;
a , b , c , d , e , f = int	int a , b , c , d , e , f ;
while reading a then b then c then d then e then f print ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e	while ( cin >> a >> b >> c >> d >> e >> f ) { cout << ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e << endl ; }
a , b , c , d , e , f , ans , x , y and z are integers where ans , x , y and z = 0	int a , b , c , d , e , f , ans = 0 , x = 0 , y = 0 , z = 0 ;
read a , b , c , d , e and f	cin >> a >> b >> c >> d >> e >> f ;
if b is greater than f	if ( b > f )
increase ans by 2 * a * f + f * ( f + 1 ) - f	ans += 2 * a * f + f * ( f + 1 ) - f ;
set value of x to a + f	x = a + f ;
else	else
increase ans by 2 * a * b + b * ( b + 1 ) - b	ans += 2 * a * b + b * ( b + 1 ) - b ;
set value of x to a + b	x = a + b ;
if c is greater than e	if ( c > e )
increase ans by 2 * d * e + e * ( e + 1 ) - e	ans += 2 * d * e + e * ( e + 1 ) - e ;
assign value of c - e to y	y = c - e ;
else	else
increase ans by 2 * d * c + c * ( c + 1 ) - c	ans += 2 * d * c + c * ( c + 1 ) - c ;
y = e - c	y = e - c ;
increase ans by 2 * x * y	ans += 2 * x * y ;
print ans and ' \ n '	cout << ans << ' \n ' ;
declare integers n and res where n = 6 and array of integers a with 10 elements	int n = 6 , res , a [ 10 ] ;
for i = 1 to n inclusive read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
declare integers root = a [ 1 ] * 2 + 1 and curr = root	int root = a [ 1 ] * 2 + 1 , curr = root ;
create integers first_layer , second_layer and third_layer = 0	int first_layer = 0 , second_layer = 0 , third_layer = 0 ;
if a [ 2 ] > = a [ n ]	if ( a [ 2 ] >= a [ n ] )
set first_layer = a [ n ] and second_layer = a [ 2 ] - a [ n ]	first_layer = a [ n ] , second_layer = a [ 2 ] - a [ n ] ;
else	else
set first_layer = a [ 2 ] and second_layer = a [ n ] - a [ 2 ]	first_layer = a [ 2 ] , second_layer = a [ n ] - a [ 2 ] ;
for i = 1 to first_layer inclusive	for ( int i = 1 ; i <= first_layer ; i ++ )
set value of res to res + curr	res = res + curr ;
curr = curr + 2	curr = curr + 2 ;
if first_layer = a [ 2 ]	if ( first_layer == a [ 2 ] )
second_layer = min of second_layer and a [ 3 ]	second_layer = min ( second_layer , a [ 3 ] ) ;
else	else
second_layer = min of second_layer and a [ 5 ]	second_layer = min ( second_layer , a [ 5 ] ) ;
for i = 1 to second_layer inclusive , increase res by curr - 1	for ( int i = 1 ; i <= second_layer ; i ++ ) res = res + curr - 1 ;
set root = a [ 4 ] * 2 + 1 and curr = root	root = a [ 4 ] * 2 + 1 , curr = root ;
for integer i = 1 to min of a [ 3 ] and a [ 5 ] inclusive	for ( int i = 1 ; i <= min ( a [ 3 ] , a [ 5 ] ) ; i ++ )
res = res + curr	res = res + curr ;
set curr to curr + 2	curr = curr + 2 ;
print res and ' \ n '	cout << res << ' \n ' ;
set ee and acc = 0	int ee = 0 , acc = 0 ;
for i = 0 to 6 exclusive	for ( int i = 0 ; i < 6 ; i ++ )
create int e	int e ;
read e	cin >> e ;
if i is even , assign acc + e * e to acc	if ( i % 2 == 0 ) acc += e * e ;
if i is less than 3 , ee = ee + e	if ( i < 3 ) ee += e ;
set ans equal to ee * ee - acc	int ans = ee * ee - acc ;
print ans	cout << ans << endl ;
a1 , a2 , a3 , a4 , a5 , a6 , result = integers with result = 0	int a1 , a2 , a3 , a4 , a5 , a6 , result = 0 ;
Read a1 , a2 , a3 , a4 , a5 , a6	cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 ;
set result to ( ( a1 + a2 + a3 ) * ( a1 + a2 + a3 ) ) - ( a1 * a1 ) - ( a3 * a3 ) - ( a5 * a5 )	result = ( ( a1 + a2 + a3 ) * ( a1 + a2 + a3 ) ) - ( a1 * a1 ) - ( a3 * a3 ) - ( a5 * a5 ) ;
print result and a new line	cout << result << endl ;
create integers a , b , c , d , e and f	int a , b , c , d , e , f ;
read a , b , c , d , e and f	cin >> a >> b >> c >> d >> e >> f ;
if e > c then swap e and c and swap f and b	if ( e > c ) swap ( e , c ) , swap ( f , b ) ;
print 2 * c * ( d + e ) - e * e + 2 * a * b + b * b	cout << 2 * c * ( d + e ) - e * e + 2 * a * b + b * b << endl ;
create int a , b , c , d , e , f	long long a , b , c , d , e , f ;
read a , b , c , d , e and f	cin >> a >> b >> c >> d >> e >> f ;
print ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e	cout << ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e << endl ;
maxn = constant integer with value of 105	const int maxn = 105 ;
a , b , c , d , e , f = integers	int a , b , c , d , e , f ;
read a , b , c , d , e , and f	cin >> a >> b >> c >> d >> e >> f ;
print ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e	cout << ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e << endl ;
declare int array side with size 7	int side [ 7 ] ;
for integer i = 1 to 6 inclusive read side [ i ]	for ( int i = 1 ; i <= 6 ; ++ i ) cin >> side [ i ] ;
create integer h1 = min of side [ 2 ] and side [ 6 ]	int h1 = min ( side [ 2 ] , side [ 6 ] ) ;
create integer h2 = min of side [ 3 ] and side [ 5 ]	int h2 = min ( side [ 3 ] , side [ 5 ] ) ;
declare int h3 = side [ 2 ] + side [ 3 ] - h1 - h2	int h3 = side [ 2 ] + side [ 3 ] - h1 - h2 ;
create int ans = 0	int ans = 0 ;
for integer i = side [ 1 ] + 1 to side [ 1 ] + h1 inclusive , increase ans by 2 * i - 1	for ( int i = side [ 1 ] + 1 ; i <= side [ 1 ] + h1 ; ++ i ) ans += 2 * i - 1 ;
for integer i = side [ 4 ] + 1 to side [ 4 ] + h2 inclusive , increase ans by 2 * i - 1	for ( int i = side [ 4 ] + 1 ; i <= side [ 4 ] + h2 ; ++ i ) ans += 2 * i - 1 ;
for i = 1 to h3 inclusive , increase ans by ( side [ 1 ] + h1 ) * 2	for ( int i = 1 ; i <= h3 ; ++ i ) ans += ( side [ 1 ] + h1 ) * 2 ;
print ans	cout << ans << endl ;
create long longs a , b , c , d , e , f	long long a , b , c , d , e , f ;
read a read b read c read d read e read f	cin >> a >> b >> c >> d >> e >> f ;
create long long ans with ans = ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e	long long ans = ( a + b + c ) * ( a + b + c ) - a * a - c * c - e * e ;
print ans print newline	cout << ans << endl ;
in function sq taking an int a and returning an int	int sq ( int a )
return a * a	return a * a ;
i , j , k , a , b , c = int and A = int array of size 6	int A [ 6 ] , i , j , k , a , b , c ;
read 6 values into A	for ( i = 0 ; i < 6 ; i ++ ) { cin >> A [ i ] ; }
set a to A [ 0 ] + A [ 1 ] + A [ 2 ]	a = A [ 0 ] + A [ 1 ] + A [ 2 ] ;
set b to sq of a	b = sq ( a ) ;
set c to sq of A [ 0 ] + sq of A [ 2 ] + sq of A [ 4 ]	c = sq ( A [ 0 ] ) + sq ( A [ 2 ] ) + sq ( A [ 4 ] ) ;
set j to b - c	j = b - c ;
print j	cout << j << endl ;
a = integer array of size 7	int a [ 7 ] ;
in the function p that takes integer x and returns integer	int p ( int x )
return x * x	return x * x ;
for i = 1 to 6 , read a [ i ]	for ( int i = 1 ; i <= 6 ; i ++ ) { cin >> a [ i ] ; }
ans = integer with ans = p ( a [ 1 ] + a [ 2 ] + a [ 3 ] ) - p ( a [ 1 ] ) - p ( a [ 3 ] ) - p ( a [ 5 ] )	int ans = p ( a [ 1 ] + a [ 2 ] + a [ 3 ] ) - p ( a [ 1 ] ) - p ( a [ 3 ] ) - p ( a [ 5 ] ) ;
print ans	cout << ans << " \n " ;
declare ints i , j , l , test , ans and len with test = 0	int i , j , l , test = 0 , ans , len ;
declare character ch and array of characters str with 1003 elements	char str [ 1003 ] , ch ;
declare doubles maps and k where maps = 0	double maps = 0 , k ;
read l	cin >> l ;
for i from 0 to l exclusive	for ( i = 0 ; i < l ; i ++ )
read input to str	cin >> str ;
if str is " ABSINTH "	if ( strcmp ( str , " ABSINTH " ) == 0 )
increment test	test ++ ;
if str is " BEER "	else if ( strcmp ( str , " BEER " ) == 0 )
increment test by one	test ++ ;
if str is " BRANDY "	else if ( strcmp ( str , " BRANDY " ) == 0 )
increment test by one	test ++ ;
if str is " CHAMPAGNE "	else if ( strcmp ( str , " CHAMPAGNE " ) == 0 )
increment test by one	test ++ ;
if str is " GIN "	else if ( strcmp ( str , " GIN " ) == 0 )
increment test by one	test ++ ;
if str is " RUM "	else if ( strcmp ( str , " RUM " ) == 0 )
increment test	test ++ ;
if str is " SAKE "	else if ( strcmp ( str , " SAKE " ) == 0 )
increment test by one	test ++ ;
if str is " TEQUILA "	else if ( strcmp ( str , " TEQUILA " ) == 0 )
increment test by one	test ++ ;
if str is " VODKA "	else if ( strcmp ( str , " VODKA " ) == 0 )
increment test by one	test ++ ;
if str is " WHISKEY "	else if ( strcmp ( str , " WHISKEY " ) == 0 )
increment test	test ++ ;
if str is " WINE "	else if ( strcmp ( str , " WINE " ) == 0 )
increment test by one	test ++ ;
else if str [ 0 ] > = 48 and str [ 0 ] < = 57	else if ( str [ 0 ] >= 48 && str [ 0 ] <= 57 )
assign length of str to len	len = strlen ( str ) ;
set k to 0	k = 0 ;
set maps to 0	maps = 0 ;
for j = len - 1 to 0 inclusive counting down	for ( j = len - 1 ; j >= 0 ; j -- )
change str [ j ] to str [ j ] - ' 0 '	str [ j ] = str [ j ] - ' 0 ' ;
assign maps + ( str [ j ] * pow ( 10 . 0 , k ) ) to maps	maps = maps + ( str [ j ] * pow ( 10.0 , k ) ) ;
increment k	k ++ ;
change ans to maps	ans = ( int ) maps ;
if ans is less than 18 , increment test	if ( ans < 18 ) { test ++ ; }
print test	cout << test << endl ;
mp = map of string and int	map < string , int > mp ;
set mp [ " ABSINTH " ] and mp [ " BEER " ] and mp [ " BRANDY " ] and mp [ " CHAMPAGNE " ] to 1	mp [ " ABSINTH " ] = mp [ " BEER " ] = mp [ " BRANDY " ] = mp [ " CHAMPAGNE " ] = 1 ;
set mp [ " GIN " ] and mp [ " RUM " ] and mp [ " SAKE " ] and mp [ " TEQUILA " ] and mp [ " VODKA " ] to 1	mp [ " GIN " ] = mp [ " RUM " ] = mp [ " SAKE " ] = mp [ " TEQUILA " ] = mp [ " VODKA " ] = 1 ;
set mp [ " WHISKEY " ] and mp [ " WINE " ] to 1	mp [ " WHISKEY " ] = mp [ " WINE " ] = 1 ;
n = int	int n ;
read n	cin >> n ;
cnt = int with cnt = 0	int cnt = 0 ;
loop n times	while ( n -- )
s = string	string s ;
read s	cin >> s ;
if mp [ s ] is not 0	if ( mp [ s ] )
increment cnt	cnt ++ ;
else if s [ 0 ] is numeric char	else if ( s [ 0 ] >= ' 0 ' && s [ 0 ] <= ' 9 ' )
geek = stringstream initialized with s	stringstream geek ( s ) ;
x = int with x = 0	int x = 0 ;
read into x from geek	geek >> x ;
if x is less than 18 then increment cnt	if ( x < 18 ) cnt ++ ;
print cnt	cout << cnt << endl ;
s = string	string s ;
ans = integer with ans = 0	int ans = 0 ;
in the function make	void make ( )
len = integer with len = s . length ( )	int len = s . length ( ) ;
if s [ 0 ] < = 9 and s [ 0 ] > = 0	if ( s [ 0 ] <= ' 9 ' && s [ 0 ] >= ' 0 ' )
year = integer with year = 0	int year = 0 ;
for i = 0 to len exclusive , year = year * 10 + s [ i ] - 0	for ( int i = 0 ; i < len ; i ++ ) { year = year * 10 + s [ i ] - ' 0 ' ; }
if year < 18 , increment ans	if ( year < 18 ) { ans ++ ; }
else	else
if s is BRANDY	if ( s == " BRANDY " )
increment ans	ans ++ ;
else if s is BEER	else if ( s == " BEER " )
increment ans	ans ++ ;
else if s is ABSINTH	else if ( s == " ABSINTH " )
increment ans	ans ++ ;
else if s is CHAMPAGNE	else if ( s == " CHAMPAGNE " )
increment ans	ans ++ ;
else if s is GIN	else if ( s == " GIN " )
increment ans	ans ++ ;
else if s is RUM	else if ( s == " RUM " )
increment ans	ans ++ ;
else if s is SAKE	else if ( s == " SAKE " )
increment ans	ans ++ ;
else if s is TEQUILA	else if ( s == " TEQUILA " )
increment ans	ans ++ ;
else if s is VODKA	else if ( s == " VODKA " )
increment ans	ans ++ ;
else if s is WHISKEY	else if ( s == " WHISKEY " )
increment ans	ans ++ ;
else if s is WINE	else if ( s == " WINE " )
increment ans	ans ++ ;
n = integer	int n ;
read n	cin >> n ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
read s	cin >> s ;
call make	make ( ) ;
print ans	cout << ans << endl ;
declare integers i , j , l , test , ans and len where test = 0	int i , j , l , test = 0 , ans , len ;
declare character array str with size 1003 and a character variable ch	char str [ 1003 ] , ch ;
declare double variables maps = 0 and k	double maps = 0 , k ;
read input to l	cin >> l ;
loop i from 0 to l exclusive	for ( i = 0 ; i < l ; i ++ )
read str	cin >> str ;
if str is " ABSINTH "	if ( strcmp ( str , " ABSINTH " ) == 0 )
increment test	test ++ ;
else if str is " BEER "	else if ( strcmp ( str , " BEER " ) == 0 )
increment test	test ++ ;
else if str is " BRANDY "	else if ( strcmp ( str , " BRANDY " ) == 0 )
increment test by one	test ++ ;
else if str is " CHAMPAGNE "	else if ( strcmp ( str , " CHAMPAGNE " ) == 0 )
increment test by one	test ++ ;
else if str is " GIN "	else if ( strcmp ( str , " GIN " ) == 0 )
increment test by one	test ++ ;
else if str is " RUM "	else if ( strcmp ( str , " RUM " ) == 0 )
increment test	test ++ ;
else if str is " SAKE "	else if ( strcmp ( str , " SAKE " ) == 0 )
increment test	test ++ ;
else if str is " TEQUILA "	else if ( strcmp ( str , " TEQUILA " ) == 0 )
increment test	test ++ ;
else if str is " VODKA "	else if ( strcmp ( str , " VODKA " ) == 0 )
increment test	test ++ ;
else if str is " WHISKEY "	else if ( strcmp ( str , " WHISKEY " ) == 0 )
increment test by one	test ++ ;
else if str is " WINE "	else if ( strcmp ( str , " WINE " ) == 0 )
increment test	test ++ ;
else if str [ 0 ] > = 48 and str [ 0 ] < = 57	else if ( str [ 0 ] >= 48 && str [ 0 ] <= 57 )
change len to length of str	len = strlen ( str ) ;
change k to 0	k = 0 ;
change maps to 0	maps = 0 ;
loop j from len - 1 to 0 inclusive counting down	for ( j = len - 1 ; j >= 0 ; j -- )
assign str [ j ] - ' 0 ' to str [ j ]	str [ j ] = str [ j ] - ' 0 ' ;
change maps to maps + ( str [ j ] * ( 10 . 0 in power k ) )	maps = maps + ( str [ j ] * pow ( 10.0 , k ) ) ;
increment k by one	k ++ ;
change ans to maps	ans = ( int ) maps ;
if ans is less than 18 , increment test by one	if ( ans < 18 ) { test ++ ; }
print test	cout << test << endl ;
declare const int maxn = 1e6	const int maxn = 1e6 ;
create an array of integers prime with maxn + 1 elements	int prime [ maxn + 1 ] ;
function getPrime	void getPrime ( )
set first sizeof ( prime ) bytes at the pointer prime to 0	memset ( prime , 0 , sizeof ( prime ) ) ;
for i from 2 to maxn inclusive	for ( int i = 2 ; i <= maxn ; i ++ )
if prime [ i ] is 0 , increment prime [ 0 ] and set prime [ prime [ 0 ] ] to i	if ( ! prime [ i ] ) prime [ ++ prime [ 0 ] ] = i ;
for j from 1 to prime [ 0 ] inclusive while prime [ j ] < = maxn / i , incrementing j	for ( int j = 1 ; j <= prime [ 0 ] && prime [ j ] <= maxn / i ; j ++ )
prime [ prime [ j ] * i ] = 1	prime [ prime [ j ] * i ] = 1 ;
if i % prime [ j ] is equal to 0 , break the loop	if ( i % prime [ j ] == 0 ) break ;
call getPrime ( )	getPrime ( ) ;
declare int variable n	int n ;
loop , reading n from the input	while ( cin >> n )
declare vector of integers v	vector < int > v ;
clear v	v . clear ( ) ;
declare integer variables key = prime [ 1 ] and id = 1	int key = prime [ 1 ] , id = 1 ;
loop i from 1 to n inclusive	for ( int i = 1 ; prime [ i ] <= n ; i ++ )
create int key = prime [ i ]	int key = prime [ i ] ;
while key < = n	while ( key <= n )
push key into v	v . push_back ( key ) ;
multiply key by prime [ i ]	key *= prime [ i ] ;
print length of v	cout << v . size ( ) << endl ;
for integer i = 0 to length of v exclusive , print v [ i ] and " \ n " if i = length of v - 1 or " " if it is not	for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << ( i == v . size ( ) - 1 ? " \n " : "   " ) ;
maxn = const integer with maxn = 1010	const int maxn = 1010 ;
v = vector of integer	vector < int > v ;
is_prime = bool array of size maxn	bool is_prime [ maxn ] ;
prime = integer array of size maxn	int prime [ maxn ] ;
k = integer	int k ;
in the function Euler that takes integer n	void Euler ( int n )
i , j = integers	int i , j ;
k = 0	k = 0 ;
for i = 2 to n exclusive	for ( i = 2 ; i < n ; i ++ )
if is_prime [ i ] is false , prime [ increment k ] = i	if ( is_prime [ i ] == false ) prime [ k ++ ] = i ;
for j < k and i * prime [ j ] < n	for ( j = 0 ; j < k && i * prime [ j ] < n ; j ++ )
is_prime [ i * prime [ j ] ] = true	is_prime [ i * prime [ j ] ] = true ;
if i modulo prime [ j ] is 0 , break loop	if ( i % prime [ j ] == 0 ) break ;
n , x = integer	int n , x ;
Euler of maxn	Euler ( maxn ) ;
ans = integer with ans = ( 0 )	int ans ( 0 ) ;
read n	cin >> n ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
if prime [ i ] < = n	if ( prime [ i ] <= n )
p = integer with p = prime [ i ]	int p = prime [ i ] ;
while p < = n	while ( p <= n )
append p in v	v . push_back ( p ) ;
p = p * prime [ i ]	p *= prime [ i ] ;
print v . size ( )	cout << v . size ( ) << endl ;
if v . size ( ) > 0	if ( v . size ( ) > 0 )
for i = 0 to v . size ( ) - 1 exclusive , print v [ i ]	for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ ) cout << v [ i ] << '   ' ;
print v [ v . size ( ) - 1 ]	cout << v [ v . size ( ) - 1 ] << endl ;
create integer array a with size 1005	int a [ 1005 ] ;
declare zhi with integer n as argument , returning boolean	bool zhi ( int n )
for i = 2 to n exclusive	for ( int i = 2 ; i < n ; i ++ )
if n % i is 0 , return false from function	if ( n % i == 0 ) return false ;
return true from function	return true ;
create integer n	int n ;
while read n	while ( cin >> n )
if n is 1	if ( n == 1 )
print 0 print newline	cout << 0 << endl ;
break current loop iteration	continue ;
set bytes from a to size of a to value 0	memset ( a , 0 , sizeof ( a ) ) ;
create integer j with j = 0	int j = 0 ;
for i = 2 to n inclusive	for ( int i = 2 ; i <= n ; i ++ )
if result of run zhi with i as argument is true	if ( zhi ( i ) )
set a [ j ] to i	a [ j ] = i ;
increment j	j ++ ;
create integer t with t = i	int t = i ;
set t to t * i	t *= i ;
while t is less than or equal to n	while ( t <= n )
set a [ j ] to t	a [ j ] = t ;
increment j	j ++ ;
set t to t * i	t *= i ;
print j print newline	cout << j << endl ;
for i = 0 to j - 1 exclusive , print a [ i ] print " "	for ( int i = 0 ; i < j - 1 ; i ++ ) { cout << a [ i ] << "   " ; }
print a [ j - 1 ] print newline	cout << a [ j - 1 ] << endl ;
declare double variables a , b and c	double a , b , c ;
read a , b and c	cin >> a >> b >> c ;
print b / ( b + c ) * a	cout << b / ( b + c ) * a << endl ;
a , b , r = integers	double l , p , q ;
Read l , p , q	cin >> l >> p >> q ;
print l / ( q + p ) * p and a new line	cout << l / ( q + p ) * p << endl ;
double integers = l , p , q	double l , p , q ;
read l , p , q	cin >> l >> p >> q ;
output l / ( p + q ) * p	cout << l / ( p + q ) * p << " \n " ;
create constant integer maxn with maxn = integer casted 1e5 + 5	const int maxn = ( int ) 1e5 + 5 ;
create constant long long mod with mod = 1e9 + 7	const long long mod = 1e9 + 7 ;
create doubles l , p , q	double l , p , q ;
read l read p read q	cin >> l >> p >> q ;
create double t1 with t1 = ( ( 2 * l ) / ( p + q ) )	double t1 = ( ( 2 * l ) / ( p + q ) ) ;
create double t2 with t2 = l / ( p + q )	double t2 = l / ( p + q ) ;
create double ans with ans = p * ( t1 - t2 )	double ans = p * ( t1 - t2 ) ;
print ans print newline	cout << ans << endl ;
define floating point numbers m , a , s	double m , a , s ;
define doubles i , j	double i , j ;
while read m , i , j	while ( cin >> m >> i >> j )
set a to i + j	a = i + j ;
assign m / a to s	s = m / a ;
print s * i and a newline	cout << s * i << endl ;
create int l , p and q	int l , p , q ;
read l , p and q	cin >> l >> p >> q ;
print l * p / ( p + q )	cout << l * p / ( double ) ( p + q ) << endl ;
double integers = d , n , m	double d , n , m ;
read d , n , m	cin >> d >> n >> m ;
output ( d * n ) / ( n + m )	cout << ( d * n ) / ( n + m ) << endl ;
inf = const integer with inf = 0x3f3f3f3f	const int inf = 0x3f3f3f3f ;
mod1 = const integer with mod1 = 1e9 + 7	const int mod1 = 1e9 + 7 ;
mod = const long long with mod = 1e16	const long long mod = 1e16 ;
maxn = const integer with maxn = 1000	const int maxn = 1000 ;
dx , dy = integer array of size 5 with dx = { 0 , 1 , 0 , - 1 , 0 } , dy = { 1 , 0 , - 1 , 0 , 0 }	int dx [ 5 ] = { 0 , 1 , 0 , - 1 , 0 } , dy [ 5 ] = { 1 , 0 , - 1 , 0 , 0 } ;
dir = integer array of size [ 4 ] [ 2 ] with dir = { { 1 , 0 } , { - 1 , 0 } , { 0 , 1 } , { 0 , - 1 } }	int dir [ 4 ] [ 2 ] = { { 1 , 0 } , { - 1 , 0 } , { 0 , 1 } , { 0 , - 1 } } ;
n , x , y = double	double n , x , y ;
read n , x , y	cin >> n >> x >> y ;
d = double with d = n / ( x + y )	double d = n / ( x + y ) ;
e = double with e = d * x	double e = d * x ;
print e	cout << e << endl ;
create integer array h with size 3	int h [ 3 ] ;
create long long doubles a , b , c	long double a , b , c ;
read a read b read c	cin >> a >> b >> c ;
create long long double f with f = b + c	long double f = b + c ;
create long long double t with t = a / f	long double t = a / f ;
print b * t print ' \ n '	cout << b * t << ' \n ' ;
create doubles l , p and q	double l , p , q ;
read input to l , p and q	cin >> l >> p >> q ;
declare double variable t_total = 3 * l / ( p + q )	double t_total = 3 * l / ( p + q ) ;
declare double t1 = l / ( p + q )	double t1 = l / ( p + q ) ;
print ( t_total - 2 * t1 ) * p	cout << ( t_total - 2 * t1 ) * p << endl ;
l , x , y = double	double l , x , y ;
read l	cin >> l ;
read x , y	cin >> x >> y ;
if y > x	if ( y > x )
print l - ( ( l / ( x + y ) ) * the greatest value between x and y )	cout << l - ( ( l / ( x + y ) ) * max ( x , y ) ) << endl ;
else	else
print ( ( l / ( x + y ) ) * the greatest value between x and y )	cout << ( l / ( x + y ) ) * max ( x , y ) << endl ;
N = const long long with N = 1e5	const long long N = 1e5 ;
l , p , q = flaot	float l , p , q ;
read l then p then q	cin >> l >> p >> q ;
print l / ( p + q ) * p	cout << l / ( p + q ) * p ;
print newline	cout << " \n " ;
set a , b and c to 0	double a = 0 , b = 0 , c = 0 ;
print a , b and c	cin >> a >> b >> c ;
if b equal to c	if ( b == c )
print 0 . 5 * a	cout << 0.5 * a << endl ;
print b / ( c + b ) * a and a newline	cout << b / ( c + b ) * a << endl ;
create constant integer N with N = 5000 + 100	const int N = 5000 + 100 ;
create doubles l , q , p , t , ans	double l , q , p , t , ans ;
while read l is true	while ( cin >> l )
read p read q	cin >> p >> q ;
set t to l / ( p + q )	t = l / ( p + q ) ;
set ans to p * t	ans = p * t ;
print ans print newline	cout << ans << endl ;
l , p , q = double	double l , p , q ;
read l , p , q	cin >> l >> p >> q ;
print result of p * l / ( p + q )	cout << p * l / ( p + q ) << endl ;
let l , p , q be double values	double l , p , q ;
read l , p , q	cin >> l >> p >> q ;
print ( l * p ) / ( p + q ) and newline	cout << ( l * p ) / ( p + q ) << endl ;
set float a , s , c , d , e all to 0 and set float for i , j , k , l , f	float a = 0 , s = 0 , c = 0 , d = 0 , e = 0 , i , j , k , l , f ;
read k , l , f	cin >> k >> l >> f ;
set s to ( l + f ) / 2	s = ( l + f ) / 2 ;
set s to k / s	s = k / s ;
set s to s / 2	s = s / 2 ;
set a to l * s	a = l * s ;
output a	cout << a << endl ;
create doubles l , p and q	double l , p , q ;
read l , p and q	cin >> l >> p >> q ;
print ( l / ( p + q ) ) * p and " \ n "	cout << ( l / ( p + q ) ) * p << " \n " ;
a , b , c , tt = long long integers	long long int a , b , c , tt ;
read a , b , c	cin >> a >> b >> c ;
output ( float ) a / ( b + c ) * b	cout << ( float ) a / ( b + c ) * b << endl ;
MOD = const long long integer with MOD = 1000000007	const long long int MOD = 1000000007 ;
N , M , K , H , W , L , R = long long integer	long long int N , M , K , H , W , L , R ;
a , b , c = long double	long double a , b , c ;
read a , b , c	cin >> a >> b >> c ;
a = a / ( b + c )	a /= ( b + c ) ;
a = a * b	a *= b ;
print a	cout << a << endl ;
declare int variables l , p and q	int l , p , q ;
create doubles sum and su	double sum , su ;
read l , p and q and keep looping	while ( cin >> l >> p >> q )
change sum to l / ( 2 * ( p + q ) )	sum = ( double ) l / ( 2 * ( p + q ) ) ;
assign l - sum * q * 2 to su	su = ( double ) l - sum * q * 2 ;
print su	cout << su << endl ;
create doubles l , a , b	double l , a , b ;
read l read a read b	cin >> l >> a >> b ;
print l / ( a + b ) * a print newline	cout << l / ( a + b ) * a << endl ;
declare doubles d , a and b	double d , a , b ;
read d , a and b	cin >> d >> a >> b ;
create double t = d / ( a + b )	double t = d / ( a + b ) ;
print t * a	cout << t * a << endl ;
let a double	double a ;
let l , p , q doubles	double l , p , q ;
read l , p , and q	cin >> l >> p >> q ;
set a to l * p / ( p + q )	a = l * p / ( p + q ) ;
print a	cout << a << endl ;
declare floats l , p and q	float l , p , q ;
read input to l , p and q	cin >> l >> p >> q ;
print l / ( p + q ) * p	cout << l / ( p + q ) * p << endl ;
declare constant double PI with PI = acosign of - 1 . 0	const double PI = acos ( - 1.0 ) ;
declare fast_in_out with no arguments , returning void	void fast_in_out ( ) { }
declare pause with no arguments , returning void	void pause ( ) { }
run fast_in_out	fast_in_out ( ) ;
declare ar as integer array = { 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 }	int ar [ ] = { 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 } ;
declare integers n , b , q	int n , b , q ;
read n and b and q	cin >> n >> b >> q ;
declare integers x = 0 , y = n * q	int x = 0 , y = n * q ;
for i = 8 to 0 inclusive , decrementing i	for ( int i = 8 ; i >= 0 ; i -- )
if n is less than ar [ i ] , break current loop iteration	if ( n < ar [ i ] ) continue ;
declare integer k with k = ar [ i ]	int k = ar [ i ] ;
let n be n - k	n = n - k ;
increment n by k / 2	n += k / 2 ;
increment i	i ++ ;
let k = k * b + ( k / 2 )	k = k * b + ( k / 2 ) ;
increment x by k	x += k ;
print x , " " , y , ' \ n '	cout << x << "   " << y << ' \n ' ;
run pause	pause ( ) ;
create ints n , b , p , x = 0 , and y	int n , b , p , x = 0 , y ;
read n , b , and p	cin >> n >> b >> p ;
set b to 2 * b + 1	b = 2 * b + 1 ;
set y to n * p	y = n * p ;
while n is greater than 1	while ( n > 1 )
create integer k = 1	int k = 1 ;
while 2 * k is less than or equal to n , set k to k * 2	while ( 2 * k <= n ) k *= 2 ;
set x to x + b * k / 2	x += b * k / 2 ;
set n to n - k / 2	n -= k / 2 ;
print x , " " , and y	cout << x << "   " << y << ' \n ' ;
INF = const long long int with INF = ( 1LL bitshift left by 60 ) - 1	const long long int INF = ( 1LL << 60 ) - 1 ;
MAX = const long long int with MAX = 2000001	const long long int MAX = 2000001 ;
in function fast_exp taking three long long ints base , exp and m and returning a long long int	long long int fast_exp ( long long int base , long long int exp , long long int m )
res = long long int with res = 1	long long int res = 1 ;
loop while exp is greater than 0	while ( exp > 0 )
if exp is uneven set res to ( res * base ) mod m	if ( exp % 2 == 1 ) { res = ( res * base ) % m ; }
set base to ( base * base ) mod m	base = ( base * base ) % m ;
set exp to exp / 2	exp /= 2 ;
return res mod m	return res % m ;
n , b , p = int	int n , b , p ;
read n then b then p	cin >> n >> b >> p ;
bottle , towel = int with bottle = 0 and towel = 0	int bottle = 0 , towel = 0 ;
set towel to p * n	towel = p * n ;
loop while n is greater than 1	while ( n > 1 )
k = int with k = 1	int k = 1 ;
loop while k is less or equal to n set k to k * 2	while ( k <= n ) { k *= 2 ; }
set k to k / 2	k /= 2 ;
set n to ( n - k ) + k / 2	n = ( n - k ) + k / 2 ;
increment bottle by ( k / 2 ) * ( 2 * b + 1 )	bottle += ( k / 2 ) * ( 2 * b + 1 ) ;
print bottle and towel	cout << bottle << "   " << towel << endl ;
n , m , p = int	int n , m , p ;
read n , m , p	cin >> n >> m >> p ;
ans = 0	int ans = 0 ;
c = n	int c = n ;
while n is not 1	while ( n != 1 )
add n / 2 to ans	ans += n / 2 ;
subtract n / 2 from n	n -= n / 2 ;
print ans * ( m * 2 + 1 ) , space , c * p	cout << ans * ( m * 2 + 1 ) << "   " << c * p << endl ;
create const ints N = 1e6 + 5 , MAX = 3e7 and MOD = 1e9 + 7	const int N = 1e6 + 5 , MAX = 3e7 , MOD = 1e9 + 7 ;
declare ints n , p , b , x and y	int n , p , b , x , y ;
read n , p and b	cin >> n >> p >> b ;
set y to b * n	y = b * n ;
while n is not 0	while ( n )
if n / 2 is true	if ( n / 2 )
increase x by ( n - n % 2 ) * p + n / 2	x += ( ( n - n % 2 ) * p + n / 2 ) ;
else	else
break the loop	break ;
assign n / 2 + n % 2 to n	n = n / 2 + n % 2 ;
print x , " " , y and " \ n "	cout << x << "   " << y << " \n " ;
create integers m , b , p , total and total_p where total = 0	int m , b , p , total = 0 , total_p ;
read variables m , b and p from the input	cin >> m >> b >> p ;
assign m * p to total_p	total_p = m * p ;
start infinite loop	while ( 1 )
declare integer variable k = [ ] ( int n ) - > int	int k = [ ] ( int n ) -> int
declare ints i = 1 and res = pow ( 2 , 0 )	int i = 1 , res = pow ( 2 , 0 ) ;
looping infinitely	while ( 1 )
declare new integer variable temp = 2 in the power of i	int temp = pow ( 2 , i ) ;
if temp is greater than n , break	if ( temp > n ) break ;
set res to temp	res = temp ;
increment i by one	i ++ ;
return res	return res ;
( m )	( m ) ;
create integer variable with name matches and value = k / 2	int matches = k / 2 ;
change total to sum of total and matches * ( 2 * b )	total += matches * ( 2 * b ) ;
increase total by matches	total += matches ;
assign ( k / 2 ) + ( m - k ) to m	m = ( k / 2 ) + ( m - k ) ;
if matches = 0 , break the loop	if ( matches == 0 ) break ;
print total , " " and total_p	cout << total << "   " << total_p << endl ;
n , agua , toalha = int with toalha = 0	int n , agua , toalha = 0 ;
read n then agua then toalha	cin >> n >> agua >> toalha ;
nrod , tagua , ttoalha = int with ttoalha = 0	int nrod , tagua , ttoalha = 0 ;
set nrod to n - 1	nrod = n - 1 ;
set tagua to nrod + nrod * agua * 2	tagua = nrod + nrod * agua * 2 ;
set ttoalha to toalha * n	ttoalha = toalha * n ;
print tagua and ttoalha	cout << tagua << "   " << ttoalha << endl ;
let n , b , p be integers	int n , b , p ;
read n , b , p	cin >> n >> b >> p ;
let bottles , towels be integers with bottles = 0 , towels = n * p	int bottles = 0 , towels = n * p ;
while n is greater than 1	while ( n > 1 )
let matches be a integer with matches = ( 1 < < ( int ) log2 ( n ) ) / 2	int matches = ( 1 << ( int ) log2 ( n ) ) / 2 ;
increment bottles by matches * ( 2 * b + 1 )	bottles += matches * ( 2 * b + 1 ) ;
decrement n by matches	n -= matches ;
print bottles and space and towels and newline	cout << bottles << "   " << towels << endl ;
create ints n , b , and p	int n , b , p ;
read n , b , and p	cin >> n >> b >> p ;
set b to b * 2 + 1	b = b * 2 + 1 ;
create integer now = 1	int now = 1 ;
while now is less than or equal to n , shift the bits of now one place to the left	while ( now <= n ) { now <<= 1 ; }
shift the bits of now one place to the right	now >>= 1 ;
create int t = n	int t = n ;
let long long integer ans = 0	long long ans = 0 ;
while t is greater than 1	while ( t > 1 )
set ans to ans + 1LL * now / 2 * b	ans += 1LL * now / 2 * b ;
set t to t - now / 2	t -= now / 2 ;
while now is truthy and now > t is true , shift the bits of now one place to the right	while ( now && now > t ) { now >>= 1 ; }
print ans , " " , and n * p	cout << ans << "   " << n * p << endl ;
declare g taking in int n and returning integer	int g ( int n )
while _builtin_popcount ( n ) is greater than 1 , set n to n & ( n - 1 )	while ( __builtin_popcount ( n ) > 1 ) n = n & ( n - 1 ) ;
return n	return n ;
let ints n , b , p , r = 0 , and m	int n , b , p , r = 0 , m ;
read n , b , and p	cin >> n >> b >> p ;
set m to n	m = n ;
while n is greater than 1	while ( n > 1 )
create int x = g ( n )	int x = g ( n ) ;
set r to r + x * ( b )	r += x * ( b ) ;
set r to r + x / 2	r += x / 2 ;
set n to n - x / 2	n -= x / 2 ;
print r , " " , and p * m	cout << r << "   " << p * m << endl ;
create ints participants , bottles , and towels	int participants , bottles , towels ;
let ints total_b = 0 , total_t = 0 , and matches	int total_b = 0 , total_t = 0 , matches ;
read participants , bottles , and towels	cin >> participants >> bottles >> towels ;
set total_t to the result of participants * towels	total_t = participants * towels ;
while participants is not 1	while ( participants != 1 )
set matches to participants / 2	matches = participants / 2 ;
if participants modulo 2 is equal to 1	if ( participants % 2 == 1 )
set total_ b to total_b + ( participants - 1 ) * bottles + matches	total_b += ( participants - 1 ) * bottles + matches ;
set participants to participants / 2 + 1	participants = participants / 2 + 1 ;
otherwise do	else
set total_b to total_b + participants * bottles + matches	total_b += participants * bottles + matches ;
set participants to the result of participants / 2	participants = participants / 2 ;
print total_b , " " , and total_t	cout << total_b << "   " << total_t << endl ;
create map m1 from long long ints to long long ints	map < long long int , long long int > m1 ;
create map iterator itr from long long ints to long long ints	map < long long int , long long int > :: iterator itr ;
create long long int n , b , and p	long long int n , b , p ;
read n , b , and p	cin >> n >> b >> p ;
make long long int ans2 = n * p	long long int ans2 = n * p ;
make long long int ans1 = 0	long long int ans1 = 0 ;
while n is greater than 1	while ( n > 1 )
let long long int i	long long int i ;
for i = 0 , loop indefinitely	for ( i = 0 ; ; i ++ )
if pow ( 2 , i ) is greater than n , break loop	if ( pow ( 2 , i ) > n ) break ;
decrease i	i -- ;
create long long integer z = pow ( 2 , i )	long long int z = pow ( 2 , i ) ;
set ans1 to ans1 + ( z / 2 ) * ( 2 * b + 1 )	ans1 += ( z / 2 ) * ( 2 * b + 1 ) ;
set n to n - z / 2	n = n - z / 2 ;
print ans1 , " " , and ans2	cout << ans1 << "   " << ans2 << endl ;
N = int	int N ;
A = int	int A ;
T = int	int T ;
values = two dimensional int array of sizes 1001 and 1001	int values [ 1001 ] [ 1001 ] ;
pagamento = int array of size 1001	int pagamento [ 1001 ] ;
aguinha = int	int aguinha ;
in function strlen taking char array of size 1001 t and returning int	int strlen ( char t [ 1001 ] )
ret = int with ret = 0	int ret = 0 ;
loop while t [ ret ] is not ' \ 0 ' increment ret	while ( t [ ret ] != ' \0 ' ) { ret ++ ; }
return ret	return ret ;
in function maxfunc taking int t1 , int t2 and returning int	int maxfunc ( int t1 , int t2 )
ret = int with ret = t1	int ret = t1 ;
if t2 > t1 set ret to t2	if ( t2 > t1 ) { ret = t2 ; }
return ret	return ret ;
in function minfunc taking int t1 , int t2 and returning int	int minfunc ( int t1 , int t2 )
ret = int with ret = t1	int ret = t1 ;
if t2 < t1 set ret to t2	if ( t2 < t1 ) { ret = t2 ; }
return ret	return ret ;
in function epar taking int x and returning int	int epar ( int x )
ret = int with ret = 0	int ret = 0 ;
if x is even set ret to 1	if ( ( x % 2 ) == 0 ) { ret = 1 ; }
return ret	return ret ;
in function atoifunc taking char x and returning int	int atoifunc ( char x )
return x - ' 0 '	return x - ' 0 ' ;
result = int with result = =	int result = 0 ;
size = int	int size ;
set N to 0	N = 0 ;
N = int	int N ;
A = int	int A ;
T = int	int T ;
read N then A then T	cin >> N >> A >> T ;
set aguinha to A * 2 + 1	aguinha = A * 2 + 1 ;
njogos = int with njogos = 0	int njogos = 0 ;
resta = int with resta = N	int resta = N ;
loop while resta is not 1	while ( resta != 1 )
increment njogos by resta / 2	njogos += resta / 2 ;
if epar of resta	if ( epar ( resta ) )
set resta to resta / a	resta = ( resta / 2 ) ;
else	else
set resta to resta / 2 + 1	resta = ( resta / 2 ) + 1 ;
print njogos * aguinha and N * T	cout << njogos * aguinha << '   ' << N * T << endl ;
n , b , p = int	int n , b , p ;
read n then b then p	cin >> n >> b >> p ;
fp = int with fp = n * p	int fp = n * p ;
m = int with m = 0	int m = 0 ;
loop while n > 1	while ( n > 1 )
po = int with po = floor of log2 of n	int po = floor ( log2 ( n ) ) ;
compete = int with compete = pow of 2 , po	int compete = pow ( 2 , po ) ;
diff = int with diff = n - pow of 2 , po	int diff = n - pow ( 2 , po ) ;
increment m by compete / 2	m += compete / 2 ;
set n to compete / 2 + diff	n = compete / 2 + diff ;
fb = int with fb = m * 2 * b + m	int fb = m * 2 * b + m ;
print fb and fp	cout << fb << "   " << fp << endl ;
let n , b , p be integers	int n , b , p ;
read n , b , p	cin >> n >> b >> p ;
let ats1 , ats2 be integers with ats1 = 0 , ats2 = p * n	int ats1 = 0 , ats2 = p * n ;
while n is not equal to 1	while ( n != 1 )
let k be a integer with k = 1	int k = 1 ;
while 2 * k < = n , k is equal to k * 2	while ( 2 * k <= n ) k *= 2 ;
increment ats1 by k * b + k / 2	ats1 += k * b + k / 2 ;
decrement n by k / 2	n -= k / 2 ;
print ats1 and space and ats2 and newline	cout << ats1 << "   " << ats2 << " \n " ;
create integer variables p , b , t and x	int p , b , t , x ;
read input to p , b and t	cin >> p >> b >> t ;
create new integer match with value 0	int match = 0 ;
change x to p	x = p ;
while p ! = 1	while ( p != 1 )
change match to match + ( p / 2 )	match += ( p / 2 ) ;
set p to ( p / 2 ) + ( p % 2 )	p = ( p / 2 ) + ( p % 2 ) ;
print match + ( 2 * match * b ) , " " and x * t to the standard output	cout << match + ( 2 * match * b ) << "   " << x * t << endl ;
n , p , b = integers	int n , p , b ;
read n , p , b	cin >> n >> p >> b ;
print ( n - 1 ) * p * 2 + ( n - 1 )	cout << ( n - 1 ) * p * 2 + ( n - 1 ) << "   " ;
print b * n	cout << b * n << endl ;
in the function solve	void solve ( )
n , b , p = integers	int n , b , p ;
read n , b , p	cin >> n >> b >> p ;
br = integer with br = 0	int br = 0 ;
tr = integer with tr = n * p ;	int tr = n * p ;
while n > 1	while ( n > 1 )
x = integer with x = 1	int x = 1 ;
while 2 * x < n , x = x * 2	while ( 2 * x < n ) { x *= 2 ; }
br = br + x * ( 2 * b + 1	br += x * ( 2 * b + 1 ) ;
n = n - x	n -= x ;
print br , " " , tr	cout << br << "   " << tr << endl ;
call solve	solve ( ) ;
n , b , p , k , ptot , btot = int	int n , b , p , k , ptot , btot ;
read n then b then p	cin >> n >> b >> p ;
set ptot to p * n	ptot = p * n ;
set btot to 0	btot = 0 ;
loop while n is greater than 1	while ( n > 1 )
set k to 1 bitshift left by ( floor of log2 of n ) as int	k = 1 << ( ( int ) floor ( log2 ( n ) ) ) ;
decrement n by k / 2	n = n - ( k / 2 ) ;
increment btot by ( k * b ) + ( k / 2 )	btot += ( ( k * b ) + ( k / 2 ) ) ;
print btot and ptot	cout << btot << "   " << ptot << " \n " ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
if b is 0 , return a from function	if ( b == 0 ) return a ;
return result of gcd ( b , a % b )	return gcd ( b , a % b ) ;
declare long long lcm with long longs a , b as arguments	long long lcm ( long long a , long long b )
return a * b / gcd ( a , b ) from function	return a * b / gcd ( a , b ) ;
declare long long f with long longs n , b as arguments	long long f ( long long n , long long b )
if n is less than or equal to 1 , return 0	if ( n <= 1 ) return 0 ;
declare i as long long = 1	long long i = 1 ;
while i * 2 is less than or equal to n , let i be i * 2	while ( i * 2 <= n ) i *= 2 ;
return result of run f with ( n - i + i / 2 , b ) as arguments + i / 2 * ( 2 * b + 1 )	return f ( n - i + i / 2 , b ) + i / 2 * ( 2 * b + 1 ) ;
declare long longs n , b , p	long long n , b , p ;
read n read b read p	cin >> n >> b >> p ;
print result of run f ( n , b ) , print " " , n * p , newline	cout << f ( n , b ) << "   " << n * p << endl ;
n , b , p , m = int	int n , b , p , m ;
read n then b then p	cin >> n >> b >> p ;
set p to p * n	p = p * n ;
for m = 0 to n is greater or equal to 2 setting m to m + n / 2 and n to n / 2 + n mod 2	for ( m = 0 ; n >= 2 ; m = m + n / 2 , n = n / 2 + n % 2 )
noop	;
print ( b * 2 + 1 ) * m and p	cout << ( b * 2 + 1 ) * m << "   " << p << endl ;
declare integer array p2 = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 }	int p2 [ ] = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 } ;
declare integers n , b , p , k , m	int n , b , p , k , m ;
declare integer bn = 0	int bn = 0 ;
read n , b , p	cin >> n >> b >> p ;
let m be n	m = n ;
while m is greater than 1	while ( m > 1 )
for k = 8 to 0 inclusive , decrementing k	for ( k = 8 ; k >= 0 ; k -- )
if p2 [ k ] is less than or equal to m	if ( p2 [ k ] <= m )
increment bn by p2 [ k ] / 2 + p2 [ k ] * b	bn += p2 [ k ] / 2 + p2 [ k ] * b ;
end loop	break ;
let m be p2 [ k ] / 2 + ( m - p2 [ k ] )	m = p2 [ k ] / 2 + ( m - p2 [ k ] ) ;
print bn and " " and n * p and newline	cout << bn << "   " << n * p << endl ;
declare new integer water	int water ;
create integers s , n , b and p	int s , n , b , p ;
read from the input to n , b and p	cin >> n >> b >> p ;
declare new integer called k = n	int k = n ;
set water to 0	water = 0 ;
while n is not 1	while ( n != 1 )
change s to n / 2	s = n / 2 ;
if n is even	if ( n % 2 == 0 )
set n to n divided by 2	n /= 2 ;
else	else
change n to n / 2 + 1	n = n / 2 + 1 ;
change water to sum of water and s * ( 2 * b + 1 )	water += s * ( 2 * b + 1 ) ;
print water , " " and k * p to the standard output	cout << water << "   " << k * p << endl ;
function read ( no args , return long long )	inline long long read ( )
c = getchar ( )	char c = getchar ( ) ;
while c is not ' - ' and ( c < ' 0 ' or c > ' 9 ' ) c = getchar ( )	while ( c != ' - ' && ( c < ' 0 ' || c > ' 9 ' ) ) c = getchar ( ) ;
k = 0 , kk = 1	long long k = 0 , kk = 1 ;
if c is ' - ' c = getchar ( ) , kk = - 1	if ( c == ' - ' ) c = getchar ( ) , kk = - 1 ;
while c > = ' 0 ' and c < = ' 9 ' k = k * 10 + c - ' 0 ' , c = getchar ( )	while ( c >= ' 0 ' && c <= ' 9 ' ) k = k * 10 + c - ' 0 ' , c = getchar ( ) ;
return kk * k	return kk * k ;
function write ( get long long x , return nothing )	void write ( long long x )
if x < 0 x = - x , putchar ( ' - ' )	if ( x < 0 ) x = - x , putchar ( ' - ' ) ;
if x / 10 write ( w / 10 )	if ( x / 10 ) write ( x / 10 ) ;
putchar ( x modulo 10 + ' 0 ' )	putchar ( x % 10 + ' 0 ' ) ;
function writlne ( get long long x , return nothing )	void writeln ( long long x )
write ( x )	write ( x ) ;
puts ( " " )	puts ( "  " ) ;
n , b , p = long long	long long n , b , p ;
n = read ( )	n = read ( ) ;
b = read ( )	b = read ( ) ;
p = read ( )	p = read ( ) ;
write ( ( b + b + 1 ) * ( n - 1 ) )	write ( ( b + b + 1 ) * ( n - 1 ) ) ;
putchar ( ' ' )	putchar ( '   ' ) ;
writeln ( p * n )	writeln ( p * n ) ;
in function solve that returns nothing	void solve ( ) ;
in function speed_up that returns nothing	void speed_up ( ) { }
call speed_up	speed_up ( ) ;
call solve	solve ( ) ;
in function solve that returns nothing	void solve ( )
n , b , p = long long	long long n , b , p ;
read n , b , p	cin >> n >> b >> p ;
y = long long = n * p	long long y = n * p ;
sor = long long = 0	long long sor = 0 ;
while n > 1	while ( n > 1 )
st = long long = 2	long long st = 2 ;
while st * 2 < = n , then st = st * 2	while ( st * 2 <= n ) st *= 2 ;
sor = sor + ( st / 2 ) * ( b * 2 + 1 )	sor += ( st / 2 ) * ( b * 2 + 1 ) ;
n = n - st / 2	n -= st / 2 ;
print sor y	cout << sor << "   " << y << " \n " ;
declare ints n , b and p	int n , b , p ;
read variables n , b and p from the input	cin >> n >> b >> p ;
create ints bowl = 0 and towl = n * p	int bowl = 0 , towl = n * p ;
while n > 1	while ( n > 1 )
new integer k = pow ( 2 , ( log ( n ) / log ( 2 ) ) )	int k = pow ( 2 , ( int ) ( log ( n ) / log ( 2 ) ) ) ;
increase bowl by k / 2 * ( 2 * b + 1 )	bowl += k / 2 * ( 2 * b + 1 ) ;
change n to n - k / 2	n -= k / 2 ;
print bowl , ' ' and towl to the standard output	cout << bowl << '   ' << towl << endl ;
declare new integers n , agua and toalha with toalha = 0	int n , agua , toalha = 0 ;
read user input to n , agua and toalha	cin >> n >> agua >> toalha ;
declare integers nrod , tagua and ttoalha with ttoalha = 0	int nrod , tagua , ttoalha = 0 ;
assign n - 1 to nrod	nrod = n - 1 ;
change tagua to nrod + nrod * agua * 2	tagua = nrod + nrod * agua * 2 ;
assign toalha * n to ttoalha	ttoalha = toalha * n ;
print tagua , " " and ttoalha	cout << tagua << "   " << ttoalha << endl ;
n , b , p = int	int n , b , p ;
read n then b then p	cin >> n >> b >> p ;
bottles = int with bottles = 0	int bottles = 0 ;
towels = int with towels = n * p	int towels = n * p ;
loop while n is greater than 1	while ( n > 1 )
k = int with k = 0	int k = 0 ;
for i = 32 - 1 to 0 inclusive decrementing i	for ( int i = 32 - 1 ; i >= 0 ; i -- )
if n bitwise - and ( 1 bitshift left by i ) is 1	if ( n & ( 1 << i ) )
set k to 1 bitshift left by i	k = ( 1 << i ) ;
break	break ;
set n to ( n - k ) + k / 2	n = ( n - k ) + k / 2 ;
increment bottles by b * k + k / 2	bottles += b * k + k / 2 ;
print bottles and towels	cout << bottles << "   " << towels << " \n " ;
let m , b , p , total , total_p be integers with total = 0	int m , b , p , total = 0 , total_p ;
read m , b , p	cin >> m >> b >> p ;
the value of total_p = m * p	total_p = m * p ;
while 1 is an infinite loop since condition is always true	while ( 1 )
le k be a integer with k = [ ] ( int n ) - > int	int k = [ ] ( int n ) -> int
let i , res be integers with i = 1 , res = 2 ^ 0	int i = 1 , res = pow ( 2 , 0 ) ;
while 1 is an infinite loop since condition is always true	while ( 1 )
let temp be a integer with temp = 2 ^ i	int temp = pow ( 2 , i ) ;
if temp is greater than n , stop	if ( temp > n ) break ;
the value of res = temp	res = temp ;
increment i by 1	i ++ ;
return the value of res	return res ;
m	( m ) ;
let matches be a integer with matches = k / 2	int matches = k / 2 ;
increment total by matches * ( 2 * b )	total += matches * ( 2 * b ) ;
increment total by matches	total += matches ;
the value of m = ( k / 2 ) + ( m - k )	m = ( k / 2 ) + ( m - k ) ;
if matches is equal to 0 , stop	if ( matches == 0 ) break ;
print total and space and total_p and newline	cout << total << "   " << total_p << endl ;
i , b , p , j , n , m , k = int	int i , b , p , j , n , m , k ;
read n , b , p	cin >> n >> b >> p ;
print ( 2 * b + 1 ) * ( n - 1 ) and space and n * p	cout << ( 2 * b + 1 ) * ( n - 1 ) << "   " << n * p << endl ;
declare new long longs n , b and p	long long n , b , p ;
read variables n , b and p from the input	cin >> n >> b >> p ;
B is a new long long = 0	long long B = 0 ;
declare new long long called T = n * p	long long T = n * p ;
while n > 1	while ( n > 1 )
create long long variable with name now = 1	long long now = 1 ;
while now * 2 < = n	while ( now * 2 <= n ) now *= 2 ;
change B to B + ( now / 2 ) * ( 2 * b + 1 )	B += ( now / 2 ) * ( 2 * b + 1 ) ;
set n to now / 2 + ( n - now )	n = now / 2 + ( n - now ) ;
print B , " " and T	cout << B << "   " << T << endl ;
declare new integers N , B and P	int N , B , P ;
read from the input to N , B and P	cin >> N >> B >> P ;
Ile is a new integer variable with value 0	int Ile = 0 ;
create new integer variable Reczniki with value N * P	int Reczniki = N * P ;
while N > 1	while ( N > 1 )
declare integer variable Potega with value 1	int Potega = 1 ;
while Potega * 2 < = N	while ( Potega * 2 <= N ) { Potega *= 2 ; }
declare new integer IleMeczy = Potega / 2	int IleMeczy = Potega / 2 ;
add IleMeczy * 2 * B + IleMeczy to Ile	Ile += IleMeczy * 2 * B + IleMeczy ;
change N to ( N - Potega ) + IleMeczy	N = ( N - Potega ) + IleMeczy ;
print Ile , " " , Reczniki and " \ n "	cout << Ile << "   " << Reczniki << " \n " ;
create int n , b , p	int n , b , p ;
read n , b , p	cin >> n >> b >> p ;
print ( n - 1 ) * ( 2 * b + 1 ) , " " , n * p and a newline	cout << ( n - 1 ) * ( 2 * b + 1 ) << "   " << n * p << " \n " ;
P = array of 9 int filled with 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256	int P [ 9 ] = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 } ;
n , b , p = int	int n , b , p ;
read n , b , p	cin >> n >> b >> p ;
B = 0	int B = 0 ;
N = n	int N = n ;
while n > 1	while ( n > 1 )
k = int	int k ;
for i = 8 down to - 1 exclusive	for ( int i = 8 ; i > - 1 ; i -- )
if P [ i ] < = n	if ( P [ i ] <= n )
k = P [ i ]	k = P [ i ] ;
break	break ;
add k * ( 2 * b + 1 ) / 2 to B	B += k * ( 2 * b + 1 ) / 2 ;
subtract k / 2 from n	n -= k / 2 ;
print B , space , N * p	cout << B << "   " << N * p << endl ;
declare fast with no arguments , returning void	void fast ( ) { }
declare mn = 1e9 as long long	long long mn = 1e9 ;
declare lucky with long longs a , c , integer b as arguments , returning void	void lucky ( long long a , long long c , int b )
if a is greater than 1e11 , return from function	if ( a > 1e11 ) return ;
if a is greater than or equal to b and c is 0 , let mn be minimum of mn and a	if ( a >= b && c == 0 ) mn = min ( mn , a ) ;
run lucky with a * 10 + 7 , c - 1 , b as arguments	lucky ( a * 10 + 7 , c - 1 , b ) ;
run lucky with a * 10 + 4 , c + 1 , b as arguments	lucky ( a * 10 + 4 , c + 1 , b ) ;
declare integer n	int n ;
declare fff with string s , integer c as arguments , returning void	void fff ( string s , int c )
if size of s is 2 * n	if ( s . size ( ) == 2 * n )
if c is 0 , print s and newline	if ( c == 0 ) cout << s << endl ;
return from function	return ;
run fff with s + " ( " , c + 1 as arguments	fff ( s + " ( " , c + 1 ) ;
if c is greater than 0 , run fff with s + " ) " , c - 1 as arguments	if ( c > 0 ) fff ( s + " ) " , c - 1 ) ;
declare toint with string s as argument , returning long long	long long toint ( string s )
declare a = 0 , c = 1 as long longs	long long a = 0 , c = 1 ;
end statement	;
for i = 0 to size of s exclusive	for ( int i = 0 ; i < s . size ( ) ; i ++ )
increment a by ( s [ size of s - i - 1 ] - ' 0 ' ) * c	a += ( s [ s . size ( ) - i - 1 ] - ' 0 ' ) * c ;
let c be c * 10	c *= 10 ;
return a from function	return a ;
run fast	fast ( ) ;
declare a , b = 0 , c = 0 , d = 1 , sum = 0 , x = 0 as long longs	long long a , b = 0 , c = 0 , d = 1 , sum = 0 , x = 0 ;
declare strings s , ss = " "	string s , ss = "  " ;
read a , b , c	cin >> a >> b >> c ;
let d be a	d = a ;
while a is greater than 1	while ( a > 1 )
let x be a / 2	x = a / 2 ;
decrement a by x	a -= x ;
while decrement x is ture , increment sum by ( ( 2 * b ) + 1 )	while ( x -- ) sum += ( ( 2 * b ) + 1 ) ;
print sum and " " and d * c and " \ n "	cout << sum << "   " << d * c << " \n " ;
n , b , p = long long int	long long int n , b , p ;
read n , b , p	cin >> n >> b >> p ;
bByGame = long long integer with bByGame = b * 2 + 1	long long int bByGame = b * 2 + 1 ;
towels = long long integer with towels = p * n	long long int towels = p * n ;
bottles = long long integer with bottles = 0	long long int bottles = 0 ;
while n > 1	while ( n > 1 )
num = long long integer with num = log2 ( n )	long long int num = log2 ( n ) ;
bottles = bottles + num * bByGame	bottles += num * bByGame ;
n = n - num	n -= num ;
print bottles , " " , towels	cout << bottles << "   " << towels << endl ;
function min with int arguments a and b that returns integer	int min ( int a , int b )
return a if a < b , or b otherwise	return a < b ? a : b ;
max is an integer function with int arguments a and b	int max ( int a , int b )
return a if a > b , or b otherwise	return a > b ? a : b ;
declare integer variables n , b , p and matches with the value of matches = 0	int n , b , p , matches = 0 ;
create integer variable with name x = 256	int x = 256 ;
read n , b and p	cin >> n >> b >> p ;
declare integer N with value n	int N = n ;
while n ! = 1	while ( n != 1 )
if x is greater than n	if ( x > n )
change the value of x to x divided by 2	x /= 2 ;
skip the rest of the loop	continue ;
subtract x / 2 from n	n -= x / 2 ;
add x / 2 to matches	matches += x / 2 ;
print matches * ( 1 + 2 * b ) , " " and N * p to the standard output	cout << matches * ( 1 + 2 * b ) << "   " << N * p << endl ;
n , b , p = long long	long long n , b , p ;
read n then b then p	cin >> n >> b >> p ;
s1 , s2 = long long with s1 = 0LL and s2 = p * n	long long s1 = 0LL , s2 = p * n ;
loop while n > 1	while ( n > 1 )
k = long long with k = 1	long long k = 1 ;
loop while k < n set k to k * 2	while ( k < n ) k *= 2 ;
if k > n set k to k / 2	if ( k > n ) k /= 2 ;
increment s1 by ( k / 2 ) * ( 2 * b + 1 )	s1 += ( k / 2 ) * ( 2 * b + 1 ) ;
m = long long with m = n - k	long long m = n - k ;
l = long long with l = k / 2	long long l = k / 2 ;
set n to l + m	n = l + m ;
print s1 and s2	cout << s1 << "   " << s2 << ' \n ' ;
create new constant integer maxn with value 1e6 + 5	const int maxn = 1e6 + 5 ;
create constant integer variable mod = 1e9 + 7	const int mod = 1e9 + 7 ;
create long long arrays fac and y with size maxn	long long fac [ maxn ] , y [ maxn ] ;
declare long long variables n and k	long long n , k ;
long long function qpow with long long arguments a , b and c	long long qpow ( long long a , long long b , long long c )
declare long long variable with name ans with value 1	long long ans = 1 ;
change a to the remainder of a divided by c	a %= c ;
change b to b modulo c	b %= c ;
while b > 0	while ( b > 0 )
if b is even , set ans to ( ans * a ) modulo c	if ( b % 2 == 1 ) ans = ( ans * a ) % c ;
change b to b / 2	b = b / 2 ;
change a to a squared modulo c	a = ( a * a ) % c ;
return ans	return ans ;
integer function pow_2 with integer argument m	int pow_2 ( int m )
create new integer called res with value 1	int res = 1 ;
declare new integer variable left = 1	int left = 1 ;
looping infinitely	while ( true )
if res < < left < = m and res < < ( left + 1 ) > m , return res	if ( res << left <= m && res << ( left + 1 ) > m ) return res << left ;
increment left	left ++ ;
create ints n , b and p	int n , b , p ;
declare new integer called ans with value 0	int ans = 0 ;
read standard input to n , b and p	cin >> n >> b >> p ;
declare integer tow with value n * p	int tow = n * p ;
declare new integer called left with value 0	int left = 0 ;
while n > 1	while ( n > 1 )
create integer k with value pow_2 of n	int k = pow_2 ( n ) ;
set left to n - k	left = n - k ;
add b * k + k / 2 to ans	ans += b * k + k / 2 ;
change n to k / 2 + left	n = k / 2 + left ;
print ans , ' ' , tow and ' \ n ' to standard output	cout << ans << '   ' << tow << ' \n ' ;
let participants , bottles , towels be integers	int participants , bottles , towels ;
let total_b , total_t , matches be integers with total_b = 0 , total_t = 0	int total_b = 0 , total_t = 0 , matches ;
read participants , bottles , towels	cin >> participants >> bottles >> towels ;
the value of total_t = participants * towels	total_t = participants * towels ;
while participants is not equal to 1	while ( participants != 1 )
the value of matches = participants / 2	matches = participants / 2 ;
if participants modulo 2 is equal to 1	if ( participants % 2 == 1 )
total_b is equal to total_b + ( participants - 1 ) * bottles + matches	total_b += ( participants - 1 ) * bottles + matches ;
the value of participants = participants / 2 + 1	participants = participants / 2 + 1 ;
else do the following	else
total_b is equal to total_b + participants * bottles + matches	total_b += participants * bottles + matches ;
the value of participants = participants / 2	participants = participants / 2 ;
print total_b and space and total_t and newline	cout << total_b << "   " << total_t << endl ;
n , b , p = int	int n , b , p ;
read n then b then p	cin >> n >> b >> p ;
print ( n - 1 ) * ( b * 2 + 1 ) and p * n	cout << ( n - 1 ) * ( b * 2 + 1 ) << "   " << p * n << ' \n ' ;
N , B , P = int	int N , B , P ;
qplays = int	int qplays ;
qplayers = int	int qplayers ;
qoutplayers = int	int qoutplayers ;
tplays = int	int tplays ;
tplayers = int	int tplayers ;
in function calc taking int n	void calc ( int n )
k = int with k = 1	int k = 1 ;
loop while k < n set k to k bithsift left by 1	while ( k < n ) k <<= 1 ;
if k > n set k to k bitshift right by 1	if ( k > n ) k >>= 1 ;
set qplays to k - 1	qplays = k - 1 ;
set qoutplayers to n - k	qoutplayers = n - k ;
set qplayers to 0	qplayers = 0 ;
loop while k > = 1	while ( k >= 1 )
increment qplayers by k	qplayers += k ;
set k to k bitshift right by 1	k >>= 1 ;
decrement qplayers	-- qplayers ;
read N then B then P	cin >> N >> B >> P ;
set tplays to 0	tplays = 0 ;
set tplayers to 0	tplayers = 0 ;
set qoutplayers to 0	qoutplayers = 0 ;
n = int with n = N	int n = N ;
do	do
call calc of n	calc ( n ) ;
increment tplayers by qplayers	tplayers += qplayers ;
increment tplays by qplays	tplays += qplays ;
set n to 1 + qoutplayers	n = 1 + qoutplayers ;
while qoutplayers > 0	while ( qoutplayers > 0 ) ;
print ( ( tplayers * B ) + tplays ) and N * P	cout << ( ( tplayers * B ) + tplays ) << "   " << ( N * P ) << " \n " ;
n , b , p , x , ans = long long	long long n , b , p , x , ans ;
l = bool with l = true	bool l = true ;
read n , b , p	cin >> n >> b >> p ;
x = n	x = n ;
while n > 1	while ( n > 1 )
ans = ans + ( n / 2 ) * ( b * 2 + 1 )	ans += ( n / 2 ) * ( b * 2 + 1 ) ;
n = ceil ( n / 2 . 0 )	n = ceil ( n / 2.0 ) ;
print ans , " " , x * p	cout << ans << "   " << x * p << endl ;
create integers n , m , p	int n , m , p ;
get n , m , p	cin >> n >> m >> p ;
create integer ans with ans = 0	int ans = 0 ;
create integer c with c = n	int c = n ;
while n not equal to 1 do the following	while ( n != 1 )
add n / 2 to ans	ans += n / 2 ;
subtract n / 2 from n	n -= n / 2 ;
compute and print two expressions ans * ( m * 2 + 1 ) and c * p with a blank space between	cout << ans * ( m * 2 + 1 ) << "   " << c * p << endl ;
p2 = int array with the values 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256	int p2 [ ] = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 } ;
n , b , p , k , m = int	int n , b , p , k , m ;
bn = int with bn = 0	int bn = 0 ;
read n then b then p	cin >> n >> b >> p ;
set m to n	m = n ;
loop while m is greater than 1	while ( m > 1 )
for k = 8 to 0 inclusive decrementing k	for ( k = 8 ; k >= 0 ; k -- )
if p2 [ k ] is less or equal to m	if ( p2 [ k ] <= m )
increment bn by p2 [ k ] / 2 + p2 [ k ] * b	bn += p2 [ k ] / 2 + p2 [ k ] * b ;
break	break ;
set m to p2 [ k ] / 2 + ( m - p2 [ k ] )	m = p2 [ k ] / 2 + ( m - p2 [ k ] ) ;
print bn and n * p	cout << bn << "   " << n * p << endl ;
n , p = int	int n , p ;
str = string array of size 45	string str [ 45 ] ;
sum , now = long long	long long sum , now ;
read n then p	cin >> n >> p ;
set sum and now to 0	sum = 0 , now = 0 ;
for i = n - 1 to 0 inclusive decrementing i read str [ i ]	for ( int i = n - 1 ; i >= 0 ; i -- ) cin >> str [ i ] ;
for i = 0 to n - 1 inclusive	for ( int i = 0 ; i <= n - 1 ; i ++ )
if str [ i ] is " half "	if ( str [ i ] == " half " )
increment sum by now * p	sum += now * p ;
set now to now * 2	now = now * 2 ;
else	else
increment sum by now * p + p / 2	sum += now * p + p / 2 ;
set now to now * 2 + 1	now = now * 2 + 1 ;
print sum	cout << sum << endl ;
create long longs n , p	long long n , p ;
read n read p	cin >> n >> p ;
create string array str with size n	string str [ n ] ;
create long long i	long long i ;
create long longs ans , fans with fans = 0	long long ans , fans = 0 ;
for i = 0 to n exclusive , read str [ i ]	for ( i = 0 ; i < n ; i ++ ) cin >> str [ i ] ;
reverse sort elements from str to str + n	reverse ( str , str + n ) ;
if str [ 0 ] is " half "	if ( str [ 0 ] == " half " )
set ans to 2	ans = 2 ;
else	else
set ans to 1	ans = 1 ;
increment fans by ans * p / 2	fans += ans * p / 2 ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
if str [ i ] is " half "	if ( str [ i ] == " half " )
set ans to ans * 2	ans *= 2 ;
else	else
set ans to ans * 2 + 1	ans = ans * 2 + 1 ;
increment fans by ans * p / 2	fans += ans * p / 2 ;
print fans print newline	cout << fans << endl ;
declare solve	void solve ( )
create ints n and p	int n , p ;
read n and p	cin >> n >> p ;
let long double ans = 0	long double ans = 0 ;
let int cnt = 0	int cnt = 0 ;
create string vector v	vector < string > v ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let string s	string s ;
read s	cin >> s ;
append s to vector v	v . push_back ( s ) ;
reverse order of contents of vector v	reverse ( v . begin ( ) , v . end ( ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if v [ i ] is equal to " halfplus "	if ( v [ i ] == " halfplus " )
set ans to ans + 0 . 5	ans += 0.5 ;
set ans to ans * 2	ans *= 2 ;
increment cnt	cnt ++ ;
otherwise do :	else
set ans to ans * 2	ans *= 2 ;
print the result of ( long long ) ( ans ) * p - cnt * ( p / 2 )	cout << ( long long ) ( ans ) * p - cnt * ( p / 2 ) << endl ;
call solve ( )	solve ( ) ;
str = string array of size 41	string str [ 41 ] ;
n , p , i , flag = int with flag = 0	int n , p , i , flag = 0 ;
a = long long with a = 0	long long a = 0 ;
read n then p	cin >> n >> p ;
for i = 1 to n inclusive read str [ i ]	for ( i = 1 ; i <= n ; i ++ ) { cin >> str [ i ] ; }
if str [ i - 1 ] is " halfplus "	if ( str [ i - 1 ] == " halfplus " )
increment a by p / 2	a += p / 2 ;
increment flag	flag ++ ;
for j = i - 2 to 0 decrementing j	for ( int j = i - 2 ; j > 0 ; j -- )
if str [ j ] is " halfplus "	if ( str [ j ] == " halfplus " )
set a to a + ( a + flag * p / 2 + p / 2 )	a = a + ( a + flag * p / 2 + p / 2 ) ;
increment flag	flag ++ ;
if str [ j ] is " half " increment a by a + flag * p / 2	if ( str [ j ] == " half " ) { a = a + ( a + flag * p / 2 ) ; }
print a	cout << a << endl ;
op = array of strings 444	string op [ 444 ] ;
let n , p be long integers	long long n , p ;
read n and p	cin >> n >> p ;
the value of p = p / 2	p /= 2 ;
for i = 1 to n inclusive , read op [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> op [ i ] ; }
let ans , send be long integers with ans = 0 , send = 0	long long ans = 0 , send = 0 ;
for i is equal to n , i > = 1 , decrement i by 1	for ( int i = n ; i >= 1 ; i -- )
send = send * 2	send *= 2 ;
if op [ i ] is equal to halfplus , increment send by 1	if ( op [ i ] == " halfplus " ) { send ++ ; }
increment ans by send	ans += send ;
print ans * p and newline	cout << ans * p << endl ;
in the function GCD that takes integer a , b	int GCD ( int a , int b )
if a < b , swap a and b	if ( a < b ) swap ( a , b ) ;
a = a modulo b	a %= b ;
if a is 0	if ( a == 0 )
return b	return b ;
else	else
return GCD of a and b	return GCD ( a , b ) ;
INF = const integer with INF = 1000000000	const int INF = 1000000000 ;
INF64 = const long long with INF64 = 1e18 ;	const long long INF64 = 1e18 ;
N = const integer with N = 2020	const int N = 2020 ;
M = const integer with M = 2000	const int M = 2000 ;
MOD = const integer with MOD = 1000000007	const int MOD = 1000000007 ;
n , p = long long	long long n , p ;
read n , p	cin >> n >> p ;
a = vector of integer with a = n	vector < int > a ( n ) ;
for i = 0 to cast to int ( n )	for ( int i = 0 ; i < int ( n ) ; i ++ )
s = string	string s ;
read s	cin >> s ;
if s is half	if ( s == " half " )
a [ i ] = 0	a [ i ] = 0 ;
else	else
a [ i ] = 1	a [ i ] = 1 ;
k = long long with k = 0	long long k = 0 ;
half = long long with half = 0	long long half = 0 ;
for i = n - 1 down to 0	for ( int i = n - 1 ; i >= 0 ; i -- )
k = k * 2 + a [ i ]	k = k * 2 + a [ i ] ;
half = half + a [ i ]	half += a [ i ] ;
res = long long with res = k * p - half * ( p / 2 )	long long res = k * p - half * ( p / 2 ) ;
print res	cout << res << endl ;
set maxn to 5005	const int maxn = 5005 ;
assign 0x3f3f3f3f to inf	const int inf = 0x3f3f3f3f ;
create int a and b	int a , b ;
read a , b	cin >> a >> b ;
create string s of size 50	string s [ 50 ] ;
for i = 1 to a inclusive , read s [ i ]	for ( int i = 1 ; i <= a ; i ++ ) { cin >> s [ i ] ; }
set ans to b / 2 and num to 1	long long ans = b / 2 , num = 1 ;
for i = a - 1 to 1 inclusive	for ( int i = a - 1 ; i >= 1 ; i -- )
if s [ i ] = halfplus	if ( s [ i ] == " halfplus " )
set ans to ans + ( num + 0 . 5 ) * b	ans += ( num + 0.5 ) * b ;
assign num * 2 + 1 to num	num = num * 2 + 1 ;
else	else
set ans to ans + bum * b	ans += num * b ;
num = num * 2	num *= 2 ;
print ans	cout << ans << endl ;
create string array s with size 2525	string s [ 2525 ] ;
create long longs n , p , m , l , with m = 0 , l = 0	long long n , p , m = 0 , l = 0 ;
read n read p	cin >> n >> p ;
for i = 1 to n inclusive , read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
for i = n to 1 inclusive , decrementing i	for ( int i = n ; i >= 1 ; i -- )
set m to m * 2	m *= 2 ;
if s [ i ] is " halfplus " increment m	if ( s [ i ] == " halfplus " ) m ++ ;
increment l by m	l += m ;
print l * p / 2 print newline	cout << l * p / 2 << endl ;
declare integers n , p and halfs where halfs = 0	int n , p , halfs = 0 ;
create long long current = 0	long long current = 0 ;
read n and p from the user input	cin >> n >> p ;
create new stack of strings s	stack < string > s ;
create string variable temp	string temp ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read standard input to temp	cin >> temp ;
push temp to the stack s	s . push ( temp ) ;
if temp is equal to " halfplus " , increment halfs	if ( temp == " halfplus " ) halfs ++ ;
if top element of s is equal to " halfplus "	if ( s . top ( ) == " halfplus " )
assign 1 to current	current = 1 ;
remove top element from s	s . pop ( ) ;
loop while s is not empty	while ( ! s . empty ( ) )
change the value of current to current multiplied by 2	current *= 2 ;
if value of the top element of s is " halfplus " , increment current by one	if ( s . top ( ) == " halfplus " ) current ++ ;
remove top element from s	s . pop ( ) ;
change current to current * p - ( 0 . 5 * p * halfs )	current = current * p - ( 0.5 * p * halfs ) ;
print current	cout << current << endl ;
let ret an array of long longs of length 50	long long ret [ 50 ] ;
let n , p ints	int n , p ;
read n and p	cin >> n >> p ;
let ans , temp be long longs with ans = 1 , tmp = 0	long long ans = 1 , tmp = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
let s a string	string s ;
read s	cin >> s ;
if s is half	if ( s == " half " )
set ret [ i ] to 1	ret [ i ] = 1 ;
otherwise	else
set ret [ i ] to 2 and increment tmp	ret [ i ] = 2 , tmp ++ ;
for i = n - 2 down to 0 inclusive	for ( int i = n - 2 ; i >= 0 ; i -- )
if ret [ i ] is 1	if ( ret [ i ] == 1 )
multiply ans by 2	ans = ans * 2 ;
otherwise	else
set ans to ans * 2 + 1	ans = ans * 2 + 1 ;
set ans to ans * p - tmp * ( p / 2 )	ans = ans * p - tmp * ( p / 2 ) ;
print ans	cout << ans << endl ;
create long long ints n , p , count = 0 , and y = 0	long long n , p , count = 0 , y = 0 ;
let string x	string x ;
read n and p	cin >> n >> p ;
make string vector a	vector < string > a ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
append x to vector a	a . push_back ( x ) ;
for i = n - 1 to 0	for ( int i = n - 1 ; i >= 0 ; i -- )
if a [ i ] is equal to " halfplus "	if ( a [ i ] == " halfplus " )
set count to count * 2 + 1	count = count * 2 + 1 ;
increment y	y ++ ;
if a [ i ] is equal to " half " , set count to 2 * count	if ( a [ i ] == " half " ) { count = 2 * count ; }
let long long int ans = p * count - ( p * y ) / 2	long long ans = p * count - ( p * y ) / 2 ;
print ans	cout << ans << endl ;
declare long longs p , he and shu	long long p , he , shu ;
declare integer n	int n ;
declare an array of strings s with 50 elements	string s [ 50 ] ;
read input to n and p	cin >> n >> p ;
divide p by 2	p /= 2 ;
for i = 1 to n inclusive , read s [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
for integer i = n to 1 inclusive counting down	for ( int i = n ; i >= 1 ; i -- )
set shu to shu * 2	shu = shu * 2 ;
if s [ i ] ! = " half " , increase shu by 1	if ( s [ i ] != " half " ) shu += 1 ;
add shu to he	he += shu ;
print he * p	cout << he * p << endl ;
set N to 1e6 + 5 , MAX to 3e7 and MOD = 1e9 + 7	const int N = 1e6 + 5 , MAX = 3e7 , MOD = 1e9 + 7 ;
create int n and p	int n , p ;
create string a [ N ]	string a [ N ] ;
let ans be ans ans	long long ans ;
read n and p	cin >> n >> p ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
curr = 0	long long curr = 0 ;
for i = n - 1 to 0 inclusive	for ( int i = n - 1 ; i >= 0 ; i -- )
if a [ i ] = half	if ( a [ i ] == " half " )
set ans to ans + curr * p	ans += curr * p ;
assign curr * 2 to curr	curr *= 2 ;
else	else
assign ans + curr * p to ans	ans += curr * p ;
set ans to ans + p / 2	ans += p / 2 ;
set curr = curr * 2	curr *= 2 ;
increment curr	curr ++ ;
print ans and a newline	cout << ans << " \n " ;
let n and p be long long integers	long long int n , p ;
read n and p	cin >> n >> p ;
let cost be a long long in with value 0	long long int cost = 0 ;
arr with n elements = string	string arr [ n ] ;
read i long long elements into arr from 0 to n exclusive	for ( long long int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
let num = long long int with value 0	long long int num = 0 ;
for i from n - 1 to 0 inclusive decreasing	for ( long long int i = n - 1 ; i >= 0 ; i -- )
if arr at element i equals halfplus	if ( arr [ i ] == " halfplus " )
num equals num times 2 plus 1	num = ( num * 2 ) + 1 ;
else	else
num equals itself times 2	num = ( num * 2 ) ;
for i from 0 to n exclusive	for ( long long int i = 0 ; i < n ; i ++ )
if arr at i equals halfplus	if ( arr [ i ] == " halfplus " )
cost equals cost plus ( num / 2 ) * p + ( p / 2 )	cost += ( num / 2 ) * p + ( p / 2 ) ;
num equals num minus half of num minus 1	num = num - ( num / 2 ) - 1 ;
else	else
cost equals cost plus ( num / 2 ) * p	cost += ( num / 2 ) * p ;
num equals num minus half of num	num = num - ( num / 2 ) ;
print cost	cout << cost << endl ;
create constant long long mod with mod = 1e9 + 7	const long long mod = 1e9 + 7 ;
create constant double esp with esp = 1e - 5	const double esp = 1e-5 ;
create long longs n , p	long long n , p ;
create string array a with size 50	string a [ 50 ] ;
while read n read p is true	while ( cin >> n >> p )
for i = 1 to n inclusive , read a [ i ]	for ( long long i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
create long longs num , t , with num = 1 , t = 1	long long num = 1 , t = 1 ;
for i = n - 1 to 1 inclusive , decrementing i	for ( int i = n - 1 ; i >= 1 ; i -- )
if a [ i ] is " halfplus "	if ( a [ i ] == " halfplus " )
set num to ( num + 0 . 5 ) * 2	num = ( num + 0.5 ) * 2 ;
increment t	t ++ ;
else	else
set num to num * 2	num = num * 2 ;
create long long ans with ans = 0	long long ans = 0 ;
set ans to num * p - t * ( p / 2 )	ans = num * p - t * ( p / 2 ) ;
print ans print newline	cout << ans << endl ;
create string array s with size 41	string s [ 41 ] ;
create long longs n , p , sum	long long n , p , sum ;
create double curr	double curr ;
read n read p	cin >> n >> p ;
for i = 0 to n exclusive , read s [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
for i = n - 1 to 0 inclusive , decrementing i	for ( int i = n - 1 ; i >= 0 ; i -- )
if s [ i ] is " halfplus " , increment curr by 0 . 5	if ( s [ i ] == " halfplus " ) curr += 0.5 ;
increment sum by curr * p	sum += curr * p ;
set curr to curr * 2	curr *= 2 ;
print sum print newline	cout << sum << endl ;
declare constant int N = 1e6	const int N = 1e6 ;
create integer array aa with size N + 2	int aa [ N + 2 ] ;
declare integers n and p	int n , p ;
read n and p	cin >> n >> p ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
declare string s	string s ;
read input to s	cin >> s ;
if s is equal to " half "	if ( s == " half " )
set aa [ i ] to 0	aa [ i ] = 0 ;
else	else
set aa [ i ] to 1	aa [ i ] = 1 ;
declare long longs app and ans where ans = 0	long long app , ans = 0 ;
for integer i = n to 1 inclusive decrementing i	for ( int i = n ; i >= 1 ; i -- )
if i = n	if ( i == n )
set app to 1	app = 1 ;
else	else
set app to app * 2 + aa [ i ]	app = app * 2 + aa [ i ] ;
add ( ( app / 2 ) * 1LL ) * p to ans	ans += ( ( app / 2 ) * 1LL ) * p ;
if app is odd , increase ans by p / 2	if ( app % 2 ) ans += ( p / 2 ) ;
print ans	cout << ans << endl ;
create ints n and p	int n , p ;
read n	cin >> n ;
read p	cin >> p ;
create long double apples = 0	long double apples = 0 ;
let long long answer = 0	long long answer = 0 ;
create string vector data	vector < string > data ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create string temp	string temp ;
read temp	cin >> temp ;
append temp to data	data . push_back ( temp ) ;
for i = n - 1 to 0	for ( int i = n - 1 ; i >= 0 ; i -- )
if data [ i ] is equal to " halfplus "	if ( data [ i ] == " halfplus " )
set apples to apples + 0 . 5	apples += 0.5 ;
set apples to apples * 2	apples *= 2 ;
set answer to answer + ( apples / 2 . 0 ) * p	answer += ( apples / 2.0 ) * p ;
else	else
set apples to apples * 2	apples *= 2 ;
set answer to answer + ( apples / 2 . 0 ) * p	answer += ( apples / 2.0 ) * p ;
print answer	cout << answer << endl ;
read n	cin >> n ;
declare string array op size 444	string op [ 444 ] ;
declare long longs n , p	long long n , p ;
read n , p	cin >> n >> p ;
let p be p / 2	p /= 2 ;
for i = 1 to n inclusive , read op [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> op [ i ] ; }
declare long longs ans = 0 , send = 0	long long ans = 0 , send = 0 ;
for i = n to 1 inclusive , decrementing i	for ( int i = n ; i >= 1 ; i -- )
let send be send * 2	send *= 2 ;
if op [ i ] is " halfplus " , increment send	if ( op [ i ] == " halfplus " ) { send ++ ; }
increment ans by send	ans += send ;
print ans * p , newline	cout << ans * p << endl ;
create long longs n , p , k with k = 0	long long n , p , k = 0 ;
read n read p	cin >> n >> p ;
create boolean vector a initialized with n	vector < bool > a ( n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
create string t	string t ;
read t	cin >> t ;
set a [ i ] to length of t is greater than 4	a [ i ] = t . length ( ) > 4 ;
increment k by a [ i ]	k += a [ i ] ;
create double ans with ans = 0	double ans = 0 ;
create long long sum with sum = 0	long long sum = 0 ;
reverse sort elements from beginning of a to end of a	reverse ( a . begin ( ) , a . end ( ) ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
if a [ i ] is true	if ( a [ i ] )
set ans to ans * 2 + 0 . 5	ans = ans * 2 + 0.5 ;
increment sum by ans * p	sum += ans * p ;
else	else
set ans to ans * 2	ans *= 2 ;
increment sum by ans * p	sum += ans * p ;
print sum print newline	cout << sum << endl ;
N = int	int N ;
P = long long	long long P ;
S = array of 2000010 string	string S [ 2000010 ] ;
read N , P	cin >> N >> P ;
for i = 1 to N inclusive read S [ i ]	for ( int i = 1 ; i <= N ; i ++ ) { cin >> S [ i ] ; }
fans = 0	long double fans = 0 ;
for i = N down to 1 inclusive	for ( int i = N ; i >= 1 ; i -- )
if S [ i ] is " halfplus "	if ( S [ i ] == " halfplus " )
add 0 . 5 to fans	fans += 0.5 ;
multiply fans by 2	fans *= 2.00000000 ;
else	else
multiply fans by 2	fans *= 2.00000000 ;
cost = 0	long double cost = 0 ;
for i = 1 to N inclusive	for ( int i = 1 ; i <= N ; i ++ )
add ( fans / 2 ) * P to cost	cost += ( fans / 2.00000 ) * ( P ) ;
if S [ i ] is " half "	if ( S [ i ] == " half " )
divide fans by 2	fans /= 2.000 ;
else	else
divide fans by 2	fans /= 2.000 ;
subtract 0 . 5 from fans	fans -= 0.500 ;
print cost with 0 decimal digits	cout << fixed << setprecision ( 0 ) << cost << endl ;
c array of size 500005 ] , s , bit array size of 100 , origin array size of 100 = long long integers	long long c [ 500005 ] , s , bit [ 100 ] , origin [ 100 ] ;
integers = n	int n ;
read n	cin >> n ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; ++ i )
ong a , b = long long integers	long long a , b ;
read a , b	cin >> a >> b ;
set s ^ = a , c [ i ] to a ^ b	s ^= a , c [ i ] = a ^ b ;
set integer cnt to 0	int cnt = 0 ;
for i = 0 to less than n do the following	for ( int i = 0 ; i < n ; ++ i )
for j = 0 to less than cnt do the following	for ( int j = 0 ; j < cnt ; ++ j )
if c [ i ] & bit [ j ] is true	if ( c [ i ] & bit [ j ] ) c [ i ] ^= origin [ j ] ;
set if ( c [ i ] ) is true then origin [ cnt ] equals c [ i ] , bit [ cnt ] equals c [ i ] and - c [ i ] , and add 1 to cnt	if ( c [ i ] ) origin [ cnt ] = c [ i ] , bit [ cnt ] = c [ i ] & - c [ i ] , ++ cnt ;
for j = 0 to less than cnt do the following	for ( int j = 0 ; j < cnt ; ++ j )
if s & bit [ j ] is true	if ( s & bit [ j ] ) s ^= origin [ j ] ;
if s is true	if ( s )
output 1 / 1	cout << " 1/1 " << endl ;
else	else
output ( 1ll , cnt ) - 1 , / , ( 1ll < < cnt )	cout << ( 1ll << cnt ) - 1 << ' / ' << ( 1ll << cnt ) << endl ;
create integer n	int n ;
create vector of integers T with 1001 element filled with 1	vector < int > T ( 1001 , 1 ) ;
create vector of chararcters rla	vector < char > rla ;
read n	cin >> n ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
create character c	char c ;
read c	cin >> c ;
push c to rla	rla . push_back ( c ) ;
for integer i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if rla [ i ] is ' R '	if ( rla [ i ] == ' R ' )
T [ i + 1 ] = max ( T [ i + 1 ] , T [ i ] + 1 )	T [ i + 1 ] = max ( T [ i + 1 ] , T [ i ] + 1 ) ;
else if rla [ i ] is ' = '	else if ( rla [ i ] == ' = ' )
T [ i + 1 ] = T [ i ]	T [ i + 1 ] = T [ i ] ;
for i = n - 2 to 0	for ( int i = n - 2 ; i >= 0 ; i -- )
if rla [ i ] is ' L '	if ( rla [ i ] == ' L ' )
assign value of max of T [ i ] and T [ i + 1 ] + 1 to T [ i ]	T [ i ] = max ( T [ i ] , T [ i + 1 ] + 1 ) ;
else if rla [ i ] is ' = '	else if ( rla [ i ] == ' = ' )
set T [ i ] to T [ i + 1 ]	T [ i ] = T [ i + 1 ] ;
for i = 0 to n exclusive print T [ i ] , " \ n " and [ i = = n - 1 ]	for ( int i = 0 ; i < n ; i ++ ) { cout << T [ i ] << "  \n " [ i == n - 1 ] ; }
print flush	cout << flush ;
vector_in is a int vector function with int argument n	vector < int > vector_in ( int n )
create vector of integers v with n elements	vector < int > v ( n ) ;
loop i from 0 to n exclusive , reading v [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;
return v	return v ;
function vector_out with vector of ints argument v	void vector_out ( vector < int > v )
for i from 0 to length of v exclusive , print v [ i ] and " "	for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << "   " ;
print new line	cout << endl ;
function vector_sum with vector of ints argument v that returns integer	int vector_sum ( vector < int > v )
create integer sum	int sum ;
for i = 0 to length of v exclusive , increase sum by v [ i ]	for ( int i = 0 ; i < v . size ( ) ; i ++ ) sum += v [ i ] ;
return sum	return sum ;
declare int n	int n ;
create vector of integers T with 1001 element filled with 1	vector < int > T ( 1001 , 1 ) ;
create characters vector rla	vector < char > rla ;
read input to n	cin >> n ;
loop i from 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
declare character variable c	char c ;
read c	cin >> c ;
push c into rla	rla . push_back ( c ) ;
for i from 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if rla [ i ] = ' R '	if ( rla [ i ] == ' R ' )
set T [ i + 1 ] to max of T [ i + 1 ] and T [ i ] + 1	T [ i + 1 ] = max ( T [ i + 1 ] , T [ i ] + 1 ) ;
else if rla [ i ] is ' = '	else if ( rla [ i ] == ' = ' )
change T [ i + 1 ] to T [ i ]	T [ i + 1 ] = T [ i ] ;
for integer i = n - 2 to 0 inclusive counting down	for ( int i = n - 2 ; i >= 0 ; i -- )
if rla [ i ] is equal to ' L '	if ( rla [ i ] == ' L ' )
assign max of T [ i ] and T [ i + 1 ] + 1 to T [ i ]	T [ i ] = max ( T [ i ] , T [ i + 1 ] + 1 ) ;
else if rla [ i ] is ' = '	else if ( rla [ i ] == ' = ' )
set T [ i ] to T [ i + 1 ]	T [ i ] = T [ i + 1 ] ;
for i from 0 to n exclusive , print T [ i ] and " \ n " [ i = n - 1 ]	for ( int i = 0 ; i < n ; i ++ ) { cout << T [ i ] << "  \n " [ i == n - 1 ] ; }
print flush	cout << flush ;
n = long long integers	long long int n ;
integers = answer array with size of 2000	int answer [ 2000 ] ;
read n	cin >> n ;
set integer small to 1	int small = 1 ;
create character variable s	char s [ n ] ;
read n values into array s	for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> s [ i ] ;
make n values of array answer = 1	for ( int i = 0 ; i < n ; i ++ ) answer [ i ] = 1 ;
for i = n - 2 to greater than or equal to 0 then do	for ( int i = n - 2 ; i >= 0 ; i -- )
if s [ i ] is L then do the following	if ( s [ i ] == ' L ' )
set answer [ i ] to answer [ i + 1 ] + 1	answer [ i ] = answer [ i + 1 ] + 1 ;
else if s [ i ] is = then do the following	else if ( s [ i ] == ' = ' )
set answer [ i ] to answer [ i + 1 ]	answer [ i ] = answer [ i + 1 ] ;
for i = 0 to less than n - 1 do the following	for ( int i = 0 ; i < n - 1 ; i ++ )
if s [ i ] = R and answer [ i ] is greater than or equal to answer [ i + 1 ] then do the following	if ( s [ i ] == ' R ' && answer [ i ] >= answer [ i + 1 ] )
set answer [ i + 1 ] to answer [ i ] + 1	answer [ i + 1 ] = answer [ i ] + 1 ;
else if s [ i ] is = then do the following	else if ( s [ i ] == ' = ' )
set answer [ i + 1 ] to answer [ i ]	answer [ i + 1 ] = answer [ i ] ;
output n values from array answer	for ( int i = 0 ; i < n ; i ++ ) cout << answer [ i ] << "  \n " [ i == n - 1 ] ;
mod = const long long with mod = 1000000007	long long const mod = 1000000007 ;
in function powmod taking two long longs a and b and returning a long long	long long powmod ( long long a , long long b )
res = long long with res = 1	long long res = 1 ;
set a to a mod mod	a %= mod ;
call assert on b is greater or equal to 0	assert ( b >= 0 ) ;
loop while b is not 0 setting b to b bitwise rightshift 1 each time	for ( ; b ; b >>= 1 )
if b bitwise and 1 is 1 then set re to res * a modulo mod	if ( b & 1 ) res = res * a % mod ;
set a to a * a modulo mod	a = a * a % mod ;
return res	return res ;
in = ifstream of " txt . in "	ifstream in ( " txt.in " ) ;
out = ofstream of " txt . out "	ofstream out ( " txt.out " ) ;
call fixed and setprecision of 12 on cout	cout << fixed << setprecision ( 12 ) ;
a , b = long long	long long a , b ;
read a then b	cin >> a >> b ;
n = long long	long long n ;
read n	cin >> n ;
mx = double with mx = 2e9	double mx = 2e9 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
x , y , k = long long	long long x , y , k ;
read x then y then k	cin >> x >> y >> k ;
dis = double with dis = result of sqrt of ( x - a ) * ( x - a ) + ( y - b ) * ( y - b ) / k	double dis = sqrt ( ( x - a ) * ( x - a ) + ( y - b ) * ( y - b ) ) / k ;
mx = min of mx and dis	mx = min ( mx , dis ) ;
print mx	cout << mx << ' \n ' ;
create integers n and i and an arrays of integers a and b with size 100000	int n , i , a [ 100000 ] , b [ 100000 ] ;
read n	cin >> n ;
read n elements into a	for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n - 1 exclusive , set value of b [ i ] to a [ i ] + a [ i + 1 ]	for ( i = 0 ; i < n - 1 ; i ++ ) { b [ i ] = a [ i ] + a [ i + 1 ] ; }
set value of b [ n - 1 ] to a [ n - 1 ]	b [ n - 1 ] = a [ n - 1 ] ;
for i = 0 to n - 1 exclusive print b [ i ] and " "	for ( i = 0 ; i < n - 1 ; i ++ ) { cout << b [ i ] << "   " ; }
print b [ n - 1 ]	cout << b [ n - 1 ] << endl ;
declare integers n , z and a	int n , z , a ;
read n	cin >> n ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a	cin >> a ;
if i ! = 1 , print a + z and " "	if ( i != 1 ) { cout << a + z << "   " ; }
set z to a	z = a ;
print a	cout << a << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
create long long array a with 100050 elements	long long a [ 100050 ] ;
for integer i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for integer i = 1 to n exclusive , print a [ i ] + a [ i - 1 ] and " "	for ( int i = 1 ; i < n ; i ++ ) cout << a [ i ] + a [ i - 1 ] << "   " ;
print a [ n - 1 ]	cout << a [ n - 1 ] << endl ;
create long long integers n , i	long long int n , i ;
read n	cin >> n ;
create long long integer array arr of size n	long long int arr [ n ] ;
for i = 0 to n exclusive , read arr [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if i is n - 1	if ( i == n - 1 )
print arr [ n - 1 ] print newline	cout << arr [ n - 1 ] << endl ;
else	else
print arr [ i ] + arr [ i + 1 ] print " "	cout << arr [ i ] + arr [ i + 1 ] << "   " ;
a = int array of size 100005	int a [ 100005 ] ;
n = int	int n ;
while reading n	while ( cin >> n )
for i = i to n inclusive rad a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for i = 1 to n print a [ i ] + a [ i + 1 ]	for ( int i = 1 ; i < n ; i ++ ) { cout << a [ i ] + a [ i + 1 ] << '   ' ; }
print a [ n ]	cout << a [ n ] << endl ;
n = integer	int n ;
x , k = integers with k = 0	int k = 0 , x ;
Read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 1 ; i <= n ; i ++ )
Read x	cin >> x ;
if i is not equal to 1 , then print NO and a new line	if ( i != 1 ) cout << x + k << "   " ;
set k to x	k = x ;
print x and a new line	cout << x << endl ;
x , y = long long arrays of size 100005 each	long long x [ 100005 ] , y [ 100005 ] ;
a , b = long long	long long a , b ;
read a	cin >> a ;
set x to all 0	memset ( x , 0 , sizeof ( x ) ) ;
set y to all 0	memset ( y , 0 , sizeof ( y ) ) ;
for b = 0 to a read x [ b ]	for ( b = 0 ; b < a ; b ++ ) cin >> x [ b ] ;
for b = 0 to a set y [ b ] to x [ b ] + x [ b + 1 ]	for ( b = 0 ; b < a ; b ++ ) y [ b ] = x [ b ] + x [ b + 1 ] ;
for b = 0 to a - 1 print y [ b ] and ' '	for ( b = 0 ; b < a - 1 ; b ++ ) cout << y [ b ] << '   ' ;
print y [ a - 1 ]	cout << y [ a - 1 ] << endl ;
n = integer	int n ;
read n	cin >> n ;
arr = integer array of size n	int arr [ n ] ;
for i = 0 to n exclusive read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
increase arr [ i ] by arr [ i + 1 ]	arr [ i ] += arr [ i + 1 ] ;
print arr [ i ] followed by a space	cout << arr [ i ] << "   " ;
print arr [ n - 1 ]	cout << arr [ n - 1 ] << " \n " ;
create integer n , create integer array arr with size 100010	int n , arr [ 100010 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read arr [ i1 ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for i = 1 to n exclusive , print arr [ i ] + arr [ i - 1 ] print " "	for ( int i = 1 ; i < n ; i ++ ) { cout << arr [ i ] + arr [ i - 1 ] << "   " ; }
print arr [ n - 1 ] print newline	cout << arr [ n - 1 ] << endl ;
create integer n create integer array ara with size 100000	int n , ara [ 100000 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read ara [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> ara [ i ] ; }
for i = 0 to n - 1 exclusive , print ara [ i ] + ara [ i + 1 ] print ' '	for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << ara [ i ] + ara [ i + 1 ] << '   ' ; }
print ara [ n - 1 ] print newline	cout << ara [ n - 1 ] << endl ;
create integers n , k1 , k2 , i	int n , k1 , k2 , i ;
read n	cin >> n ;
read k1	cin >> k1 ;
for i = 1 to n exclusive	for ( i = 1 ; i < n ; i ++ )
read k2	cin >> k2 ;
print k2 + k1 print " "	cout << k2 + k1 << "   " ;
set k1 to k2	k1 = k2 ;
print k1 print newline	cout << k1 << endl ;
create int n , r , s i , j and arrays a and b of length 100001	int n , a [ 100001 ] , r , s , b [ 100001 ] , i , j = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
increment j	j ++ ;
b [ j ] = a [ n ]	b [ j ] = a [ n ] ;
for i = n to 1 exclusive	for ( i = n ; i > 1 ; i -- )
set r = a [ i ] + a [ i - 1 ]	r = a [ i ] + a [ i - 1 ] ;
add 1 to j	j ++ ;
assign r to b [ j ]	b [ j ] = r ;
for i = j to 0 exclusive	for ( i = j ; i > 0 ; i -- )
print b [ i ]	cout << b [ i ] ;
if i different fro 1 , print " "	if ( i != 1 ) cout << "   " ;
print a newline	cout << endl ;
n = integer	int n ;
x , k = integers with k = 0	int k = 0 , x ;
Read n	cin >> n ;
for i = 1 to n exclusive	for ( int i = 1 ; i <= n ; i ++ )
Read x	cin >> x ;
if i is not 1 , then print x + k and a new line	if ( i != 1 ) cout << x + k << "   " ;
set k to x	k = x ;
print x and a new line	cout << x << endl ;
create int number , i , temp , flag , index and result , set index , result to 0	int number , i , temp , flag , index = 0 , result = 0 ;
create string str	string str ;
read number	cin >> number ;
read str	cin >> str ;
set arr [ number ] to 0	int arr [ number ] = { 0 } ;
for i = 0 to number exclusive	for ( i = 0 ; i < number ; i ++ )
assign 0 to flag	flag = 0 ;
set temp to 0	temp = 0 ;
while str [ i ] = B	while ( str [ i ] == ' B ' )
increment i	i ++ ;
assign 1 to flag	flag = 1 ;
increment temp	temp ++ ;
if flag = 1	if ( flag == 1 )
decrement i	i -- ;
add 1 to result	result ++ ;
assign temp to arr [ index ]	arr [ index ] = temp ;
increment index	index ++ ;
print result	cout << result << endl ;
for i = 0 to result exclusive	for ( i = 0 ; i < result ; i ++ )
if i = result - 1	if ( i == result - 1 )
print arr [ i ]	cout << arr [ i ] << endl ;
break	break ;
print arr [ i ] , " "	cout << arr [ i ] << "   " ;
create int n	int n ;
create string s	string s ;
read n and s	cin >> n >> s ;
declare integer variable cnt = - 1 and an array of integers ans with 100 elements filled with 0	int cnt = - 1 , ans [ 100 ] = { 0 } ;
create character p = ' W '	char p = ' W ' ;
loop i from 0 to n exclusive	for ( int i = 0 ; i < n ; ++ i )
declare character variable c = s [ i ]	char c = s [ i ] ;
if c = ' B '	if ( c == ' B ' )
if p = ' W '	if ( p == ' W ' ) { ++ cnt ; }
increase ans [ cnt ]	++ ans [ cnt ] ;
set p to c	p = c ;
print cnt + 1	cout << cnt + 1 << endl ;
if cnt + 1 is greater than 0	if ( cnt + 1 > 0 )
declare boolean first = true	bool first = true ;
loop i from 0 to cnt inclusive	for ( int i = 0 ; i <= cnt ; ++ i )
if first is true	if ( first )
set first to false	first = false ;
else	else
print " "	cout << "   " ;
print ans [ i ]	cout << ans [ i ] ;
print new line	cout << endl ;
n = int	int n ;
a = char array of size 100005	char a [ 100005 ] ;
b = int array of size 100005	int b [ 100005 ] ;
loop while reading n	while ( cin >> n )
set all values of a to 0	memset ( a , 0 , sizeof ( a ) ) ;
set all values of b to 0	memset ( b , 0 , sizeof ( b ) ) ;
read a	cin >> a ;
j , count = int with j = 1 and count = 0	int j = 1 , count = 0 ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is ' B '	if ( a [ i ] == ' B ' )
increment b [ j ]	b [ j ] ++ ;
else if a [ i ] is ' W ' and a [ i + 1 ] is ' B '	else if ( a [ i ] == ' W ' && a [ i + 1 ] == ' B ' )
increment j	j ++ ;
for i = 1 to j inclusive	for ( int i = 1 ; i <= j ; i ++ )
if b [ i ] is not 0 then increment count	if ( b [ i ] != 0 ) count ++ ;
print count	cout << count << endl ;
if count is not 0	if ( count != 0 )
for i = 1 to j	for ( int i = 1 ; i < j ; i ++ )
if b [ i ] is not 0 print b [ i ] and " "	if ( b [ i ] != 0 ) cout << b [ i ] << "   " ;
print b [ j ]	cout << b [ j ] << endl ;
let a , b be long integers	long long a , b ;
ans = array of long integers of length 100	long long ans [ 100 ] ;
let flag be a integer with flag = 0	int flag = 0 ;
let k be a integer	int k ;
let void dfs ( long long a , int i ) be a dfs function	void dfs ( long long a , int i )
if flag or a greater than b , return the value	if ( flag || a > b ) { return ; }
the value of ans [ i ] = a	ans [ i ] = a ;
if a is equal to b	if ( a == b )
flag is equal to 1	flag = 1 ;
k value is assigned to i	k = i ;
return	return ;
depth first search of a * 2 , i + 1	dfs ( a * 2 , i + 1 ) ;
depth first search of a * 10 + 1 , i + 1	dfs ( a * 10 + 1 , i + 1 ) ;
read a , b	cin >> a >> b ;
depth first search of a , 0	dfs ( a , 0 ) ;
if flag is equal to 0	if ( flag == 0 )
print NO and newline	cout << " NO " << endl ;
else do the following	else
print YES and newline	cout << " YES " << endl ;
print k + 1 and newline	cout << k + 1 << endl ;
print ans [ 0 ]	cout << ans [ 0 ] ;
for i = 1 to k inclusive , print space and ans [ i ]	for ( int i = 1 ; i <= k ; i ++ ) { cout << '   ' << ans [ i ] ; }
print newline	cout << endl ;
let a , b integers	int a , b ;
read a and b	cin >> a >> b ;
let v be a vector of ints	vector < int > v ;
let ok be an int with value 1	int ok = 1 ;
while b > a	while ( b > a )
append b to v	v . push_back ( b ) ;
if b & 1 is 0	if ( ( b & 1 ) == 0 )
set b to b / 2	b = b / 2 ;
else if b mod 10 is 1	else if ( b % 10 == 1 )
set b to b / 10	b = b / 10 ;
else	else
set ok to 0	ok = 0 ;
break	break ;
if b is different from a	if ( b != a )
set ok to 0	ok = 0 ;
else	else
append a to v	v . push_back ( a ) ;
if not ok	if ( ! ok )
print NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
print the size of v	cout << v . size ( ) << endl ;
for i = size of v - 1 to 0 exclusive , print v [ i ]	for ( int i = v . size ( ) - 1 ; i > 0 ; i -- ) cout << v [ i ] << "   " ;
print v [ 0 ]	cout << v [ 0 ] << endl ;
declare long long variables a , b and n	long long a , b , n ;
declare long long array ans with size 1010	long long ans [ 1010 ] ;
declare boolean flag	bool flag ;
function dfs with long long arguments x , y and step	void dfs ( long long x , long long y , long long step )
change ans [ step ] to x	ans [ step ] = x ;
if flag is true or x > y , return	if ( flag || x > y ) return ;
if x = y	if ( x == y )
assign step to n	n = step ;
set flag to true	flag = true ;
return	return ;
call dfs ( x * 2 , y , step + 1 )	dfs ( x * 2 , y , step + 1 ) ;
if flag is false , call dfs ( x * 10 + 1 , y , step + 1 )	if ( ! flag ) dfs ( x * 10 + 1 , y , step + 1 ) ;
loop , reading a and b from the input	while ( cin >> a >> b )
change flag to false	flag = false ;
call dfs ( a , b , 1 )	dfs ( a , b , 1 ) ;
if flag is true	if ( flag )
print " YES "	cout << " YES " << endl ;
print n	cout << n << endl ;
loop i from 1 to n inclusive , print ans [ i ] and ' \ n ' if i = n , or ' '	for ( int i = 1 ; i <= n ; i ++ ) cout << ans [ i ] << ( i == n ? ' \n ' : '   ' ) ;
else	else
print " NO "	cout << " NO " << endl ;
create integer stack S	stack < int > S ;
declare funcion with long longs a , b as arguments , returning integer	int funcion ( long long a , long long b )
create integer	int r ;
if a is b , return 1 from function	if ( a == b ) return 1 ;
if a is less than b	if ( a < b )
set r to result of run funcion with 2 * a , b as arguments	r = funcion ( 2 * a , b ) ;
if r is 1	if ( r == 1 )
add element 1 to end of S	S . push ( 1 ) ;
return 1 from function	return 1 ;
set r to result of run funcion with ( 10 * a ) + 1 , b as arguments	r = funcion ( ( 10 * a ) + 1 , b ) ;
if r is 1	if ( r == 1 )
add element 2 to end of S	S . push ( 2 ) ;
return 1 from function	return 1 ;
else	else
create long longs a , b	long long a , b ;
create integers op , ans	int op , ans ;
read a read b	cin >> a >> b ;
set ans to result of run funcion with a , b as arguments	ans = funcion ( a , b ) ;
if ans is 0	if ( ans == 0 )
print " NO " print ' \ n '	cout << " NO " << ' \n ' ;
else	else
print " YES " print ' \ n '	cout << " YES " << ' \n ' ;
print size of S + 1 print ' \ n '	cout << S . size ( ) + 1 << ' \n ' ;
print a	cout << a ;
while S is not empty	while ( ! S . empty ( ) )
set op to top of S	op = S . top ( ) ;
remove element from top of S	S . pop ( ) ;
if op is 1	if ( op == 1 )
set a to a * 2	a *= 2 ;
else	else
set a to a * 10	a *= 10 ;
increment a	a ++ ;
print " " print a	cout << "   " << a ;
print ' \ n '	cout << ' \n ' ;
ASS = array of integers of length 50	int ASS [ 50 ] ;
let sum be a integer	int sum ;
let flag be a boolean value	bool flag ;
let int digui ( int a , int b ) accepts integer values	int digui ( int a , int b )
if a is less than b	if ( a < b )
set the value of flag to 1	flag = 1 ;
if a is equal to b , return 0	if ( a == b ) return 0 ;
if a modulo 2 is equal to 0	if ( a % 2 == 0 )
increase sum by 1	sum ++ ;
let ASS [ sum - 1 ] is equal to a / 2	ASS [ sum - 1 ] = a / 2 ;
return digui of a / 2 , b	return digui ( a / 2 , b ) ;
else if a modulo 10 is equal to 1	else if ( a % 10 == 1 )
increase sum by 1	sum ++ ;
let ASS [ sum - 1 ] is equal to ( a - 1 ) / 10	ASS [ sum - 1 ] = ( a - 1 ) / 10 ;
return digui of ( a - 1 ) / 10 , b	return digui ( ( a - 1 ) / 10 , b ) ;
else do the following	else
set the value of flag to 1	flag = 1 ;
let m , n be integers	int m , n ;
read m and n	cin >> m >> n ;
digui of n , m	digui ( n , m ) ;
if flag is equal to 0	if ( flag == 0 )
print YES and newline and sum + 1 and newline	cout << " YES " << endl << sum + 1 << endl ;
for integer i = sum - 1 , i > = 0 , decrease i by 1 , print ASS [ i ] and space	for ( int i = sum - 1 ; i >= 0 ; i -- ) cout << ASS [ i ] << "   " ;
print n and new line	cout << n << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
let k and flag be long ints with flag = 0	long int k , flag = 0 ;
declare vector of long long integers ans	vector < long long int > ans ;
function dfs with long long int arguments n and level	void dfs ( long long int n , long long int level )
if n is equal to k , assign 1 to flag	if ( n == k ) { flag = 1 ; }
if 2 * n < = k and flag = 0 , call dfs ( 2 * n , level + 1 )	if ( 2 * n <= k && flag == 0 ) { dfs ( 2 * n , level + 1 ) ; }
if 10 * n + 1 < = k and flag = 0 , call dfs ( 10 * n + 1 , level + 1 )	if ( 10 * n + 1 <= k && flag == 0 ) { dfs ( 10 * n + 1 , level + 1 ) ; }
if flag = 1 , push n to ans	if ( flag == 1 ) { ans . push_back ( n ) ; }
return	return ;
create long long int n	long long int n ;
read n and k	cin >> n >> k ;
call dfs ( n , 1 )	dfs ( n , 1 ) ;
if flag is 1	if ( flag == 1 )
print " YES "	cout << " YES " << endl ;
declare int sz = length of ans	int sz = ans . size ( ) ;
print sz	cout << sz << endl ;
for i = sz - 1 to 1 inclusive decrementing i , print ans [ i ] and " "	for ( long long int i = sz - 1 ; i >= 1 ; i -- ) { cout << ans [ i ] << "   " ; }
if sz > = 1 , print ans [ 0 ]	if ( sz >= 1 ) cout << ans [ 0 ] << endl ;
else	else
print " NO "	cout << " NO " << endl ;
N = const integer with N = 1e5 + 50	const int N = 1e5 + 50 ;
a , b , cnt = long long	long long a , b , cnt ;
ans = long long array of size N	long long ans [ N ] ;
i , j , k , t , m , n = integers	int i , j , k , t , m , n ;
in the function dfs that takes long long st , step	void dfs ( long long st , long long step )
if st > b , return	if ( st > b ) return ;
ans [ step ] = st	ans [ step ] = st ;
if st is b	if ( st == b )
cnt = step	cnt = step ;
print YES	cout << " YES " << ' \n ' ;
print cnt + 1	cout << cnt + 1 << ' \n ' ;
print ans [ 0 ]	cout << ans [ 0 ] ;
for i = 1 to cnt exclusive , print " " , ans [ i ]	for ( i = 1 ; i < cnt + 1 ; i ++ ) cout << "   " << ans [ i ] ;
print new line	cout << ' \n ' ;
return	return ;
if st * 2 < = b , dfs on st * 2 and step + 1	if ( st * 2 <= b ) dfs ( st * 2 , step + 1 ) ;
if st * 10 + 1 < = b , dfs on st * 10 + 1 and step + 1	if ( st * 10 + 1 <= b ) dfs ( st * 10 + 1 , step + 1 ) ;
read a and b	cin >> a >> b ;
cnt = 0	cnt = 0 ;
dfs on a and 0	dfs ( a , 0 ) ;
if not cnt , print NO	if ( ! cnt ) cout << " NO " << ' \n ' ;
a , b , jum = long long	long long a , b , jum ;
v = long long vector	vector < long long > v ;
read a then b	cin >> a >> b ;
loop while b is greater than 0	while ( b >= 1 )
increment jum	jum ++ ;
append b to v	v . push_back ( b ) ;
if a is b then break loop	if ( a == b ) { break ; }
if a b is less than a	if ( b < a )
print " NO "	cout << " NO " << endl ;
else if b is even	else if ( b % 2 == 0 )
set b to b / 2	b = b / 2 ;
else if b is uneven	else if ( b % 2 == 1 )
decrement b	b -- ;
if b is a multiple of 10	if ( b % 10 == 0 )
set b to b / 10	b = b / 10 ;
else	else
print " NO "	cout << " NO " << endl ;
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
print " YES " and jum	cout << " YES " << endl << jum << endl ;
for i = 0 to jum	for ( int i = 0 ; i < jum ; i ++ )
print v [ i ]	cout << v [ i ] ;
if i is less than jum - 1	if ( i < jum - 1 )
print " "	cout << "   " ;
else	else
print newline	cout << endl ;
declare long integer array perm with size 2 * 100000 + 5	long int perm [ 2 * 100000 + 5 ] ;
declare long integer variables n , x , cycle , v , k and xo where cycle = 0 and xo = 1	long int n , x , cycle = 0 , v , k , xo = 1 ;
read n	cin >> n ;
for integer i = 1 to n inclusive , read perm [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> perm [ i ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
xo ^ = x	xo ^= x ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
continue loop from the start if if perm [ i ] is false	if ( ! perm [ i ] ) continue ;
increase cycle	cycle ++ ;
assign value of i to v	v = i ;
while perm [ v ] is true	while ( perm [ v ] )
assign value of perm [ v ] to k	k = perm [ v ] ;
set perm [ v ] to 0	perm [ v ] = 0 ;
set v to k	v = k ;
if cycle = 1 , change cycle to 0	if ( cycle == 1 ) cycle = 0 ;
print cycle + xo	cout << cycle + xo << endl ;
let n be a integer	int n ;
p = array of integers of length 200100	int p [ 200100 ] ;
b = array of integers of length 200100	int b [ 200100 ] ;
vis = array of integers of length 200200	int vis [ 200200 ] ;
let dfs be a function which accepts integer x value	void dfs ( int x )
the xth element of array vis is equal to 1	vis [ x ] = 1 ;
if ( not vis [ xth element of array p ] , dfs ( xth element of array p )	if ( ! vis [ p [ x ] ] ) dfs ( p [ x ] ) ;
read n	cin >> n ;
for ( i = 1 to n inclusive ) , read ith element of array p	for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ] ;
let cnt be a integer with cnt value as 0	int cnt = 0 ;
for ( i = 1 to n inclusive )	for ( int i = 1 ; i <= n ; i ++ )
read ith element of array b	cin >> b [ i ] ;
if ( ith element of array b is equal to 1 ) , increase cnt by 1	if ( b [ i ] == 1 ) cnt ++ ;
let ans be a integer with ans value is equal to 0	int ans = 0 ;
if ( cnt modulus 2 is equal to 0 ) , increase ans by 1	if ( cnt % 2 == 0 ) ans ++ ;
let the value of cnt is equal to 0	cnt = 0 ;
for ( i = 1 to n inclusive )	for ( int i = 1 ; i <= n ; i ++ )
if ( not ith element of array vis )	if ( ! vis [ i ] )
increase cnt value by 1	cnt ++ ;
dfs of i	dfs ( i ) ;
if ( cnt is equal to 1 ) , cnt is equal to 0	if ( cnt == 1 ) cnt = 0 ;
print ans + cnt and newline	cout << ans + cnt << endl ;
create constant integer N with N = 6e5 + 10	const int N = 6e5 + 10 ;
create integer arrays v , A , B with v size N , A size N , B size N	int v [ N ] , A [ N ] , B [ N ] ;
create integer n	int n ;
declare dfs with integer x as argument	void dfs ( int x )
if v [ x ] is true , return from function	if ( v [ x ] ) return ;
set v [ x ] to 1	v [ x ] = 1 ;
run dfs with A [ x ] as argument	dfs ( A [ x ] ) ;
read n	cin >> n ;
create integer ans with ans = 0	int ans = 0 ;
for i = 1 to n inclusive , read A [ i ]	for ( int i = 1 ; i <= n ; ++ i ) cin >> A [ i ] ;
for i = 1 to n inclusive , read B [ i ]	for ( int i = 1 ; i <= n ; ++ i ) cin >> B [ i ] ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
if v [ i ] is 0 , run dfs with i as argument , increment ans	if ( v [ i ] == 0 ) dfs ( i ) , ++ ans ;
create integer t with t = 1	int t = 1 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; ++ i )
if B [ i ] is true , set t to t ^ 1	if ( B [ i ] ) t ^= 1 ;
if ans is 1 , decrement ans	if ( ans == 1 ) -- ans ;
print ans + t print newline	cout << ans + t << endl ;
declare constant integer N = 2e5 + 5	const int N = 2e5 + 5 ;
create integer arrays Prv and vis with N elements	int Prv [ N ] , vis [ N ] ;
dfs is a void function with integer argument u	void dfs ( int u )
if vis [ u ] is not 0 , return	if ( vis [ u ] ) return ;
set value of vis [ u ] to true	vis [ u ] = true ;
call function dfs with arguments Prv [ u ]	dfs ( Prv [ u ] ) ;
declare integer variable n	int n ;
read n	cin >> n ;
for integer i = 1 to n inclusive read Prv [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> Prv [ i ] ;
create integer now = 1	int now = 1 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create integer x	int x ;
read x	cin >> x ;
increase now by x	now += x ;
declare integer Res = 0	int Res = 0 ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if vis [ i ] is 0	if ( ! vis [ i ] )
call function dfs with argument i	dfs ( i ) ;
increment Res	Res ++ ;
decrement Res if Res = 1	if ( Res == 1 ) Res -- ;
print Res + ( now % 2 ) and " \ n "	cout << ( Res + ( now % 2 ) ) << " \n " ;
create int i , j and n	int i , j , n ;
set int arrays p , b and status of length 200000 to all 0	int p [ 200000 ] , b [ 200000 ] , status [ 200000 ] = { 0 } ;
set count and result to 0	int count = 0 , result = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read p [ i ]	cin >> p [ i ] ;
decrement p [ i ]	p [ i ] -- ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read b [ i ]	cin >> b [ i ] ;
if b [ i ] = 1 , increment count	if ( b [ i ] == 1 ) count ++ ;
if count is even , increment result	if ( count % 2 == 0 ) result ++ ;
count = 0	count = 0 ;
if i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if status [ i ] equal to 0	if ( status [ i ] == 0 )
assign 1 to status [ i ]	status [ i ] = 1 ;
set t to p [ i ]	int t = p [ i ] ;
while t different from 1	while ( t != i )
status [ t ] = 1	status [ t ] = 1 ;
t = p [ t ]	t = p [ t ] ;
add 1 to count	count ++ ;
if count greater than 1 , set result to result + count	if ( count > 1 ) result += count ;
print result	cout << result << endl ;
n , m , k = static long long	static long long n , m , k ;
n = int	int n ;
read n	cin >> n ;
p = vector of n int	vector < int > p ( n ) ;
for i = 0 to n exclusive read p [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> p [ i ] ;
res = 0	int res = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
x = int	int x ;
read x	cin >> x ;
add x to res	res += x ;
res = ( res + 1 ) modulo 2	res = ( res + 1 ) % 2 ;
visited = vector of n bool	vector < bool > visited ( n ) ;
count = - 1	int count = - 1 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if visited [ i ] continue	if ( visited [ i ] ) continue ;
increment count	count ++ ;
j = i	int j = i ;
while not visited [ j ]	while ( ! visited [ j ] )
visited [ j ] = true	visited [ j ] = true ;
j = p [ j ] - 1	j = p [ j ] - 1 ;
if count > 0 increment res	if ( count > 0 ) res ++ ;
add count to res	res += count ;
print res	cout << res << endl ;
create integer n	int n ;
create constant integer MAXN with MAXN = 200005	const int MAXN = 200005 ;
create integer array p with size MAXN	int p [ MAXN ] ;
create boolean array vis with size MAXN	bool vis [ MAXN ] ;
declare dfs with integer idx as argument , returning void	void dfs ( int idx )
set vis [ idx ] to true	vis [ idx ] = true ;
if not vis [ p [ idx ] ] , run dfs with p [ idx ] as argument	if ( ! vis [ p [ idx ] ] ) dfs ( p [ idx ] ) ;
read n	cin >> n ;
for i = 1 to n inclusive , read p [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ] ;
create integer counter with counter = 0	int counter = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create integer b	int b ;
read b	cin >> b ;
if b is 1 , increment counter	if ( b == 1 ) counter ++ ;
create integer cycle with cycle = 0	int cycle = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if not vis [ i ]	if ( ! vis [ i ] )
run dfs with i as argument	dfs ( i ) ;
increment cycle	cycle ++ ;
if cycle is 1	if ( cycle == 1 )
print 1 - counter % 2 print " \ n "	cout << 1 - counter % 2 << " \n " ;
else	else
print cycle + 1 - counter % 2 print " \ n "	cout << cycle + 1 - counter % 2 << " \n " ;
create strings s1 and s2	string s1 , s2 ;
read s1 and s2	cin >> s1 >> s2 ;
if s1 is equal to s2	if ( s1 == s2 )
print " - 1 \ n "	cout << " -1\n " ;
else	else
print the max of s1 . size ( ) and s2 . size ( )	cout << max ( s1 . size ( ) , s2 . size ( ) ) << ' \n ' ;
dx = int array with the values 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1	int dx [ ] = { 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1 } ;
dy = int array with the values 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1	int dy [ ] = { 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1 } ;
define empty function fast	void fast ( ) { }
call fast	fast ( ) ;
s , t = string	string s , t ;
read s then t	cin >> s >> t ;
print - 1 if s is t else print max of size of s and size of t	cout << ( s == t ? - 1 : ( int ) max ( s . size ( ) , t . size ( ) ) ) << " \n " ;
create strings a and b	string a , b ;
read standard input to a and b	cin >> a >> b ;
if a = b , print - 1 to the standard output and exit the program	if ( a == b ) cout << - 1 << endl , exit ( 0 ) ;
print max of length of a and length of b	cout << max ( a . size ( ) , b . size ( ) ) << endl ;
declare constant long long N = 1e8 + 3	const long long N = 1e8 + 3 ;
declare constant long long MN = 1e9 + 7	const long long MN = 1e9 + 7 ;
declare constant long long MX = - 1e9 - 7	const long long MX = - 1e9 - 7 ;
declare long longs n , m , cnt , mx = MX	long long n , m , cnt , mx = MX ;
declare a , b as strings	string a , b ;
declare pair of long long , long long pr	pair < long long , long long > pr ;
declare string vector v	vector < string > v ;
declare map from string to long long mp	map < string , long long > mp ;
declare long long set st	set < long long > st ;
declare long long set iterator it	set < long long > :: iterator it ;
read a , b	cin >> a >> b ;
if maximum of ( size of a and size of b ) is greater than minimum of ( size of a and size of b )	if ( max ( a . size ( ) , b . size ( ) ) > min ( a . size ( ) , b . size ( ) ) )
print maximum of ( size of a and size of b )	cout << max ( a . size ( ) , b . size ( ) ) ;
else	else
while true	while ( true )
if a is not b	if ( a != b )
print size of a	cout << a . size ( ) ;
end loop	break ;
let a be substring of a from 0 to size of a - 1	a = a . substr ( 0 , a . size ( ) - 1 ) ;
let b be substring of b from 0 to size of b - 1	b = b . substr ( 0 , b . size ( ) - 1 ) ;
if size of a is 0	if ( a . size ( ) == 0 )
print - 1	cout << - 1 ;
end loop	break ;
print " \ n "	cout << " \n " ;
declare character array s1 with size 100006 s2 with size 100003	char s1 [ 100006 ] , s2 [ 100003 ] ;
while read s1 , s2	while ( cin >> s1 >> s2 )
declare p as integer = string comparison between s1 and s2	int p = strcmp ( s1 , s2 ) ;
declare len1 as integer = string length of s1	int len1 = strlen ( s1 ) ;
declare len2 as integer = string length of s2	int len2 = strlen ( s2 ) ;
if p is 0	if ( p == 0 )
print " - 1 " print newline	cout << " -1 " << endl ;
if len1 is greater than len2	if ( len1 > len2 )
print len1 , newline	cout << len1 << endl ;
else	else
print len2 , newline	cout << len2 << endl ;
s , ss = string	string s , ss ;
read s then ss	cin >> s >> ss ;
if s is ss	if ( s == ss )
print - 1	cout << - 1 << " \n " ;
else	else
print max of length of ss and length of s	cout << max ( ss . length ( ) , s . length ( ) ) << " \n " ;
i , res = 0	long long i = 0 , res = 0 ;
s1 , s2 = string	string s1 , s2 ;
read s1 , s2	cin >> s1 >> s2 ;
if s1 = = s2	if ( s1 == s2 )
res = - 1	res = - 1 ;
else	else
res = max ( size of s1 , size of s2 )	res = max ( s1 . size ( ) , s2 . size ( ) ) ;
print res	cout << res << endl ;
declare strings a and b	string a , b ;
read standard input to a and b	cin >> a >> b ;
declare integer variables l = length of a , and ll = length of b	int l = a . size ( ) , ll = b . size ( ) ;
if l ! = ll	if ( l != ll )
print max of l and ll to the standard output	cout << max ( l , ll ) << endl ;
else if a = b	else if ( a == b )
print - 1 to the standard output	cout << - 1 << endl ;
else	else
print length of a to the standard output	cout << a . size ( ) << endl ;
a , b = string	string a , b ;
read a then b	cin >> a >> b ;
if a is not b	if ( a != b )
print max of size of a , size of b	cout << max ( a . size ( ) , b . size ( ) ) << endl ;
else	else
print " - 1 "	cout << " -1 " << endl ;
create string A	string A ;
read A	cin >> A ;
let string B	string B ;
read B	cin >> B ;
if A is equal to B	if ( A == B )
print - 1	cout << - 1 << " \n " ;
print max of A . size ( ) and B . size ( )	cout << max ( A . size ( ) , B . size ( ) ) << " \n " ;
create new constant long long integer INF with value 8e18	const long long int INF = ( long long int ) ( 8e18 ) ;
create new constant long long integer called MOD = 998244353	const long long int MOD = 998244353 ;
declare string variables a and b	string a , b ;
read input to a and b	cin >> a >> b ;
if length of a ! = length of b	if ( a . length ( ) != b . length ( ) )
print max of length of a and length of b and ' \ n '	cout << max ( a . length ( ) , b . length ( ) ) << ' \n ' ;
else if a ! = b	else if ( a != b )
print length of a and ' \ n '	cout << a . length ( ) << ' \n ' ;
else	else
print - 1 and ' \ n '	cout << - 1 << ' \n ' ;
let a , b be strings	string a , b ;
let c be a integer with c = 0	int c = 0 ;
read a , b	cin >> a >> b ;
let len1 be a integer with len1 is equal to length of a	int len1 = a . size ( ) ;
let len2 be a integer with len2 is equal to length of b	int len2 = b . size ( ) ;
if a is equal to b	if ( a == b )
print - 1 and newline	cout << - 1 << endl ;
else do the following	else
print maximum of len1 , len2 and newline	cout << max ( len1 , len2 ) << endl ;
INF is a new constant integer = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
create new constant integer mod with value 998244353	const int mod = 998244353 ;
declare character arrays a and b with 100005 elements	char a [ 100005 ] , b [ 100005 ] ;
read input to a and b	cin >> a >> b ;
if content of a and b matches	if ( strcmp ( a , b ) == 0 )
return puts ( " - 1 " )	return puts ( " -1 " ) , 0 ;
else	else
print max of length of a and length of b to the standard output	cout << max ( strlen ( a ) , strlen ( b ) ) << endl ;
s , s1 = string	string s , s1 ;
read s then s1	cin >> s >> s1 ;
if s is s1	if ( s == s1 )
print - 1	cout << - 1 << endl ;
else	else
print max of size of s , size of s1	cout << max ( s . size ( ) , s1 . size ( ) ) << endl ;
declare strings n , n2	string n , n2 ;
declare compare with strings s1 , s2 , integer length as arguments , returning boolean	bool compare ( string s1 , string s2 , int length )
for i = 0 to length exclusive	for ( int i = 0 ; i < length ; i ++ )
if s1 [ i ] is not s2 [ i ] , return false from function	if ( s1 [ i ] != s2 [ i ] ) { return false ; }
return true from function	return true ;
read n , n2	cin >> n >> n2 ;
declare l1 , l2 , greater as integers	int l1 , l2 , greater ;
let l1 be greater = length of n	l1 = greater = n . length ( ) ;
let l2 be length of n2	l2 = n2 . length ( ) ;
if l2 is greater than l1 , let greater be l2	if ( l2 > l1 ) { greater = l2 ; }
if l1 is l2	if ( l1 == l2 )
declare x as boolean = result of run compare with n , n2 , l1 as arguments	bool x = compare ( n , n2 , l1 ) ;
if x is true	if ( x )
print - 1 and newline	cout << - 1 << endl ;
else	else
print l1 print newline	cout << l1 << endl ;
print greater print newline	cout << greater << endl ;
a , b = string	string a , b ;
read a then b	cin >> a >> b ;
sz1 , sz2 = int with sz1 = size of a and sz2 = size of b	int sz1 = a . size ( ) , sz2 = b . size ( ) ;
if a is b	if ( a == b )
print - 1	cout << - 1 << endl ;
else	else
print max of sz1 , sz2	cout << max ( sz1 , sz2 ) << endl ;
declare string variables s1 and s2	string s1 , s2 ;
read from the input to s1 and s2	cin >> s1 >> s2 ;
if s1 is equal to s2	if ( s1 == s2 )
print - 1 and a new line	cout << - 1 << endl ;
else	else
print max of length of s1 and length of s2 to the standard output	cout << max ( s1 . length ( ) , s2 . length ( ) ) << endl ;
let a , b strings	string a , b ;
read in a and b	cin >> a >> b ;
if a same as b	if ( a == b )
print - 1 to stdout	puts ( " -1 " ) ;
otherwise	else
print max ( length of a , length of b )	cout << max ( a . length ( ) , b . length ( ) ) << endl ;
N , INF = const int with N = 1e5 + 10 and INF = 1e9 + 7	const int N = 1e5 + 10 , INF = 1e9 + 7 ;
a , b = string	string a , b ;
read a then b	cin >> a >> b ;
if a is b	if ( a == b )
print - 1	cout << - 1 << ' \n ' ;
else	else
print max of size of a and size of b	cout << max ( ( int ) a . size ( ) , ( int ) b . size ( ) ) << ' \n ' ;
a , b = string	string a , b ;
read a then b	cin >> a >> b ;
if a is not b	if ( a != b )
print max of length of a and length of b	cout << max ( a . length ( ) , b . length ( ) ) << endl ;
else	else
print " - 1 "	cout << " -1\n " ;
E = exp ( 1 )	const double E = exp ( 1 ) ;
maxn = 1000010	const int maxn = 1e6 + 10 ;
ch = array of maxn char	char ch [ maxn ] ;
ch1 = array of maxn char	char ch1 [ maxn ] ;
read ch	cin >> ch ;
read ch1	cin >> ch1 ;
l1 = length of ch	int l1 = strlen ( ch ) ;
l2 = length of ch1	int l2 = strlen ( ch1 ) ;
if ch and ch1 are equal	if ( strcmp ( ch , ch1 ) == 0 )
print - 1	cout << - 1 << endl ;
else	else
print max ( l1 , l2 )	cout << max ( l1 , l2 ) << endl ;
create strings s and second	string s , second ;
read user input to s and second	cin >> s >> second ;
declare long long variables p and q = 0	long long p = 0 , q = 0 ;
create new long long called xx with value 0	long long xx = 0 ;
create new long long variable cnt = 0	long long cnt = 0 ;
if s = second	if ( s == second )
print " - 1 " to the standard output	cout << " -1 " << endl ;
if length of s is greater than length of second	if ( s . size ( ) > second . size ( ) )
print length of s to the standard output	cout << s . size ( ) << endl ;
else	else
print length of second	cout << second . size ( ) << endl ;
s1 , s2 = string	string s1 , s2 ;
Read s1 and s2	cin >> s1 >> s2 ;
if s1 = s2	if ( s1 == s2 )
print - 1	cout << - 1 << endl ;
else	else
print max of s1 and s2	cout << max ( s1 . size ( ) , s2 . size ( ) ) << endl ;
create strings a and b	string a , b ;
read a and b	cin >> a >> b ;
let ints l = a . size ( ) and ll = b . size ( )	int l = a . size ( ) , ll = b . size ( ) ;
if l is not equal to ll	if ( l != ll )
print max ( l , ll )	cout << max ( l , ll ) << endl ;
else if a is equal to b	else if ( a == b )
print - 1	cout << - 1 << endl ;
else	else
print a . size ( )	cout << a . size ( ) << endl ;
a , b = string	string a , b ;
read a then b	cin >> a >> b ;
if size of a is not size of b	if ( a . size ( ) != b . size ( ) )
print max of size of a and size of b	cout << max ( a . size ( ) , b . size ( ) ) << endl ;
else if compare of b on a is 0	else if ( a . compare ( b ) == 0 )
print " - 1 "	cout << " -1 " << endl ;
else	else
s = int with s = size of a	int s = a . size ( ) ;
mp = string and int map	map < string , int > mp ;
x = int with x = s	int x = s ;
loop while x is greater than 0	while ( x > 0 )
for i = 0 to s and i + x is less or equal to s	for ( int i = 0 ; i < s && i + x <= s ; i ++ )
st = string with st = substring of a starting at i and a length of x	string st ( a , i , x ) ;
set mp [ st ] to 1	mp [ st ] = 1 ;
for i = 0 to s and i + x is less or equal to s	for ( int i = 0 ; i < s && i + x <= s ; i ++ )
st = string with st = substring of b starting at i and a length of x	string st ( b , i , x ) ;
if mp [ st ] is 0	if ( mp [ st ] == 0 )
print size of st	cout << st . size ( ) << endl ;
decrement x	x -- ;
create strings a and b	string a , b ;
read a and b	cin >> a >> b ;
if the length of a is not equal to the length of b	if ( a . length ( ) != b . length ( ) )
print the max of length of a and length of b	cout << max ( a . length ( ) , b . length ( ) ) << endl ;
else	else
if a is equal to b	if ( a == b )
print - 1	cout << - 1 << endl ;
else	else
print the length of a	cout << a . length ( ) << endl ;
dx = int array with the values 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1	int dx [ ] = { 0 , 1 , 0 , - 1 , 1 , 1 , - 1 , - 1 } ;
dy = int array with the values 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1	int dy [ ] = { 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1 } ;
define empty function fast	void fast ( ) { }
call fast	fast ( ) ;
s , t = string	string s , t ;
read s then t	cin >> s >> t ;
print - 1 if s is t else print max of size of s , size of t	cout << ( s == t ? - 1 : ( int ) max ( s . size ( ) , t . size ( ) ) ) << " \n " ;
let n , c1 , c2 be long integers	long long n , c1 , c2 ;
let solve accepts long integer g	long long solve ( long long g )
t1 , t2 , left , res be long integers with t1 = ceiling of ( double ) n / g , t2 = n / g , left = n , res = 0	long long t1 = ceil ( ( double ) n / g ) , t2 = n / g , left = n , res = 0 ;
for t2 * g is not equal to left and left is greater than 0 , decrement left by t1 , decrement g by 1 , res = res + ( c1 + c2 * ( t1 - 1 ) * ( t1 - 1 ) )	for ( ; t2 * g != left && left > 0 ; left -= t1 , g -- ) res += ( c1 + c2 * ( t1 - 1 ) * ( t1 - 1 ) ) ;
for g is greater than 0 , decrement left by t2 , decrement g by 1 , the value of res = res + ( c1 + c2 * ( t2 - 1 ) * ( t2 - 1 ) )	for ( ; g > 0 ; left -= t2 , g -- ) res += ( c1 + c2 * ( t2 - 1 ) * ( t2 - 1 ) ) ;
return the value of res	return res ;
let t be a character	char t ;
read n , c1 , c2	cin >> n >> c1 >> c2 ;
let p , r , i be long integers with p = 0 , r = 0	long long p = 0 , r = 0 , i ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read t	cin >> t ;
if t is equal to 1 increment p by 1 else increment r by 1	( t == ' 1 ' ) ? p ++ : r ++ ;
let lo , hi be long integers with lo = 1 , hi = p	long long lo = 1 , hi = p ;
while lo is less than hi	while ( lo < hi )
let diff be a long integer with diff = hi - lo	long long diff = hi - lo ;
let p1 , p2 be long integers with p1 = lo + diff / 3 , p2 = lo + ( 2 * diff + 2 ) / 3	long long p1 = lo + diff / 3 , p2 = lo + ( 2 * diff + 2 ) / 3 ;
let s1 , s2 be a long integers with s1 = solve ( p1 ) , s2 = solve ( p2 )	long long s1 = solve ( p1 ) , s2 = solve ( p2 ) ;
if s1 is equal to s2	if ( s1 == s2 )
lo is equal to p1 + 1 , hi is equal to p2 - 1	lo = p1 + 1 , hi = p2 - 1 ;
else if s1 is greater than s2	else if ( s1 > s2 )
the value of lo = p1 + 1	lo = p1 + 1 ;
else do the following	else
the value of hi = p2 - 1	hi = p2 - 1 ;
print solve ( lo ) and newline	cout << solve ( lo ) << endl ;
declare long longs n , c1 , c2	long long n , c1 , c2 ;
declare solve with long long g as argument , returning long long	long long solve ( long long g )
declare long longs t1 = round up ( double casted ( n ) / g ) , t2 = n / g , left = n , res = 0	long long t1 = ceil ( ( double ) n / g ) , t2 = n / g , left = n , res = 0 ;
for t2 * g is not left and left is greater than 0 , decrementing left by t1 , decrementing g , increment res by ( c1 + c2 * ( t1 - 1 ) * ( t1 - 1 ) )	for ( ; t2 * g != left && left > 0 ; left -= t1 , g -- ) res += ( c1 + c2 * ( t1 - 1 ) * ( t1 - 1 ) ) ;
for g is greater than 0 , decrementing left by t2 , decrementing g , increment res by ( c1 + c2 * ( t2 - 1 ) * ( t2 - 1 ) )	for ( ; g > 0 ; left -= t2 , g -- ) res += ( c1 + c2 * ( t2 - 1 ) * ( t2 - 1 ) ) ;
return res from function	return res ;
declare t as character	char t ;
read n , c1 , c2	cin >> n >> c1 >> c2 ;
declare long longs p = 0 , r = 0 , i	long long p = 0 , r = 0 , i ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read t	cin >> t ;
increment p if t is ' 1 ' , else increment r	( t == ' 1 ' ) ? p ++ : r ++ ;
declare long long lo = 1 , hi = p	long long lo = 1 , hi = p ;
while lo is less than hi	while ( lo < hi )
declare long long diff = hi - lo	long long diff = hi - lo ;
declare long longs p1 = lo + diff / 3 , p2 = lo + ( 2 * diff + 2 ) / 3	long long p1 = lo + diff / 3 , p2 = lo + ( 2 * diff + 2 ) / 3 ;
declare long longs s1 = result of run solve with p1 as argument , s2 = result of run solve ( p2 )	long long s1 = solve ( p1 ) , s2 = solve ( p2 ) ;
if s1 is s2	if ( s1 == s2 )
let lo be p1 + 1 , hi be p2 - 1	lo = p1 + 1 , hi = p2 - 1 ;
else if s1 is greater than s2	else if ( s1 > s2 )
let lo be p1 + 1	lo = p1 + 1 ;
else	else
let hi be p2 - 1	hi = p2 - 1 ;
print result of run solve with lo as argument , newline	cout << solve ( lo ) << endl ;
create integer n	int n ;
create long longs c1 , c2	long long c1 , c2 ;
read n read c1 read c2	cin >> n >> c1 >> c2 ;
create integer cnt with cnt = 0	int cnt = 0 ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
create character c	char c ;
read c	cin >> c ;
if c is ' 1 ' increment cnt	if ( c == ' 1 ' ) cnt ++ ;
create long long ans with ans = 1e18	long long ans = 1e18 ;
for i = 1 to cnt inclusive	for ( int i = 1 ; i <= cnt ; i ++ )
create long longs p , mod with p = n / i , mod = n % i	long long p = n / i , mod = n % i ;
create long long now with now = ( p - 1 ) * ( p - 1 ) * c2 * ( i - mod ) + c1 * i + p * p * mod * c2	long long now = ( p - 1 ) * ( p - 1 ) * c2 * ( i - mod ) + c1 * i + p * p * mod * c2 ;
set ans to minimum of ans and now	ans = min ( ans , now ) ;
print ans print newline	cout << ans << endl ;
create long longs n , m , i , j , p , q , cnt , c1 , c2 , x , y , mn	long long n , m , i , j , p , q , cnt , c1 , c2 , x , y , mn ;
create string s	string s ;
while read n read c1 read c2 is true	while ( cin >> n >> c1 >> c2 )
read charaacter	getchar ( ) ;
read s	cin >> s ;
set cnt to 0	cnt = 0 ;
set mn to LONG_LONG_MAX	mn = LONG_LONG_MAX ;
for i = 0 to size of s exclusive	for ( i = 0 ; i < s . size ( ) ; i ++ )
if s [ i ] is ' 1 ' , increment cnt	if ( s [ i ] == ' 1 ' ) cnt ++ ;
for i = 1 to cnt inclusive	for ( i = 1 ; i <= cnt ; i ++ )
set x to n / i	x = n / i ;
set y to n % i	y = n % i ;
set p to ( c1 + c2 * ( x - 1 ) * ( x - 1 ) ) * ( i - y )	p = ( c1 + c2 * ( x - 1 ) * ( x - 1 ) ) * ( i - y ) ;
set q to ( c1 + ( c2 * x * x ) ) * y	q = ( c1 + ( c2 * x * x ) ) * y ;
set m to p + q	m = p + q ;
set mn to minimum of mn and m	mn = min ( mn , m ) ;
print mn print newline	cout << mn << endl ;
declare constant int MAX_N = 2e5 + 10	const int MAX_N = 2e5 + 10 ;
declare constant int MAX_LOG = 62	const int MAX_LOG = 62 ;
declare constant long long INF = 1e18 + 1	const long long INF = 1e18 + 1 ;
declare constant long long MOD = 1e9 + 7	const long long MOD = 1e9 + 7 ;
declare long long variables n , c1 , c2 and ans with ans = INF	long long n , c1 , c2 , ans = INF ;
create string s	string s ;
declare integer variable m	int m ;
read input to n , c1 and c2	cin >> n >> c1 >> c2 ;
read s	cin >> s ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if s [ i ] = ' 1 ' , increment m	if ( s [ i ] == ' 1 ' ) m ++ ;
for i from 1 to m inclusive	for ( int i = 1 ; i <= m ; i ++ )
create long long k = n / i	long long k = n / i ;
create long long r = n % i	long long r = n % i ;
declare long long variable tmp = r * ( c1 + c2 * k * k )	long long tmp = r * ( c1 + c2 * ( k ) * k ) ;
add ( i - r ) * ( c1 + c2 * ( k - 1 ) * ( k - 1 ) ) to tmp	tmp += ( i - r ) * ( c1 + c2 * ( k - 1 ) * ( k - 1 ) ) ;
set ans to min of ans and tmp	ans = min ( ans , tmp ) ;
print ans	cout << ans << endl ;
n = long long	long long n ;
read n	cin >> n ;
if n is 1 print 4	if ( n == 1 ) cout << 4 ;
if n is 2 print 22	if ( n == 2 ) cout << 22 ;
if n is 3 print 27	if ( n == 3 ) cout << 27 ;
if n is 4 print 58	if ( n == 4 ) cout << 58 ;
if n is 5 print 85	if ( n == 5 ) cout << 85 ;
if n is 6 print 94	if ( n == 6 ) cout << 94 ;
if n is 7 print 121	if ( n == 7 ) cout << 121 ;
if n is 8 print 166	if ( n == 8 ) cout << 166 ;
if n is 9 print 202	if ( n == 9 ) cout << 202 ;
if n is 10 print 265	if ( n == 10 ) cout << 265 ;
if n is 11 print 274	if ( n == 11 ) cout << 274 ;
if n is 12 print 319	if ( n == 12 ) cout << 319 ;
if n is 13 print 346	if ( n == 13 ) cout << 346 ;
if n is 14 print 355	if ( n == 14 ) cout << 355 ;
if n is 15 print 378	if ( n == 15 ) cout << 378 ;
if n is 16 print 382	if ( n == 16 ) cout << 382 ;
if n is 17 print 391	if ( n == 17 ) cout << 391 ;
if n is 18 print 438	if ( n == 18 ) cout << 438 ;
if n is 19 print 454	if ( n == 19 ) cout << 454 ;
if n is 20 print 483	if ( n == 20 ) cout << 483 ;
if n is 21 print 517	if ( n == 21 ) cout << 517 ;
if n is 22 print 526	if ( n == 22 ) cout << 526 ;
if n is 23 print 535	if ( n == 23 ) cout << 535 ;
if n is 24 print 562	if ( n == 24 ) cout << 562 ;
if n is 25 print 576	if ( n == 25 ) cout << 576 ;
if n is 26 print 588	if ( n == 26 ) cout << 588 ;
if n is 27 print 627	if ( n == 27 ) cout << 627 ;
if n is 28 print 634	if ( n == 28 ) cout << 634 ;
if n is 29 print 636	if ( n == 29 ) cout << 636 ;
if n is 30 print 645	if ( n == 30 ) cout << 645 ;
print a new line	cout << endl ;
in the function es_primo that takes integer n and returns bool	bool es_primo ( int n )
if n < 4 , return true	if ( n < 4 ) return true ;
for i = 2 to i * i < = n	for ( int i = 2 ; i * i <= n ; i ++ )
if n modulo i is 0 , return false	if ( n % i == 0 ) return false ;
return true	return true ;
in the function sum_digitos that takes integer n and returns int	int sum_digitos ( int n )
sum = integer with sum = 0	int sum = 0 ;
while n > 0	while ( n > 0 )
sum = sum + n modulo 10	sum += n % 10 ;
n = n / 10	n /= 10 ;
return sum	return sum ;
in the function sum_factores that takes integer n and returns integer	int sum_factores ( int n )
sum = integer with sum = 0	int sum = 0 ;
for i = 2 to i * i < = n	for ( int i = 2 ; i * i <= n ; i ++ )
while n modulo i is 0	while ( n % i == 0 )
sum = sum + sum_digitos ( i )	sum += sum_digitos ( i ) ;
n = n / i	n /= i ;
if n > 1 , sum = sum + sum_digitos ( n )	if ( n > 1 ) { sum += sum_digitos ( n ) ; }
return sum	return sum ;
in the function busca_sig that takes integer n and returns integer	int busca_sig ( int n )
do increment n , while es_primo ( n ) or sum_digitos ( n ) is not sum_factores ( n )	do { n ++ ; } while ( es_primo ( n ) || sum_digitos ( n ) != sum_factores ( n ) ) ;
return n	return n ;
n = integer	int n ;
read n	cin >> n ;
act = integer with act = 0	int act = 0 ;
for i = 1 to n , act = busca_sig ( act )	for ( int i = 1 ; i <= n ; i ++ ) { act = busca_sig ( act ) ; }
print act	cout << act << " \n " ;
declare integer variable n	int n ;
declare string t	string t ;
declare int k	int k ;
create int ans_len	int ans_len ;
create char array str with 20 * 100010 elements	char str [ 20 * 100010 ] ;
create int array chars s with size 80 * 100010	int chars [ 80 * 100010 ] ;
function push_up with int argument rt	void push_up ( int rt )
chars [ rt ] = chars [ rt < < 1 ] + chars [ rt < < 1 | 1 ]	chars [ rt ] = chars [ rt << 1 ] + chars [ rt << 1 | 1 ] ;
void function update with int arguments L , R , left , right and rt	void update ( int L , int R , int left , int right , int rt )
if chars [ rt ] > = right - left + 1 , return	if ( chars [ rt ] >= right - left + 1 ) return ;
if left is equal to right	if ( left == right )
create char array s with rt elements	chars [ rt ] = 1 ;
set str [ left ] to t [ left - L ]	str [ left ] = t [ left - L ] ;
return	return ;
if L > right or R < left , return	if ( L > right || R < left ) return ;
int mid = ( left + right ) > > 1	int mid = ( left + right ) >> 1 ;
if mid > = R	if ( mid >= R )
call update with arguments L , R , left , mid and rt < < 1	update ( L , R , left , mid , rt << 1 ) ;
else if mid is less than L	else if ( mid < L )
call update with arguments L , R , mid + 1 , right and rt < < 1 | 1	update ( L , R , mid + 1 , right , rt << 1 | 1 ) ;
else	else
call update with arguments L , R , left , mid and rt < < 1	update ( L , R , left , mid , rt << 1 ) ;
call update with arguments L , R , mid + 1 , right and rt < < 1 | 1	update ( L , R , mid + 1 , right , rt << 1 | 1 ) ;
call push_up ( rt )	push_up ( rt ) ;
create int pos	int pos ;
declare integer endpos	int endpos ;
read n and loop further	while ( cin >> n )
change ans_len to 0	ans_len = 0 ;
for i from 1 to 2000010 exclusive , assign ' a ' to str [ i ]	for ( int i = 1 ; i < 2000010 ; i ++ ) str [ i ] = ' a ' ;
set sizeof ( chars ) bytes at the pointer chars to 0	memset ( chars , 0 , sizeof ( chars ) ) ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read input to t and k	cin >> t >> k ;
loop j from 1 to k inclusive	for ( int j = 1 ; j <= k ; j ++ )
read pos	cin >> pos ;
set endpos to pos + length of t - 1	endpos = pos + t . length ( ) - 1 ;
call update with arguments pos , endpos , 1 , 2000010 and 1	update ( pos , endpos , 1 , 2000010 , 1 ) ;
if j = k	if ( j == k )
change ans_len to endpos if endpos is greater than ans_len	if ( endpos > ans_len ) ans_len = endpos ;
for i from 1 to ans_len inclusive , print str [ i ]	for ( int i = 1 ; i <= ans_len ; i ++ ) cout << str [ i ] ;
print new line	cout << endl ;
create long long n , k , p	long long n , k , p ;
read n read k read p	cin >> n >> k >> p ;
create long long arrays pe , ke , with pe size 1001 , ke size 2002	long long pe [ 1001 ] , ke [ 2002 ] ;
for a = 0 to n exclusive , read pe [ a ]	for ( int a = 0 ; a < n ; a ++ ) cin >> pe [ a ] ;
for a = 0 to k exclusive , read ke [ a ]	for ( int a = 0 ; a < k ; a ++ ) cin >> ke [ a ] ;
sort elements from pe to pe + n	sort ( pe , pe + n ) ;
sort elements from ke to pe + k	sort ( ke , ke + k ) ;
create long long mins with mins = 99999999999999	long long mins = 99999999999999 ;
for a = 0 to k - n + 1 exclusive	for ( int a = 0 ; a < k - n + 1 ; a ++ )
create long long tmp with tmp = 0	long long tmp = 0 ;
for b = 0 to n exclusive , set tmp to maximum of tmp and absolute value of ( pe [ b ] - ke [ a + b ] ) + absolute value of ( ke [ a + b ] - p )	for ( int b = 0 ; b < n ; b ++ ) tmp = max ( tmp , abs ( pe [ b ] - ke [ a + b ] ) + abs ( ke [ a + b ] - p ) ) ;
set mins to minimum of tmp and mins	mins = min ( tmp , mins ) ;
print mins print newline	cout << mins << endl ;
mod = const int with mod = 1000000007	const int mod = 1000000007 ;
inf = const long long with inf = 1000000000000	const long long inf = 1000000000000 ;
n , k , p = int	int n , k , p ;
read n then k then p	cin >> n >> k >> p ;
A , B = vector of long longs	vector < long long > A , B ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
x = long long	long long x ;
read x	cin >> x ;
append x to A	A . push_back ( x ) ;
for i = 0 to k	for ( int i = 0 ; i < k ; i ++ )
x = long long	long long x ;
read x	cin >> x ;
append x to B	B . push_back ( x ) ;
sort vector A	sort ( A . begin ( ) , A . end ( ) ) ;
sort vector B	sort ( B . begin ( ) , B . end ( ) ) ;
ans = long long with ans = inf	long long ans = inf ;
for i = 0 to k - n inclusive	for ( int i = 0 ; i <= k - n ; i ++ )
temp = long long with temp = 0	long long temp = 0 ;
index = int with index = i	int index = i ;
for j = 0 to n	for ( int j = 0 ; j < n ; j ++ )
temp2 = long long with temp2 = 0	long long temp2 = 0 ;
set temp2 to the sum the absolute value of A [ j ] - B [ index ] and the absolute value of B [ index ] - p	temp2 = abs ( A [ j ] - B [ index ] ) + abs ( B [ index ] - p ) ;
set temp to max between temp and temp2	temp = max ( temp , temp2 ) ;
increment index	index ++ ;
set ans to min between ans and temp	ans = min ( ans , temp ) ;
print ans	cout << ans << ' \n ' ;
N = constant integer with value of 2e5 + 50	const int N = 2e5 + 50 ;
M = constant integer with value of 1e6	const int M = 1e6 ;
oo = constant long long with value of 1e18	const long long oo = 1e18 ;
mod = constant integer with value of 1e9 + 7	const int mod = 1e9 + 7 ;
a , b = long long arrays with a length of 1010 and b length of 2010	long long a [ 1010 ] , b [ 2010 ] ;
n , k , p = long long	long long n , k , p ;
in function can that takes long long variable md and returns a boolean	bool can ( long long md )
id = long long with value of 0	long long id = 0 ;
for i = 0 to k exclusive	for ( int i = 0 ; i < k ; i ++ )
if the absolute value of ( a [ id ] - b [ i ] ) plus the absolute value of ( b [ i ] - p ) is greater than md then continue	if ( abs ( a [ id ] - b [ i ] ) + abs ( b [ i ] - p ) > md ) continue ;
add 1 to id	id ++ ;
if id equals n return 1	if ( id == n ) return 1 ;
read n , k , and p	cin >> n >> k >> p ;
for i = 0 to n exclusive read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to k exclusive read b [ i ]	for ( int i = 0 ; i < k ; i ++ ) cin >> b [ i ] ;
sort the first n elements of a	sort ( a , a + n ) ;
sort the first k elements of b	sort ( b , b + k ) ;
md , lo , hi , and ans = long long with lo value of 0 and hi value of 2e9 and ans value of 0	long long md , lo = 0 , hi = 2e9 , ans = 0 ;
while lo is less than or equal to hi	while ( lo <= hi )
set md to half of lo plus hi	md = ( lo + hi ) / 2 ;
if call can with argument of md is true	if ( can ( md ) )
set hi to md minus 1	hi = md - 1 ;
set ans to md	ans = md ;
else	else
set lo to md plus 1	lo = md + 1 ;
print ans	cout << ans << endl ;
N = const long long with N = 1000 + 5	const long long N = 1000 + 5 ;
N = const long long with K = 2000 + 5	const long long K = 2000 + 5 ;
n , m , fi = long long	long long n , m , fi ;
p = array of N long long	long long p [ N ] ;
k = array of K long long	long long k [ K ] ;
in the function di that takes long long a and b and returns long long	long long di ( long long a , long long b )
return abs of a - b	return abs ( a - b ) ;
in the function ok that takes long long t and returns bool	bool ok ( long long t )
set poz to 1	long long poz = 1 ;
for i = 1 to n inclusive	for ( long long i = 1 ; i <= n ; i ++ )
if poz > m return 0	if ( poz > m ) return 0 ;
while 1	while ( 1 )
tot = long long with tot = di of p [ i ] and k [ poz ] + di of k [ poz ] and fi	long long tot = di ( p [ i ] , k [ poz ] ) + di ( k [ poz ] , fi ) ;
if tot < = t break loop	if ( tot <= t ) break ;
increment poz	poz ++ ;
if poz > m return 0	if ( poz > m ) return 0 ;
increment poz	poz ++ ;
return 1	return 1 ;
read n , m , fi	cin >> n >> m >> fi ;
for i = 1 to n inclusive read p [ i ]	for ( long long i = 1 ; i <= n ; i ++ ) { cin >> p [ i ] ; }
for i = 1 to m inclusive read k [ i ]	for ( long long i = 1 ; i <= m ; i ++ ) { cin >> k [ i ] ; }
sort p + 1 and p + n + 1	sort ( p + 1 , p + n + 1 ) ;
sort k + 1 and k + m + 1	sort ( k + 1 , k + m + 1 ) ;
r , pas = long long with r = - 1 , pas = 1LL < < 60	long long r = - 1 , pas = ( 1LL << 60 ) ;
while pas	while ( pas )
if ok ( r + pas ) is 0 r = r + pas	if ( ok ( r + pas ) == 0 ) { r += pas ; }
pas = pas > > 1	pas >>= 1 ;
increment r	r ++ ;
print r	cout << r << " \n " ;
create long longs n , k , p	long long n , k , p ;
create long long arrays a , b , with a size 1005 , b size 2005	long long a [ 1005 ] , b [ 2005 ] ;
declare moze with long long x as argument , returning boolean	bool moze ( long long x )
create long long h with h = 0	long long h = 0 ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
if h is k , return false from function	if ( h == k ) return false ;
create boolean sat with sat = false	bool sat = false ;
while h is less than k	while ( h < k )
create long long d with d = absolute value of ( a [ i ] - b [ h ] ) + absolute value of ( b [ h ] - p )	long long d = abs ( a [ i ] - b [ h ] ) + abs ( b [ h ] - p ) ;
increment h	h ++ ;
if d is less than or equal to x	if ( d <= x )
set sat to true	sat = true ;
break loop	break ;
if not sat , return false from function	if ( ! sat ) return false ;
return true from function	return true ;
read n read k read p	cin >> n >> k >> p ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = 0 to k exclusive , read b [ i ]	for ( int i = 0 ; i < k ; i ++ ) cin >> b [ i ] ;
sort elements from a to a + n	sort ( a , a + n ) ;
sort elements from b to b + n	sort ( b , b + k ) ;
create long longs l , r , o , with l = 0 , r = 4e9 , o = - 1	long long l = 0 , r = 4e9 , o = - 1 ;
while l is less than or equal to r	while ( l <= r )
create long long m with m = ( l + r ) bitshift right 1	long long m = ( l + r ) >> 1 ;
if result of run moze with m as argument is true	if ( moze ( m ) )
set o to m	o = m ;
set r to m - 1	r = m - 1 ;
else	else
set l to m + 1	l = m + 1 ;
print o print ' \ n '	cout << o << ' \n ' ;
MOD = const int with MOD = 1e9 + 7	const int MOD = 1e9 + 7 ;
INF = const long long int with INF = 1e18	const long long int INF = 1e18 ;
keya , per = vectors of long long int	vector < long long int > key , per ;
ans = long long int with ans = INF	long long int ans = INF ;
i , j , k , n , p , x = integers	int i , j , k , n , p , x ;
read n , k , p	cin >> n >> k >> p ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read x	cin >> x ;
append x in per	per . push_back ( x ) ;
for i = 0 to k exclusive	for ( i = 0 ; i < k ; i ++ )
read x	cin >> x ;
append x in key	key . push_back ( x ) ;
sort begin of per and end of per	sort ( per . begin ( ) , per . end ( ) ) ;
sort begin of key and end of key	sort ( key . begin ( ) , key . end ( ) ) ;
for j = 0 to j + n - 1 < k	for ( j = 0 ; j + n - 1 < k ; j ++ )
now = long long int with now = 0	long long int now = 0 ;
for i = 0 to n exclusive now = max of now and abs ( per [ i ] - key [ j + i ] ) + abs ( key [ j + i ] - p )	for ( i = 0 ; i < n ; i ++ ) { now = max ( now , abs ( per [ i ] - key [ j + i ] ) + abs ( key [ j + i ] - p ) ) ; }
ans = min of ans and now	ans = min ( ans , now ) ;
print ans	cout << ans << ' \n ' ;
create long longs n , k , p	long long n , k , p ;
read n read k read p	cin >> n >> k >> p ;
create long long arrays pe , ke , with pe size 1001 , ke size 2002	long long pe [ 1001 ] , ke [ 2002 ] ;
for a = 0 to n exclusive , read pe [ a ]	for ( int a = 0 ; a < n ; a ++ ) cin >> pe [ a ] ;
for a = 0 to k exclusive , read ke [ a ]	for ( int a = 0 ; a < k ; a ++ ) cin >> ke [ a ] ;
sort elements from pe to pe + n	sort ( pe , pe + n ) ;
sort elements from ke to ke + n	sort ( ke , ke + k ) ;
create long long mins with mins = 99999999999999	long long mins = 99999999999999 ;
for a = 0 to k - n + 1 exclusive	for ( int a = 0 ; a < k - n + 1 ; a ++ )
create long long tmp with tmp = 0	long long tmp = 0 ;
for b = 0 to n exclusive , set tmp to maximum of ( tmp and absolute value of ( pe [ b ] - ke [ a + b ] ) + absolute value of ( ke [ a + b ] - p ) )	for ( int b = 0 ; b < n ; b ++ ) tmp = max ( tmp , abs ( pe [ b ] - ke [ a + b ] ) + abs ( ke [ a + b ] - p ) ) ;
set mins to minimum of tmp and mins	mins = min ( tmp , mins ) ;
print mins print newline	cout << mins << endl ;
n , k , p = integer	int n , k , p ;
person = long long array of size 1005 , key = long long array of size 2005	long long person [ 1005 ] , key [ 2005 ] ;
ans , tmp = long long	long long ans , tmp ;
while read n , k , p	while ( cin >> n >> k >> p )
ans = 99999999999999LL	ans = 99999999999999LL ;
for i = 0 to n exclusive , read person [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> person [ i ] ; }
for i = 0 to k exclusive , read key [ i ]	for ( int i = 0 ; i < k ; i ++ ) { cin >> key [ i ] ; }
sort person and person + n	sort ( person , person + n ) ;
sort key and key + k	sort ( key , key + k ) ;
for i = 0 to i + n < = k	for ( int i = 0 ; i + n <= k ; i ++ )
tmp = 0	tmp = 0 ;
for j = 0 to n exclusive , tmp = max of tmp and abs of key [ i + j ] - person [ j ] + abs of p - key [ i + j ]	for ( int j = 0 ; j < n ; j ++ ) { tmp = max ( tmp , abs ( key [ i + j ] - person [ j ] ) + abs ( p - key [ i + j ] ) ) ; }
ans = min of tmp and ans	ans = min ( tmp , ans ) ;
print ans	cout << ans << endl ;
create 64 bit integer infint64_t with infint64_t = 9223372036854775807LL	const int64_t infint64_t = 9223372036854775807LL ;
declare solve with no arguments , returning void	void solve ( )
create 64 bit integers n , k , p	int64_t n , k , p ;
read n read k read p	cin >> n >> k >> p ;
create 64 bit integer vector a initialized with n	vector < int64_t > a ( n ) ;
for i = 0 to n exclusive , read a [ i ]	for ( int64_t i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort elements from beginning of a to end of a	sort ( a . begin ( ) , a . end ( ) ) ;
create 64 bit integer vector b initialized with k	vector < int64_t > b ( k ) ;
for i = 0 to k exclusive , read b [ i ]	for ( int64_t i = 0 ; i < k ; i ++ ) { cin >> b [ i ] ; }
sort elements from beginning of b to end of b	sort ( b . begin ( ) , b . end ( ) ) ;
create 64 bit integer best with best = infint64_t	int64_t best = infint64_t ;
for i = 0 to k - n inclusive	for ( int64_t i = 0 ; i <= k - n ; i ++ )
create 64 bit integer curWorst with curWorst = 0	int64_t curWorst = 0 ;
for j = 0 to n exclusive	for ( int64_t j = 0 ; j < n ; j ++ )
create 64 bit integer cur with cur = absolute value of ( b [ i + j ] - p ) + absolute value of ( b [ i + j ] - a [ j ] )	int64_t cur = abs ( b [ i + j ] - p ) + abs ( b [ i + j ] - a [ j ] ) ;
set curWorst to maximum of curWorst and cur	curWorst = max ( curWorst , cur ) ;
set best to minimum of best and curWorst	best = min ( best , curWorst ) ;
print best print newline	cout << best << endl ;
run solve	solve ( ) ;
create long long t	long long t ;
read t	cin >> t ;
decrement t and loop further , while t > 0	while ( t -- )
declare long longs a and b	long long a , b ;
read a and b	cin >> a >> b ;
long long c = pow ( a * b , 1 . 0 / 3 . 0 )	long long c = pow ( a * b , 1.0 / 3.0 ) ;
increment c while c * c * c < a * b	while ( c * c * c < a * b ) c ++ ;
decrement c while c * c * c > a * b	while ( c * c * c > a * b ) c -- ;
if c * c * c = a * b & & a % c = 0 & & b % c = 0	if ( c * c * c == a * b && a % c == 0 && b % c == 0 )
print " Yes \ n "	cout << " Yes\n " ;
else	else
print " No \ n "	cout << " No\n " ;
let q be a long integer	long long q ;
read q	cin >> q ;
while q value is decreased by 1	while ( q -- )
let a , b be long integers	long long a , b ;
read a and b	cin >> a >> b ;
let prod be long integer with prod = a * b	long long prod = a * b ;
let round1 be long integer with round1 = round ( cbrt ( prod ) )	long long round1 = round ( cbrt ( prod ) ) ;
if a modulus round1 is equal to 0 and b modulus round1 is equal to 0	if ( a % round1 == 0 && b % round1 == 0 )
if round1 is equal to 1	if ( round1 == 1 )
if a is equal to 1 and b is equal to 1	if ( a == 1 && b == 1 )
print Yes	cout << " Yes "
print newline	<< " \n " ;
else do the following	else
print No	cout << " No "
print newline	<< " \n " ;
else do the following	else
print Yes	cout << " Yes "
print newline	<< " \n " ;
else do the following	else
print No	cout << " No "
print newline	<< " \n " ;
q = long long	long long q ;
read q	cin >> q ;
while q is not 0 subtract 1 from q do	while ( q -- )
a , b = long long	long long a , b ;
read a and b	cin >> a >> b ;
prod = long long with value of a * b	long long prod = a * b ;
round1 = long long with value of the cubic root of prod rounded to the nearest whole number	long long round1 = round ( cbrt ( prod ) ) ;
if a mod round1 equals 0 and b mod round1 equals 0	if ( a % round1 == 0 && b % round1 == 0 )
if round1 equals 1	if ( round1 == 1 )
if a and b equal 1	if ( a == 1 && b == 1 )
print Yes	cout << " Yes "
print a new line	<< " \n " ;
else	else
print No	cout << " No "
print a new line	<< " \n " ;
else	else
print Yes	cout << " Yes "
print a new line	<< " \n " ;
else	else
print No	cout << " No "
print a new line	<< " \n " ;
in function maxx taking two references to long long ints a and b and returning a long long int	long long int maxx ( long long int & a , long long int & b )
return a if it is greater than b else return b	return a > b ? a : b ;
in function minn taking two references to long long ints a and b and returning a long long int	long long int minn ( long long int & a , long long int & b )
return b if a is greater than b else return a	return a > b ? b : a ;
define empty function boostISO	void boostIO ( ) { }
in function gcd taking two long long ints a and b and returning a long long int	long long int gcd ( long long int a , long long int b )
return a if b is 0 else return gcd of b and a mod b	return b == 0 ? a : gcd ( b , a % b ) ;
in function int_gcd taking two ints a and b and returning an int	int int_gcd ( int a , int b )
returna if b is 0 else return int_gcd of b and a mod b	return b == 0 ? a : int_gcd ( b , a % b ) ;
in function lcm taking two long long ints a and b and returning a long long int	long long int lcm ( long long int a , long long int b )
return a / gcd of a and b * b	return a / gcd ( a , b ) * b ;
in function poww taking three long long ints base , exp and mod and returning a long long int	long long int poww ( long long int base , long long int exp , long long int mod )
set base to base modulo mod	base %= mod ;
result = long long int with result = 1	long long int result = 1 ;
loop while exp is greater than 0	while ( exp > 0 )
if exp bitwise - and 1 is 1 then set result to ( result * base ) modulo mod	if ( exp & 1 ) result = ( result * base ) % mod ;
set base to ( base * base ) modulo mod	base = ( base * base ) % mod ;
set exp to exp bitshift right by 1	exp >>= 1 ;
return result	return result ;
in function cube_root taking a long long int x and returning an int	int cube_root ( long long int x )
l , r = long long int with l = 1 and r = 1e6 + 10	long long int l = 1 , r = 1e6 + 10 ;
loop while l is less than r	while ( l < r )
mid = long long int with mid = ( l + r ) bitshift right by 1	long long int mid = ( l + r ) >> 1 ;
if mid * mid * mid is greater or equal to x	if ( mid * mid * mid >= x )
set r to mid	r = mid ;
else	else
set l ti mid + 1	l = mid + 1 ;
if l * l * l is x then return l	if ( l * l * l == x ) { return l ; }
return - 1	return - 1 ;
call boostISO	boostIO ( ) ;
t = int	int t ;
read t	cin >> t ;
loop t times	while ( t -- )
a , b = long long int	long long int a , b ;
read a then b	cin >> a >> b ;
value = int with value = cube_root of a * b	int value = cube_root ( a * b ) ;
if value is not - 1	if ( value != - 1 )
g = long long int with g = gcd of a and b	long long int g = gcd ( a , b ) ;
if g is a multiple of value	if ( g % value == 0 )
print " YES "	puts ( " Yes " ) ;
continue loop	continue ;
print " NO "	puts ( " No " ) ;
create const integer MAX = 2e5 + 7	const int MAX = 2e5 + 7 ;
create const integer INF = 0x3f3f3f3f	const int INF = 0x3f3f3f3f ;
declare integer variables N , M and K	int N , M , K ;
declare an arrays of integers prea and preb with size MAX	int prea [ MAX ] , preb [ MAX ] ;
integer function cal with integer arguments a and b and char argument c	int cal ( int a , char c , int b )
if c = ' & ' , return a & b	if ( c == ' & ' ) return a & b ;
if c = ' | ' , return a | b	if ( c == ' | ' ) return a | b ;
return a ^ b	return a ^ b ;
read N and loop further	while ( cin >> N )
create integers x = 0 and y = 1023	int x = 0 , y = 1023 ;
for i from 0 to N exclusive	for ( int i = 0 ; i < N ; i ++ )
declare character c	char c ;
declare integer a	int a ;
read c and a	cin >> c >> a ;
set x to cal ( x , c , a )	x = cal ( x , c , a ) ;
set y to cal ( y , c , a )	y = cal ( y , c , a ) ;
declare integers a and b = 0 and c = 1023	int a = 0 , b = 0 , c = 1023 ;
for integer i = 0 to 10 exclusive	for ( int i = 0 ; i < 10 ; i ++ )
integer p = 1 < < i	int p = 1 << i ;
if x & p ! = 0	if ( x & p )
if y & p ! = 0	if ( y & p )
a | = p	a |= p ;
else	else
b | = p	b |= p ;
else	else
if y & p = 0 , set c to c ^ p	if ( ! ( y & p ) ) c ^= p ;
print 3	cout << 3 << endl ;
print " | " and a	cout << " |  " << a << endl ;
print " ^ " and b	cout << " ^  " << b << endl ;
print " & " and c	cout << " &  " << c << endl ;
n , xx = long long	long long n , xx ;
read n	cin >> n ;
m1 = 0 , m2 = 1023	long long m1 = 0 , m2 = 1023 ;
rr and ss = array of 1024 long long	long long rr [ 1024 ] , ss [ 1024 ] ;
for i = 0 to 1024 exclusive	for ( long long i = 0 ; i < 1024 ; i ++ )
rr [ i ] = i	rr [ i ] = i ;
ss [ i ] = i	ss [ i ] = i ;
while decremented value of n is not 0	while ( n -- )
r = char	char r ;
read r , xx	cin >> r >> xx ;
if r is ' | '	if ( r == ' | ' )
m1 = m1 or xx	m1 = m1 | xx ;
m2 = m2 or xx	m2 = m2 | xx ;
for i = 0 to 1024 exclusive rr [ i ] = rr [ i ] or xx	for ( long long i = 0 ; i < 1024 ; i ++ ) { rr [ i ] = rr [ i ] | xx ; }
else if r is ' ^ '	else if ( r == ' ^ ' )
m1 = m1 xor xx	m1 = m1 ^ xx ;
m2 = m2 xor xx	m2 = m2 ^ xx ;
for i = 0 to 1024 exclusive rr [ i ] = rr [ i ] xor xx	for ( long long i = 0 ; i < 1024 ; i ++ ) { rr [ i ] = rr [ i ] ^ xx ; }
else	else
m1 = m1 and xx	m1 = m1 & xx ;
m2 = m2 and xx	m2 = m2 & xx ;
for i = 0 to 1024 exclusive rr [ i ] = rr [ i ] and xx	for ( long long i = 0 ; i < 1024 ; i ++ ) { rr [ i ] = rr [ i ] & xx ; }
x , a , o = 0	long long x = 0 , a = 0 , o = 0 ;
for i = 0 to 10 exclusive	for ( long long i = 0 ; i < 10 ; i ++ )
u = m1 and ( 2 ^ ( i + 1 ) )	long long u = m1 & ( 1 << i ) ;
v = m2 and ( 2 ^ ( i + 1 ) )	long long v = m2 & ( 1 << i ) ;
if m1 and ( 2 ^ ( i + 1 ) ) and v is 0	if ( m1 & ( 1 << i ) && v == 0 )
x = x or ( 2 ^ ( i + 1 ) )	x = x | ( 1 << i ) ;
a = a or ( 2 ^ ( i + 1 ) )	a = a | ( 1 << i ) ;
else if u is 0 and m2 and ( 2 ^ ( i + 1 ) )	else if ( u == 0 && m2 & ( 1 << i ) )
a = a or ( 2 ^ ( i + 1 ) )	a = a | ( 1 << i ) ;
else if m1 and ( 2 ^ ( i + 1 ) ) and m2 and ( 2 ^ ( i + 1 ) )	else if ( m1 & ( 1 << i ) && m2 & ( 1 << i ) )
a = a or ( 2 ^ ( i + 1 ) )	a = a | ( 1 << i ) ;
o = o or ( 2 ^ ( i + 1 ) )	o = o | ( 1 << i ) ;
print " 3 "	cout << " 3 " << ' \n ' ;
print " | " and o	cout << " |  " << o << ' \n ' ;
print " ^ " and x	cout << " ^  " << x << ' \n ' ;
print " & " and a	cout << " &  " << a << ' \n ' ;
create long longs n , M , M2 , s , with s = 0	long long n , M , M2 , s = 0 ;
create long long array t with size 100005	long long t [ 100005 ] ;
create long long array t2 with size 100005	long long t2 [ 100005 ] ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read t [ i ]	cin >> t [ i ] ;
increment s by t [ i ]	s += t [ i ] ;
for i = 0 to n exclusive , read t2 [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cin >> t2 [ i ] ; }
sort elements from t2 to t2 + n	sort ( t2 , t2 + n ) ;
if s is less than or equal to t2 [ n - 1 ] + t2 [ n - 2 ]	if ( s <= t2 [ n - 1 ] + t2 [ n - 2 ] )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
create long longs n , sum with sum = 0	long long n , sum = 0 ;
read n	cin >> n ;
create long long array a with size n	long long a [ n ] ;
create long long array b with size n	long long b [ n ] ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment sum by a [ i ]	sum += a [ i ] ;
for i = 0 to n exclusive , read b [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
sort elements from b to b + n	sort ( b , b + n ) ;
print " YES " if b [ n - 2 ] + b [ n - 1 ] is greater than or equal to sum , else " NO " , print ' \ n '	cout << ( b [ n - 2 ] + b [ n - 1 ] >= sum ? " YES " : " NO " ) << ' \n ' ;
create long long array num with 100010 elements	long long num [ 100010 ] ;
function cmp with integer arguments a and b that returns boolean	bool cmp ( int a , int b )
return a > b	return a > b ;
declare long long variable sum = 0	long long sum = 0 ;
declare integer n	int n ;
read n	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
declare integer a	int a ;
read a	cin >> a ;
increase sum by a	sum += a ;
read n elements into num	for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }
sort num using cmp as comparator function	sort ( num , num + n , cmp ) ;
if num [ 0 ] + num [ 1 ] > = sum	if ( num [ 0 ] + num [ 1 ] >= sum )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
declare long long variables cans , sum and aux , with sum = 0	long long cans , sum = 0 , aux ;
read cans	cin >> cans ;
val is an array of long longs with size cans + 2	long long val [ cans + 2 ] ;
for i = 0 to cans exclusive	for ( int i = 0 ; i < cans ; i ++ )
read aux	cin >> aux ;
increase sum by aux	sum += aux ;
read val cans times	for ( int i = 0 ; i < cans ; i ++ ) cin >> val [ i ] ;
sort val	sort ( val , val + cans ) ;
if sum < = val [ cans - 1 ] + val [ cans - 2 ]	if ( sum <= val [ cans - 1 ] + val [ cans - 2 ] )
print " YES \ n "	cout << " YES\n " ;
else	else
print " NO \ n "	cout << " NO\n " ;
let n , sum be long integers with sum is equal to 0	long long n , sum = 0 ;
read n	cin >> n ;
b = array of long inters of length n	long long b [ n ] ;
for long integer i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
let x be a long integer	long long x ;
read x	cin >> x ;
sum is equal to sum + x	sum += x ;
for long integer i = 0 to n exclusive , read ith element of b array	for ( long long i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
sorting the data of b , b + n	sort ( b , b + n ) ;
print YES if ( b [ n - 2 ] + b [ n - 1 ] > = sum ) else print NO	cout << ( b [ n - 2 ] + b [ n - 1 ] >= sum ? " YES " : " NO " ) << ' \n ' ;
create constant integer N with N = 1e5 + 10	const int N = 1e5 + 10 ;
create integer n	int n ;
read n	cin >> n ;
create integer arrays a , b , with a size N , b size N	int a [ N ] , b [ N ] ;
create long long sum with sum = 0	long long sum = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment sum by a [ i ]	sum += a [ i ] ;
for i = 0 to n exclusive , read b [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
sort elements from b to b + n using integer greater to compare	sort ( b , b + n , greater < int > ( ) ) ;
if sum is less than or equal to ( b [ 0 ] + b [ 1 ] )	if ( sum <= ( b [ 0 ] + b [ 1 ] ) )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
declare constant integer N = 1e5 + 10	const int N = 1e5 + 10 ;
declare integer variable n	int n ;
read n	cin >> n ;
create long long arrays a and b with N elements	long long a [ N ] , b [ N ] ;
declare long long sum = 0	long long sum = 0 ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increase sum by a [ i ]	sum += a [ i ] ;
for i = 0 to n exclusive read b [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
sort b using greater function as comparer	sort ( b , b + n , greater < int > ( ) ) ;
if sum < = ( b [ 0 ] + b [ 1 ] )	if ( sum <= ( b [ 0 ] + b [ 1 ] ) )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
let a , b , i , n be integers where a and b are arrays of length 100001	int a [ 100001 ] , b [ 100001 ] , i , n ;
let s be a long integer	long long s ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read ith element of array a	cin >> a [ i ] ;
s is equal to s + ith element of array a	s += a [ i ] ;
for i = 1 to n inclusive , read ith element of array b	for ( i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ;
sort the values b + 1 , b + n + 1	sort ( b + 1 , b + n + 1 ) ;
if ( nth term of array b + [ n - 1 ] th term of array b is greater than or equal to s )	if ( b [ n ] + b [ n - 1 ] >= s )
print YES and newline	cout << " YES " << endl ;
else do the following	else
print NO and newline	cout << " NO " << endl ;
function gcd with long long arguments a and b that returns long long	long long gcd ( long long a , long long b )
if b = 0 , return a	if ( b == 0 ) return a ;
return gcd ( b , a % b )	return gcd ( b , a % b ) ;
function lcm with long long arguments a and b that returns long long	long long lcm ( long long a , long long b )
return a * b / gcd ( a , b )	return a * b / gcd ( a , b ) ;
create long longs i and j	long long i , j ;
declare long long n	long long n ;
read n	cin >> n ;
create vectors of long long a and b with n elements each	vector < long long > a ( n ) , b ( n ) ;
read n elements into a	for ( long long i = 0 ; i < ( n ) ; i ++ ) cin >> a [ i ] ;
read n elements into b	for ( long long i = 0 ; i < ( n ) ; i ++ ) cin >> b [ i ] ;
declare long long variable sum = 0	long long sum = 0 ;
add all elements of a to the sum one by one	for ( long long i = 0 ; i < ( n ) ; i ++ ) sum += a [ i ] ;
sort array b	sort ( b . begin ( ) , b . end ( ) ) ;
if sum is greater than b [ n - 1 ] + b [ n - 2 ]	if ( sum > b [ n - 1 ] + b [ n - 2 ] )
print " NO " and a new line	cout << " NO " << endl ;
else	else
print " YES " and a new line	cout << " YES " << endl ;
create long long integers n and k , array c with 2 elements filled with 0 , and arrays a and b with size 100000	long long int n , a [ 100000 ] , b [ 100000 ] , c [ 2 ] = { 0 } , k ;
declare long long integer variables i , j and sum where sum = 0	long long int i , j , sum = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set sum to sum + a [ i ]	sum = sum + a [ i ] ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read b [ i ]	cin >> b [ i ] ;
if b [ i ] is greater than c [ 0 ]	if ( b [ i ] > c [ 0 ] )
c [ 0 ] = b [ i ]	c [ 0 ] = b [ i ] ;
k = i	k = i ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if c [ 1 ] < b [ i ] and b [ i ] < = c [ 0 ] and i ! = k , set c [ 1 ] to b [ i ]	if ( c [ 1 ] < b [ i ] && b [ i ] <= c [ 0 ] && i != k ) c [ 1 ] = b [ i ] ;
if c [ 1 ] + c [ 0 ] > = sum	if ( c [ 1 ] + c [ 0 ] >= sum )
print " YES "	cout << " YES " << endl ;
else	else
print " NO "	cout << " NO " << endl ;
create long long arrays a , b , with a size 100010 , b size 100010	long long a [ 100010 ] , b [ 100010 ] ;
declare cmp with integers a , b as arguments , returning boolean	bool cmp ( int a , int b )
return a is greater than b	return a > b ;
create integers n , i , j	int n , i , j ;
while read n is true	while ( cin >> n )
set bytes from a to size of a to value 0	memset ( a , 0 , sizeof ( a ) ) ;
set bytes from b to size of b to value 0	memset ( b , 0 , sizeof ( b ) ) ;
create double sum with sum = 0	double sum = 0 ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
increment sum by a [ i ]	sum += a [ i ] ;
for i = 0 to n exclusive , read b [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
sort elements from b to b + i using cmp to compare	sort ( b , b + i , cmp ) ;
if b [ 0 ] + b [ 1 ] is greater than or equal to sum	if ( b [ 0 ] + b [ 1 ] >= sum )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
n , M , M2 , s = long long and set s to 0	long long n , M , M2 , s = 0 ;
t = long long array of size 100005	long long t [ 100005 ] ;
t2 = long long array of size 100005	long long t2 [ 100005 ] ;
read n	cin >> n ;
for long long i = 0 to n exclusive	for ( long long i = 0 ; i < n ; i ++ )
read t [ i ]	cin >> t [ i ] ;
increase s by t [ i ]	s += t [ i ] ;
for long long i = 0 to n exclusive read t2 [ i ]	for ( long long i = 0 ; i < n ; i ++ ) { cin >> t2 [ i ] ; }
sort the first n elements of t2	sort ( t2 , t2 + n ) ;
if s < = t2 [ n - 1 ] + t2 [ n - 2 ]	if ( s <= t2 [ n - 1 ] + t2 [ n - 2 ] )
print YES	cout << " YES " << endl ;
else	else
print NO	cout << " NO " << endl ;
create constant long long Mod with value 1e9 + 7	const long long Mod = 1e9 + 7 ;
create constant double pi with value 2 * acos ( 0 . 0 )	const double pi = 2 * acos ( 0.0 ) ;
create constant double N with value 2e5 + 5	const int N = 2e5 + 5 ;
arr is an integer array with size N	int arr [ N ] ;
create long longs n , x and s , with s = 0	long long n , x , s = 0 ;
read n	cin >> n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read x	cin >> x ;
increase s by x	s += x ;
for integer i = 0 to n exclusive read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr	sort ( arr , arr + n ) ;
if arr [ n - 1 ] + arr [ n - 2 ] > = s	if ( arr [ n - 1 ] + arr [ n - 2 ] >= s )
print " YES " and a new line	cout << " YES " << endl ;
else	else
print " NO " and a new line	cout << " NO " << endl ;
declare integer variable n	int n ;
read n	cin >> n ;
let sum and cur be long longs where sum = 0	long long sum = 0 , cur ;
for size_t = 0 to n exclusive	for ( size_t i = 0 ; i < n ; i ++ )
read cur	cin >> cur ;
increase sum by cur	sum += cur ;
create long longs Max1 and Max2 = - 1	long long Max1 = - 1 , Max2 = - 1 ;
for size_t = 0 to n exclusive	for ( size_t i = 0 ; i < n ; i ++ )
read cur	cin >> cur ;
if cur is greater than Max1	if ( cur > Max1 )
set Max2 to Max1	Max2 = Max1 ;
set value of Max1 to cur	Max1 = cur ;
else if cur is greater than Max2	else if ( cur > Max2 )
Max2 = cur	Max2 = cur ;
print " YES \ n " if Max2 + Max1 > = sum , else pring " NO \ n "	cout << ( ( Max2 + Max1 >= sum ) ? " YES\n " : " NO\n " ) ;
create integer x	int x ;
create long long integer k with k = 0	long long int k = 0 ;
read x	cin >> x ;
create long long integer vector v	vector < long long int > v ;
create integer arrays a , b , with a size x , b size x	int a [ x ] , b [ x ] ;
for i = 0 to x exclusive	for ( int i = 0 ; i < x ; i ++ )
create integer s	int s ;
read s	cin >> s ;
increment k by s	k += s ;
for i = 0 to x exclusive	for ( int i = 0 ; i < x ; i ++ )
create long long integer d	long long int d ;
read d	cin >> d ;
add element d to end of v	v . push_back ( d ) ;
sort elements from beginning of v to end of v	sort ( v . begin ( ) , v . end ( ) ) ;
create long long integer s with s = v [ x - 1 ] + v [ x - 2 ]	long int s = v [ x - 1 ] + v [ x - 2 ] ;
if s is greater than or equal to k	if ( s >= k )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
while b is true , swap values of ( set a to a % b , and b )	while ( b ) swap ( a %= b , b ) ;
return a	return a ;
create long long n	long long n ;
read n	cin >> n ;
create long long vector nums initialized with n	vector < long long > nums ( n ) ;
create long long sum with sum = 0	long long sum = 0 ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; ++ i )
create long long a	long long a ;
read a	cin >> a ;
increment sum by a	sum += a ;
create long longs mx1 , mx2 with mx1 = 0 , mx2 = 0	long long mx1 = 0 , mx2 = 0 ;
for i = 0 to n exclusive	for ( long long i = 0 ; i < n ; ++ i )
read nums [ i ]	cin >> nums [ i ] ;
if nums [ i ] is greater than mx1	if ( nums [ i ] > mx1 )
set mx2 to mx1 , set mx1 to nums [ i ]	mx2 = mx1 , mx1 = nums [ i ] ;
else if nums [ i ] is less than or equal to mx1 and nums [ i ] is greater than mx2	else if ( nums [ i ] <= mx1 && nums [ i ] > mx2 )
set mx2 to nums [ i ]	mx2 = nums [ i ] ;
if sum is less than or equal to mx1 + mx2	if ( sum <= mx1 + mx2 )
print " YES " print newline	cout << " YES " << endl ;
else	else
print " NO " print newline	cout << " NO " << endl ;
n , j , minnum and ans are integers with minnum = 1000000002 and ans = 100002	int n , j , minnum = 1000000002 , ans = 100002 ;
create an arrays of ints a and flag with size 100005	int a [ 100005 ] , flag [ 100005 ] ;
read n	cin >> n ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if minnum is greater than a [ i ] , change minnum to a [ i ]	if ( minnum > a [ i ] ) minnum = a [ i ] ;
for i from 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] = minnum	if ( a [ i ] == minnum )
increment j	j ++ ;
change flag [ j ] to i	flag [ j ] = i ;
for integer i = 1 to j exclusive	for ( int i = 1 ; i < j ; i ++ )
if flag [ i + 1 ] - flag [ i ] is less than ans , set ans to flag [ i + 1 ] - flag [ i ]	if ( flag [ i + 1 ] - flag [ i ] < ans ) ans = flag [ i + 1 ] - flag [ i ] ;
print ans	cout << ans << endl ;
n , a , mink , pr , mind = integers with a = integer array of size 100001 , mink = 2e9 , pr = - 1 , mind = 2e9	int n , a [ 100001 ] , mink = 2e9 , pr = - 1 , mind = 2e9 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
mink = min of mink and a [ i ]	mink = min ( mink , a [ i ] ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if pr is not - 1 and a [ i ] is mink , mind = min ( mind , i - pr )	if ( pr != - 1 && a [ i ] == mink ) { mind = min ( mind , i - pr ) ; }
if a [ i ] is mink , pr = i	if ( a [ i ] == mink ) { pr = i ; }
print mind	cout << mind << endl ;
create constant int maxn = 1e7 + 10	const int maxn = 1e7 + 10 ;
let int array a of size maxn	int a [ maxn ] ;
let int n	int n ;
let integer mini = 1e9 + 10	int mini = 1e9 + 10 ;
read n	cin >> n ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is less than mini , set mini to a [ i ]	if ( a [ i ] < mini ) mini = a [ i ] ;
create int vector vec	vector < int > vec ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if mini is equal to a [ i ] , append i to vec	if ( mini == a [ i ] ) { vec . push_back ( i ) ; }
set mini to n	mini = n ;
for i = 0 to the size of vec exclusive , set mini to the min of mini and vec [ i + 1 ] - vec [ i ]	for ( int i = 0 ; i < vec . size ( ) - 1 ; i ++ ) { mini = min ( mini , vec [ i + 1 ] - vec [ i ] ) ; }
print mini	cout << mini << endl ;
v = long long vector	vector < long long > v ;
v1 = long long vector	vector < long long > v1 ;
i , j , n , ans , min , t , flag = long long with min = 1000000002	long long i , j , n , ans , min = 1000000002 , t , flag ;
read n	cin >> n ;
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
x = long long	long long x ;
read x	cin >> x ;
append x to v	v . push_back ( x ) ;
if x is less than min set min to x	if ( x < min ) { min = x ; }
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
if min is v [ i ] append i to v1	if ( min == v [ i ] ) { v1 . push_back ( i ) ; }
set min to 1000000002	min = 1000000002 ;
for i = 1 to size of v1	for ( i = 1 ; i < v1 . size ( ) ; i ++ )
if ( v1 [ i ] - v1 [ i - 1 ] ) < min set min to v1 [ i ] - v1 [ i - 1 ]	if ( ( v1 [ i ] - v1 [ i - 1 ] ) < min ) { min = ( v1 [ i ] - v1 [ i - 1 ] ) ; }
print min	cout << min << endl ;
a = array of integers of length 100010	int a [ 100010 ] ;
let n , m , j , k , l , i , o , p be integers with j = INT_MAX , l = INT_MAX	int n , m , j = INT_MAX , k , l = INT_MAX , i , o , p ;
read n	cin >> n ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
l is equal to minimum of l , a [ i ]	l = min ( l , a [ i ] ) ;
k is equal to distance ( a , find ( a + 1 , a + n + 1 , l ) )	k = distance ( a , find ( a + 1 , a + n + 1 , l ) ) ;
for i = k + 1 to n inclusive	for ( i = k + 1 ; i <= n ; i ++ )
if a [ i ] is equal to l	if ( a [ i ] == l )
j is equal to minimum of j , i - k	j = min ( j , i - k ) ;
k is equal to i	k = i ;
print j and newline	cout << j << endl ;
n , a , Min , pre , ans = integers with a = array of size 100005 , ans = 100005	int n , a [ 100005 ] , Min , pre , ans = 100005 ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
Min = a [ 1 ]	Min = a [ 1 ] ;
for i = 2 to n , Min = min of Min and a [ i ]	for ( int i = 2 ; i <= n ; i ++ ) Min = min ( Min , a [ i ] ) ;
for i = 1 to n	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] is Min	if ( a [ i ] == Min )
if not pre	if ( ! pre )
pre = i	pre = i ;
else	else
ans = min ( ans , i - pre ) , pre = i	ans = min ( ans , i - pre ) , pre = i ;
print ans	cout << ans << endl ;
let int s = 9999999999	int s = 9999999999 ;
let int n	int n ;
read n	cin >> n ;
create pair array a of int and int of size n	pair < int , int > a [ n ] ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ] . first	cin >> a [ i ] . first ;
set a [ i ] . second to i + 1	a [ i ] . second = i + 1 ;
sort array a	sort ( a , a + n ) ;
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if a [ i ] . first equals a [ i + 1 ] . first and a [ 0 ] . first equals a [ i ] . first , set s to min of s and a [ i + 1 ] . second - a [ i ] . second	if ( a [ i ] . first == a [ i + 1 ] . first && a [ 0 ] . first == a [ i ] . first ) { s = min ( s , a [ i + 1 ] . second - a [ i ] . second ) ; }
print s	cout << s << endl ;
size = int and in = int array of size 100005	int size , in [ 100005 ] ;
d1 = int vector	vector < int > d1 ;
read size	cin >> size ;
read size values into in	for ( int i = 0 ; i < size ; i ++ ) { cin >> in [ i ] ; }
mn = int with mn = 1e9	int mn = 1e9 ;
for i = 0 to size	for ( int i = 0 ; i < size ; i ++ )
if in [ i ] < mn set mn to in [ i ]	if ( in [ i ] < mn ) { mn = in [ i ] ; }
for i = 0 to size	for ( int i = 0 ; i < size ; i ++ )
if mn is in [ i ] append i to d1	if ( mn == in [ i ] ) { d1 . push_back ( i ) ; }
mns = int with mns = 1e9	int mns = 1e9 ;
for i = 0 to size of d1 - 1	for ( int i = 0 ; i < d1 . size ( ) - 1 ; i ++ )
if absolute of d1 [ i ] - d1 [ i + 1 ] < mns set mns to ansolute of d1 [ i ] - d1 [ i + 1 ]	if ( abs ( d1 [ i ] - d1 [ i + 1 ] ) < mns ) { mns = abs ( d1 [ i ] - d1 [ i + 1 ] ) ; }
print mns	cout << mns << endl ;
n = integer	int n ;
while read n	while ( cin >> n )
v = vector of integer with v = n	vector < int > v ( n ) ;
s = vector of integer with s = n	vector < int > s ( n ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read v [ i ]	cin >> v [ i ] ;
s [ i ] = v [ i ]	s [ i ] = v [ i ] ;
sort s . begin ( ) and s . end ( )	sort ( s . begin ( ) , s . end ( ) ) ;
a , b = integers	int a , b ;
a = s [ 0 ]	a = s [ 0 ] ;
b = s [ 1 ]	b = s [ 1 ] ;
x , y , d = integers	int x , y , d ;
d = x = y = 1000000100	d = x = y = 1000000100 ;
sw = bool with sw = true	bool sw = true ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a is v [ i ]	if ( a == v [ i ] )
x = i	x = i ;
break loop	break ;
for i = x + 1 to n exclusive	for ( int i = x + 1 ; i < n ; i ++ )
if b is v [ i ]	if ( b == v [ i ] )
y = i	y = i ;
d = min of d and abs ( x - y )	d = min ( d , abs ( x - y ) ) ;
x = i	x = i ;
print d	cout << d << " \n " ;
n , menor , pos , ans , i = int	int n , menor , pos , ans , i ;
read n	cin >> n ;
V = int vector of size n	vector < int > V ( n ) ;
read n values into V	for ( i = 0 ; i < n ; i ++ ) { cin >> V [ i ] ; }
set menor to 2000000000	menor = 2000000000 ;
for i = 0 to n set menor to min of menor and V [ i ]	for ( i = 0 ; i < n ; i ++ ) { menor = min ( menor , V [ i ] ) ; }
for i = 0 to n	for ( i = 0 ; i < n ; i ++ )
if V [ i ] = menor	if ( V [ i ] == menor )
set pos to i	pos = i ;
break	break ;
set ans to 1000000	ans = 1000000 ;
for i = pos + 1 to n	for ( i = pos + 1 ; i < n ; i ++ )
if V [ i ] = menor	if ( V [ i ] == menor )
if i - pos < ans set ans to i - pos	if ( i - pos < ans ) ans = i - pos ;
set pos to i	pos = i ;
print ans	cout << ans << ' \n ' ;
create long long array a of length 100005	long long a [ 100005 ] ;
create long long a and mi , set mi to 1000000007	long long n , mi = 1000000007 ;
read n	cin >> n ;
for i = 1 to n + 1 exclusive	for ( long long i = 1 ; i < n + 1 ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set mi to min of mi and a [ i ]	mi = min ( mi , a [ i ] ) ;
set j to - 1000000007 and ans to 1000000007	long long j = - 1000000007 , ans = 1000000007 ;
for i = 1 to n + 1 exclusive	for ( long long i = 1 ; i < n + 1 ; i ++ )
if a [ i ] = mi	if ( a [ i ] == mi )
set ans to min of ans and i - j	ans = min ( ans , i - j ) ;
assign i to j	j = i ;
print ans	cout << ans << endl ;
declare integer n	int n ;
read n	cin >> n ;
declare integer pointer a = new integer array size n	int * a = new int [ n ] ;
declare long long integer min = 99999999999999999	long long int min = 99999999999999999 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
if a [ i ] is less than min , let min = a [ i ]	if ( a [ i ] < min ) { min = a [ i ] ; }
declare integer array p size 100000	int p [ 100000 ] ;
declare integer c = 0	int c = 0 ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] is min	if ( a [ i ] == min )
let p [ c ] be i	p [ c ] = i ;
increment c	c ++ ;
let min be 99999999999999999	min = 99999999999999999 ;
for i = 1 to c exclusive	for ( int i = 1 ; i < c ; i ++ )
declare integer r = p [ i ] - p [ i - 1 ]	int r = p [ i ] - p [ i - 1 ] ;
if r is less than min , let min be r	if ( r < min ) { min = r ; }
print min , newline	cout << min << endl ;
let maxn be a constant integer with maxn = 1e6 + 7	const int maxn = 1e6 + 7 ;
let mod be a constant integer with mod = 998244353	const int mod = 998244353 ;
read the integer data	int read ( )
let c , Nig , x be integers with Nig = 1 , x = 0	int c = getchar ( ) , Nig = 1 , x = 0 ;
while not isdigit of c , c = getchar ( )	while ( ! isdigit ( c ) ) c = getchar ( ) ;
if c is equal to - , Nig = - 1 , c = getchar ( )	if ( c == ' - ' ) Nig = - 1 , c = getchar ( ) ;
while isdigit of c , x is equal to ( ( x < < 1 ) + ( x < < 3 ) ) + ( c ^ ' 0 ' ) , c is equal to getchar ( )	while ( isdigit ( c ) ) x = ( ( x << 1 ) + ( x << 3 ) ) + ( c ^ ' 0 ' ) , c = getchar ( ) ;
return the value of Nig * x	return Nig * x ;
a = array of integers of length maxn	int a [ maxn ] ;
read from n	int n = read ( ) ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = read ( ) ; }
let minl be a integer with minl = * min_element ( a + 1 , a + 1 + n )	int minl = * min_element ( a + 1 , a + 1 + n ) ;
let pos , ans be integers with pos = - 1 , ans = 0x3f3f3f3f	int pos = - 1 , ans = 0x3f3f3f3f ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] is equal to minl	if ( a [ i ] == minl )
if ~ pos	if ( ~ pos )
ans is equal to minimum of ans and i - pos , pos is equal to i	ans = min ( ans , i - pos ) , pos = i ;
else do the following	else
pos is equal to i	pos = i ;
print ans and new line	cout << ans << endl ;
create new array of long longs a with 200050 elements	long long a [ 200050 ] ;
create new array of long longs b with size 200050	long long b [ 200050 ] ;
declare integer variable len with value 0	int len = 0 ;
declare new integer called n	int n ;
read n	cin >> n ;
for i from 0 to n exclusive , read standard input to a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
create long long minn with value 1000000009	long long minn = 1000000009 ;
for integer i = 0 to n exclusive , set minn to min of minn and a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { minn = min ( minn , a [ i ] ) ; }
for integer i = 0 to n exclusive incrementing i	for ( int i = 0 ; i < n ; i ++ )
if a [ i ] = minn	if ( a [ i ] == minn )
assign i to b [ len ]	b [ len ] = i ;
increment len by one	len ++ ;
declare new long long called minnn = 200000050	long long minnn = 200000050 ;
in a for loop , change i from 1 to len exclusive , assigning min of minnn and b [ i ] - b [ i - 1 ] to minnn on each loop	for ( int i = 1 ; i < len ; i ++ ) { minnn = min ( minnn , b [ i ] - b [ i - 1 ] ) ; }
print minnn to the standard output	cout << minnn << endl ;
a , b , n , mini , ans = long long int with ans = 0	long long int a , b , n , mini , ans = 0 ;
read n	cin >> n ;
for i = 0 to n	for ( int i = 0 ; i < n ; i ++ )
read a	cin >> a ;
increment ans	ans ++ ;
if i is 0 or a is less than mini	if ( i == 0 || a < mini )
set mini to a	mini = a ;
set ans to 0	ans = 0 ;
set b to 0	b = 0 ;
else if a is mini	else if ( a == mini )
if ans is less than b or b is 0 set b to ans	if ( ( ans < b ) || ( b == 0 ) ) { b = ans ; }
set ans to 0	ans = 0 ;
print b	cout << b << endl ;
let ints n , min = INT_MAX , cnt = 0 , first , last , and selisih and int array num of size 100005	int n , num [ 100005 ] , min = INT_MAX , cnt = 0 , first , last , selisih ;
create int has = INT_MAX and int array arrpos of size 100005	int arrpos [ 100005 ] , has = INT_MAX ;
read n	cin >> n ;
for x = 1 to n	for ( int x = 1 ; x <= n ; x ++ )
read num [ x ]	cin >> num [ x ] ;
if num [ x ] is less than min , set min to num [ x ]	if ( num [ x ] < min ) { min = num [ x ] ; }
for x = 1 to n	for ( int x = 1 ; x <= n ; x ++ )
if num [ x ] equals min	if ( num [ x ] == min )
if cnt is equal to 0	if ( cnt == 0 )
set arrpos [ x ] to x	arrpos [ x ] = x ;
set first to x	first = x ;
if cnt equals 1	if ( cnt == 1 )
set arrpos [ x ] to x	arrpos [ x ] = x ;
set last to x	last = x ;
if cnt is greater than or equal to 2	if ( cnt >= 2 )
set first to last	first = last ;
set last to x	last = x ;
set arrpos [ x ] to x	arrpos [ x ] = x ;
increment cnt	cnt ++ ;
if cnt is greater than or equal to 2	if ( cnt >= 2 )
set selisih to the result of arrpos [ last ] - arrpos [ first ]	selisih = arrpos [ last ] - arrpos [ first ] ;
if selisih is less than has , set has to selisih	if ( selisih < has ) { has = selisih ; }
print has	cout << has << endl ;
a is a new array of integers with size 1e5 + 5	int a [ ( int ) 1e5 + 5 ] ;
function min with long long arguments a and b that returns long long	long long min ( long long a , long long b )
if a is greater than b	if ( a > b )
return b	return b ;
else	else
return a	return a ;
declare integer variable n	int n ;
read n from the user input	cin >> n ;
declare long long m with value 1e9 + 1	long long m = 1e9 + 1 ;
for integer i = 1 to n inclusive incrementing i	for ( int i = 1 ; i <= n ; i ++ )
read input to a [ i ]	cin >> a [ i ] ;
change m to min of m and a [ i ]	m = min ( m , a [ i ] ) ;
declare vector of integers called ans	vector < int > ans ;
for i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] is equal to m , push i into ans	if ( a [ i ] == m ) { ans . push_back ( i ) ; }
create new integer called mins = 1e9	int mins = 1e9 ;
declare integer size with value length of ans - 1	int size = ans . size ( ) - 1 ;
for i from 1 to size inclusive , assign min of mins and ans [ i ] - ans [ i - 1 ] to mins	for ( int i = 1 ; i <= size ; i ++ ) { mins = min ( mins , ans [ i ] - ans [ i - 1 ] ) ; }
print mins to the standard output	cout << mins << endl ;
t , n , i , x , pp , count , flag , dis , min , sum = integers with flag = 0 , dis = 0 , min = 0	int t , n , i , x , pp , count , flag = 0 , dis = 0 , min = 0 , sum ;
v = vector of integer	vector < int > v ;
it = iterator vector of integer	vector < int > :: iterator it ;
read n	cin >> n ;
while decrement n	while ( n -- )
read x	cin >> x ;
append x in v	v . push_back ( x ) ;
t = pointer min_element on v . begin ( ) and v . end ( )	t = * min_element ( v . begin ( ) , v . end ( ) ) ;
for i = 0 to v . size ( ) exclusive	for ( i = 0 ; i < v . size ( ) ; i ++ )
if v [ i ] is t	if ( v [ i ] == t )
if flag is not 0	if ( flag != 0 )
dis = i - pp	dis = i - pp ;
if min is 0 and dis is not 0	if ( min == 0 && dis != 0 )
min = dis	min = dis ;
else if min is not 0 and min > dis	else if ( min != 0 && min > dis )
min = dis	min = dis ;
increment flag	flag ++ ;
pp = i	pp = i ;
print min	cout << min << endl ;
create integer x	int x ;
read x from the input	cin >> x ;
create new array of integers ara with x elements	int ara [ x ] ;
create new integer maxn	int maxn ;
create new set of integers s	set < int > s ;
set maxn to 1000000009	maxn = 1000000009 ;
declare new integer variable d with value 1000000009	int d = 1000000009 ;
create boolean variable with name b with value 0	bool b = 0 ;
in the for loop , change integer w from 0 to x exclusive	for ( int w = 0 ; w < x ; w ++ )
read variable ara [ w ] from the input	cin >> ara [ w ] ;
if ara [ w ] is less than maxn , change maxn to ara [ w ]	if ( ara [ w ] < maxn ) { maxn = ara [ w ] ; }
for w from 0 to x exclusive	for ( int w = 0 ; w < x ; w ++ )
if ara [ w ] = maxn , insert w into set s	if ( ara [ w ] == maxn ) { s . insert ( w ) ; }
i is a new iterator for the set of integers	set < int > :: iterator i ;
j is a new iterator for the set of integers pointed to the end of s	set < int > :: iterator j = s . end ( ) ;
decrement j	j -- ;
declare ints l and m	int l , m ;
move i through s in a for loop	for ( i = s . begin ( ) ; i != s . end ( ) ; i ++ )
if i is equal to j , skip the rest of the loop	if ( i == j ) continue ;
change m to the value pointed by i	m = * i ;
increment i	i ++ ;
change l to the value pointed by i	l = * i ;
decrement i	i -- ;
if l - m is less than d , set d to ( l - m )	if ( l - m < d ) d = ( l - m ) ;
print d to the standard output	cout << d << endl ;
a is a new array of integers with 300000 elements	int a [ 300000 ] ;
create ints n , m1 , m2 , minn and minn2 with m1 and m2 = 0 , minn2 = 9999999 and minn = 9999999999	int n , m1 = 0 , m2 = 0 , minn = 9999999999 , minn2 = 9999999 ;
read standard input to n	cin >> n ;
for i from 1 to n inclusive incrementing i	for ( int i = 1 ; i <= n ; i ++ )
read input to a [ i ]	cin >> a [ i ] ;
if minn is greater than a [ i ] , assign a [ i ] to minn	if ( minn > a [ i ] ) minn = a [ i ] ;
start for loop from i = 1 to n inclusive on each loop	for ( int i = 1 ; i <= n ; i ++ )
if a [ i ] is equal to minn	if ( a [ i ] == minn )
if m1 is equal to 0	if ( m1 == 0 )
change m1 to i	m1 = i ;
else if m2 = 0	else if ( m2 == 0 )
assign i to m2	m2 = i ;
if minn2 is greater than m2 - m1 , change minn2 to m2 - m1	if ( minn2 > m2 - m1 ) minn2 = m2 - m1 ;
else	else
change m1 to m2	m1 = m2 ;
assign i to m2	m2 = i ;
if minn2 is greater than m2 - m1 , change minn2 to m2 - m1	if ( minn2 > m2 - m1 ) minn2 = m2 - m1 ;
print minn2 to the standard output	cout << minn2 << endl ;
nums is a new vector of integers	vector < int > nums ;
declare int variables n , a , last and dist	int n , a , last , dist ;
create integer variable min with value INT_MAX	int min = INT_MAX ;
mindist is a new integer with value INT_MAX	int mindist = INT_MAX ;
read n from the user input	cin >> n ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read input to a	cin >> a ;
push a to the end of nums	nums . push_back ( a ) ;
if a is less than min , set min to a	if ( a < min ) min = a ;
in a for loop , change i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if nums [ i ] = min	if ( nums [ i ] == min )
change last to i	last = i ;
break	break ;
for i from last + 1 to n exclusive incrementing i	for ( int i = last + 1 ; i < n ; i ++ )
if nums [ i ] = min	if ( nums [ i ] == min )
change dist to i - last	dist = i - last ;
if dist is less than mindist , change mindist to dist	if ( dist < mindist ) mindist = dist ;
assign i to last	last = i ;
print mindist to the standard output	cout << mindist << endl ;
declare integer variable n and an array of integers ar with size 100010	int n , ar [ 100010 ] ;
read n	cin >> n ;
read input into ar n times	for ( int i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }
declare integer variable mn = ar [ 0 ]	int mn = ar [ 0 ] ;
for i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if mn is greater than ar [ i ] , assign ar [ i ] to mn	if ( mn > ar [ i ] ) mn = ar [ i ] ;
declare integers p1 , p2 and d with p1 and p2 = - 1	int p1 = - 1 , p2 = - 1 , d ;
create int mnd = n	int mnd = n ;
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if ar [ i ] = mn	if ( ar [ i ] == mn )
assign i to p1	p1 = i ;
if p2 ! = - 1	if ( p2 != - 1 )
if mnd is greater than ( p1 - p2 ) , change mnd to p1 - p2	if ( mnd > ( p1 - p2 ) ) { mnd = p1 - p2 ; }
assign p1 to p2	p2 = p1 ;
print mnd	cout << mnd << endl ;
n , mn , skr , mnd = integers with mn = 1e9 + 7 , skr = 1e9 + 7 , mnd = 1e6	int n , mn = 1e9 + 7 , skr = 1e9 + 7 , mnd = 1e6 ;
in the function masuk that takes integer idx	void masuk ( int idx )
if idx < n	if ( idx < n )
ai = integer	int ai ;
read ai	cin >> ai ;
mn = min of mn and ai	mn = min ( mn , ai ) ;
masuk of idx + 1	masuk ( idx + 1 ) ;
if ai is mn	if ( ai == mn )
mnd = min of mnd and skr - idx	mnd = min ( mnd , skr - idx ) ;
skr = idx	skr = idx ;
read n	cin >> n ;
masuk of 0	masuk ( 0 ) ;
print mnd	cout << mnd << ' \n ' ;
t , n , i , x , pp , count , sum = int , flag , dis , min = 0	int t , n , i , x , pp , count , flag = 0 , dis = 0 , min = 0 , sum ;
v = vector of int	vector < int > v ;
it = iterator on vector of int	vector < int > :: iterator it ;
read n	cin >> n ;
while decremented value of n is not zero	while ( n -- )
read x	cin >> x ;
put x at end of v	v . push_back ( x ) ;
t = item of v with min value	t = * min_element ( v . begin ( ) , v . end ( ) ) ;
for i = 0 to size of v exclusive	for ( i = 0 ; i < v . size ( ) ; i ++ )
if v [ i ] is t	if ( v [ i ] == t )
if flag ! = 0	if ( flag != 0 )
dis = i - pp	dis = i - pp ;
if min is 0 and dis is not 0	if ( min == 0 && dis != 0 )
min = dis	min = dis ;
else if min is not 0 and min > dis	else if ( min != 0 && min > dis )
min = dis	min = dis ;
increment flag	flag ++ ;
pp = i	pp = i ;
print min	cout << min << endl ;
create int n , minix , p , q	int n , minix , p , q ;
read n	cin >> n ;
create vector int v ( n )	vector < int > v ( n ) ;
minix = INT_MAX	minix = INT_MAX ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read v [ i ]	cin >> v [ i ] ;
set minix to min of minix and v [ i ]	minix = min ( minix , v [ i ] ) ;
assign - 999999 to p	p = - 999999 ;
set q to INT_MAX	q = INT_MAX ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if v [ i ] = minix	if ( v [ i ] == minix )
set q = min of q and i - p	q = min ( q , i - p ) ;
p = i	p = i ;
print q	cout << q << endl ;
create const int oo = 1e9	const int oo = 1e9 ;
declare int variable n	int n ;
read n	cin >> n ;
declare vector of integers called a with n elements	vector < int > a ( n ) ;
read n elements from the input into a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
create int mn = pointer to the min element of a	int mn = * min_element ( a . begin ( ) , a . end ( ) ) ;
create integer ans = oo	int ans = oo ;
for i = 0 and prev = - oo while i < n , incrementing i	for ( int i = 0 , prev = - oo ; i < n ; i ++ )
if a [ i ] is equal to mn	if ( a [ i ] == mn )
set ans to min of ans and i - prev	ans = min ( ans , i - prev ) ;
set prev to i	prev = i ;
print ans and ' \ n '	cout << ans << ' \n ' ;
declare vector of long longs v	vector < long long > v ;
create new vector of long longs v1	vector < long long > v1 ;
declare long longs i , j , n , ans , min , t and flag with min = 1000000002	long long i , j , n , ans , min = 1000000002 , t , flag ;
read input to n	cin >> n ;
for i = 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
declare long long variable x	long long x ;
read from the input to x	cin >> x ;
push x to the back of v	v . push_back ( x ) ;
if x is less than min , set min to x	if ( x < min ) { min = x ; }
for i from 0 to n exclusive	for ( i = 0 ; i < n ; i ++ )
if min = v [ i ] , push i into v1	if ( min == v [ i ] ) { v1 . push_back ( i ) ; }
assign 1000000002 to min	min = 1000000002 ;
start for loop from i = 1 to length of v1 exclusive	for ( i = 1 ; i < v1 . size ( ) ; i ++ )
if ( v1 [ i ] - v1 [ i - 1 ] ) is less than min , assign v1 [ i ] - v1 [ i - 1 ] to min	if ( ( v1 [ i ] - v1 [ i - 1 ] ) < min ) { min = ( v1 [ i ] - v1 [ i - 1 ] ) ; }
print min to the standard output	cout << min << endl ;
arr = array of integers of length 1000000	int arr [ 1000000 ] ;
let n be a integer	int n ;
read n	cin >> n ;
let minimum , answer be integers wih answer = ( int ) 1e9	int minimum , answer = ( int ) 1e9 ;
create a vector of integers with name occurrences	vector < int > occurrences ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read arr [ i ]	cin >> arr [ i ] ;
if not i , minimum is equal to arr [ 0 ]	if ( ! i ) minimum = arr [ 0 ] ;
minimum is equal to minimum of minimum , arr [ i ]	minimum = min ( minimum , arr [ i ] ) ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if arr [ i ] is equal to minimum , push i into occurrences from back	if ( arr [ i ] == minimum ) occurrences . push_back ( i ) ;
for i = 1 to length of occurrences exclusive , answer = minimum of answer , occurrences [ i ] - occurrences [ i - 1 ]	for ( int i = 1 ; i < occurrences . size ( ) ; i ++ ) answer = min ( answer , occurrences [ i ] - occurrences [ i - 1 ] ) ;
print answer and newline	cout << answer << endl ;
n , i = int	int n , i ;
a = int array of size 100005	int a [ 100005 ] ;
loop while reading n	while ( cin >> n )
Min = int with Min = 0x7fffffff	int Min = 0x7fffffff ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
read a [ i ]	cin >> a [ i ] ;
set Min to min of a [ i ] and Min	Min = min ( a [ i ] , Min ) ;
ans = int with ans = 0x7fffffff	int ans = 0x7fffffff ;
t = int with t = - 1	int t = - 1 ;
for i = 1 to n inclusive	for ( i = 1 ; i <= n ; i ++ )
if a [ i ] is Min	if ( a [ i ] == Min )
set t to i	t = i ;
break	break ;
for i = t + 1 to n inclusive	for ( i = t + 1 ; i <= n ; i ++ )
if a [ i ] is Min	if ( a [ i ] == Min )
set ans to min of i - t and ans	ans = min ( i - t , ans ) ;
set t to i	t = i ;
print ans	cout << ans << endl ;
declare new constant integer called maxn = 1e7 + 10	const int maxn = 1e7 + 10 ;
a is a new array of integers with maxn elements	int a [ maxn ] ;
n is a new integer variable	int n ;
create new integer variable mini = 1e9 + 10	int mini = 1e9 + 10 ;
read from the input to n	cin >> n ;
start for loop from i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
read from the input to a [ i ]	cin >> a [ i ] ;
if a [ i ] is less than mini , assign a [ i ] to mini	if ( a [ i ] < mini ) mini = a [ i ] ;
create new vector of integers vec	vector < int > vec ;
start for loop from i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
if mini = a [ i ] , add i to the end of vec	if ( mini == a [ i ] ) { vec . push_back ( i ) ; }
assign n to mini	mini = n ;
for i from 0 to length of vec - 1 exclusive , assign min of mini and vec [ i + 1 ] - vec [ i ] to mini	for ( int i = 0 ; i < vec . size ( ) - 1 ; i ++ ) { mini = min ( mini , vec [ i + 1 ] - vec [ i ] ) ; }
print mini	cout << mini << endl ;
r , c = integers	int r , c ;
flag = integer with flag = - 1	int flag = - 1 ;
read r , c	cin >> r >> c ;
v = 2d character array of size [ r ] [ c ]	char v [ r ] [ c ] ;
empt , wolf , sheep = integers with empt = 0 , wolf = 0 , sheep = 0	int empt = 0 , wolf = 0 , sheep = 0 ;
p = character	char p ;
for i = 0 to r exclusive	for ( int i = 0 ; i < r ; i ++ )
for j = 0 to c exclusive	for ( int j = 0 ; j < c ; j ++ )
read p	cin >> p ;
if p is .	if ( p == ' . ' )
v [ i ] [ j ] = D	v [ i ] [ j ] = ' D ' ;
else	else
v [ i ] [ j ] = p	v [ i ] [ j ] = p ;
for i = 0 to r exclusive	for ( int i = 0 ; i < r ; i ++ )
for j = 0 to c exclusive	for ( int j = 0 ; j < c ; j ++ )
if v [ i ] [ j ] is S	if ( v [ i ] [ j ] == ' S ' )
if v [ i - 1 ] [ j ] is W and i - 1 > = 0 , flag = 0	if ( v [ i - 1 ] [ j ] == ' W ' && i - 1 >= 0 ) flag = 0 ;
if v [ i + 1 ] [ j ] is W and i + 1 < r , flag = 0	if ( v [ i + 1 ] [ j ] == ' W ' && i + 1 < r ) flag = 0 ;
if v [ i ] [ j + 1 ] is W and j + 1 < c , flag = 0	if ( v [ i ] [ j + 1 ] == ' W ' && j + 1 < c ) flag = 0 ;
if v [ i ] [ j - 1 ] is W and j - 1 > = 0 , flag = 0	if ( v [ i ] [ j - 1 ] == ' W ' && j - 1 >= 0 ) flag = 0 ;
if flag is 0	if ( flag == 0 )
print NO	cout << " NO " << endl ;
else	else
print YES	cout << " YES " << endl ;
for i = 0 to r exclusive	for ( int i = 0 ; i < r ; i ++ )
for j = 0 to c exclusive , print v [ i ] [ j ]	for ( int j = 0 ; j < c ; j ++ ) { cout << v [ i ] [ j ] ; }
print new line	cout << endl ;
create long long a and b	long long a , b ;
create char s [ 1000 ] [ 1000 ]	char s [ 1000 ] [ 1000 ] ;
read a and b	cin >> a >> b ;
for i = 0 to a exclusive	for ( int i = 0 ; i < a ; i ++ )
for j = 0 to b exclusive , read cin > > s [ i ] [ j ]	for ( int j = 0 ; j < b ; j ++ ) { cin >> s [ i ] [ j ] ; }
for i = 0 to a exclusive	for ( int i = 0 ; i < a ; i ++ )
for j = 0 to b exclusive	for ( int j = 0 ; j < b ; j ++ )
if s [ i ] [ j ] = S	if ( s [ i ] [ j ] == ' S ' )
if s [ i ] [ j + 1 ] = W	if ( s [ i ] [ j + 1 ] == ' W ' )
print NO	cout << " NO " << endl ;
if s [ i ] [ j - 1 ] equal to W	if ( s [ i ] [ j - 1 ] == ' W ' )
print NO	cout << " NO " << endl ;
s [ i + 1 ] [ j ] = W	if ( s [ i + 1 ] [ j ] == ' W ' )
print NO	cout << " NO " << endl ;
if s [ i - 1 ] [ j ] = W	if ( s [ i - 1 ] [ j ] == ' W ' )
print NO and a newline	cout << " NO " << endl ;
print YES	cout << " YES " << endl ;
for i = 0 to a exclusive	for ( int i = 0 ; i < a ; i ++ )
for j = 0 to b exclusive	for ( int j = 0 ; j < b ; j ++ )
if s [ i ] [ j ] = . , set s [ i ] [ j ] to D	if ( s [ i ] [ j ] == ' . ' ) { s [ i ] [ j ] = ' D ' ; }
print s [ i ] [ j ]	cout << s [ i ] [ j ] ;
print a newline	cout << endl ;
declare int array freq with size 1005	int freq [ 1005 ] ;
declare int variables hh and mm	int hh , mm ;
declare double variables h , d , c and n	double h , d , c , n ;
declare doubles cost1 and cost2	double cost1 , cost2 ;
read hh and mm	cin >> hh >> mm ;
read input to h , d , c and n	cin >> h >> d >> c >> n ;
declare int time = ( hh * 60 ) + mm	int time = ( hh * 60 ) + mm ;
declare int buns = 0	int buns = 0 ;
declare int hunger = h	int hunger = h ;
while hunger > 0	while ( hunger > 0 )
subtract n from hunger	hunger -= n ;
increment buns	buns ++ ;
assign buns * c to cost1	cost1 = buns * c ;
if time is less than 1200	if ( time < 1200 )
set hunger to h + ( ( 1200 - time ) * d )	hunger = h + ( ( 1200 - time ) * d ) ;
else	else
change hunger to h	hunger = h ;
change buns to 0	buns = 0 ;
while hunger > 0	while ( hunger > 0 )
decrease hunger by n	hunger -= n ;
increment buns	buns ++ ;
decrease c by c * ( 20 . 0 / 100 )	c -= c * ( 20.0 / 100 ) ;
change cost2 to c * buns	cost2 = c * buns ;
change decimal precision of the output to 5 , set showpoint and fixed flags and print the min of cost2 and cost1	cout << setprecision ( 5 ) << showpoint << fixed << min ( cost2 , cost1 ) << endl ;
create vector integer v	vector < int > v ;
create integer arrays num , value , with num size 51 , value size 51	int num [ 51 ] , value [ 51 ] ;
create integers n , index with index = 1	int n , index = 1 ;
read n	cin >> n ;
for i = 0 to n exclusive , read num [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }
add element num [ n - 1 ] to end of v	v . push_back ( num [ n - 1 ] ) ;
for i = n - 2 to 0 inclusive , decrementing i	for ( int i = n - 2 ; i >= 0 ; i -- )
create integers j , flag with j = 0 , flag = 0	int j = 0 , flag = 0 ;
while j is less than size of v	while ( j < v . size ( ) )
if num [ i ] is v [ j ]	if ( num [ i ] == v [ j ] )
set flag to 1	flag = 1 ;
break loop	break ;
increment j	j ++ ;
if not flag , add element num [ i ] to end of v	if ( ! flag ) v . push_back ( num [ i ] ) ;
print size of v print newline	cout << v . size ( ) << endl ;
print v [ size of v - 1 ]	cout << v [ v . size ( ) - 1 ] ;
for i = size of v - 2 to 0 inclusive , decrementing i , print " " print v [ i ]	for ( int i = v . size ( ) - 2 ; i >= 0 ; i -- ) cout << "   " << v [ i ] ;
print newline	cout << endl ;
create integer array a with size 555	int a [ 55 ] ;
create boolean array vis with size 1005	bool vis [ 1005 ] ;
create integer vector s	vector < int > s ;
create integer n , tot with tot = 0	int n , tot = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for i = n - 1 to 0 inclusive , decrementing i	for ( int i = n - 1 ; i >= 0 ; i -- )
if vis [ a [ i ] ] is false	if ( ! vis [ a [ i ] ] )
add element a [ i ] to end of s	s . push_back ( a [ i ] ) ;
set vis [ a [ i ] ] to true	vis [ a [ i ] ] = true ;
create integer len with len = size of s	int len = s . size ( ) ;
print len print newline	cout << len << endl ;
for i = len - 1 to 0 exclusive , decrementing i , print s [ i ] print " "	for ( int i = len - 1 ; i > 0 ; i -- ) cout << s [ i ] << "   " ;
print s [ 0 ] print newline	cout << s [ 0 ] << endl ;
create integer array num of size 100	int num [ 100 ] ;
create integer array nn of size 100	int nn [ 100 ] ;
create integer cnt with cnt = 0	int cnt = 0 ;
create integer cc1 with cc1 = 0	int cc1 = 0 ;
declare num_find with integer in as argument , returning boolean	bool num_find ( int in )
for i = 0 to cnt exclusive	for ( int i = 0 ; i < cnt ; i ++ )
if num [ i ] is in , return true from function	if ( num [ i ] == in ) return true ;
return false from function	return false ;
create integer N	int N ;
read N	cin >> N ;
for i = 0 to N exclusive	for ( int i = 0 ; i < N ; i ++ )
read nn [ cc1 ]	cin >> nn [ cc1 ] ;
increment cc1	cc1 ++ ;
for i = N - 1 to 0 inclusive , decrement i	for ( int i = N - 1 ; i >= 0 ; i -- )
create integer tmp	int tmp ;
set tmp to nn [ i ]	tmp = nn [ i ] ;
if result of num_find with tmp as argument is false	if ( ! num_find ( tmp ) )
set num [ cnt ] is tmp	num [ cnt ] = tmp ;
increment cnt	cnt ++ ;
print cnt print newlien	cout << cnt << endl ;
for i = cnt - 1 to 0 exclusive , decrementing i , print num [ i ] print " "	for ( int i = cnt - 1 ; i > 0 ; i -- ) cout << num [ i ] << "   " ;
print num [ 0 ] print newline	cout << num [ 0 ] << endl ;
declare integers n and t , integer arrays a and b with 100 elements and an array of integers visit with 1010 elements	int n , a [ 100 ] , b [ 100 ] , visit [ 1010 ] , t ;
while reading n	while ( cin >> n )
call memset with arguments a , 0 and sizeof ( a )	memset ( a , 0 , sizeof ( a ) ) ;
call memset with arguments b , 0 and sizeof ( b )	memset ( b , 0 , sizeof ( b ) ) ;
call memset with arguments visit , 0 and sizeof ( visit )	memset ( visit , 0 , sizeof ( visit ) ) ;
t = 0	t = 0 ;
for i = 0 to n exclusive read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
declare integer variable p = n	int p = n ;
for i = n - 1 to 0 inclusive counting down	for ( int i = n - 1 ; i >= 0 ; i -- )
if visit [ a [ i ] ] is greater than 0	if ( visit [ a [ i ] ] > 0 )
decrement p	p -- ;
continue the loop	continue ;
set b [ t ] to a [ i ] and increment t	b [ t ++ ] = a [ i ] ;
increase visit [ a [ i ] ]	visit [ a [ i ] ] ++ ;
print p	cout << p << endl ;
for i = t - 1 to 0 inclusive counting down	for ( int i = t - 1 ; i >= 0 ; i -- )
print b [ i ]	cout << b [ i ] ;
if i ! = 0 , print " "	if ( i != 0 ) cout << "   " ;
print new line	cout << endl ;
create integer arrays a , b with a size 5000 , b size 5000	int a [ 5000 ] , b [ 5000 ] ;
create integer array flag of size 5000	int flag [ 5000 ] ;
set bytes from flag to size of flag to value true	memset ( flag , true , sizeof ( flag ) ) ;
create integer n	int n ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
create integer len with len = 0	int len = 0 ;
for i = n - 1 to 0 inclusive , decrementing i	for ( int i = n - 1 ; i >= 0 ; i -- )
if flag [ a [ i ] ] is true	if ( flag [ a [ i ] ] )
increment len	len ++ ;
set b [ len ] to a [ i ]	b [ len ] = a [ i ] ;
set flag [ a [ i ] ] to false	flag [ a [ i ] ] = false ;
print len print newline	cout << len << endl ;
for i = len to 1 inclusive , decrementing i	for ( int i = len ; i >= 1 ; i -- )
if i is not 1	if ( i != 1 )
print b [ i ] print ' '	cout << b [ i ] << '   ' ;
else	else
print b [ i ] print newline	cout << b [ i ] << endl ;
let n be integer	int n ;
A = array of integers of size 60	int A [ 60 ] ;
let sum be integer	int sum ;
let B be an array of integers of size 60	int B [ 60 ] ;
read n	cin >> n ;
sum = n	sum = n ;
create integer t with value 0	int t = 0 ;
read n elements from the input to A	for ( int i = 0 ; i < n ; i ++ ) { cin >> A [ i ] ; }
for integer i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
for integer x = i + 1 to n exclusive	for ( int x = i + 1 ; x < n ; x ++ )
if A [ i ] = A [ x ]	if ( A [ i ] == A [ x ] )
assign value of 0 to the A [ i ]	A [ i ] = 0 ;
assign value of i to the B [ t ]	B [ t ] = i ;
increase t	t ++ ;
stop the loop	break ;
for i = t - 1 to 0	for ( int i = t - 1 ; i >= 0 ; i -- )
decrease sum by one	sum -- ;
for integer x = B [ i ] to n exclusive	for ( int x = B [ i ] ; x < n ; x ++ )
A [ x ] = A [ x + 1 ]	A [ x ] = A [ x + 1 ] ;
A [ x + 1 ] = 0	A [ x + 1 ] = 0 ;
print sum and a new line	cout << sum << endl ;
for i = 0 to sum exclusive	for ( int i = 0 ; i < sum ; i ++ )
print A [ i ]	cout << A [ i ] ;
if i ! = sum - 1 , print " "	if ( i != sum - 1 ) { cout << "   " ; }
print new line	cout << endl ;
let n and sum be integers , with sum = 0 ; a and b are arrays of integers with size 50 and v is an array of integers with size 1001 filled with 0	int a [ 50 ] , b [ 50 ] , v [ 1001 ] = { 0 } , n , sum = 0 ;
read n	cin >> n ;
read n elements into a	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for integer i = n - 1 to 0 inclusive counting down	for ( int i = n - 1 ; i >= 0 ; i -- )
if v [ a [ i ] ] is 0	if ( ! v [ a [ i ] ] )
set value of v [ a [ i ] ] to 1	v [ a [ i ] ] = 1 ;
set value of b [ sum ] to a [ i ]	b [ sum ] = a [ i ] ;
increment sum	sum ++ ;
print sum and a new line	cout << sum << endl ;
for i = sum - 1 to 0 exclusive counting down , print b [ i ] and ' '	for ( int i = sum - 1 ; i > 0 ; i -- ) cout << b [ i ] << '   ' ;
print b [ 0 ] and a new line	cout << b [ 0 ] << endl ;
create constant integer Max with Max = 1e3 + 10	const int Max = 1e3 + 10 ;
create integer arrays a , ans , flag , with a size Max , ans size Max , flag size Max	int a [ Max ] , ans [ Max ] , flag [ Max ] ;
create integers n , tot with tot = 0	int n , tot = 0 ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for i = n to 1 inclusive , decrementing i	for ( int i = n ; i >= 1 ; i -- )
if not flag [ a [ i ] ]	if ( ! flag [ a [ i ] ] )
set flag [ a [ i ] ] to 1	flag [ a [ i ] ] = 1 ;
set ans [ increment tot ] to a [ i ]	ans [ tot ++ ] = a [ i ] ;
print tot print newline	cout << tot << endl ;
for i = tot - 1 to 0 inclusive , decrementing i	for ( int i = tot - 1 ; i >= 0 ; i -- )
print ans [ i ]	cout << ans [ i ] ;
if i is not 0 print " "	if ( i != 0 ) cout << "   " ;
print newline	cout << endl ;
create long long integer n	long long int n ;
while read n	while ( cin >> n )
if n is 0	if ( n == 0 )
print 0 print newline	cout << 0 << endl ;
else if ( n + 1 ) % 2 is 0	else if ( ( n + 1 ) % 2 == 0 )
print ( n + 1 ) / 2 print newline	cout << ( n + 1 ) / 2 << endl ;
else	else
print n + 1 print newline	cout << n + 1 << endl ;
create long long int n	long long int n ;
read n	cin >> n ;
if n = 0	if ( n == 0 )
print n and a newline	cout << n << " \n " ;
else	else
if n is even	if ( n % 2 == 0 )
print n + 1 and a newline	cout << n + 1 << " \n " ;
otherwise	else
print ( n + 1 ) / 2 and a newline	cout << ( n + 1 ) / 2 << " \n " ;
declare int64_t N	int64_t N ;
read N	cin >> N ;
declare int64_t ans = 0 if N = 0 , ( N + 1 ) / 2 if N is even , or N + 1 if N is odd	int64_t ans = N == 0 ? 0 : ( N % 2 ? ( N + 1 ) / 2 : N + 1 ) ;
print ans	cout << ans << endl ;
create long long n	long long n ;
read n	cin >> n ;
if n = 0	if ( n == 0 )
print 0	cout << 0 << endl ;
else if n is even	else if ( n % 2 == 0 )
print n + 1	cout << n + 1 << endl ;
otherwise	else
print ( n + 1 ) / 2 and a newline	cout << ( n + 1 ) / 2 << endl ;
n = integer	long long n ;
Read n	cin >> n ;
if ( n + 1 ) modulo 2 is equal to 0	if ( ( n + 1 ) % 2 == 0 )
print ( n + 1 ) / 2 and a new line	cout << ( n + 1 ) / 2 << endl ;
else do the following	else
if n is equal to 0	if ( n == 0 )
print 0 and a new line	cout << 0 << endl ;
else do the following	else
print n + 1 and a new line	cout << n + 1 << endl ;
let n be a unsigned long integer	unsigned long long int n ;
read n	cin >> n ;
increase n value by 1	n ++ ;
if ( n modulus 2 is equal to 0 )	if ( n % 2 == 0 )
print n / 2 and newline	cout << n / 2 << endl ;
else if ( n is equal to 1 )	else if ( n == 1 )
print 0 and newline	cout << 0 << endl ;
else do the following	else
print n and newline	cout << n << endl ;
integer function gcd with integer arguments a and b	int gcd ( int a , int b )
if b = 0	if ( b == 0 )
return a	return a ;
else	else
call gcd with arguments b and a % b	gcd ( b , a % b ) ;
declare long long integer variable n	long long int n ;
read n and keep looping	while ( cin >> n )
increase n by one	n ++ ;
if n = 1	if ( n == 1 )
print " 0 "	cout << " 0 " ;
else if n is even	else if ( n % 2 == 0 )
print n / 2	cout << n / 2 ;
else	else
print n	cout << n ;
print new line	cout << endl ;
declare long long n	long long n ;
read n	cin >> n ;
if n = 0	if ( n == 0 )
print 0 and " \ n "	cout << 0 << " \n " ;
if n = 1	if ( n == 1 )
print 1 and " \ n "	cout << 1 << " \n " ;
if odd is greater than even	if ( n % 2 == 1 )
print ( n + 1 ) / 2 and " \ n "	cout << ( n + 1 ) / 2 << " \n " ;
else	else
print n + 1 and " \ n "	cout << n + 1 << " \n " ;
create long long n	long long n ;
read n	cin >> n ;
if n is equal to 0	if ( n == 0 )
print 0	cout << 0 << endl ;
if n is even	if ( n % 2 == 0 )
print n + 1 and a newline	cout << n + 1 << endl ;
else	else
print ( n + 1 ) / 2	cout << ( n + 1 ) / 2 << endl ;
n = long long	long long n ;
read n	cin >> n ;
print if not n then 0 else if n & 1 then ( n + 1 ) > > 1 else n + 1	cout << ( ! n ? 0 : n & 1 ? ( n + 1 ) >> 1 : n + 1 ) << endl ;
create long long int s , n , i , j , p , h , set h to 0	long long int s , n , i , j , p , h = 0 ;
read n	cin >> n ;
if n equal to 0	if ( n == 0 )
print 0	cout << " 0 " << endl ;
else if n is even	else if ( n % 2 == 0 )
print n + 1	cout << n + 1 << endl ;
else	else
print ( n + 1 ) / 2 and a newline	cout << ( n + 1 ) / 2 << endl ;
create long longs n , p , b and q	long long n , p , b , q ;
long long function gcd with long long arguments a and b	long long gcd ( long long a , long long b )
return a if b = 0	if ( b == 0 ) return a ;
return gcd ( b , a % b )	return gcd ( b , a % b ) ;
read n	cin >> n ;
decrement n and loop further , while n > 0	while ( n -- )
read from the input to p , q and b	cin >> p >> q >> b ;
declare long long variable tmp = gcd ( p , q )	long long tmp = gcd ( p , q ) ;
divide p by tmp	p /= tmp ;
divide q by tmp	q /= tmp ;
create long long div = gcd of b and q	long long div = gcd ( b , q ) ;
while div = ( gcd ( b , q ) ! = 1 )	while ( ( div = gcd ( b , q ) ) != 1 )
while q % div is 0 , divide q by div	while ( q % div == 0 ) q /= div ;
if q is 1	if ( q == 1 )
print " Finite "	cout << " Finite " << endl ;
else	else
print " Infinite "	cout << " Infinite " << endl ;
long long function gcd with long long arguments a and b	long long gcd ( long long a , long long b )
while b > 0	while ( b > 0 )
a = a modulo b	a %= b ;
swap a and b	swap ( a , b ) ;
return a	return a ;
declare string sy = " Finite \ n "	string sy = " Finite\n " ;
declare string sn = " Infinite \ n "	string sn = " Infinite\n " ;
create map m of long long pairs to chars	map < pair < long long , long long > , char > m ;
void function solve	void solve ( )
create int n	int n ;
read n	cin >> n ;
loop i from 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
create long longs p , q and b	long long p , q , b ;
read input to p , q and b	cin >> p >> q >> b ;
p = p modulo q	p %= q ;
declare long long g = gcd of p and q	long long g = gcd ( p , q ) ;
divide p by g	p /= g ;
divide q by g	q /= g ;
if p = 0	if ( p == 0 )
print sy	cout << sy ;
go to the start of the loop	continue ;
if pair { q , b } is present in m	if ( m . find ( { q , b } ) != m . end ( ) )
if m [ { q , b } ] ! = 0	if ( m [ { q , b } ] )
print sy	cout << sy ;
else	else
print sn	cout << sn ;
continue the loop	continue ;
declare long long q1 = q	long long q1 = q ;
change g to gcd ( q , b )	g = gcd ( q , b ) ;
while g > 1	while ( g > 1 )
while q % g = 0	while ( q % g == 0 ) q /= g ;
set g to gcd ( q , b )	g = gcd ( q , b ) ;
if q = 1	if ( q == 1 )
assign true to m [ { q1 , b } ]	m [ { q1 , b } ] = true ;
print sy	cout << sy ;
else	else
assign false to m [ { q1 , b } ]	m [ { q1 , b } ] = false ;
print sn	cout << sn ;
initialize random number generator using 555 as a seed	srand ( 555 ) ;
invoke function solve	solve ( ) ;
n = integer	int n ;
p , q , b = long long	long long p , q , b ;
read n	cin >> n ;
while decrement n	while ( n -- )
read p , q , b	cin >> p >> q >> b ;
if p modulo q is 0	if ( p % q == 0 )
print Finite	cout << " Finite\n " ;
continue iteration	continue ;
q = q / gcd of p and q	q /= __gcd ( p , q ) ;
g = long long	long long g ;
while 1	while ( 1 )
g = gcd of q and b	g = __gcd ( q , b ) ;
if g is 1 , break loop	if ( g == 1 ) break ;
while q modulo g is 0 , q = q / g	while ( q % g == 0 ) q /= g ;
if q is not 1	if ( q != 1 )
print Infinite	cout << " Infinite\n " ;
else	else
print Finite	cout << " Finite\n " ;
N = integer	int N ;
P , Q , B = long long	long long P , Q , B ;
in the function gcd that takes long long x , y and returns long long	long long gcd ( long long x , long long y )
if y is 0 , return x	if ( y == 0 ) return x ;
return gcd of y and x modulo y	return gcd ( y , x % y ) ;
read N	cin >> N ;
while decrement N	while ( N -- )
read P , Q , B	cin >> P >> Q >> B ;
P = P modulo Q	P %= Q ;
G = long long with G = gcd of P and Q	long long G = gcd ( P , Q ) ;
Q = Q / G	Q /= G ;
C = long long with C = gcd of B and Q	long long C = gcd ( B , Q ) ;
while C is not 1	while ( C != 1 )
Q = Q / C	Q /= C ;
C = gcd of C and Q	C = gcd ( C , Q ) ;
if Q is not 1	if ( Q != 1 )
print Infinite	cout << " Infinite\n " ;
else	else
print Finite	cout << " Finite\n " ;
declare long longs n , p , q and b	long long n , p , q , b ;
read input to n	cin >> n ;
for integer i = 1 to n inclusive	for ( int i = 1 ; i <= n ; i ++ )
read p , q and b from the input	cin >> p >> q >> b ;
declare long long variable t = __gcd of p and q	long long t = __gcd ( p , q ) ;
divide q by t	q /= t ;
assign b to t	t = b ;
while q ! = 1	while ( q != 1 )
assign result of __gcd ( q , t ) to t	t = __gcd ( q , t ) ;
divide q by t	q /= t ;
break if t = 1	if ( t == 1 ) break ;
if q = 1	if ( q == 1 )
print " Finite \ n "	cout << " Finite\n " ;
else	else
print " Infinite \ n "	cout << " Infinite\n " ;
in the function freac	void freac ( ) { }
DX = array of const integers with DX = + 1 , 0 , - 1 , 0 , + 1 , + 1 , - 1 , - 1	const int DX [ ] = { + 1 , 0 , - 1 , 0 , + 1 , + 1 , - 1 , - 1 } ;
DX = array of const integers with DY = 0 , + 1 , 0 , - 1 , + 1 , - 1 , + 1 , - 1	const int DY [ ] = { 0 , + 1 , 0 , - 1 , + 1 , - 1 , + 1 , - 1 } ;
INF = const integer with INF = cast 1e9 + 123 from integer	const int INF = ( int ) 1e9 + 123 ;
INFL = const long long with INFL = cast 1e18 + 123 from long long	const long long INFL = ( long long ) 1e18 + 123 ;
EPS = const double with EPS = 1e - 9	const double EPS = 1e-9 ;
in the function lifestyle	void lifestyle ( ) { }
call lifestyle	lifestyle ( ) ;
call freac	freac ( ) ;
n = integer	int n ;
p , q , b = long long	long long p , q , b ;
read n	cin >> n ;
while decrement n	while ( n -- )
read p , q , b	cin >> p >> q >> b ;
g = long long with g = gcd of p and q	long long g = __gcd ( p , q ) ;
q = q / g	q /= g ;
while b is not 1	while ( b != 1 )
while q modulo b is 0 , q = q / b	while ( q % b == 0 ) q /= b ;
b = gcd of q and b	b = __gcd ( q , b ) ;
if q is 1 print Finite else print Infinite	cout << ( ( q == 1 ) ? " Finite " : " Infinite " ) << endl ;
return false	return false ;
declare int n	int n ;
declare long longs p , q , and b	long long p , q , b ;
declare long long NWD with long long x and long long y	long long NWD ( long long x , long long y )
if y is 0	if ( y == 0 )
return x	return x ;
else	else
return the NWD of y , and x mod y	return NWD ( y , x % y ) ;
input n	cin >> n ;
loop i between 1 and n inclusive	for ( int i = 1 ; i <= n ; i ++ )
input p , q , and b	cin >> p >> q >> b ;
declare long long blep to be NWD of p and q	long long blep = NWD ( p , q ) ;
divide q by q over blep	q /= blep ;
set blep to NWD of q and b	blep = NWD ( q , b ) ;
while blep is more than 1	while ( blep > 1 )
while q mod blep is zero , then set q to q over blep	while ( q % blep == 0 ) q /= blep ;
set blep to NWD of q and b	blep = NWD ( q , b ) ;
if q is greater than 1	if ( q > 1 )
output " Infinite "	cout << " Infinite " << endl ;
else	else
output " Finite "	cout << " Finite " << endl ;
in function gcd taking two long longs a and b and returning a long long	long long gcd ( long long a , long long b )
return __gcd of a and b	return __gcd ( a , b ) ;
in function solve returning a bool	bool solve ( )
p , q , b = long long	long long p , q , b ;
read p then q then b	cin >> p >> q >> b ;
if p is 0 then return true	if ( p == 0 ) return true ;
gc = long long with gc = gcd of p and q	long long gc = gcd ( p , q ) ;
set p to p / gc	p /= gc ;
set q to q / gc	q /= gc ;
x = long long	long long x ;
loop while setting x to gcd of q and b and x is greater than 1	while ( ( x = gcd ( q , b ) ) > 1 )
loop while q mod x is 0 set q to q / x	while ( q % x == 0 ) q /= x ;
set x to gcd of q and b	x = gcd ( q , b ) ;
return true if q is 1 else return false	return q == 1 ;
t = int	int t ;
read t	cin >> t ;
loop t times	while ( t -- )
is = bool with is = solve	bool is = solve ( ) ;
print " Finite " if is is true else print " Infinte "	cout << ( is ? " Finite " : " Infinite " ) << ' \n ' ;
create long longs p , q , k	long long p , q , k ;
declare gcd with long longs a , b as arguments , returning long long	long long gcd ( long long a , long long b )
return a if b is 0 , else result of run gcd with b , a % b as arguments	return b == 0 ? a : gcd ( b , a % b ) ;
declare inline rd with no arguments , returning long long	inline long long rd ( )
create long longs x , f , with x = 0 , f = 1	long long x = 0 , f = 1 ;
create character ch with ch = getchar	char ch = getchar ( ) ;
while ch is greater than ' 9 ' or ch is less than ' 0 '	while ( ch > ' 9 ' || ch < ' 0 ' )
if ch is ' - ' , set f to - 1	if ( ch == ' - ' ) f = - 1 ;
set ch to read character	ch = getchar ( ) ;
while ch is greater than or equal to ' 0 ' and ch is less than or equal to ' 9 '	while ( ch >= ' 0 ' && ch <= ' 9 ' )
set x to ( x bitshift left 1 ) + ( x bitshift left 3 ) + ch - ' 0 '	x = ( x << 1 ) + ( x << 3 ) + ch - ' 0 ' ;
set ch to read character	ch = getchar ( ) ;
return x * f from function	return x * f ;
declare inline solve with no arguments , returning void	inline void solve ( )
set p to result of run rd , set q to result of run rd , set k to result of run rd	p = rd ( ) , q = rd ( ) , k = rd ( ) ;
create long long t with t = result of run gcd with p , q as arguments	long long t = gcd ( p , q ) ;
set q to q / t	q /= t ;
while ( set t to result of run gcd with k , q as arguments ) is not 1	while ( ( t = gcd ( k , q ) ) != 1 )
while ( q % t is 0 ) set q to q / t	while ( q % t == 0 ) q /= t ;
print " Finite " if q is 1 , else " Infinite "	puts ( q == 1 ? " Finite " : " Infinite " ) ;
for T = result of run rd to T , decrementing T , run solve	for ( int T = rd ( ) ; T ; T -- ) solve ( ) ;
in function compare taking two pointers to const void x1 and x2 and returning an int	int compare ( const void * x1 , const void * x2 )
return value of x1 as pointer to in - value of x2 as pointer to int	return ( * ( int * ) x1 - * ( int * ) x2 ) ;
N = int	int N ;
final = int	int final ;
read N	cin >> N ;
massiv = int array of size N	int massiv [ N ] ;
d = int	int d ;
R = int	int R ;
for R = 0 to N	for ( R = 0 ; R < N ; R ++ )
read d	cin >> d ;
set massiv [ R ] to d	massiv [ R ] = d ;
call qsort on massiv , N , sizeof of int and compare	qsort ( massiv , N , sizeof ( int ) , compare ) ;
if N is even	if ( N % 2 == 0 )
set final to massiv [ R / 2 - 1 ]	final = massiv [ R / 2 - 1 ] ;
else	else
set final to massiv [ R / 2 ]	final = massiv [ R / 2 ] ;
print final	cout << final << endl ;
declare long long n and an array of long longs arr with 1001 element	long long n , arr [ 1001 ] ;
read n	cin >> n ;
for i from 0 to n exclusive , read arr [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort arr	sort ( arr , arr + n ) ;
if n is even	if ( n % 2 == 0 )
print arr [ ( n / 2 ) - 1 ]	cout << arr [ ( n / 2 ) - 1 ] << endl ;
else	else
print arr [ n / 2 ]	cout << arr [ n / 2 ] << endl ;
create integer array a with size 1005	int a [ 1005 ] ;
create integer n	int n ;
create integer sum with sum = 0	int sum = 0 ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort elements from a to a + n	sort ( a , a + n ) ;
if n % 2	if ( n % 2 )
print a [ n / 2 ] print newline	cout << a [ n / 2 ] << endl ;
else	else
print a [ n / 2 - 1 ] print newline	cout << a [ n / 2 - 1 ] << endl ;
create constant integer N with N = 100010	const int N = 100010 ;
create integer array a with size N	int a [ N ] ;
create integer N	int n ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort elements from a + 1 to a + n + 1	sort ( a + 1 , a + n + 1 ) ;
print a [ ( n + 1 ) / 2 ] print " \ n "	cout << a [ ( n + 1 ) / 2 ] << " \n " ;
n = int	int n ;
read n	cin >> n ;
v = vector of int	vector < int > v ;
for i = 0 to n exclusive	for ( int i = 0 ; i < n ; i ++ )
x = int	int x ;
read x	cin >> x ;
add x at end of v	v . push_back ( x ) ;
sort first n items of v in numeric ascending order	sort ( v . begin ( ) , v . begin ( ) + n , greater < int > ( ) ) ;
turn = 0	int turn = 0 ;
while size of v is not 1	while ( v . size ( ) != 1 )
if turn is even	if ( turn % 2 == 0 )
erase first item of v	v . erase ( v . begin ( ) ) ;
else	else
pop last item of v	v . pop_back ( ) ;
turn = ( incremented value of turn ) modulo 2	turn = ( ++ turn ) % 2 ;
print first item of v	cout << v . front ( ) << endl ;
create int n , a [ 1001 ]	int n , a [ 1001 ] ;
read n	cin >> n ;
for i = 1 to n inclusive , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort elements bewteen a + 1 and a + n + 1	sort ( a + 1 , a + n + 1 ) ;
if n is even	if ( n % 2 == 0 )
print a [ n / 2 ]	cout << a [ n / 2 ] << endl ;
otherwise	else
print a [ n / 2 + 1 ] and a newline	cout << a [ n / 2 + 1 ] << endl ;
create long int array arr with size 1001	long int arr [ 1001 ] ;
create integers n , i and mid	int n , i , mid ;
read input to n	cin >> n ;
for i from 0 to n exclusive , read arr [ i ]	for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
sort arr	sort ( arr , arr + n ) ;
mid = n / 2 rounded up	mid = ceil ( ( double ) n / 2 ) ;
print arr [ mid - 1 ]	cout << arr [ mid - 1 ] << endl ;
maxn = const integer with maxn = 1e3 + 10	const int maxn = 1e3 + 10 ;
n = integer	int n ;
a = integer array of size maxn	int a [ maxn ] ;
read n	cin >> n ;
for i = 1 to n , read a [ i ]	for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort a + 1 and a + n + 1	sort ( a + 1 , a + n + 1 ) ;
print a [ ( n + 1 ) / 2 ]	cout << a [ ( n + 1 ) / 2 ] << endl ;
declare integer variable n	int n ;
read input to n	cin >> n ;
declare vector of integers a with size n	vector < int > a ( n ) ;
for i from 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort a	sort ( a . begin ( ) , a . end ( ) ) ;
create integer idx = ( length of a - 1 ) / 2	int idx = ( a . size ( ) - 1 ) / 2 ;
print a [ idx ]	cout << a [ idx ] << endl ;
let int n	int n ;
read n	cin >> n ;
create int array a of size n	int a [ n ] ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for i = 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
for j = 0 to n - i - 1 exclusive	for ( int j = 0 ; j < n - i - 1 ; j ++ )
if a [ j ] is greater than a [ j + 1 ] , swap values between a [ j ] and a [ j + 1 ]	if ( a [ j ] > a [ j + 1 ] ) { swap ( a [ j ] , a [ j + 1 ] ) ; }
if n modulo 2 is 0	if ( n % 2 == 0 )
print a [ n / 2 - 1 ]	cout << a [ n / 2 - 1 ] << endl ;
else	else
print a [ n / 2 ]	cout << a [ n / 2 ] << endl ;
let int n and int array a of size 1110	int n , a [ 1110 ] ;
read n	cin >> n ;
for i = 0 to n exclusive , read a [ i ]	for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort array a	sort ( a , a + n ) ;
print a [ ( n - 1 ) / 2 ]	cout << a [ ( n - 1 ) / 2 ] << endl ;
create int n	int n ;
read n	cin >> n ;
create vector of integers v with size n	vector < int > v ( n ) ;
read n elements into v	for ( int i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }
sort v	sort ( v . begin ( ) , v . end ( ) ) ;
for i from 0 to n - 1 exclusive	for ( int i = 0 ; i < n - 1 ; i ++ )
if i is odd	if ( i % 2 != 0 )
remove first element from v	v . erase ( v . begin ( ) ) ;
else	else
remove the last element from v	v . pop_back ( ) ;
print the first element of v	cout << v [ 0 ] << endl ;
