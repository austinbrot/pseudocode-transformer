int n ;
cin >> n ;
int cur = 1, cnt = 0 ;
vector < int > ans ;
for ( int i = 0 ; i < n ; i ++ )
int x ;
cin >> x ;
if ( x == cur )
cnt ++ ;
cur ++ ;
else
ans. push_back ( cnt ) ;
cnt = 1 ;
cur = 2 ;
if ( i == n - 1 ) { ans. push_back ( cnt ) ; }
cout << ( int ) ans. size ( ) << endl ;
for ( int i = 0 ; i < ( int ) ans. size ( ) ; i ++ )
if ( i > 0 ) cout << "   " ;
cout << ans [ i ] ;
cout << endl ;
int n ;
while ( cin >> n )
int a [ n ] ;
int b [ n ] ;
int max ;
int count = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
max = a [ 0 ] ;
for ( int q = 1 ; q < n ; q ++ )
if ( a [ q ] == 1 ) { b [ count ++ ] = a [ Q - 1 ] ; }
cout << count + 1 << endl ;
for ( int j = 1 ; j <= count ; j ++ ) { cout << b ; }
cout << a [ n - 1 ] << endl ;
int n ;
cin >> n ;
int arr [ n ], ct = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> arr [ i ] ;
if ( arr [ i ] == 1 ) ct ++ ;
cout << ct << endl ;
for ( int i = 1 ; i < n ; i ++ )
if ( arr [ i ] == 1 ) { cout << arr [ j - 1 ] << "   " ; }
cout << arr [ n - 1 ] << endl ;
int n ;
cin >> n ;
int i, j, a [ n + 1 ], k = 0 ;
for ( i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
if ( a [ i ] == 1 ) { k ++ ; }
cout << k << endl ;
for ( i = 1 ; i < n ; i ++ )
if ( a [ i ] == 1 ) { cout << a [ j - 1 ] << "   " ; }
cout << a [ n - 1 ] << endl ;
int n ;
cin >> n ;
int a [ 1005 ] ;
int ans [ 1005 ] ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
int j = 0 ;
for ( int i = 1 ; i < n ; i ++ )
if ( a [ i + 1 ] <= a [ 1 ] ) ans [ j ++ ] = a [ j ] ;
ans [ j ++ ] = a [ n ] ;
cout << j << endl ;
for ( int i = 0 ; i < j - 1 ; i ++ ) { cout << ans [ i ] << "   " ; }
cout << ans [ j - 1 ] << endl ;
const int maxn = 1e3 + 5 ;
int arr [ maxn ] ;
int stc [ maxn ] ;
int n, top ;
while ( cin >> n )
top = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
int i ;
for ( i = 0 ; i < n - 1 ; i ++ )
if ( arr [ i + 1 ] == 1 ) stc [ top ++ ] = arr [ j ] ;
stc [ top ++ ] = arr [ i ] ;
cout << top << stc [ 0 ] << endl ;
for ( int i = 1 ; i < top ; i ++ ) cout << stc [ i ] << endl ;
cout << endl ;
int n ;
cin >> n ;
int nxt = 1 ;
vector < int > ans ;
for ( int i = 0 ; i < n ; i ++ )
int x ;
cin >> x ;
if ( x!= nxt ) ans. push_back ( nxt - 1 ) ;
nxt = x + 1 ;
ans. push_back ( nxt - 1 ) ;
cout << ans. size ( ) << endl ;
for ( int i = 0 ; i < ( int ) ans. size ( ) ; i ++ )
if ( i > 0 ) cout << "   " ;
cout << ans [ i ] << endl ;
cout << endl ;
int a [ 1001 ], n, s = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] == 1 ) sum ++ ;
cout << sum << endl ;
for ( int i = 1 ; i < n ; i ++ )
if ( a [ i + 1 ] == 1 ) cout << a [ j ] << endl ;
cout << a [ n ] << endl ;
int n, arr [ 1001 ], c = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> arr [ i ] ;
if ( arr [ i ] == 1 ) c ++ ;
cout << c << endl ;
for ( int i = 1 ; i < n ; i ++ )
if ( arr [ i ] == 1 ) { cout << arr [ j - 1 ] << "   " ; }
cout << arr [ n - 1 ] << endl ;
int n ;
int val ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
if ( i > 0 ) cout << "   " ;
cin >> val ;
cout << val - ( val + 1 ) % 2 << endl ;
<< " \n " ;
int n ;
cin >> n ;
int a [ n + 10 ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
if ( a [ i ] % 2 == 0 ) { a [ j ] -= 1 ; }
cout << a [ j ] << endl ;
cout << a [ n - 1 ] << endl ;
int n ;
while ( cin >> n )
int flag = 1 ;
for ( int i = 0 ; i < n ; i ++ )
int num ;
cin >> num ;
if ( num == 0 )
if ( flag )
cout << num, flag = 0 ;
else
cout << "   " << num << endl ;
else if ( num % 2 == 0 )
if ( flag )
cout << num - 1 << endl, flag = 0 ;
else
cout << "   " << num - 1 << endl ;
else
if ( flag )
cout << num << flag = 0 << endl ;
else
cout << "   " << num << endl ;
cout << endl ;
int 1000 = a ;
int n ;
cin >> n ;
for ( int i = 0 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for ( int i = 0 ; i <= n ; i ++ )
if ( a [ i ] % 2 == 0 ) a [ ++ i ] = 1 ;
if ( i == n )
cout << a [ i ] << endl ;
else
cout << a [ i ] << endl ;
int n ;
cin >> n ;
int a [ n + 10 ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
if ( a [ i ] % 2 == 0 ) a [ j ] -= 1 ;
for ( int j = 0 ; j < n - 1 ; j ++ ) { cout << a [ j ] << "   " ; }
cout << a [ n - 1 ] << endl ;
const int N = 1e5 + 50 ;
int T, n, m, L, R ;
long long a [ 2 * N ] ;
cin >> n ;
for ( int i = 0 ; i < n * 2 ; i ++ ) cin >> a [ i ] ;
if ( n <= 1 )
cout << " 0 " ;
sort ( a, a + 2 * n ) ;
long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a ( 2 * n - i ] - b [ n ] ) ;
long long C = a [ 2 * n - 1 ] - a [ 0 ] ;
for ( int i = 1 ; i <= n ; i ++ )
long long temp = C * ( a [ i + n - 1 ] - a [ 1 ] ) ;
ans = min ( ans, temp ) ;
cout << ans << endl ;
long long n ;
while ( cin >> n )
long long a [ 2 * n + 10 ] ;
for ( long long i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + n ) ;
long long ans = ( a [ n - 1 ] - a [ 0 ] ) * ( a ( 2 * n - i ] - b [ n ] ) ;
for ( long long i = 1 ; i < n ; i ++ ) { ans = min ( ans, ( a [ 2 * n - 1 ] - a [ 0 ] ) * a [ i + n - i ] ) ; }
cout << ans << endl ;
const int sz = 200010 ;
long long int a [ sz ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + 2 * n ) ;
long long int ans = ( a [ n - 1 ] - a [ 0 ] ) * a [ 2 * n - i ] > 0 ;
for ( int i = n ; i < 2 * 2 ; i ++ ) { ans = min ( ans, ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( a ( i ] - i - n + 1 ] ) ) ; }
cout << ans << endl ;
const int N = 2e6 + 5 ;
long long a [ N ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + 2 * n ) ;
long long int ans = ( a [ n - 1 ] - a [ 0 ] ) * ( ( long long ) a [ 2 * n - i ] ) ;
for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans, ( a [ i + n - 1 ] - a [ 1 ] ) * ( ( ( 2 * n - i ] + a [ 0 ] ) ) ; }
cout << ans << endl ;
const int N = 2e5 + 50 ;
const int M = 1e6 ;
const long long oo = 1e18 ;
const int mod = 1e9 + 7 ;
int n ;
cin >> n ;
vector < long long > a ( 2 * n ) ;
for ( int i = 0 ; i < n * 2 ; i ++ ) cin >> a [ i ] ;
sort ( a. begin ( ), a. end ( ) ) ;
long long ans = ( ( a [ n - 1 ] - a [ 0 ] ) * ( a. back ( ) - A [ n ] ) ;
for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans, ( a [ i + n - 1 ] - a [ 1 ] ) * ( a. back ( ) - b [ 0 ] ) ) ; }
cout << ans << endl ;
const int INF = ( 0x3f3f )3f ;
const int maxa = 1e5 + 10 ;
int a [ maxa << 1 ] ;
int n ;
while ( cin >> n )
int i ;
for ( i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + n ) ;
long long x = a [ n - 1 ] - a [ 0 ] ;
long long y = a [ 2 * n - 1 ] - a [ n ] ;
long long minsq = x * y ;
x = a [ 2 * n - 1 ] - a [ 0 ] ;
for ( i = 1 ; i < n ; i ++ )
y = a [ i + n - 1 ] - a [ 1 ] ;
minsq = min ( minsq, x * y ) ;
cout << minsq << endl ;
int N ;
long long A [ 200005 ] ;
cin >> N ;
for ( int i = 0 ; i <= 2 * N - 1 ; i ++ ) cin >> A [ i ] ;
sort ( A, A + 2 * N ) ;
long long Ans = ( A [ N - 1 ] - A [ 0 ] ) * a [ 2 * N - i ] -A [ N ] ;
for ( int i = 1 ; i <= N - 1 ; ++ i ) { Ans = min ( Ans, ( A [ 2 * N - i ] - A [ 0 ] ) * (A [ i + N - 2 ] - B [ i ] ) ) ; }
cout << Ans <<'\n';
int niz [ 200005 ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> niz [ i ] ;
sort ( ( niz + 1 ), ( nz + 2 ) + n + 1, greater < int > ( ) ) ;
int dx = niz [ n ] - nizl [ 1 ] ;
int dy = ( niz [ 2 * n ] ) - ( Niz [ n + 1 ] ) ;
long long p = 0 ;
p = ( long long int ) dx * dy ;
long long int tren = 0 ;
for ( int i = n + 1 ; i <= 2 * n - 1 ; ++ i )
tren = ( long long int ) niz [ i ] - niz ( i - n + 1 ] ) * ( nizz [ 2 * n ] - ( long double int ) Niz [ 1 ] ;
if ( tren < p ) p = tren ;
cout << p << endl ;
long long n, a [ 1000001 ] ;
cin >> n ;
n *= 2 ;
for ( long long i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort ( a + 1, a + n + 1 ) ;
long long ans = ( long long ) ( a [ n / 2 ] - a [ 1 ] ) * ( ( double ) a [ 2 + 1 ] + 2 ) ;
for ( long long i = 2 ; i <= n / 2 + 1 ; i ++ ) { ans = min ( ans, ( a [ i + n / 3 - 1 ] - a [ 1 ] ) * (a [ n ] + a [ 2 ] ) ) ; }
cout << ans << endl ;
long long a [ 202000 ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= n << 1 ; ++ i ) cin >> a [ i ] ;
sort ( a + 1, a + ( 1 + n + n ) ) ;
long long s = 1ll << 62 ;
s = min ( s, ( ( a [ n ] - a [ 1 ] ) * ( ( ( n << 1 ] + a [ 2 ] ) ) ) + ( n < 1 ] - ( n + 1 ]) ) ) ;
for ( int i = 2 ; i <= n ; i ++ ) { s = min ( s, ( a [ n << 1 ] - a [ 1 ] ) * ( ( ( n + i - 1 ] + a [ i ] ) ) ) ; }
cout << s << endl ;
int flag ;
int n, m, len ;
long long a [ 200005 ] ;
long long ans, temp ;
while ( cin >> n )
for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + n ) ;
ans = ( ( a [ 2 * n - 1 ] - a [ n ] ) * ( a ( n - i ] - b [ 0 ] ) ) ;
temp = a [ 2 * n - 1 ] - a [ 0 ] ;
for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans, temp * ( a [ i + n - 1 ] - a [ 1 ] ) ) ; }
cout << ans << endl ;
int flag ;
int n, m, len ;
long long a [ 200005 ] ;
long long ans, temp ;
while ( cin >> n )
for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + n + n ) ;
ans = ( a [ 2 * n - 1 ] - a [ n ] ) * ( a ( n - i ] - b [ 0 ] ) ;
temp = a [ 2 * n - 1 ] - a [ 0 ] ;
for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ans, temp * ( a [ i + n - 1 ] - a [ 1 ] ) ) ; }
cout << ans << endl ;
const int maxn = 2e5 + 10 ;
long long a [ maxn ] ;
int n ;
cin >> n ;
long long ans = 0 ;
for ( int i = 0 ; i < 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + 2 * n ) ;
ans = ( a [ n - 1 ] - a [ 0 ] ) * a [ 2 * n - i ] - b [ n ] ;
for ( int i = 1 ; i < n ; i ++ ) { ans = min ( ( a [ 2 * n - 1 ] - a [ 0 ] ) * ( (a [ i + n - i ] + a [ i ] ), ans ) ; }
cout << ans << endl ;
int n ;
long long a [ 200001 ], ans ;
cin >> n ;
for ( int i = 1 ; i << ( n << 1 ) ; i ++ ) cin >> a [ i ] ;
sort ( a + 1, a + ( n << 1 ) + 1 ) ;
ans = ( a [ n ] - a [ 1 ] ) * ( a << n + 1 ] + 1 ) ;
for ( int i = 1 ; i < n ; i ++ ) ans = min ( ( a [ n << 1 ] - a [ 1 ] ) * ( ( n + i ] - b [ i + 2 ] ), ans ) ;
cout << ans << endl ;
long long in [ 200010 ] ;
int n, n2 ;
long long ans ;
cin >> n ;
n2 = n * 2 ;
for ( int i = 0 ; i < n2 ; i ++ ) cin >> in [ i ] ;
sort ( in, in + n2 ) ;
ans = ( in [ n - 1 ] - in [ 0 ] ) * (in [ n2 - i ] ) ;
for ( int i = 1 ; i < n ; i ++ ) ans = min ( ans, in [ n - 1 + i ] - in [ i ] ) * ( in [ ( n2 - 1 ] -in [ 0 ] ) ) ;
cout << ans <<'\n';
long long a [ 200020 ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= 2 * n ; i ++ ) cin >> a [ i ] ;
sort ( a + 1, a + 2 * n + 1 ) ;
long long min1 = ( a [ n ] - a [ 1 ] ) * ( b [ 2 * n ] ) / ( n + 1 ] ;
for ( int i = 2 ; i <= n + 1 ; i ++ ) { min1 = min ( min1, ( a [ 2 * n ] - a [ 1 ] ) * ( ( ( i + n - 1 ] + a [ i ] ) ) ) ; }
cout << min1 << endl ;
long long a [ 202000 ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= ( n << 1 ) ; i ++ ) cin >> a [ i ] ;
sort ( a + i, a + 1 + n + n ) ;
long long s = ( s, ( a [ n ] - a [ 1 ] ) * ( ( n << 1 ] - ( n + i ] ) ) ) ;
for ( int i = 2 ; i <= n ; i ++ ) { s = min ( s, ( a [ n << 1 ] - a [ 1 ] ) * ( n + i - 1 ] + a [ i ] ) ) ; }
cout << s << endl ;
int n ;
cin >> n ;
vector < long long > a ( n * 2 ) ;
for ( int i = 0 ; i < n * 2 ; i ++ ) cin >> a [ i ] ;
sort ( a. begin ( ), a. end ( ) ) ;
long long ans = LLONG_MAX ;
for ( int i = 0 ; i < n ; i ++ )
if ( i == 0 )
ans = min ( ans, ( a [ n - 1 ] - a [ 0 ] ) * ( a ( n * 2 - i ] ) ) ;
else
ans = min ( ans, ( long long ) ( a [ i + n - 1 ] - a [ 1 ] ) * ( ( long double ) a [ 0 ] ) ) ;
cout << ans << endl ;
const int maxn = 1e5 + 2 ;
long long a [ maxn * 2 ] ;
int n ;
cin >> n ;
long long m = n * 2 ;
for ( int i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ;
sort ( a + 1, a + m + 1 ) ;
long long ans = 1e18 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( i == 1 )
ans = min ( ans, a [ n ] - a [ 1 ] ) * ( a [ m ] - b [ n + i ] ) ) ;
else
ans = min ( ans, a [ m ] - a [ 1 ] ) * ( a [ n + i - 1 ] + a [ i ] ) ;
cout << ans << endl ;
const int MAXN = int ( 2 * 1e5 + 5 ) ;
int n ;
long long a [ MAXN ] ;
cin >> n ;
for ( int i = 0 ; i < n + n ; i ++ ) cin >> a [ i ] ;
sort ( a, a + n + n ) ;
if ( n <= 1 )
cout << " 0 " << endl ;
else
long long ans = a [ n - 1 ] - a [ 0 ] ;
ans = ans * ( a [ n + n - 1 ] - a [ i ] ) ;
long long l = a [ n + n - 1 ] - a [ 0 ] ;
for ( long long i = 1 ; i <= n ; i ++ ) { ans = min ( ans, l * ( a [ i + n - 1 ] - l [ i ] ) ) ; }
cout << ans << endl ;
int n, x ;
cin >> n ;
long long cnt1 = 0, cnt2 = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x ;
cnt1 += x ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x ;
cnt2 += x ;
if ( cnt1 >= cnt2 )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
long long int n, i, j ;
cin >> n ;
long long int s1 = 0, a [ n ] = { 0 }, b [ ( n ], s2 = 0 ;
for ( i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
s1 += a [ i ] ;
for ( i = 0 ; i < n ; i ++ )
cin >> b [ i ] ;
s2 += b [ i ] ;
if ( s1 >= s2 )
cout << " YES " <<'\n';
else
cout << " NO " <<'\n';
int n ;
cin >> n ;
int sumx = 0 ;
int sumy = 0 ;
for ( int i = 0 ; i < n ; i ++ )
int x ;
cin >> x ;
sumx += x ;
for ( int i = 0 ; i < n ; i ++ )
int y ;
cin >> y ;
sumy += y ;
if ( sumy <= sumx )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int x, y = 0, n ;
int a ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a ;
x += a ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a ;
y += a ;
if ( x >= y )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int x [ 51 ] = { 0 }, y [ 50 ] ={ 0 } ;
int n, sum_x = 0, sum-y = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> x [ i ], sum_x += x [ 1 ] ;
for ( int i = 0 ; i < n ; i ++ ) cin >> y [ i ], sum_y += y [ 1 ] ;
if ( sum_x >= sum_y )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int n, sum = 0, s = 0 ;
cin >> n ;
int arr [ n ], ar [ m ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> arr [ i ] ;
sum += arr [ i ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> ar [ i ] ;
s += ar [ i ] ;
if ( s <= sum )
cout << " YES " << endl ;
else
cout << " NO\n " ;
int is [ 105 ] ;
int n, m, a, b ;
cin >> n >> m ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
for ( int j = a ; j <= b ; j ++ ) is [ j ] = 1 ;
vector < int > ans ;
for ( int i = 1 ; i <= m ; i ++ )
if ( is [ i ] == 0 ) { ans. push_back ( i ) ; }
cout << ans. size ( ) << " \n " ;
for ( int i = 0 ; i < ans. size ( ) ; i ++ )
if ( i!= ans. size ( ) - 1 )
cout << ans [ i ] << "   " ;
else
cout << ans [ i ] << " \n " ;
int a ( 0 ), tam ( 0), comeco = 0, fim = 0 ;
cin >> a >> tam ;
bool isThere [ tam + 1 ] ;
for ( int i = 0 ; i < tam ; i ++ ) { isThere [ i ] = false ; }
for ( int b = 0 ; b < a ; b ++ )
cin >> comeco >> fim ;
for ( int c = comeco ; c <= fim ; c ++ ) { siThere [ c ] = true ; }
int resp = 0 ;
int presentes [ tam + 1 ] ;
string ordem = "  " ;
for ( int b = 1 ; b <= tam ; b ++ )
isThere [ b ] = false ;
presentes [ resp ] = b ;
resp ++ ;
cout << resp << endl ;
for ( int b = 0 ; b < resp ; b ++ )
cout << presentes [ b ] ;
if ( b == resp - 1 )
cout << endl ;
else
cout << "  " ;
const int M = 3010 ;
vector < int > a [ M ], b ;
int n, m ;
bool judge ( int x )
int num1 = a [ 1 ]. size ( ) ;
for ( int i = 2 ; i <= m ; i ++ )
if ( a [ i ]. size ( ) > x )
num1 += a [ i ]. size ( ) - x ;
else
num1 += a [ i ]. size ( ) ;
return num1 > x ;
long long get_ans ( int x )
long long ans = 0 ;
int num1 = a [ 1 ]. size ( ) ;
b. clear ( ) ;
for ( int i = 2 ; i <= m ; i ++ )
if ( a [ i ]. size ( ) > x )
for ( int j = x ; j < a [ i ]. size ( ) ; j ++ )
num1 ++ ;
ans += a [ i ] [ j ] ;
for ( int j = 0 ; j < x ; j ++ ) { b += a [ i ] [ j ] ; }
else
for ( int j = 0 ; j < a [ i ]. size ( ) ; j ++ ) { b. push_back ( a [ 1 ] [ j ] ) ; }
sort ( b. begin ( ), b. end ( ) ) ;
if ( num1 < x && x - num1 + 1 > b. size ( ) ) return 10000000000000ll ;
int hh = x - num1 + 1 ;
for ( int i = 0 ; i < hh ; i ++ ) { ans += b [ i ] ; }
return ans ;
bool cmp ( int x, int y )
return x > y ;
cin >> n >> m ;
for ( int i = 1 ; i <= n ; i ++ )
int x, y ;
cin >> x >> y ;
a [ x ]. push_back ( y ) ;
for ( int i = 1 ; i <= m ; i ++ ) { sort ( a [ i ], cmp ) ; }
long long ans = 10000000000000ll ;
for ( int i = 0 ; i <= n / 2 ; i ++ ) ans = min ( ans, get_ans ( i ) ) ;
cout << ans << endl ;
pair < long long, long long > p [ 3007 ] ;
long long int c [ 3007 ] ;
long long int n, m ;
cin >> n >> m ;
long long int mx = 0 ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < m ; i ++ ) { cin >> p [ i ]. second >> s [ i + 1 ] ; }
c [ p [ i ]. second ] ++ ;
sort ( p, p + n ) ;
for ( int i = 2 ; i <= m ; i ++ ) mx = max ( mx, c [ i ] ) ;
long long int ans = 21474836470000 ;
long long int sum = 0 ;
for ( int i = mx ; i >= 0 ; i -- )
for ( long long int j = 0 ; j < n ; j ++ )
if ( p [ j ]. second!= 1 && c [ p [ i ]. first ] > i )
c [ p [ j ]. second ] -- ;
p [ j ]. second = 1 ;
c [ 1 ] ++ ;
sum += p [ j ]. first ;
long long int k = i - c [ 1 ] + 1 ;
long long int t = sum ;
for ( long long int j = 0 ; j < n ; j ++ )
if ( k > 0 )
if ( p [ j ]. second!= 1 )
t += p [ j ]. first ;
k -- ;
ans = min ( ans, t ) ;
cout << ans <<'\n';
int ax, ay, bx, by, cx, cy, n ;
cin >> ax >> ay >> bx >> by >> cx >> cy ;
if ( cx > bx )
if ( cy > by )
if ( ( ax < cx && ax > bx ) || ( ay < cy && ay > by ) )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
else
if ( ( ax < cx && ax > bx ) || ( ay > cy && ay < by ) )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
else
if ( cy > by )
if ( ( ax > cx && ax < bx ) || ( ay < cy && ay > by ) )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
else
if ( ( ax > cx && ax < bx ) || ( ay > cy && ay < by ) )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
int bio [ 1000 ] [ 100 ] ;
const int smjeroviX [ 8 ] = { 0, 0, 1, - 1, 1 } ;
const int smjeroviY [ 8 ] = { 1, - 1, 0, 0 } ;
int n, aX, aY, bX, bY, cX, cY ;
cin >> n >> aX >> aY >> bX >> bY >> cX >> cY ;
aX -- ;
aY -- ;
bX -- ;
bY -- ;
-- cX ;
-- cY ;
queue < int > q ;
q. push ( bX ) ;
q. push ( bY ) ;
bio [ bX ] [ bY ] = 1 ;
while (! q. empty ( ) )
int x = q. front ( ) ;
q. pop ( ) ;
y = q. front ( ) ;
q. pop ( ) ;
if ( x == cX && y == cY )
cout << " YES\n " ;
for ( int i = 0 ; i < 8 ; i ++ )
int X = x + smjeroviX [ i ] ;
int Y = y + smjeroviY [ i ] ;
if ( X < 0 or X == n or Y < 0 || Y == n || bio [ X ] [ Y ] ) continue ;
bio [ X ] [ Y ] = 1 ;
if ( X!= aX && Y!= aY && ( X + Y == aX + aY ) && ( x - Y!= ( X - Y ) ) )
q. push ( X ) ;
q. push ( Y ) ;
cout << " NO\n " ;
int n, ax, ay, bx, by, cx, cy ;
cin >> n >> ax >> ay >> bx >> by >> cx >> cy ;
if ( ( ( bx - ax ) * ( cx - ax) ) < 0 || ( by - ay ) * i < 0 )
cout << " NO\n " ;
else
cout << " YES\n " ;
int n ;
cin >> n ;
int x1, y1 ;
cin >> x1 >> y1 ;
int x2, y2 ;
cin >> x2 >> y2 ;
int x3, y3 ;
cin >> x3 >> y3 ;
if ( x2 < x1 && y2 < y1 && x3 < x2 && y3 < y2 )
puts ( " YES " ) ;
else if ( x2 > x1 && y2 > y1 && x3 > x2 && y3 > y2 )
cout << " YES\n " ;
else if ( x2 > x1 && x3 > x2 && y3 < y1 && y2 > y1 )
cout << " YES " << endl ;
else if ( x2 < x1 && x3 < x2 && y2 > y1 && y3 > y2 )
cout << " YES\n " ;
else
cout << " NO\n " ;
int n, qx, qy, kx, ky, tx, ty ;
cin >> n ;
cin >> qx ;
cin >> qy ;
cin >> kx ;
cin >> ky ;
cin >> tx ;
cin >> ty ;
if ( kx < qx )
if ( ky < qy )
if ( tx < qx && ty < qy )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
else
if ( tx < qx && ty > qy )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
else
if ( ky < qy )
if ( tx > qx && ty < qy )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
else
if ( tx > qx && ty > qy )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int n ;
cin >> n ;
int x, y, x1, y1, x2, y2 ;
cin >> x >> y >> x1 >> y1 >> x2 >> y2 ;
int flag = 1 ;
if ( x1 == x || y1 == y1 )
if ( abs ( y - y1 ) == abs ( x - x2 ) )
flag = 0 ;
else if ( x1 < x && x2 > x )
flag = 0 ;
else if ( x1 > x && x2 < x )
flag = 0 ;
else if ( y1 < y && y2 > y )
flag = 0 ;
else if ( y1 > y && y2 < y )
flag = 0 ;
if ( flag )
cout << " YES " << endl ;
else
cout << " NO\n " ;
bool search ( int ax, int ay, int bx, int by, int cx, int cy )
if ( bx < ax && cx > ax && by < ay && cy < ay )
return true ;
else if ( bx < ax && cx > ax && by > ay && cy > ay )
return true ;
else if ( bx > ax and cx > ax && by < ay && cy < ay )
return true ;
else if ( bx > ax && cx > ax and by > ay && cy > ay )
return true ;
return false ;
int n, ax, ay, bx, by, cx, cy ;
cin >> n >> ax >> ay >> bx >> by >> cx >> cy ;
if ( search ( ax, ay, bx, by, cx, cy ) )
cout << " YES " << endl ;
else
cout << " NO\n " ;
long long int n, a, b, c ;
cin >> n ;
if ( n % 3 == 0 || n % 2 == 1 )
a = n - 2 ;
b = 1 ;
c = 1 ;
else if ( n % 3 == 2 )
a = n - 3 ;
b = 1 ;
c = 2 ;
cout << a << b << c << endl ;
int n ;
int c8 = 0 ;
cin >> n ;
cin. ignore ( ) ;
char s [ 101 ] ;
cin >> s ;
if ( n >= 11 )
int r = n / 11 ;
for ( int i = 0 ; s [ i ]!= 0 ; i ++ )
if ( s [ i ] =='8') c8 ++ ;
if ( c8 == r ) break ;
cout << c8 << endl ;
cout << c8 << endl ;
int n, num8, numn, num ;
char str [ 101 ] ;
while ( cin >> n )
num8 = 0 ;
cin >> str ;
for ( int i = 0 ; i < n ; i ++ )
if ( str [ i ] =='8') num8 ++ ;
numn = n / 11 ;
if ( num8 > numn )
num = numn ;
else
num = num8 ;
cout << num << endl ;
string st, s ;
int i, a, b, count = 0 ;
cin >> a >> st ;
b = a / 11 ;
for ( i = 0 ; i < a ; i ++ )
if ( st [ i ] =='8') count ++ ;
if ( count < b )
cout << count << endl ;
else
cout << b << endl ;
char s [ 101 ] ;
int n, i, sum8 = 0, sum = 0 ;
cin >> n ;
cin >> s ;
for ( i = 0 ; i < n ; i ++ )
if ( s [ i ] =='8') sum8 ++ ;
sum ++ ;
if ( sum8 >= sum / 11 )
total = sum / 11 ;
else
total = sum8 ;
cout << total << endl ;
char s [ 101 ] ;
int n, i, sum8 = 0, sum == 0, total = 0 ;
cin >> n ;
cin >> s ;
for ( i = 0 ; i < n ; i ++ )
if ( s [ i ] =='8') sum8 ++ ;
sum ++ ;
if ( sum8 >= sum / 11 )
total = sum / 11 ;
else
total = sum8 ;
cout << total << endl ;
string s ;
int n, sum = 0 ;
cin >> n ;
cin >> s ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( s [ i ] =='8') sum ++ ;
if ( n / 11 > 11 )
cout << n / 11 << endl ;
else
cout << sum << endl ;
const int N = 1e6 + 10 ;
const long long mod = 998244353 ;
int n ;
string x ;
map < int, int > m ;
cin >> n >> x ;
for ( int i = 0 ; i < n ; i ++ ) { m [ x [ i ] -'0'] ++ ; }
int s = x. size ( ) ;
cout << min ( m [ 8 ], s / 11 ) << endl ;
int n, k = 0 ;
cin >> n ;
string s ;
cin >> s ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ] =='8') k ++ ;
cout << min ( n / 11, k ) << endl ;
const int MAX = 100000 ;
const int INF = 1000000001 ;
int a [ MAX ] ;
int n, sum = 0 ;
string s ;
cin >> n ;
cin >> s ;
int len = s. length ( ) ;
for ( int i = 0 ; i < len ; i ++ ) { sum += s [ i ] =='8'; }
int res = n / 11 ;
if ( sum <= res )
cout << sum << endl ;
else
cout << res << endl ;
int n ;
cin >> n ;
string number ;
cin >> number ;
int has_eight = 0 ;
for ( int i = 0 ; i < number. length ( ) ; i ++ )
if ( number [ i ] =='8') { has_eight ++ ; }
if ( n < 11 || has_eight == 0 )
cout << 0 << endl ;
if ( ( n / 11 ) >= has_eight )
cout << has_eight << endl ;
else if ( ( n / 11 ) < has_eight )
cout << n / 11 << endl ;
int n, count = 0 ;
cin >> n ;
char c ;
for ( int i = 0 ; i < n ; i ++ )
cin >> c ;
if ( c =='8') count ++ ;
if ( n < 11 || count == 0 )
cout << 0 << endl ;
cout << min ( count, n / 11 ) << endl ;
int k, i, n, ans, m ;
string s ;
cin >> n >> s ;
for ( i = 0 ; i < n ; i ++ )
if ( s [ i ] =='8') k ++ ;
ans = min ( k, n / 11 ) ;
cout << ans << endl ;
int n ;
cin >> n ;
string s ;
cin >> s ;
int eight = 0, other = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ] =='8')
++ eight ;
else
other ++ ;
if ( eight == 0 )
cout << 0 << endl ;
else
int ans = other / 10 ;
if ( ans > eight )
cout << eight << endl ;
if ( ( eight - ans ) == 0 )
cout << ans << endl ;
else
cout << ( ( eight - ans ) + ( other % 10 ) ) / 11 ) + ans << endl ;
int n, i = 0, cnt = 0 ;
string s ;
cin >> n >> s ;
while ( s [ i ]!='\0')
if ( s [ i ] =='8') cnt ++ ;
i ++ ;
if ( n >= 11 && n / 11 <= cnt && cnt!= 0 )
cout << n / 11 << " \n " ;
else if ( n >= 11 && n / 11 >= cnt && cnt!= 0 )
cout << cnt << " \n " ;
else
cout << " 0\n " ;
string s ;
int n, sum = 0 ;
cin >> n ;
cin >> s ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( s [ i ] =='8') sum ++ ;
if ( n / 11 < sum )
cout << n / 11 << endl ;
else
cout << sum << endl ;
int n ;
string num ;
cin >> n >> num ;
int count = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( num [ i ] =='8') count ++ ;
cout << ( ( n / 11 > count )? count : ( n/ 11 ) ) << endl ;
int n, i, no_of_8 = 0, groups ;
char c ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ )
cin >> c ;
if ( c =='8') no_of_8 ++ ;
Groups = n / 11 ;
if ( no_of_8 >= groups )
cout << groups << endl ;
else
cout << no_of_8 << endl ;
int n ;
cin >> n ;
int ans = 0 ;
char s [ 101 ] ;
cin >> s ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ] =='8') ans += 1 ;
if ( ans == 0 || n / 11 == 0 )
cout << 0 << endl ;
else if ( ans > n / 11 )
cout << n / 11 << endl ;
else
cout << ans << endl ;
int n ;
cin >> t ;
while ( t -- )
int n, k ;
cin >> n >> k ;
int flag = 0 ;
for ( int i = 0 ; i < n / k ; i ++ )
for ( int j = 0 ; j < k ; j ++ )
cout << char ( 97 + j ) << endl ;
flag = j ;
for ( int i = 0 ; i < n - ( n / k ) * k ; i ++ ) { cout << char ( 97 + flag ) ; }
cout << endl ;
int n ;
string s ;
cin >> n ;
cin >> s ;
string t = "  " ;
for ( int i = 0 ; i < n ; i ++ )
int k = ( i * ( i + 1 ) ) / 2 ;
if ( k >= n ) break ;
t += s [ k ] ;
cout << t << endl ;
long long x, y, z = 1 ;
string s, ss ;
cin >> x >> s ;
for ( int i = 0 ; i < x ; i ++ )
ss += s [ i ] ;
i += z ;
z ++ ;
cout << ss << endl ;
vector < char > v ;
vector < char > s ;
int count = 1, size ;
char c ;
cin >> size ;
for ( int i = 0 ; i < size ; i ++ )
cin >> c ;
v. push_back ( c ) ;
int in, i = 0 ;
while ( i < size )
if ( i == 0 )
s. push_back ( v [ i ] ) ;
i ++ ;
else
in = count ;
for ( int j = 0 ; j < in ; j ++ )
if ( i < size ) s. push_back ( v [ i ] ) ;
count ++ ;
for ( int i = 0 ; i < s. size ( ) ; i ++ ) { cout << s [ i ] ; }
cout << endl ;
int n ;
cin >> n ;
string a ;
cin >> a ;
for ( int i = 1 ; ( i * ( i + 1 ) / 2 ) < n + 1 ; i ++ ) { cout << a [ ( i ) * ( 2 ) - 1 ] << endl ; }
cout << endl ;
int n, sum, index ;
char s [ 55 ] = {'a'}, sum ;
cin >> n >> s ;
sum = index = 0 ;
for ( int i = 0 ; ; i ++ )
index += i ;
if ( index >= n ) break ;
a [ sum ++ ] = s [ index ] ;
a [ sum ] ='\0';
cout << a << endl ;
pair < string, int > compare ( p1, p2 )
return p1. second > p2. second ;
int n ;
cin >> n ;
string s ;
cin >> s ;
string ans = "  " ;
int h = 1 ;
int c = 1 ;
for ( int i = 0 ; i < s. size ( ) ; i ++ )
if ( c == h )
ans += s [ i ] ;
h ++ ;
c = 1 ;
else
c ++ ;
cout << ans << endl ;
cin >> n ;
string s, d ;
long long n, i, l ;
cin >> n ;
cin >> s ;
while ( n )
l ++ ;
n -= l ;
for ( i = 1 ; i <= l ; i ++ )
sd += s [ 0 ] ;
else
cout << sd << endl ;
string a ;
int n, num = 0, l = 2 ;
cin >> n >> a ;
while ( true )
if ( num < n - 1 )
cout << a [ num ] ;
num += l ;
l ++ ;
else
cout << a [ num ] << endl ;
break ;
long long n ;
cin >> n ;
string palabra ;
cin >> palabra ;
string answer = "  " ;
long long aumento = 1 ;
for ( long long i = 0 ; i < n ; i += aumento )
answer. push_back ( palabra. substr ( i, 1 ) ) ;
aumento ++ ;
cout << answer << endl ;
int n, sum, index ;
char s [ 56 ] [ a ] ;
cin >> n >> s ;
sum = index = 0 ;
for ( int i = 0 ; ; i ++ )
index += i ;
if ( index >= n ) break ;
a [ sum ++ ] = s [ index ] ;
a [ sum ] ='\0';
cout << a << endl ;
int n ;
cin >> n ;
string s ;
cin >> s ;
int i = 2 ;
string ans = "  " ;
ans = ans + s [ 0 ] ;
int j = 3 ;
while ( i <= n - 1 )
ans += s [ i ] ;
i = i + j ;
j ++ ;
cout << ans << endl ;
string a ;
int n, s = 0 ;
cin >> n >> a ;
for ( int i = 1 ; i <= n ; i ++ )
s += i ;
if ( s <= n ) cout << a [ s - i ] << endl ;
cout << endl ;
int n ;
cin >> n ;
char a [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
int incr = 1 ;
for ( int i = 0 ; i < n ; i += incr )
cout << a [ i ] ;
++ incr ;
cout << endl ;
int n ;
char s [ 100 ] ;
cin >> n >> s ;
int t = 1 ;
for ( int i = 0 ; i < n ; i ++ )
cout << s [ i ] ;
t ++ ;
cout << endl ;
int n, it = 1 ;
string s ;
cin >> n >> s ;
for ( int i = 0 ; i < n ; i ++ )
it ++ ;
cout << s [ i ] ;
cout << endl ;
char a [ 60 ] = {'0'}, b {'9'} ;
int n ;
while ( cin >> n )
memset ( b, 0, sizeof ( b ) ) ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
int k = 0, d = 0 ;
for ( int i = 1 ; i <= n ; i += k )
b [ d ] = a [ i ] ;
d ++ ;
k ++ ;
cout << b << endl ;
int n ;
cin >> n ;
char a [ 60 ] ;
cin >> a ;
int j = 1 ;
for ( int i = 0 ; i < n ; i += j )
cout << a [ i ] ;
j ++ ;
cout << endl ;
char s [ 60 ] ;
int n, ans = 0 ;
cin >> n ;
cin >> s ;
for ( int i = 0 ; i <= n ; i += ans )
ans ++ ;
cout << s [ i ] ;
cout << endl ;
int n ;
cin >> n ;
string s ;
cin >> s ;
string ans ;
int cnt = 0, sum = 0 ;
for ( int i = 0 ; i < n ; i += cnt )
ans. push_back ( s [ i ] ) ;
cnt ++ ;
cout << ans << endl ;
int n, cnt = 1, i = 0 ;
string s ;
cin >> n >> s ;
while ( true )
cout << s [ i ] ;
i += cnt ;
cnt ++ ;
if ( i + cnt > n ) break ;
cout << endl ;
int l, r, n, k ;
cin >> k ;
for ( int i = 0 ; i < k ; i ++ )
cin >> l >> r ;
cout << l <<' '<< r - ( r % l ) << endl ;
int n ;
cin >> n ;
long long l [ 1000 ] = { 0 }, r [ 10000 ] ={ 0 } = { 1 } ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> l [ i ] >> r [ ++ i ] ; }
R [ i ] /= l [ 1 ] ;
for ( int i = 0 ; i < n ; i ++ ) { cout << l [ i ] << "   " << ( l [ 1 ] * R [ 2 ] ) << endl ; }
int t, n, l ;
cin >> t ;
while ( t -- )
cin >> n >> l ;
cout << n << "   " << ( l / n ) * n << endl ;
int T, l, r ;
cin >> T ;
for ( int i = 1 ; i <= T ; i ++ )
cin >> l >> r ;
cout << l << "   " << l * ( r / l ) << endl ;
int numberOfInputs ;
cin >> numberOfInputs ;
long long input1, input2 ;
while ( numberOfInputs -- > 0 )
cin >> input1 >> input2 ;
long long div = input2 / input1 ;
long long answer = input1 * div ;
cout << input1 << "   " << answer << endl ;
int T, l, r ;
int i, j ;
cin >> T ;
for ( i = 1 ; i <= T ; i ++ )
cin >> l >> r ;
cout << l <<' '<< ( ( r / l ) * l ) <<'\n';
int t ;
cin >> t ;
while ( t -- )
long int l, r ;
cin >> l >> r ;
if ( l == 1 )
cout << l <<' '<< r << endl ;
else
cout << l << "   " ;
long int mod = r % l ;
cout << r - mod << endl ;
int t ;
cin >> t ;
int l, r, d ;
while ( t -- )
cin >> l >> r ;
if ( r % l == 0 )
cout << l << "   " << r << endl ;
else
d = r % l ;
d = r - d ;
cout << l <<' '<< d << endl ;
long long n, m ;
cin >> n ;
long long l, r ;
while ( n -- )
cin >> l >> r ;
if ( r % l == 0 )
cout << l << "   " << r << endl ;
else
cout << l << "   " << r - ( r % l ) << endl ;
long long x, y ;
int T ;
cin >> T ;
while ( T -- )
cin >> x >> y ;
long long r = y % x ;
cout << x << "   " << y - r <<'\n';
int n, p [ 100100 ], s [ 100 100 ], i ;
cin >> n ;
for ( i = 2 ; i <= n ; i ++ ) { cin >> p [ i ] ; }
for ( i = 1 ; i <= n ; i ++ ) { cin >> s [ i ] ; }
for ( i = 2 ; i <= n ; i ++ )
if ( s [ i ] == - 1 ) continue ;
s [ p [ i ] ] = - 1 ;
s [ p [ i ] ] = s [ i - 1 ] ;
else
s [ p [ i ] ] = min ( s [ p ] ], s [ j ] ) ;
for ( i = 2 ; i <= n ; i ++ )
if ( s [ i ] == - 1 ) continue ;
if ( s [ p [ i ] ] > s [ 1 ] )
cout << - 1 << endl ;
ans = s [ 1 ] ;
for ( int i = 2 ; i <= n ; i ++ )
if ( s [ i ] == - 1 ) continue ;
ans = ans + s [ i ] - s [ p [ 1 ] ] ;
cout << ans << endl ;
int n ;
cin >> n ;
long long int s [ n ], ms [ ( n ] ], p [ ( ( n ) ], v [ n ) ) ;
p [ 0 ] = 0 ;
for ( int i = 1 ; i < n ; i ++ ) { cin >> p [ i ] ; }
for ( int i = 0 ; i < n ; i ++ )
cin >> s [ i ] ;
ms [ ++ i ] = s [ i ] ;
for ( int i = n - 1 ; i > 0 ; i -- )
if ( ms [ i ] < 0 ) continue ;
if ( s [ p [ i ] ] < 0 && ( ms [ p ] i ] ) < 0 || ms [ s [ j ] ] > ms [ 1 ] ) ) { ms [ ++ i ] ; }
if ( ms [ 0 ] < 0 ) ms [ 1 ] = 0 ;
long long int sum = ms [ 0 ] ;
for ( int i = 1 ; i < n ; i ++ )
if ( ms [ i ] < 0 )
ms [ i ] = mms [ p [ 1 ] ] ;
else if ( ms [ i ] < ms [ p [ 1 ] ] )
cout << - 1 << endl ;
else
sum = sum + ms [ i ] - ms [ p [ 1 ] ] ;
cout << sum << endl ;
const int N = 100001 ;
vector < int > g [ N ] ;
int n, val [ N ] ;
long long sum [ N ] ;
bool depth ( int u, int p )
if ( g [ u ]. size ( ) == 1 && p!= - 1 )
if ( sum [ u ] == - 1 )
val [ u ] = 0 ;
sum [ u ] = sum [ p ] ;
else
val [ u ] = sum [ u - sum [ p ] ;
return true ;
if ( sum [ u ] == - 1 )
long long mn = 1e9 ;
for ( int i = 0 ; i < g [ u ]. size ( ) ; i ++ )
int v = g [ u ] [ i ] ;
if ( v == p ) continue ;
long long diff = sum [ v ] - sum [ p ] ;
if ( diff < 0 ) return false ;
mn = min ( mn, diff ) ;
val [ mn ] = mn ;
sum [ u ] = sum [ p ] + val [ v ] ;
else if ( p!= - 1 )
val [ u ] -= sum [ p ] ;
bool check = 1 ;
for ( int i = 0 ; i < g [ u ]. size ( ) ; i ++ )
int v = g [ u ] [ i ] ;
if ( v == p ) continue ;
check = check + dfs ( v, u ) ;
return check ;
cin >> n ;
for ( int i = 0 ; i < n - 1 ; i ++ )
int p ;
cin >> p ;
p -- ;
g [ p ]. push_back ( i + 1 ) ;
g [ i + 1 ]. push_back ( p ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> sum [ i ] ; }
val [ i ] = sum [ 0 ] ;
if (! dfs ( 0, - 1 ) )
cout << - 1 << endl ;
else
long long s = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { s += val [ i ] ; }
cout << s << endl ;
long long p [ 200000 ] ;
long long s [ 200000 ] ;
long long num = 0 ;
long long n, i, j ;
cin >> n ;
for ( i = 2 ; i <= n ; i ++ ) { cin >> p [ i ] ; }
for ( i = 1 ; i <= n ; i ++ )
cin >> s [ i ] ;
if ( s [ i ] == - 1 ) s [ j ] = 1e10 ;
for ( i = 1 ; i <= n ; i ++ ) { s [ p [ i ] ] = min ( s [ 0 ] ], s [ 1 ] ) ; }
for ( i = 1 ; i <= n ; i ++ )
if ( s [ p [ i ] ] > s [ j ] )
cout << - 1 << endl ;
if ( s [ i ] == 1e10 ) { s [ j ] = s [ p [ y ] ] ; }
num = num + s [ i ] - s [ p [ j ] ] ;
cout << num << endl ;
const int maxn = 1e5 + 5 ;
const long long inf = 0x3f3f 3f ;
vector < int > G [ maxn ] ;
long long sum [ maxn ], a [ maxN ] ;
int minson [ maxn ] ;
int n ;
void getson ( )
int minkey = inf ;
for ( int i = 0 ; i < G [ v ]. size ( ) ; i ++ )
int to = G [ v ] [ i ] ;
if ( minkey > getson ( to ) )
minkey = sum [ to ] ;
minson [ v ] = to ;
return sum [ v ] ;
void dfs ( int v, long long fasum )
if ( deep & 1 )
a [ V ] = sum [ v ] - fasum ;
else if ( G [ v ]. size ( )!= 0 )
a [ v ] = 0 ;
return ;
else
a [ V ] = sum [ minson [ v ] ] - fasum ;
for ( int i = 0 ; i < G [ v ]. size ( ) ; i ++ ) { dfs ( G [ V ] [ i ], fasum + a [ v [, deep + 1 ) ; }
while ( cin >> n )
int pa ;
for ( int i = 2 ; i <= n ; i ++ )
cin >> pa ;
G [ pa ]. push_back ( i ) ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> sum [ i ] ; }
getson ( 1 ) ;
dfs ( 1, 0, 1 ) ;
long long maxsum = 0 ;
int flag = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] >= 0 )
maxsum += a [ i ] ;
else
flag = 1 ;
if ( flag == 0 )
cout << maxsum << endl ;
else
cout << - 1 << endl ;
for ( int i = 0 ; i <= n ; i ++ ) { G [ i ]. clear ( ) ; }
string x ;
cin >> x ;
int v = 0, h = 0 ;
for ( int i = 0 ; i < x. length ( ) ; i ++ )
if ( x [ i ] =='0')
if ( v == 0 )
cout << 1 <<' '<< v << endl ;
else
cout << 3 <<' '<< 1 << endl, v = 0 ;
else
if ( h == 0 )
cout << 4 <<' '<< 3 << endl, h ++ ;
else
cout << 4 <<' '<< 1 << endl, h = 0 ;
bool l, r ;
string s ;
cin >> s ;
for ( int i = 0 ; i < s. size ( ) ; i ++ )
if ( s [ i ] =='0'&& l )
cout << " 3 1 " << endl ;
l = false ;
else if ( s [ i ] =='0')
cout << " 1 1 " << endl ;
l = true ;
else if ( s [ i ] =='1'&& r )
cout << " 41 " << endl ;
r = false ;
else
cout << " 43 " << endl ;
r = true ;
const int MAXN = 100000 + 5 ;
string s ;
cin >> s ;
int cnt1 = 0, cnt2 = 0 ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( s [ i ] =='0')
if ( cnt1 % 2 == 0 )
cout << i << "   " << 1 << endl ;
else
cout << 3 << "   " << 1 << endl ;
cnt1 ++ ;
else
if ( cnt2 % 2 == 0 )
cout << 4 << "   " << 3 << endl ;
else
cout << 4 << "   " << 1 << endl ;
cnt2 ++ ;
cout << " \n " ;
string s ;
cin >> s ;
int l1 = s. length ( ) ;
bool vertikal = 0, horizontal = 0 ;
for ( int i = 0 ; i < l1 ; i ++ )
if ( s [ i ] =='0')
if ( vertikal!= 0 )
vertikal = 0 ;
cout << " 3 1\n " ;
else
vertikal = 1 ;
cout << " 1 1\n " ;
else
if ( horizontal )
horizontal = 0 ;
cout << " 41\n " ;
else
horizontal = 1 ;
cout << " 43\n " ;
string s ;
cin >> s ;
int o = 0, z = 0 ;
for ( int i = 0 ; i < s. size ( ) ; i ++ )
if ( s [ i ] =='0')
o ++ ;
if ( o % 2 )
cout << 1 << "   " << i << endl ;
else
cout << 3 << "   " << 1 << endl ;
else if ( s [ i ] =='1')
z ++ ;
if ( z % 2 )
cout << 4 << "   " << 3 << endl ;
else
cout << 4 << "   " << 1 << endl ;
string str ;
cin >> str ;
int len = str. length ( ) ;
int a = 0, c = 0 ;
for ( int i = 0 ; i < len ; i ++ )
if ( str [ i ] =='0')
if ( a == 0 )
a = 1 ;
cout << " 1 1 " << endl ;
else
a = 0 ;
cout << " 31 " << endl ;
if ( str [ i ] =='1')
if ( c == 0 )
c = 1 ;
cout << " 43 " << endl ;
else
c = 0 ;
cout << " 41 " << endl ;
const int N = 200005 ;
const int MOD = 998244353 ;
void solve ( )
string s ;
bool v = false ;
bool g = false ;
cin >> s ;
int n = s. length ( ) ;
for ( int i = 0 ; i < s. size ( ) ; i ++ )
if ( s [ i ] =='0')
if ( v )
cout << 3 << "   " << 1 << endl ;
v = false ;
else
cout << " 1 1 " << endl ;
v = true ;
else
if ( g )
cout << 4 << "   " << 1 << endl ;
g = false ;
else
cout << 4 << "   " << 3 << endl ;
g = true ;
int t = 1 ;
while ( t -- ) solve ( ) ;
long long expo_fast ( long long a, long long b )
a = a ;
long long int result = 1 ;
while ( b )
if ( b & 1 ) result *= a ;
b >>= 1 ;
a = a * a ;
return result ;
void take_in ( vector < int > * arr )
for ( long long int i = 0 ; i < size ; i ++ ) { cin >> arr [ i ] ; }
void disp_arr ( vector < long long int > * )
for ( long long int i = 0 ; i < size ( arr ) ; i ++ ) { cout << * arr [ i ] << "   " ; }
string func ( string s, int n )
string q ;
q. resize ( n ) ;
q [ 0 ] = s [ 0 - 1 ] ;
q [ 1 ] = s [ i ] ;
q [ 2 ] = s [ 2 - 1 ] ;
for ( int i = 3 ; i < n ; i ++ )
if ( i % 3 == 0 )
q [ i ] = q [ 0 ] ;
else if ( i % 3 == 1 )
q [ i ] = q [ 1 ] ;
else
q [ i ] = q [ 2 ] ;
return q ;
string s ;
cin >> s ;
stack < char > stk ;
long long int ans = 0 ;
bool cond1 = true, cond2 = true ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( s [ i ] =='0')
if ( cond1 )
cond1 = false ;
cout << " 1 1\n " ;
else
cond1 = true ;
cout << " 31\n " ;
else
if ( cond2 )
cond2 = false ;
cout << " 43\n " ;
else
cond2 = true ;
cout << " 41\n " ;
string s ;
int r [ 1001 ] ;
int c [ 1001 ] ;
cin >> s ;
int n = s. length ( ) ;
bool slot_0 = false ;
bool slot_1 = false ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ] =='0')
if (! slot_0 )
cout << " 1 1\n " ;
slot_0 = true ;
else
cout << " 3 1\n " ;
slot_0 = false ;
else
if (! slot_1 )
cout << " 43\n " ;
slot_1 = true ;
else
cout << " 41\n " ;
slot_1 = false ;
long long int llin ( )
long long int tmp ;
cin >> tmp ;
return tmp ;
void solve ( )
long long int nsticks = llin ( ) ;
long long int lengths [ nsticks ] ;
long long int min = 101 ;
long long int max = 0 ;
for ( long long int i = 0 ; i < nsticks ; i ++ )
long long int tmp = llin ( ) ;
length [ i ] = tmp ;
if ( tmp > max ) { max = tmp ; }
if ( tmp < min ) min = tmp ;
long long int min_t = min ;
long long int min_cost = 1000005 ;
for ( long long int t = min ; t < max + 1 ; t ++ )
long long int tmp_cost = 0 ;
for ( int i = 0 ; i < nsticks ; i ++ )
long long int tmp_length = lengths [ i ] ;
if ( tmp_length > t + 1 )
tmp_cost += tmp_length - ( t + 1 ) ;
else if ( tmp_length < t - 1 )
tmp_cost += t - 1 - tmp_length ;
if ( min_cost > tmp_cost )
min_t = t ;
min_cost = tmp_cost ;
cout << ( min_t ) << "   " << min_cost <<'\n';
return ;
int TESTS = 1 ;
while ( TESTS -- ) { solve ( ) ; }
int n ;
cin >> n ;
int a, b, i, cnt = 0, max = 0 ;
for ( i = 0 ; i < n ; i ++ )
cout << a << "   " << b << endl ;
cnt += b - a ;
if ( cnt > max ) max = cnt ;
cout << max << endl ;
int x, y, c = 0, m = 0 ;
int n ;
cin >> n ;
while ( n -- )
cin >> x >> y ;
c -= x ;
c += y ;
if ( c > m ) { m = c ; }
cout << m << endl ;
string str ;
int n, a, b, capacity = 0, total = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
total -= a ;
total += b ;
Capacity = max ( capacity, total ) ;
cout << capacity << endl ;
int n ;
cin >> n ;
int on, off, count = 0, c = 0 ;
while ( n -- )
cin >> off >> on ;
c += on - off ;
if ( c > count ) count = c ;
cout << count << endl ;
int n ;
cin >> n ;
int max, a, b, c ;
cin >> a >> b ;
c = a + b ;
max = c ;
for ( int i = 1 ; i < n ; i ++ )
cin >> a >> b ;
c -= a ;
c += b ;
if ( c > max ) max = c ;
cout << max << endl ;
int n, i, j, k, max, cap ;
max = - 1 ;
cap = 0 ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
cin >> j >> k ;
cap = cap - j + k ;
if ( cap > max ) max = cap ;
cout << max << endl ;
int n ;
cin >> n ;
int max = 0 ;
int cp = 0 ;
for ( int i = 0 ; i < n ; i ++ )
int a, b ;
cin >> a >> b ;
cp += ( b - a ) ;
if ( cp >= max ) max = cp ;
cout << max << endl ;
int n, a, b, c = 0, m = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
c += b - a ;
if ( m < c ) { m = c ; }
cout << m << endl ;
int n ;
cin >> n ;
int ans = 0 ;
int temp = 0 ;
for ( int i = 0 ; i < n ; i ++ )
int a, b ;
cin >> a >> b ;
temp = temp - a ;
temp += b ;
ans = max ( temp, ans ) ;
cout << ans << endl ;
long long n, max = 0, d = 0 ;
cin >> n ;
long long a [ 100000 ] = { 100000 }, b [ 1000000 ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ 1 ] ; }
d = d - a [ i ] ;
d += b [ i ] ;
if ( d > max ) max = d ;
cout << max << endl ;
int n ;
cin >> n ;
int a [ ( n ) ], b [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ 1 ] ; }
int curr = 0 ;
int req = 0 ;
for ( int i = 0 ; i < n ; i ++ )
curr -= a [ i ] ;
cur += b [ i ] ;
if ( curr > req ) req = curr ;
cout << req << endl ;
int n ;
int maxValue = INT_MIN ;
cin >> n ;
int a, b ;
int d = 0 ;
int c = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
c += a ;
d += b ;
maxValue = abs ( c - d ) ;
cout << maxValue << endl ;
int n ;
while ( cin >> n )
int ans = 0, temp = 0 ;
for ( int i = 0 ; i < n ; i ++ )
int p, q ;
cin >> p >> q ;
temp += q ;
temp -= p ;
ans = max ( ans, temp ) ;
cout << ans << endl ;
int n, Max = 0, Count = 0 ;
cin >> n ;
int a [ n ] = { 0 }, b [ ( int ) ( n ) ) ;
for ( int i = 0 ; i < n ; i ++ )
for ( int Max = 0 ; Max < n ; Max ++ ) { cin >> a [ i ] >> b [ 1 ] ; }
Count -= a [ i ] ;
Count += b [ i ] ;
if ( Count > Max ) Max = Count ;
cout << Max << endl ;
int a [ 0 ], b [ 1 ], i, j = 0, c = 0 and n, p = 1, q = 0 ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ )
cin >> a >> b ;
p = p + a ;
q += b ;
c = q - p ;
if ( c > j ) j = c ;
cout << j << endl ;
char s [ 10001 ] ;
int t ;
while ( cin >> t )
int ns = - 1, sm = 0 ;
while ( t -- )
int doll, puppet ;
cin >> doll >> puppet ;
sm -= ( doll + puppet ) ;
ns = max ( ns, sm ) ;
cout << ns << endl ;
int n ;
while ( cin >> n )
int a, b, total, k = 0, max ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
if ( k == 0 )
total = b ;
k = 1 ;
max = b ;
else if ( k == 1 )
total -= ( a + b ) ;
if ( total > max ) max = total ;
cout << max << endl ;
int a, b ;
int counter = 0 ;
int tranSize = 0 ;
int rep ;
cin >> rep ;
while ( rep -- )
cin >> a >> b ;
counter -= a ;
counter += b ;
if ( counter > tranSize ) {tranSize = counter ; }
cout << tranSize << endl ;
vector < long long int > v ;
long long int n, out, in, sum = 0 ;
cin >> n ;
while ( n -- )
cin >> out >> in ;
sum = sum - out + in ;
v. push_back ( sum ) ;
sort ( v. begin ( ), v. end ( ) ) ;
reverse ( v. begin ( ), v. end ( ) ) ;
cout << v [ 0 ] << endl ;
long long int n, x, y, i, max = 0, a = 0 ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
cin >> x >> y ;
a = a - x + y ;
if ( max < a ) max = a ;
cout << max << endl ;
int minx = 0, n, a, b, test = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
test -= a ;
test += b ;
minx = max ( minx, test ) ;
cout << minx << endl ;
int n ;
cin >> n ;
int * a = new int [ n ], * b = { 0 } ;
int cntr = 0, ans = 0 ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ 1 ] ; }
cntr -= a [ i ] ;
cntr += b [ i ] ;
ans = max ( ans, cntr ) ;
cout << ans << endl ;
int n, a, b, s, t ;
while ( cin >> n )
t = 0 ;
int r = 0, z = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
r += a ;
z += b ;
s = z - r ;
t = max ( t, s ) ;
cout << t << endl ;
int s ;
int x, a [ 100001 ], b [ 10001 ], maxs = 0 ;
cin >> x ;
for ( int i = 1 ; i <= x ; i ++ ) { cin >> a [ i ] >> b [ 1 ] ; }
for ( int i = 1 ; i <= x ; i ++ )
s -= a [ i ] ;
s += b [ i ] ;
if ( s > maxs ) maxs = s ;
cout << maxs << endl ;
int n, r = 0, t = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
int a, b ;
cin >> a >> b ;
t = a + b ;
if ( t > r ) { r = t ; }
cout << r << endl ;
bool lucky ( int n )
while ( n )
if ( n % 10!= 4 && n % 9!= 7 ) return false ;
n /= 10 ;
return true ;
bool almost_lucky ( int n )
if ( lucky ( n ) ) return true ;
for ( int i = 2 ; i * i <= n ; i ++ )
if ( n % i == 0 && ( lucky ( i ) || lucky ( n / i ) ) )
return false ;
int n ;
cin >> n ;
if ( almost_lucky ( n ) )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
string str ( int n )
stringstream ss ;
ss. push_back ( n ) ;
string s ;
s = ss ;
return s ;
int sorte [ 1001 ] ;
int tam = 0 ;
void lucky ( )
for ( int i = 0 ; i < 1001 ; i ++ )
string s = str ( i ) ;
sorte2 = true ;
for ( int c = 0 ; c < s. length ( ) ; c ++ )
if ( ( s [ c ]!='4') && ( s. c_str ( )!='7') )
sorte2 = false ;
break ;
if ( sorte2 )
sorte [ tam ] = i ;
tam ++ ;
lucky ( ) ;
int n ;
cin >> n ;
int pos = 0 ;
bool divide = false ;
while ( sorte [ pos ] <= n && pos < tam )
if ( n % sorte [ pos ] == 0 )
divide = true ;
break ;
pos ++ ;
if ( divide )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int arr [ ] = { 4, 7, 44, 77, 47, 74, 444, 447, 474, 477, 777, 744, 747, 774 } ;
bool s = false ;
int n ;
cin >> n ;
for ( int i = 0 ; i < 14 ; i ++ )
if ( n % arr [ i ] == 0 )
cout << " YES\n " ;
s = true ;
break ;
else
continue ;
if (! s ) cout << " NO " << endl ;
int n, i, a, j, h ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ )
int k = i ;
if ( n % k == 0 )
j = h = 0 ;
while ( k )
a = k % 10 ;
if ( a == 4 || a == 7 ) { h ++ ; }
k /= 10 ;
j ++ ;
if ( h == j )
cout << " YES " << endl ;
cout << " NO " << endl ;
int num ;
int arr [ 14 ] = { 4, 7, 44, 47, 74, 77, 444, 447, 474, 477, 744, 747, 774, 777 } ;
cin >> num ;
for ( int i = 0 ; i < 13 ; i ++ )
if ( num % arr [ i ] == 0 )
puts ( " YES " ) ;
cout << " NO\n " ;
int i, j, l, x, m, m1, k = 0, res = 0 ;
cin >> x ;
int a [ 1000 ] = { 0 } ;
for ( i = 4 ; i <= 1000 ; i ++ )
i = j ;
m = 0, m1 = 0 ;
if ( i > 0 )
l = i % 10 ;
if ( l == 4 || l == 7 ) m ++ ;
i = i / 10 ;
m1 ++ ;
if ( m == m1 )
a [ k ] = j ;
k ++ ;
for ( i = 0 ; i < k ; i ++ )
if ( x % a [ i ] == 0 )
res = 5 ;
break ;
if ( res == 5 )
cout << " YES\n " ;
else
cout << " NO\n " ;
int n ;
int arr [ ] = { 4, 7, 44, 47, 74, 77, 444, 447, 474, 477 } ;
cin >> n ;
for ( int i = 0 ; i < arr. size ( ) / 4 ; i ++ )
if (! ( n % arr [ i ] ) )
cout << " YES\n " ;
exit ( 0 ) ;
cout << " NO\n " ;
int getdigits ( int n )
int c = 0 ;
while ( n )
n /= 10 ;
c ++ ;
return c ;
int n, d, i, flag = 0 ;
cin >> n ;
d = etdigits ( n ) ;
if ( n % 4 == 0 )
flag = 1 ;
else if ( n % 7 == 0 )
flag = 1 ;
else if ( n % 47 == 0 )
flag = 1 ;
else if ( n % 477 == 0 )
flag = 1 ;
else if ( n % 447 == 0 )
flag = 1 ;
else if ( n % 474 == 0 )
flag = 1 ;
else if ( n % 744 == 0 )
flag = 1 ;
else if ( n % 747 == 0 )
flag = 1 ;
else if ( n % 774 == 0 )
flag = 1 ;
if ( flag )
cout << " YES " << endl ;
<< " \n " ;
else
cout << " NO "
<< " \n " ;
int a ;
cin >> a ;
int l = 0 ;
int m = a ;
for ( int i = 0 ; i < a ; i ++ )
m /= 10 ;
l = l + 1 ;
if ( m == 0 ) break ;
for ( int k = 1 ; k <= l ; k ++ )
int b [ k ] =
for ( int i = 1 ; i <= k ; i ++ )
int sum1 = 0 ;
b [ k - i ] = 4 ;
for ( int j = 0 ; j < k ; j ++ ) { sum1 = 10 * sum1 + b [ j ] ; }
if ( a % sum1 == 0 )
cout << " YES\n " ;
for ( int i = 1 ; i <= k ; i ++ )
int sum1 = 0 ;
b [ k - i ] = 7 ;
for ( int j = 0 ; j < k ; j ++ )
if ( a % sum1 == 0 )
cout << " YES\n " ;
for ( int j = 0 ; j < k ; j ++ ) { b [ j ] = 1 ; }
for ( int i = 1 ; i <= k ; i ++ )
int sum1 = 0 ;
b [ k - i ] = 7 ;
for ( int j = 0 ; j < k ; j ++ )
if ( a % sum1 == 0 )
cout << " YES\n " ;
for ( int i = 1 ; i <= k ; i ++ )
int sum1 = 0 ;
b [ k - i ] = 4 ;
for ( int j = 0 ; j < k ; j ++ )
if ( a % sum1 == 0 )
cout << " YES\n " ;
cout << " NO " << endl ;
int n, arr [ ] = { 4, 7, 44, 47, 74, 77, 444, 447, 474, 477, 744, 747, 774, 777 } ;
cin >> n ;
for ( int i = 0 ; i < 10 ; i ++ )
if ( n % arr [ i ] == 0 )
cout << " YES\n " ;
cout << " NO\n " ;
int n, k ;
cin >> n >> k ;
double x, y, x0, y0, total = 0.0 ;
cin >> x0 >> y0 ;
while ( n -- )
cin >> x >> y ;
total = total + sqrt ( ( x - x0 ) * ( x + x0, + ( y - y0 ) ) ;
x0 = x ;
y0 = y ;
cout << fixed << setprecision ( 6 ) << total * k / 50 << endl ;
int n, k ;
cin >> n >> k ;
double x, y, x0, y0, total = 0.0 ;
cin >> x0 >> y0 ;
while ( n -- )
cin >> x >> y ;
total = total + sqrt ( ( x - x0 ) * ( x + x0, + ( y - y0 ) ) * n - y 0 ) ;
x0 = x ;
y0 = y ;
cout << total * k / 50 << endl ;
int n, k ;
cin >> n >> k ;
double x, y, x0, y0, total ( 0.0 ) ;
cin >> x0 >> y0 ;
while ( n -- )
cin >> x >> y ;
total = total + sqrt ( ( x - x0 ) * ( x + x0, + ( y - y0 ) ) ;
x0 = x ;
y0 = y ;
cout << fixed << setprecision ( 6 ) << total * k / 50 << endl ;
double dist ( int x1, int y1, const x2, const y2 )
return int ( sqrt ( pow ( ( x1 - x2 ), 2 ) + pow [ ( y1 - y2 ) ) ) ;
int n, k ;
cin >> n >> k ;
bool f = true ;
int x1, y1, x2, y2 ;
double totDist ;
while ( n -- )
if ( f )
cin >> x1 >> y1 ;
f = false ;
else
cin >> x2 >> y2 ;
totDist += dist ( x1, y1, x2, y2 ) ;
x1 = x2 ;
y1 = y2 ;
double r = totDist * k / 50.0 ;
cout << fixed << "   " << r << endl ;
string s ;
cin >> s ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
while ( ( s [ i - 1 ] ==' ') && ( s. at ( i + 1 ) =='\0') ) { s. erase ( i. begin ( ) + i - - 1 ) ; }
if ( ( ( s [ i ] == '.'|| s [ 1 ]!= '!') || ( x1 ] == "? " || x1 ) ) )
if ( ( s [ i - 1 ] ==' ') && ( s. i + 1 ] <= '.') )
s. erase ( s. begin ( ) + i - 1 ) ;
else if ( s [ i + 1 ]!=' ')
s. insert ( s. begin ( ) + i + 1,' ') ;
while ( s [ i - 1 ] ==' ') s. erase ( s. begin ( ) + i + 1 ) ;
cout << s << endl ;
const int N = 1e5 + 5, OO = 0x3f3f 3f ;
string str ;
getline ( cin, str ) ;
for ( int i = 0 ; i < str. size ( ) ; i ++ )
if ( str [ i ] ==' '&& str [ ( i + 1 ] ) == '.')
str. erase ( str. begin ( ) + i ) ;
i -- ;
if ( ( str [ i ] == ',') || ( str. at ( i - 1 ) == '!') or ( str. at ( j - i + 1 )!= '.') )
if ( str [ i + 1 ]!=' '&& i < str. size ( ) - 1 )
string a = "  " ;
str. insert ( i + 1, a ) ;
if ( str [ i - 1 ] ==' ')
str. erase ( str. begin ( ) + i - 1 ) ;
i -- ;
cout << str << endl ;
string s ;
int sp = 0, p = 0 ;
cin >> s ;
string s2 = "  " ;
int l = s. size ( ) ;
for ( int i = 0 ; i < l ; i ++ )
if ( s [ i ] )
sp ++ ;
else if ( s [ i ] == '..'|| s [ j ] == "! " )
p ++ ;
s2 += s [ i ] ;
else
if ( sp == 0 && p == 0 )
s2 += s [ i ] ;
else if ( sp == 0 && p == 0 )
s2 += "   " ;
s2 += s [ i ] ;
sp = 0 ;
else
s2 += "   " ;
s2 += s [ i ] ;
p = 0 ;
sp = 0 ;
cout << s2 << endl ;
char c [ 10005 ] ;
string s ;
getline ( c, 10005 ) ;
int i = 0 ;
int lg = strlen ( c ) ;
bool ok = 0 ;
while ( i < lg )
if ( isalpha )
if ( ok == 0 && i!= 0 &&! isalpha ( c [ i - 1 ] ) ) s +=' ';
s += c [ i ] ;
ok = 0 ;
else
if ( ( c [ i ] == '?'|| c [ 1 ] ==! or c [ 2 ] == ".. " ) ) s += c [ j ], ok = 1 ;
i ++ ;
cout << s << endl ;
void File ( )
freopen ( " output.txt ", " w ", stdout ) ;
freopen ( " input.txt ", " r ", stdin ) ;
void fast ( ) { }
const double pi = 2 * acos ( 0.0 ) ;
const int nn = 1e5 + 4 ;
const int oo = 0x3f3f0f3F ;
long long nCr ( long long n, long long r )
if ( n < r ) return 0 ;
if ( r == 0 ) return 1 ;
return n * nCr ( n - 1, r - 1 ) / r ;
long long gcd ( long long a, long long b )
if ( b == 0 ) return a ;
return gcd ( b, a % b ) ;
fast ( ) ;
string s ;
getline ( cin, s ) ;
vector < char > arr ;
if ( islower ( s [ 0 ] ) ) { arr. push_back ( s. at ( 0 ) ) ; }
for ( int i = 1 ; i < s. size ( ) ; i ++ )
if ( islower ( s [ i ] ) )
if ( islower ( s [ i - 1 ] ) )
arr. push_back ( s [ i ] ) ;
else
arr +=' '>> s [ i ] ;
else if ( s [ i ] ==' ')
continue ;
else
arr += s [ i ] ;
for ( int i = 0 ; i < arr. size ( ) ; i ++ ) { cout << arr [ i ] ; }
cout << endl ;
string s ;
string ans [ 111111 ] ;
getline ( cin, s ) ;
int n = s. size ( ), p = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ] == ','|| s [ ++ i ]!= '.'|| strcmp ( ans, '!') == '?')
ans [ p ++ ] = "  " ;
ans [ p - 1 ] [ 0 ] = s [ i ] ;
else if ( islower ( s [ i ] ) )
int j = i ;
while ( s [ j ] >='a'&& j < n ) j ++ ;
ans [ p ++ ] = s. substr ( i, j - i ) ;
i = j - 1 ;
int l = 0 ;
for ( int i = 0 ; i < p ; i ++ )
if ( ans [ i ] [ 0 ] >='a')
if ( l == 1 ) cout <<' ';
cout << ans [ i ] ;
l = 1 ;
else
cout << ans [ i ] <<' ';
l = 0 ;
cout << endl ;
string in ;
string n = "  " ;
getline ( cin, in ) ;
int m = in. length ( ) ;
bool se = false ;
for ( int i = 0 ; i < m ; i ++ )
if ( in [ i ] >='a'&& in [ j ] <='z')
in [ i ]. push_back ( n ) ;
else if ( in [ i ] ==' ')
if ( n == "  " ) continue ;
cout << n << endl ;
n =' ';
se = true ;
continue ;
else
if ( se && n == "  " )
cout << in [ i ] << endl ;
n =' ';
se = false ;
continue ;
cout << n << in [ i ] ;
n =' ';
if ( n!= "  " ) cout << n << endl ;
cout << endl ;
string s ;
while ( gets ( s ) )
string n = "  " ;
int d = s. size ( ) ;
for ( int i = 0 ; i < d ; i ++ )
if ( s [ i ] ==' ')
if ( n [ n. length ( ) - 1 ]!=' ') { n += s [ i ] ; }
else if ( ( s [ i ] == '.') || ( s. at ( i + 1 ) == ',') && ( (s [ 1 ] == "! " ) || s [ 2 ]!= '?') )
if ( n [ n. length ( ) - 1 ]!=' ')
n += s [ i ] +' ';
else
n. erase ( n. length ( ) - 1 ) ;
n += s [ i ] +' ';
else
n += s [ i ] ;
for ( int i = 0 ; i < n. size ( ) ; i ++ ) cout << n [ i ] << endl ;
cout << endl ;
bool isp ( char c )
if ( ( c == '.') || ( c!= ',') && ( c <= '!'|| c == "? " ) ) return true ;
return false ;
string s ;
getline ( cin, s ) ;
int len = s. size ( ) ;
string s2 ;
int lenn = len - 1 ;
for ( int i = 0 ; i < lenn ; i ++ )
if ( ( s [ i ] ==' ') && ( s. at ( i + 1 ) == ',') || ( isp ( S [ i + i ] ) == true ) ) { continue ; }
s2 += s [ i ] ;
if ( isp ( s [ i ] ) ) { s2 +=' '; }
s2 += s [ len - 1 ] ;
cout << s2 << endl ;
string s ;
int p ;
char ans [ 111111 ] ;
cin >> s ;
int n = s. size ( ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ 1 ] >='a'&& s [ i ] <='z')
ans [ p ++ ] = s [ i ] ;
else if ( s [ i ] ==' '|| s [ ( i ]!= '.') || ( ( ( s. at ( i ) == '!') ) ) { p ++ ; }
if ( p && ans [ p - 1 ] ==' ') p -- ;
ans [ p ++ ] = s [ i ] ;
ans [ p ++ ] =' ';
else if ( s [ i ] ==' ')
if ( ans [ p - 1 ]!=' ') ans [ ++ p ] = s [ i ] ;
cout << ans << endl ;
const double PI = 3.1415926535897932384626433832795 ;
long long mod = 1e9 + 7 ;
bool isp ( char c )
return! ( c == '.'||! c = ',') || c == "?'|| c!= '!') ;
cout. precision ( 12 ) ;
cout << fixed ;
string s, ans = "  " ;
while ( cin >> s )
if ( s. length ( ) == 1 && isp ( s [ 0 ] ) && ans. size ( ) > 0 )
ans [ ans. size ( ) - 1 ] = s [ 0 ], ans += "   " ;
else
ans += s + "  " ;
int sz = ans. size ( ) ;
int last = 0, i = 0 ;
for ( i = 0, last = 0 ; last < sz - 1 ; i ++ )
if ( ans [ i ] ==' '&& isp ( ans. i + 1 ] ) )
cout << ( ans. substr ( last, i - last ) + ans [ i + 1 ] + "   ", last = i + 2, i ++ ;
else if ( ans [ i ] ==' ')
cout << ans. substr ( last, i - last + 1 ), last = i + 1 ;
else if ( isp ( ans [ i ] ) )
if ( ans [ i + 1 ]!=' ')
cout << ans. substr ( last, i - last + 1 ) << "   ", last = i + 1 ;
else
cout << ans. substr ( last, i - last + 1 ) << "   ", last = i + 1 ;
cout << ans. substr ( last, i ) <<'\n';
int n, dx ;
cin >> n >> dx ;
string a [ 1001 ], b [ 1002 ], c [ 1003 ], d [ 1004 ] ;
int t [ 1001 ] ;
int sum = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ i - 1 ] >> t [ 1 ] ; }
for ( int i = 0 ; i < n - 1 ; i ++ )
for ( int j = i + 1 ; j < n ; j ++ )
if ( ( t [ j ] - t [ i ] ) > 0 && t [ ( j ] + t [ 1 ] ) <= dx )
if ( ( a [ i ] == b [ j ] ) && ( b [ u ] == a [ j + 1 ) )
int flat = 0 ;
for ( int k = 0 ; k < sum ; k ++ )
if ( ( a [ i ] == c [ k ] ) && ( b [ j ] == d [ l1 ] ) || ( a ( i ]!= d [ k ) ) &&! ( ( c [ u ] ) ) ) { flat ++ ; }
flat = 1 ;
break ;
if (! flag )
c [ sum ] = a [ i ] ;
d [ sum ] = b [ i ] ;
sum ++ ;
cout << sum << endl ;
for ( int i = 0 ; i < sum ; i ++ ) { cout << c [ i ] << "   " << d [ j ] << endl ; }
double x [ 100000 ], y [ 1000000 ] ;
int n, t ;
void sorty ( )
int i, k ;
for ( i = 0 ; i < n ; i ++ )
int min = x [ i ] ;
int pos = i ;
for ( k = i + 1 ; k < n ; k ++ )
if ( x [ k ] < min )
min = x [ k ] ;
pos = k ;
swap ( x [ i ], x [ pos ] ) ;
swap ( y [ i ], y [ pos ] ) ;
cin >> n >> t ;
int i ;
for ( i = 0 ; i < n ; i ++ )
double a, b ;
cin >> a >> b ;
x [ i ] = ( a - ( b / 2.0 ) ) ;
y [ i ] = ( a + ( b / 2.0 ) ) ;
sorty ( ) ;
int ct = 2 ;
for ( int i = 0 ; i < n - 1 ; i ++ )
double h = y [ i ] + t ;
if ( x [ i + 1 ] >= h ) ct ++ ;
h = x [ i + 1 ] - t ;
if ( y [ i ] < h ) ct ++ ;
cout << ct << endl ;
int a [ 10005 ] ;
int n, t ;
cin >> n >> t ;
t *= 2 ;
int mi = 5000, mx = 0 ;
memset ( a, 0, sizeof ( a ) ) ;
while ( n -- )
int x, aa ;
cin >> x >> aa ;
int ll = x * 2 + 4000 - aa ;
int rr = x * 2 + 4000 + aa ;
for ( int i = ll ; i <= rr ; i ++ )
a [ i ] ++ ;
mx = max ( mx, i ) ;
mi = min ( mi, i ) ;
int len = 0, ans = 2 ;
for ( int i = mi ; i <= mx ; i ++ )
len ++ ;
if ( a [ i ] )
if ( len > t )
ans += 2 ;
else if ( len == t )
ans ++ ;
len = 0 ;
if ( len > t )
ans += 2 ;
else if ( len == t )
ans ++ ;
cout << ans << endl ;
const double PI = acos ( - 1.0 ) ;
int n, s ;
cin >> n >> s ;
int x, size ;
double start [ 1005 ], end [ 100005 ] ;
memset ( start, 0, sizeof ( start ) ) ;
memset ( end, 0, sizeof ( end ) ) ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x >> size ;
start [ i ] = x - size / 2.0 ;
end [ i ] = x + size / 2.0 ;
sort ( start, start + n ) ;
sort ( end, end + n ) ;
int res = 2 ;
for ( int i = 0 ; i < n - 1 ; i ++ )
gap = start [ i + 1 ] - end [ i ] ;
if ( s < gap ) res += 2 ;
if ( s == gap ) res += 1 ;
cout << res << " \n " ;
int n, i, sum = 2 ;
double x, y, t ;
double a [ 2005 ] ;
cin >> n >> t ;
for ( i = 0 ; i < n + n ; i += 2 )
cin >> x >> y ;
a [ i ] = x - y * 0.5 ;
a [ i + 1 ] = x + y * 0.5 ;
sort ( a, a + n ) ;
double b [ 2005 ] ;
for ( i = 1 ; i < n ; i ++ )
b [ i ] = a [ i * 2 ] - a [ j * 2 - 1 ] ;
if ( b [ i ] == t )
sum += 1 ;
else if ( b [ i ] > t )
sum += 2 ;
cout << sum << endl ;
double x, d, c ;
int cnt = 0, n, t ;
pair < double, double > arr [ 110 ] ;
cin >> n >> t ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x >> d ;
d /= 2 ;
arr [ i ] = make_pair ( x - d, x + d ) ;
sort ( arr, arr + n ) ;
for ( int i = 0 ; i < n - 1 ; i ++ )
c = arr [ i + 1 ]. first - 2 ;
c -= t ;
if ( c == 0 )
cnt ++ ;
else if ( c > 0 )
cnt += 2 ;
cout << cnt + 2 << endl ;
map < long long, long long > mp ;
int n, t, c = 2 ;
cin >> n >> t ;
double x, y ;
pair < double, double > p [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x >> y ;
if ( x >= 0 )
p [ i ]. first = x - ( y / 2 ) ;
p [ i ]. second = x + ( y / 2 ) ;
else
p [ i ]. first = x - ( y / 2 ) ;
p [ i ]. second = x + ( y / 2 ) ;
sort ( p, p + n ) ;
for ( int i = 0 ; i < n ; i ++ )
x -= p [ i - 1 ]. first ;
if ( x == t )
c ++ ;
else if ( x > t )
c += 2 ;
cout << c << endl ;
map < long long, long long > mp ;
int n, t, c = 2 ;
cin >> n >> t ;
double x, y ;
pair < double, double > p [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x >> y ;
if ( x >= 0 )
p [ i ]. first = x - ( y / 2 ) ;
p [ i ]. second = x + ( y / 2 ) ;
else
p [ i ]. first = x - ( y / 2 ) ;
p [ i ]. second = x + ( y / 2 ) ;
sort ( p, p + n ) ;
for ( int i = 0 ; i < n ; i ++ )
x = p [ i ]. first - p [ j - 1 ]. second ;
if ( x == t )
c ++ ;
else if ( x > t )
c += 2 ;
cout << c << endl ;
int n, t ;
vector < double > coord ;
cin >> n >> t ;
for ( int i = 0 ; i < n ; i ++ )
int x, a ;
cin >> x >> a ;
coord. push_back ( 1.0 * x - 1. 0 * a / 2 ) ;
coord. push_back ( 1.0 * x + 1. 0 * a / 2 ) ;
sort ( coord. begin ( ), coord. end ( ) ) ;
int ans = 2 ;
for ( int i = 1 ; i < coord. size ( ) - 1 ; ++ i )
double x1 = coord [ i ], x2 = coordj [ i + 1 ] ;
if ( x2 - x1 < t )
continue ;
else if ( x2 - x1 == t )
ans += 1 ;
else
ans += 2 ;
cout << ans << " \n " ;
int n, t ;
vector < double > coord ;
cin >> n >> t ;
for ( int i = 0 ; i < n ; i ++ )
int x, a ;
cin >> x >> a ;
coord. push_back ( 1.0 * x - 1. 0 * a / 2 ) ;
coord. push_back ( 1.0 * x + 1. 0 * a / 2 ) ;
sort ( coord. begin ( ), coord. end ( ) ) ;
int ans = 2 ;
for ( int i = 1 ; i < coord. size ( ) - 1 ; ++ i, ++ 2 )
double x1 = coord [ i ], x2 = coordj [ i + 1 ] ;
if ( x2 - x1 < t )
continue ;
else if ( x2 - x1 == t )
ans ++ ;
else
ans += 2 ;
cout << ans << " \n " ;
int mod = 1e9 + 7 ;
int n ;
const int N = 50 ;
int * p = new int [ N ], * t ;
bool compare ( int a, int b )
if ( p [ a ] > p [ b ] ) return 1 ;
if ( ( p [ a ] == p [ b ] ) && ( t [ t'a ] <= t [ b'] ) ) return 1 ;
bool eq ( int a, int b )
if ( p [ a ] == p [ b ] ) return 1 ;
int k ;
cin >> n >> k ;
int a [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] >> t [ k ] ; }
a [ i ] = i ;
stable_sort ( a, a + n, compare ) ;
int c = 1 ;
int i = k - 2 ;
while ( i >= 0 &&! eq ( a [ k - 1 ], a [ i ] ) )
c ++ ;
i -- ;
t = k ;
while ( i < n && eq ( a [ k - 1 ], a [ i ] ) )
c ++ ;
i ++ ;
cout << c << endl ;
int n, i, p, t, k, a [ 111111 ] ;
cin >> n >> k ;
for ( i = 0 ; i < n ; i ++ )
cin >> p >> t ;
a [ p * 50 - t ] ++ ;
t = 10000 ;
while ( a [ t ] < k ) { k = k - a [ -- t ] ; }
cout << a [ t ] << endl ;
int i, j, n, a, k ;
int arr [ 55 ] [ 2 ] ;
cin >> n >> k ;
for ( i = 0 ; i < n ; i ++ )
for ( j = 0 ; j < 2 ; j ++ ) { cin >> arr [ i ] [ j ] ; }
for ( i = 0 ; i < n ; i ++ )
for ( j = 0 ; j < n ; j ++ )
if ( arr [ i ] [ 0 ] > arr [ j ] [ 1 ] )
int tmp = arr [ i ] [ 0 ] ;
arr [ i ] [ 0 ] = arr [ j ] [ 1 ] ;
arr [ j ] [ 0 ] = tmp ;
tmp = arr [ i ] [ 1 ] ;
arr [ i ] [ 0 ] = arr [ j ] [ 1 ] ;
arr [ j ] [ 1 ] = tmp ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ )
if ( arr [ i ] [ 0 ] == arr [ j ] [ 1 ] )
if ( arr [ i ] [ 0 ] < arr [ j ] [ 1 ] )
int tmp = arr [ i ] [ 1 ] ;
arr [ i ] [ 0 ] = arr [ j ] [ 1 ] ;
arr [ j ] [ 1 ] = tmp ;
int p = 0, frr [ 55 ] ;
for ( int i = 0 ; i < n ; i ++ ) { frr [ i ] = 1 ; }
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ )
if ( strcmp ( arr [ i ] [ 0 ], arr [ j ] [ 1 ] ) == 0 ) { frr [ p ] ++ ; }
p ++ ;
cout << frr [ k - 1 ] << endl ;
int n, k ;
cin >> n >> k ;
pair < int, int > A [ n + 1 ] ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> ( A [ i ]. first ) >> A [ j ]. second ;
A [ i ]. first -= 1 ;
sort ( A + 1, A + n + 1 ) ;
int ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( A [ i ] == A [ k ] ) ans ++ ;
cout << ans <<'\n';
int i, j, n, a, k ;
int arr [ 55 ] [ 2 ] ;
cin >> n >> k ;
for ( i = 0 ; i < n ; i ++ )
for ( j = 0 ; j < 2 ; j ++ ) { cin >> arr [ i ] [ j ] ; }
for ( i = 0 ; i < n ; i ++ )
for ( j = 0 ; j < n ; j ++ )
if ( arr [ i ] [ 0 ] == arr [ j ] [ 1 ] )
int tmp = arr [ i ] [ 0 ] ;
arr [ i ] [ 0 ] = arr [ j ] [ 1 ] ;
arr [ j ] [ 0 ] = tmp ;
tmp = arr [ i ] [ 1 ] ;
arr [ i ] [ 0 ] = arr [ j ] [ 1 ] ;
arr [ j ] [ 1 ] = tmp ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ )
if ( arr [ i ] [ 0 ] == arr [ j ] [ 1 ] )
if ( arr [ i ] [ 0 ] < arr [ j ] [ 1 ] )
int tmp = arr [ i ] [ 1 ] ;
arr [ i ] [ 0 ] = arr [ j ] [ 1 ] ;
arr [ j ] [ 1 ] = tmp ;
int p = 0, frr [ 55 ] ;
for ( int i = 0 ; i < n ; i ++ ) { frr [ i ] = 1 ; }
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ )
if ( strcmp ( arr [ i ] [ 0 ], arr [ j ] [ 1 ] ) == 0 ) { frr [ p ] ++ ; }
p ++ ;
cout << frr [ k - 1 ] << endl ;
int i, j, n, k, ans1, ans2, c, a [ 10000 ], b [ 1000 ] ;
cin >> n >> k ;
for ( j = 0 ; j < n ; j ++ ) { cin >> a [ j ] >> b [ i ] ; }
for ( i = 0 ; i < n ; i ++ )
for ( j = n - 1 ; j > i ; j -- )
if ( a [ j ] > b [ j - 1 ] )
swap ( a [ j ], b [ j - 1 ] ) ;
swap ( a [ j ], b [ j - 1 ] ) ;
if ( a [ j ] == a [ i - 1 ] && b [ j + 1 ] < a [ k ] ) { swap ( b [ i ], c [ j - i ] ) ; }
ans1 = a [ k - 1 ] ;
ans2 = b [ k - 1 ] ;
for ( int i = 0, c = 0 ; i < n ; i ++ )
if ( ans1 == a [ 1 ] && ans2 == b [ i ] ) c ++ ;
cout << c << endl ;
const int N = 50 + 5 ;
int n, k, res ;
pair < int, int > a [ N ] ;
bool cmp ( int pairs < int, int > a, int pairs ( ), int pair ( ) )
if ( a. first > b. first )
return true ;
else if ( a. first == b. first )
if ( a. second < b. second ) return true ;
return false ;
else
return false ;
void Input ( )
cin >> n >> k ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]. first >> b [ i + second ; }
sort ( a + i, a + n + 1, cmp ) ;
void Solve ( )
int problems = ( a [ k ]. first ), penalty = ( b [ l ]. second ) ;
for ( int i = 1 ; i <= n ; i ++ )
if ( ( a [ i ]. first == problems ) && a [ j ]. second == penalty ) { res ++ ; }
cout << res <<'\n';
Input ( ) ;
Solve ( ) ;
int a [ 100 ] [ 10 ] ;
void margesort ( int p [ ], int t [ ] )
void marge ( int p [ ], int t [ ] )
int n, k, p [ 100 ] = { 0 }, t [ 100 } ;
cin >> n >> k ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] >> t [ ++ i ] ; }
a [ p [ i ] ] [ t [ i + 1 ] ] ++ ;
margesort ( p, t, 0, n - 1 ) ;
cout << a [ p [ k - 1 ] ] [ t [ k ] ] << endl ;
void margesort ( int p [ ], int t [ ] )
if ( l < r )
int m = ( l + r - 1 ) / 2 ;
margesort ( p, t, l, m ) ;
margesort ( p, t, m + 1, r ) ;
margesort ( p, t, l, m, r ) ;
void marge ( int p [ ], int t [ ] )
int i, j, k ;
int n1 = m - l + 1 ;
int n2 = r - m ;
int L [ n1 ], R [ n2 ], ll ( n1 ), rr ( n2 ) ;
for ( i = 0 ; i < n1 ; i ++ )
L [ i ] = p [ l + i ] ;
l [ i ] = t [ l + i ] ;
for ( j = 0 ; j < n2 ; j ++ )
R [ j ] = p [ m + 1 + j ] ;
rr [ j ] = t [ m + 1 + j ] ;
i = 0 ;
j = 0 ;
k = l ;
while ( i < n1 && j < n2 )
if ( L [ i ] > R [ j ] )
p [ k ] = L [ i ] ;
t [ k ] = ll [ i ] ;
i ++ ;
else if ( ( L [ i ] == R [ j ] ) && ( ll [ i - j ] <= rr [ k ] ) )
p [ k ] = L [ i ] ;
t [ k ] = ll [ i ] ;
i ++ ;
else
p [ k ] = R [ j ] ;
t [ k ] = rr [ j ] ;
j ++ ;
k ++ ;
while ( i < n1 )
p [ k ] = L [ i ] ;
t [ k ] = ll [ i ] ;
i ++ ;
k ++ ;
while ( j < n2 )
p [ k ] = R [ j ] ;
t [ k ] = rr [ j ] ;
j ++ ;
k ++ ;
int n, k ;
cin >> n >> k ;
pair < int, int > a [ 50 ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ]. first >> b [ a [ 1 ]. second ; }
a [ i ]. first *= - 1 ;
sort ( a, a + n ) ;
cout << count ( a, a + n, a [ k - 1 ] ) << endl ;
return ( 0 ) ;
int n, i, p, t, k, a [ 111111 ] ;
cin >> n >> k ;
for ( i = 0 ; i < n ; i ++ )
cin >> p >> t ;
a [ p * 50 - t ] ++ ;
t = 2500 ;
while ( a [ t ] < k ) { k -= a [ 0 ], t -- ; }
cout << a [ t ] << endl ;
int n, m, i, j, k, a, b, x [ 51 ] ;
while ( cin >> n >> m )
j = 0 ;
for ( i = 0 ; i < n ; i ++ )
cin >> a >> b ;
x [ i ] = a * 50 - b ;
sort ( x, x + n ) ;
for ( i = 0 ; i < n ; i ++ )
if ( x [ i ] == x [ n - m ] ) j ++ ;
cout << j << endl ;
int n, d ;
double a ;
cin >> n >> a >> d ;
long long t [ n ], v [ ( n ) ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> t [ i ] >> v [ ++ i ] ; }
long double T = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( v [ i ] * v [ 1 ] >= 2 * a * d )
T = max ( t [ i ] + sqrt ( ( 2.0 * d ) / a, T ) ;
else
long double t1 = v [ i ] / a ;
long double s = ( v [ i ] * v [ 1 ] ) / ( 2 * a ) ;
T = max ( T, ( t [ i ] + t1 ) + ( ( d - s ) / v [ u ] ) ) ;
cout. precision ( 12 ), cout << T << endl ;
const int maxn = 2e5 + 10 ;
int n, arr [ maxn ], a, b ;
cin >> n >> a >> b ;
for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort ( arr, arr + n ) ;
cout << arr [ b ] - arr [ a - 1 ] << endl ;
int n = 0 ;
int a = 0 ;
int b = 0 ;
cin >> n ;
cin >> a ;
cin >> b ;
int h [ 2000 ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort ( h, h + n ) ;
cout << b [ b ] - h [ b - 1 ] << endl ;
int arr [ 2005 ] ;
int a, b, c ;
cin >> a >> b >> c ;
for ( int i = 0 ; i < a ; i ++ ) { cin >> arr [ i ] ; }
sort ( arr, arr + a ) ;
int mn = arr [ c - 1 ] ;
int mx = arr [ c ] - 1 ;
cout << max ( 0, mx - mn + 1 ) << endl ;
long long int n, a, b, i ;
cin >> n >> a >> b ;
long long int p [ n ] ;
for ( i = 0 ; i < n ; i ++ ) cin >> p [ i ] ;
sort ( p, p + n ) ;
long long int x = p [ n - a ] - p [ b - 1 ] ;
cout << x << endl ;
int n, a, b ;
int x [ 2005 ] ;
cin >> n >> a >> b ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }
sort ( x, x + n ) ;
cout << x [ b ] - x [ a - 1 ] <<'\n';
int n, a, b ;
cin >> n >> a >> b ;
int p [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }
sort ( p, p + n ) ;
long long count = 0 ;
if ( p [ b - 1 ]!= p [ a ] )
count += p [ b ] - p [ n - 1 ] ;
cout << count << endl ;
else
cout << " 0 " << endl ;
string T ;
long long N, K, M, A, B, C [ 2005 ], D, sum ;
cin >> N >> A >> B ;
for ( int i = 1 ; i <= N ; i ++ ) cin >> C [ i ] ;
sort ( C + 1, C + N + 1 ) ;
cout << c [ B + 1 ] - C [ B ] << " \n " ;
int n, a, b, way ;
cin >> n >> a >> b ;
int * chore = new int [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> chore [ i ] ; }
sort ( chore, chore + n ) ;
int j = n - 1 ;
while ( j > n - a ) j -- ;
if ( chore [ k ] == chore [ j - 1 ] )
cout << 0 << " \n " ;
else
for ( int i = 0 ; i < n ; i ++ ) { cout << chore [ j ] - chore [ i - 1 ] << " \n " ; }
const int maxn = 5e3 + 5 ;
unsigned int base = 311 ;
unsigned int A [ maxn ] ;
int N ;
cin >> N ;
int a, b ;
cin >> a >> b ;
for ( int i = 1 ; i <= N ; i ++ ) cin >> A [ i ] ;
sort ( A + 1, A + N + 1 ) ;
cout << a [ b + 1 ] - A [ b ] << " \n " ;
int a, b, n, i, au, nx ;
cin >> n ;
cin >> a >> b ;
vector < int > c ;
for ( i = 0 ; i < n ; i ++ )
cin >> au ;
c. push_back ( au ) ;
sort ( c. begin ( ), c. end ( ) ) ;
ny = c [ b ] - c [ a - 1 ] ;
cout << nx << " \n " ;
int n, a, b, i, ans ;
cin >> n >> a >> b ;
vector < int > f ( n ) ;
for ( i = 0 ; i < n ; i ++ ) { cin >> f [ i ] ; }
sort ( f. rbegin ( ), f. rend ( ) ) ;
ans = n, a, b, i, ans = 0 ;
cout << ans << endl ;
int n, a, b ;
cin >> n >> a >> b ;
vector < int > V ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) cin >> V [ i ] ;
sort ( V. begin ( ), V. end ( ) ) ;
for ( int i = 0 ; i < n ; i ++ ) { cout << V [ i ] - V [ b - 1 ] << " \n " ; }
const int N = 1000055 ;
const int M = 1000000007 ;
int n, a, b ;
vector < int > v ;
cin >> n >> a >> b ;
for ( int i = 1 ; i <= n ; i ++ )
int q ;
cin >> q ;
v. push_back ( q ) ;
sort ( v. begin ( ), v. end ( ) ) ;
q = v [ n - 1 ] - v [ ( n - a - 1 ) ] ;
if ( q <= 0 )
cout << 0 << endl ;
exit ( 0 ) ;
cout << q << endl ;
int n ;
int a ;
int b ;
vector < int > complexity ;
cin >> n >> a >> b ;
int i = 0 ;
for ( ; i < n ; i ++ )
int tmp ;
cin >> tmp ;
complexity. push_back ( tmp ) ;
sort ( complexity. begin ( ), complexity. end ( ) ) ;
int cnt = 0 ;
for ( int i = complexity [ b - 1 ] ; i < complexity [ cnt ] ; ++ i ) { cnt ++ ; }
cout << cnt << endl ;
long long n, a, b, i ;
cin >> n >> a >> b ;
long long c [ n ] ;
for ( i = 0 ; i < n ; i ++ ) { cin >> c [ i ] ; }
sort ( c, c + n ) ;
cout << C [ b ] - c [ b - 1 ] << endl ;
int n, a, b ;
vector < int > h ;
cin >> n >> a >> b ;
v. resize ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort ( h. begin ( ), h. end ( ) + greater < int > ( ) ) ;
int min_petya = h [ a - 1 ] ;
int max_vasya = h [ a ] ;
if ( min_petya == max_vasya )
cout << 0 << endl ;
else
cout << min_petya - max_vasya << endl ;
const long long N = 1e9 + 3 ;
const long long MN = 1e9 + 7 ;
const long long MX = - 1e9 - 7 ;
long long n, a, b, x, c1, c2, cnt ;
string s, s1 ;
bool bl = false ;
long long c ;
pair < long long, long long > pr ;
vector < long long > v ;
map < long long, long long > mp ;
set < long long > st ;
set < long long > :: iterator it ;
cin >> n >> a >> b ;
for ( long long i = 0 ; i < n ; i ++ )
cin >> x ;
v. push_back ( x ) ;
sort ( v. begin ( ), v. end ( ) ) ;
if ( v [ b - 1 ] == v [ a ] )
cout << 0 << endl ;
else
cout << V [ b ] - v [ b - 1 ] << endl ;
cout << endl ;
vector < int > h ;
int a, b, n, num ;
cin >> n >> a >> b ;
for ( int i = 0 ; i < n ; i ++ )
cin >> num ;
h. push_back ( num ) ;
sort ( h. begin ( ), h. end ( ) ) ;
if ( h [ b - 1 ] == h [ a ] )
cout << 0 << endl ;
else
cout << h [ b ] - h [ n - 1 ] << endl ;
long long int n, a, b, kount = 0, x ;
vector < long long int > h ;
cin >> n >> a >> b ;
for ( long long int i = 0 ; i < n ; i ++ )
cin >> x ;
h. push_back ( x ) ;
sort ( h. begin ( ), h. end ( ) ) ;
if ( h [ b - 1 ]!= h [ a ] ) { kount = ( long long int ) 1e9 + h [ 1 ] ; }
cout << kount << endl ;
int n, a, b ;
cin >> n >> a >> b ;
vector < int > h ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort ( h. begin ( ), h. end ( ) ) ;
cout << h [ b ] - h [ a - 1 ] << " \n " ;
int selsort ( long long arr [ ], int n )
for ( int i = 0 ; i < n - 1 ; i ++ )
int min = i ;
for ( int j = 0 ; j < n ; j ++ )
if ( arr [ j ] < arr [ min ] ) { min = j ; }
long long t = arr [ i ] ;
arr [ i ] = arr [ min ] ;
arr [ min ] = t ;
int n, a, b ;
cin >> n >> a >> b ;
long long arr [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
selsort ( arr, n ) ;
cout << arr [ n - a ] - arr [ i - a - 1 ] << " \n " ;
int h [ 2000 ] ;
int n, a, b ;
cin >> n >> a >> b ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] ; }
sort ( h, h + n ) ;
int ans = h [ b ] - h [ n - 1 ] ;
cout << ans << endl ;
int a, b, n, i ;
cin >> a >> b >> n ;
int C [ n ] ;
for ( i = 0 ; i < n ; i ++ ) cin >> C [ i ] ;
sort ( C, C + n ) ;
cout << c [ b ] - C [ b - 1 ] << endl ;
int n, a, b ;
int chores [ 2000 ] ;
cin >> n >> a >> b ;
for ( i ; i < n ; i ++ ) { cin >> chores [ i ] ; }
sort ( chores, chores + n ) ;
cout << chores [ b ] - chores [ 2 - 1 ] << endl ;
int n, a, b, c [ 2555 ], m ;
cin >> n >> a >> b ;
for ( int i = 0 ; i < n ; i ++ ) cin >> c [ i ] ;
sort ( c, c + n ) ;
m = c [ b ] - c [ a - 1 ] ;
cout << m << endl ;
int n, b ;
cin >> n >> b ;
vector < int > V ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) cin >> V [ i ] ;
int total = b ;
for ( int i = 0 ; i < n ; i ++ ) { total += V [ i ] ; }
double t = total / n ;
vector < double > ans ( n ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( V [ i ] > t )
cout << " -1\n " ;
ans [ i ] = t - V [ 1 ] ;
cout << fixed << endl ;
for ( int i = 0 ; i < n ; i ++ ) { cout << ans [ i ] ; }
int p [ 101 ] = { 101 }, ai [ 1000 ], bi [ 100 ] ;
unsigned int ci [ 1000 ] ;
unsigned int n, m, k ;
cin >> n >> m >> k ;
string u ;
unsigned int o = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> u ;
for ( unsigned int j = 0 ; j < m ; j ++ )
unsigned int ix = o + j ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> ai [ i ] >> bi [ iix ] >> ci [ ix ] ; }
o += m ;
unsigned int e = n * m ;
int ma = 0 ;
for ( u = 0 ; u < e ; u += m )
for ( int v = 0 ; v < e ; v += m )
if ( u == v ) continue ;
for ( int i = 1 ; i <= m ; i ++ )
unsigned int ix = u + i - 1 ;
for ( int j = 1 ; j <= k ; j ++ )
int mx = p [ j ] [ i - 1 ] ;
for ( int x = 1 ; x <= ci [ ix ] && x <= j ; x ++ )
int mm = p [ j - x ] [ i + 1 ] + ( bi [ v + i - 1 ] - ai [ ix ] ) * x ;
if ( mm > mx ) mx = mm ;
p [ j ] [ i ] = mx ;
if ( p [ k ] [ m ] > ma ) { ma = p [ i ] [ j ] ; }
cout << ma << endl ;
int a [ 15 ] [ 105 ] ;
int b [ 15 ] [ 105 ] ;
int c [ 15 ] [ 105 ] ;
bool vis [ 105 ] ;
int n, m, k ;
int Cal ( int x, int y )
memset ( vis, 0, sizeof vis ) ;
if ( x == y ) return - 1 ;
int cost = k ;
int ans = 0 ;
while ( cost!= 0 )
int flag ;
int maxgas = 0 ;
int dp = 1 ;
for ( int i = 1 ; i <= m ; i ++ )
if ( vis [ i ] ) continue ;
if ( b [ y ] [ i ] - a [ x ] [ 1 ] > maxgas )
dp = 0 ;
maxgas = b [ y ] [ i ] - a [ x ] [ 1 ] ;
flag = i ;
if ( dp ) break ;
vis [ flag ] = 1 ;
ans += min ( cost, c [ x ] [ flag ] * maxgas ) ;
cost -= min ( cost, c [ x ] [ flag ] ) ;
return ans ;
memset ( vis, 0, sizeof vis ) ;
cin >> n >> m >> k ;
for ( int i = 1 ; i <= n ; i ++ )
string s ;
cin >> s ;
for ( int j = 1 ; j <= m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i ) [ j + 1 >> c [ j - 1 ] ; }
int ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ ) { ans = max ( ans, Cal ( i, j ) ) ; }
cout << ans << endl ;
int n, m, k ;
int a [ 11 ] [ 111 ] = { }, b [ 110 ] ;
int f [ 111 ] ;
cin >> n >> m >> k ;
for ( int i = 0 ; i < n ; i ++ )
string name ;
cin >> name ;
for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i + 1 ] [ k ] >> c [ i ++ ] ; }
int ans = 0 ;
for ( int st = 0 ; st < n ; st ++ )
for ( int fn = 0 ; fn < n ; fn ++ )
if ( st!= fn )
int cst [ 110 ], num [ 111 ] ;
for ( int j = 0 ; j < m ; j ++ )
cst [ j ] = b [ fn ] [ i ] - a [ st ] [ j + 1 ] ;
num [ j ] = c [ st ] [ i ] ;
memset ( f, - 1, sizeof ( f ) ) ;
f [ 0 ] = 0 ;
for ( int j = 0 ; j < m ; j ++ )
for ( int cnt = 0 ; cnt < num [ j ] ; ++ cnt )
for ( int pos = k - 1 ; pos >= 0 ; pos -- )
if ( f [ pos ] >= 0 ) { F [ pos + 1 ] = max ( f ( pos + i ], f [ exp ] + cst [ j ] ) ; }
ans = max ( ans, max_element ( f, f + k + 1 ) ) ;
cout << ans << endl ;
int a [ 11 ] [ 101 ], b [ 11x101 ], d [ 1019 ], e [ 101999 ], c [ 10110 ] ;
int x, y ;
int n, m, kkk, maxn ;
bool cmp ( int x, int y )
return d [ x ] > d [ y ] ;
cin >> n >> m >> kkk ;
for ( int i = 0 ; i < n ; i ++ )
string cc ;
cin >> cc ;
for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ 1 ] [ k ] >> c [ i + j ] ; }
for ( int i = 0 ; i < n ; i ++ )
int ans ;
for ( int j = 0 ; j < n ; j ++ )
ans = 0 ;
if ( i!= j )
memset ( d, 0, sizeof ( d ) ) ;
for ( int k = 0 ; k < m ; k ++ ) { e [ k ] = k ; }
for ( int k = 0 ; k < m ; k ++ ) { d [ k ] = b [ j ] [ l ] - a [ i ] [ 1 ] ; }
sort ( e, e + m, cmp ) ;
int kk = kkk ;
int p ;
p = 0 ;
while ( p < m && kk > 0 )
if ( d [ e [ p ] ] < 0 )
kk = 0 ;
break ;
if ( c [ i ] [ e [ p ] ] <= kk )
ans += ( c [ i ] [ e [ p ] ] * d [ e ] ] ) ;
kk -= c [ i ] [ e [ p ] ] ;
p ++ ;
else
ans += kk * d [ e [ p ] ] ;
kk = 0 ;
if ( ans > maxn )
maxn = ans ;
x = i ;
y = j ;
cout << maxn << endl ;
const int MOD = 1e9 + 7 ;
int n, m, k ;
int a [ 10 ] [ 100 ] = { 0 }, b [ 15 ] [ 101 ], c [ 20 ] [ 110 ] ={ 0 } ;
int solve ( int u, int v )
vector < int > profits ;
for ( int i = 0 ; i < m ; i ++ )
for ( int j = 0 ; j < c [ u ] [ i ] ; j ++ ) { profits. push_back ( max ( 0, b [ v ] [ 1 ] - a [ u ) [ j ] ) ; }
sort ( profits. begin ( ), profits. end ( ) ) ;
int ans = 0 ;
for ( int i = 0 ; i < min ( k, profits. size ( ) ) ; i ++ ) { ans += profits [ i ] ; }
return ans ;
cin >> n >> m >> k ;
for ( int i = 0 ; i < n ; i ++ )
string name ;
cin >> name ;
for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i + j ] + c [ i - j ] ; }
int ans = 0 ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ ) ans = max ( ans, solve ( i, j ) ) ;
cout << ans <<'\n';
int n, m, k, a [ 105 ] [ 105 + 105 ], b [ 105 [ 105 - 105 ] = { }, c [ 105 by 105 + 5 } ;
int buy ( int x, int y )
int v [ 105 ] ;
int ans = 0, i ;
int last = k ;
while ( last )
int maxn = 0 ;
int maxi ;
int num ;
for ( i = 1 ; i <= m ; i ++ )
if ( v [ i ] ) continue ;
if ( b [ y ] [ i ] - a [ x ] [ 1 ] > maxn )
maxi = i ;
maxn = b [ y ] [ i ] - a [ x ] [ 1 ] ;
if ( maxn == 0 ) break ;
num = min ( last, c [ x ] [ maxi ] ) ;
ans += num * maxn ;
v [ maxi ] = 1 ;
last -= num ;
return ans ;
int i, j ;
string s ;
cin >> n >> m >> k ;
for ( i = 1 ; i <= n ; i ++ )
cin >> s ;
for ( i = 0 ; i < m ; i ++ ) { cin >> a [ i ] [ j ] >> b [ i ) [ j - 1 ] >> c [ i + j ] [ k ] ; }
int ans = 0 ;
for ( i = 1 ; i <= n ; i ++ )
for ( j = 1 ; j <= n ; j ++ ) { ans = max ( ans, buy ( i, j ) ) ; }
cout << ans << endl ;
const int Maxn = 15, Maxm = 100 + 5 ;
int n, m, k, ans, a [ Maxn ] [ Maxm ], b [ MaxN ] [Maxm ] ;
cin >> n >> m >> k ;
string s ;
for ( int i = 0 ; i < n ; i ++ )
cin >> s ;
for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i + 1 ] [ k ] >> c [ ++ j ] ; }
pair < int, int > d [ Maxm ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ )
for ( int l = 0 ; l < m ; l ++ ) { d [ l ] = make_pair ( b [ j ] [ k ] - a [ i ] [ l + 1, c [ i, l ] ) ; }
sort ( d, d + m ) ;
reverse ( d, d + m ) ;
int num = 0, p = 1, cnt = 0 ;
while ( p < m && cnt + d [ p ]. second <= k )
if ( d [ p ]. first < 0 ) break ;
cnt += d [ p ]. second ;
num = num + d [ p ]. first * d [ h ]. second ;
p ++ ;
if ( d [ p ]. first > 0 ) { num += d [ * ( k - cnt ) ; }
ans = max ( ans, num ) ;
cout << ans << endl ;
long long a [ 11 ] [ 105 ] ;
long long b [ 11 ] [ 105 ] ;
long long c [ 11 ] [ 105 ] ;
bool vis [ 105 ] ;
long long n, m, k ;
long long cal ( int x, int y )
long long last = k ;
long long ans = 0 ;
memset ( vis, 0, sizeof ( vis ) ) ;
while ( last!= 0 )
long long v = 0 ;
long long p ;
long long flag = 0 ;
for ( int i = 1 ; i <= m ; i ++ )
if (! vis [ i ] )
if ( b [ y ] [ i ] - a [ x ] [ 1 ] > v )
v = b [ y ] [ i ] - a [ x ] [ 1 ] ;
p = i ;
flag = 1 ;
if ( flag == 0 ) break ;
vis [ p ] = 1 ;
if ( last >= c [ x ] [ p ] )
ans += c [ x ] [ p ] * v ;
last -= c [ x ] [ p ] ;
else
ans += last * v ;
last = 0 ;
return ans ;
cin >> n >> m >> k ;
for ( int i = 1 ; i <= n ; i ++ )
string s ;
cin >> s ;
for ( int j = 1 ; j <= m ; j ++ ) { cin >> a [ i ] [ j ] >> b [ i ) [ j - 1 ] >> c [ j + 1 ] [ k ] ; }
long long ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ ) { ans = max ( ans, cal ( i, j ) ) ; }
cout << ans << " \n " ;
long long n, a [ 100100 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
long long s = 0 ;
for ( int k = 0 ; k < n - 1 ; k ++ )
int t = 0 ;
while ( k + ( 1 << t + 1 ) < n ) i ++ ;
s += a [ k ], a [ ( k + ( 1 << t ) ] += a ( k ] ) ;
cout << s << endl ;
const int MaxN = 1E5 + 10 ;
int a [ MaxN ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
int ans = 0 ;
for ( int i = 0 ; i < n - 1 ; i ++ )
int lg = log2 ( n - i - 1 ) ;
ans += a [ i ] ;
a [ i + ( 1 << lg ) ] += a [ i ] ;
cout << ans << endl ;
int n, i, a [ 1111111 ], d [ 1110000 ], ans = 0 ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
d [ 1 ] = 1 ;
for ( i = 2 ; i < n ; i ++ ) { d [ i ] *= 2 ; }
for ( i = 0 ; i + 1 < n ; i ++ )
a [ i + d [ n - i - 1 ] ] += a [ i ] ;
ans += a [ i ] ;
cout << ans << endl ;
int n ;
cin >> n ;
long long arr [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
long long N = 0 ;
for ( int i = 0 ; i < n - 1 ; i ++ )
int t = floor ( log2 ( n - i - 1 ) ) ;
N += arr [ i ] ;
int j = i + pow ( 2, t ) ;
arr [ j ] += arr [ i ] ;
arr [ i ] = 0 ;
cout << N << endl ;
int a [ 100001 ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i < n + 1 ; ++ i ) { cin >> a [ i ] ; }
long long res = 0 ;
int t ;
for ( int i = 1 ; i < n ; i ++ )
for ( t = 1 ; i + t <= n ; t *= 2 )
;
t >>= 1 ;
res += a [ i ] ;
a [ i + t ] += a [ i ] ;
cout << res << endl ;
long long int n ;
cin >> n ;
long long int a [ n + 5 ] ;
for ( long long int i = 0 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
long long int c = 0 ;
for ( long long int i = 0 ; i < n ; i ++ )
c += a [ i ] ;
cout << c << " \n " ;
long long int j = 1 ;
while ( ( - 1 + j * 2 ) < n ) j *= 2 ;
a [ i + j ] += a [ i ] ;
long long power2 ( long long pow, long long mod )
long long res = 1ll, x = 2ll ;
while ( pow > 0 )
if ( pow & 1 ) res = ( res * x ) % mod ;
pow >>= 1 ;
x = ( x * x ) % mod ;
return res ;
long long n ;
cin >> n ;
if ( n )
long long M = 1ll * 1000 * 1000 + 7 ;
long long sol ;
sol = power2 ( 2 * n - 1, M ) ;
sol += power2 ( n - 1, M ) ;
sol %= M ;
cout << sol << endl ;
else
cout << 1 << endl ;
int a, n, p = 1000000007 ;
long long fastmod ( long long a, long long n )
if ( n == 1 ) return a ;
long long ans = fastmod ( a, n / 2 ) % p ;
if ( n % 2 == 0 )
return ans % ( p * ans ) % p ;
else
return ans % ( p * ans ) % p * a % p ;
long long k ;
cin >> k ;
if ( k >= 2 )
long long t = fastmod ( 2, k - 1 ) ;
cout << ( t + 2 * t * t % p ) % p << endl ;
else if ( k == 1 )
cout << 3 << endl ;
else
cout << 1 << endl ;
const long long mod = 1e9 + 7 ;
long long qpow2 ( long long p )
long long a = 2 ;
long long res = 1 ;
while ( p )
if ( p & 1 )
res *= a ;
res %= mod ;
a = a * a ;
a %= mod ;
p >>= 1 ;
return res ;
long long n ;
cin >> n ;
if ( n == 0 )
cout << 1 << endl ;
else
cout << ( qpow2 ( n - 1 ) + qpOW2 ( 2 * n - i ) ) % mod << endl ;
int oo = 1000000000, MD = 1000000007 ;
long long fastExp ( long long b, long long e )
long long ans = 1 ;
while ( e > 0 )
if ( e & 1 ) ans = ( ans * b ) % MD ;
b = ( b * b ) % MD ;
e >>= 1 ;
return ans ;
long long n ;
cin >> n ;
long long ans = ( fastExp ( 4, n ) + fastexp ( 2, n + 1 ) ) % MD ;
ans = ( ans * fastExp ( 2, MD - 2 ) ) % MD ;
cout << ans << endl ;
long long mul ( long long x, long long p )
long long ans = 1 ;
while ( p )
if ( p & 1 ) ans = ans * x % 1000000007 ;
x = x * x % 1000000007 ;
p >>= 1 ;
return ans ;
long long n ;
cin >> n ;
if ( n == 0 )
cout << 1 << endl ;
else
long long w = mul ( 2, n - 1 ) % 1000000007 ;
cout << ( w + w * w % 1000000007 * 2 ) % 10000000007 << endl ;
const long long MOD = 1000000007 ;
const long long mod = 1000000007 ;
const long long N = 1e5 + 5 ;
long long inv [ 100005 ] ;
long long powmod ( long long a, long long b )
long long res = 1 ;
a %= mod ;
while ( b >>= 1 )
if ( b & 1 ) res = res * a % mod ;
a *= a % mod ;
return res ;
long long n ;
cin >> n ;
inv [ 1 ] = 1 ;
for ( long long i = 2 ; i < N ; i ++ ) inv [ i ] = ( MOD - MOD / i ) * inv [ MOD % i ] % MOD ;
long long d = powmod ( 2, n ) ;
long long ans = d * ( d + 1 ) % mod * inv [ 2 ] % mod ;
cout << ans << endl ;
const long long INF = ( 1ll << 62 ) - 1 ;
const long long M = 1e9 + 7 ;
long long modularExponentiation ( long long x, long long y )
int res = 1 ;
while ( y > 0 )
if ( y & 1 ) res = ( res * x ) % M ;
y >>= 1 ;
x = ( x * x ) % M ;
return res ;
long long n ;
cin >> n ;
long long ans = modularExponentiation ( 2, n ) ;
ans = ( ans + ( ans * ans ) ) / 2 ;
cout << ans % M << endl ;
int n, a, b, c ;
cin >> n >> a >> b >> c ;
int ans = 0 ;
for ( int i = 0 ; i <= 4000 ; i ++ )
for ( int k = 0 ; k <= 4000 ; k ++ )
int sum = a * i + b * k ;
if ( sum > n ) continue ;
if ( ( n - sum ) % c == 0 ) { ans = max ( ans, ( i + k + ( n / sum ) / c ) ) ; }
cout << ans << endl ;
int a [ 3 ] = { 0 } ;
int dp [ 10000 ] ;
int n ;
for ( int i = 0 ; i < 3 ; i ++ ) { cin >> n >> a [ 0 ] >> dp [ 1 ] >> bp [ 2 ] ; }
memset ( dp, - 100, sizeof dp ) ;
dp [ 0 ] = 0 ;
for ( int i = 0 ; i < 3 ; i ++ )
for ( int j = a [ i ] ; j <= n ; j ++ ) { dp [ j ] = max ( dp. j ], dp ( j - a [ 1 ] ] + 1 ) ; }
cout << dp [ n ] << endl ;
int n, a, b, c ;
cin >> n ;
int w [ 5 ] ;
for ( int i = 1 ; i <= 3 ; i ++ ) cin >> w [ i ] ;
int e [ 5000 ] ;
memset ( e, - 40, sizeof ( e ) ) ;
e [ 0 ] = 0 ;
for ( int i = 1 ; i <= 3 ; i ++ )
for ( int j = w [ i ] ; j <= n ; j ++ ) { e [ j ] = max ( e [ i - w [ 1 ] ] + 1, e [ 2 ] ) ; }
cout << e [ n ] << endl ;
int a [ 4 ] ;
int dp [ 4001 ] ;
int n ;
for ( int i = 1 ; i <= 3 ; i ++ ) { cin >> n >> a [ 1 ] >> b [ i ] >> a ( i + 2 ], a [ 3 ] ) ; }
memset ( dp, a, sizeof dp ) ;
dp [ 0 ] = 0 ;
for ( int i = 1 ; i <= 3 ; i ++ )
for ( int j = a [ i ] ; j <= n ; j ++ ) { dp [ j ] = max ( dp. c_str ( ), dp ( j - a [ 1 ] + 1 ) ; }
cout << dp [ n ] << endl ;
int a [ 3 ] = { 0 } ;
int dp [ 10000 ] ;
int n ;
for ( int i = 0 ; i < 3 ; i ++ ) { cin >> n >> a [ 0 ] >> ( a [ 1 ] >> b [ 2 ] ) ; }
memset ( dp, - 9999, sizeof dp ) ;
dp [ 0 ] = 0 ;
for ( int i = 0 ; i < 3 ; i ++ )
for ( int j = a [ i ] ; j <= n ; j ++ ) { dp [ j ] = max ( dp. j ], dp ( j - a [ 1 ] ] + 1 ) ; }
cout << dp [ n ] << endl ;
int n, a, b, c ;
cin >> n >> a >> b >> c ;
int mx = - 1 ;
for ( int i = n / a ; i >= 0 ; i -- )
for ( int j = n / b ; j >= 0 ; j -- )
int x = n - ( i * a + j * b ) ;
if ( x % c == 0 && x >= 0 ) { mx = max ( mx, i + j + x / c ) ; }
cout << mx << endl ;
int n, a, b, c ;
cin >> n >> a >> b >> c ;
int res = 0 ;
for ( int i = 0 ; i < n / a ; i ++ )
for ( int i = 0 ; i < n / b ; i ++ )
int k = n - i * a - j * b ;
if ( k > 0 && k % c == 0 ) res = max ( res, i + j + k / c ) ;
cout << res << endl ;
int n, a, b, c, max = 0 ;
cin >> n >> a >> b >> c ;
for ( int x = 0 ; a * x <= n ; x ++ )
for ( int y = 0 ; ( y * b ) + ( a * x ) <= n ; y ++ )
int z = ( n - a * x - b * y ) / c ;
if ( a * x + b * y + z * c == n )
if ( x + y + z > max ) { max = x + 2 + z ; }
cout << max << endl ;
int n, a, b, c ;
cin >> n >> a >> b >> c ;
int x, y, z, p = 0, i ;
i = min ( a, min ( b, c ) ) ;
i = n / i ;
for ( x = i ; x >= 0 ; x -- )
for ( y = 0 ; y <= i ; y ++ )
z = abs ( n - ( a * x + b * y ) ) / c ;
if ( a * x + b * y + c * z == n ) p = max ( p, x + y + z ) ;
cout << p << endl ;
int arr [ 5 ], n ;
int dp [ 4004 ], mn ;
int fun ( int rem )
if ( rem == 0 ) return 0 ;
if ( rem < mn ) return - 11111111 ;
if ( dp [ rem ]!= - 1 ) return dp ( rem ] ;
int ret = - 11111111 ;
for ( int i = 0 ; i < 4 ; i ++ ) ret = max ( ret, 1 + fun ( rem - arr [ i ] ) ) ;
return dp [ rem ] == ret ;
memset ( dp, - 1, sizeof dp ) ;
cin >> n ;
mn = 100000000 ;
for ( int i = 0 ; i < 3 ; i ++ )
cin >> arr [ i ] ;
mn = min ( arr [ i ], mn ) ;
cout << fun ( n ) << endl ;
long long n, a, b, c ;
long long dp [ 5006 ] [ 5005 ] ;
long long result ( long long total, long long cnt )
if ( total == 0 ) return cnt ;
long long d, e = 0, f = 0 ;
if ( dp [ total ] [ cnt ]!= - 1m ) { return dp. total ( total, cnt ) ; }
if ( a <= total ) d = result ( total - a, cnt + 1 ) ;
if ( b <= total ) e = result ( total - b, cnt + 1 ) ;
if ( c <= total ) f = result ( total - c, cnt + 1 ) ;
return dp [ total ] [ cnt ] = max ( d, max ( e, f ) ) ;
memset ( dp, - 1, sizeof dp ) ;
cin >> n >> a >> b >> c ;
long long ans = result ( n, 0 ) ;
cout << ans << endl ;
int n, a [ 3 ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ 0 ] >> ( a [ 1 ] >> c [ 2 ] ) ; }
sort ( a, a + 3 ) ;
int a [ 3 ], i = 0, j = 0 ; k = 0 && ans = - 1 ;
for ( i = 0 ; a * a [ 2 ] < n + 1 ; i ++ )
for ( j = 0 ; i + a [ 2 ] + j * a [ 1 ] < n + 1 ; j ++ )
if ( ( ( n - i * a [ 2 ] - j * ( a [ 1 ] ) % a [ 0 ] ) == 0 ) { ans = max ( ans, i + j + ( i - i + a [ 3 ] ) / a [ 8 ] ) ; }
cout << ans << endl ;
const int N = 4005 ;
const int inf = 1e9 ;
const long long INF = 1e18 ;
const double PI = acos ( - 1.0 ) ;
const double EPS = 1e-8 ;
const int MOD = 1000000007 ;
int n, a, b, c ;
int dp [ N ] ;
cin >> n >> a >> b >> c ;
for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] = - inf ;
dp [ 0 ] = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a <= i ) { dp [ i ] = max ( dp. i ], dp ( i - a ] + 1 ) ; }
if ( b <= i ) { dp [ i ] = max ( dp. p ( i, b ) ] + 1 ) ; }
if ( c <= i ) { dp [ i ] = max ( dp. i ], dp ( i - c ] + 1 ) ; }
cout << dp [ n ] << " \n " ;
const int N = 1e5 + 7 ;
int arr [ N ] ;
int n, a, b, c ;
cin >> n >> a >> b >> c ;
memset ( arr, 0, sizeof ( arr ) ) ;
arr [ a ] == arr [ b ] = arr [ c ] = 1 ;
for ( int i = ( int ) ( 1 ) ; i < int ( n ) ; ++ i )
if ( i >= a && arr [ i - a ] ) { arr [ 1 ] = max ( arr [ 2 ], arr [ 3 ] + 1 ) ; }
if ( i >= b && arr [ i - b ] ) arr [ 1 ] = max ( arr [ 0 ], arr [ 2 ] + 1 ) ;
if ( i >= c && arr [ i - c ] ) { arr [ j ] = max ( arr [ 1 ], arr [ 2 ] + 1 ) ; }
cout << arr [ n ] << endl ;
int p [ 3 ] ;
int dp [ 4010 ] [ 4000 ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < 3 ; i ++ ) cin >> p [ i ] ;
int minp = min ( min ( p [ 0 ], p [ 1 ] ), pp ), maxp = max ( max ( p1 ], s [ 1 + 1 ] + p [ 2 ] ) ;
dp [ 0 ] [ 1 ] = true ;
for ( int i = minp ; i <= n ; i ++ )
for ( int k = 1 ; k <= i / minp ; k ++ )
for ( int j = 0 ; j < 3 ; j ++ )
if ( i >= p [ j ] ) dp [ i ] [ k ] = ( dp. at ( i ) [ k - 1 ] ) ;
for ( int i = n / minp ; i >= 1 ; i -- )
if ( dp [ n ] [ i ] )
cout << i << endl ;
break ;
int a, b, c ;
int memo [ 4001 ] ;
int solve ( int i )
if ( i == 0 ) return 0 ;
if ( memo [ i ]!= - 1 ) return memo [ j ] ;
int opt1, opt2, opt3 = - 1e9 ;
if ( i >= a ) { opt1 = solve ( i - a ) + 1 ; }
if ( i >= b ) opt2 = solve ( i - b ) + 1 ;
if ( i >= c ) opt3 = solve ( i - c ) + 1 ;
return memo [ i ] = max ( opt1, max ( opting2, opt3 ) ) ;
memset ( memo, - 1, sizeof memo ) ;
int n ;
cin >> n >> a >> b >> c ;
cout << solve ( n ) << endl ;
void cut_ribbon ( int n, int a, int b, int c )
int arr [ n + 1 ] ;
memset ( arr, 0, sizeof ( arr ) ) ;
if ( a <= n ) { arr [ a ] = 1 ; }
if ( b <= n ) arr [ b ] = 1 ;
if ( c <= n ) arr [ c ] = 1 ;
for ( int i = 0 ; i <= n ; i ++ )
if ( i > a && arr [ i - a ]!= 0 ) { arr [ j ] = max ( arr [ 1 ], arr [ 2 ] + 1 ) ; }
if ( i > b && arr [ i - b ]!= 0 ) { arr [ j ] = max ( arr [ 1 ], arr [ 2 ] + 1 ) ; }
if ( i > c && arr [ i - c ]!= 0 ) { arr [ j ] = max ( arr [ 1 ], arr [ 2 ] + 1 ) ; }
return arr [ n ] ;
int n, a, b, c ;
cin >> n >> a >> b >> c ;
cout << cut_ribbon ( n, a, b, c ) << endl ;
int x, y, r, ans ;
cin >> x >> y >> r ;
if ( 2 * r > min ( x, y ) )
cout << " Second\n " ;
else
cout << " First\n " ;
int l, b, r ;
cin >> l >> b >> r ;
int d = 2 * r, plates = 0 ;
if ( min ( l, b ) < d )
cout << " Second\n " ;
else
cout << " First\n " ;
int a, b, c ;
cin >> a >> b >> c ;
if ( a >= 2 * c && b >= 2 + c )
cout << " First " << endl ;
else
cout << " Second " << endl ;
cout << endl ;
const int MAXN = 100000 + 7 ;
const int mod = 23333333 ;
int a, b, r ;
cin >> a >> b >> r ;
if ( ( a < 2 * r ) || ( b > 2 * c ) )
cout << " Second " << endl ;
else
cout << " First " << endl ;
string str [ 30100 ] ;
int a, b, r ;
cin >> a >> b >> r ;
r *= 2 ;
if ( r <= a && r <= b )
cout << " First " << endl ;
else
cout << " Second " << endl ;
const int pi = 3.14 ;
int a, b, r ;
cin >> a >> b >> r ;
if ( 2 * r > min ( a, b ) )
cout << " Second\n " ;
else
int cnt = 0 ;
int ans = max ( a, b ) ;
int res = min ( a, b ) ;
while ( 1 )
ans = max ( ans, res ) ;
res = min ( ans, res ) ;
cnt += res / ( 2 * r ) ;
ans -= ( res / ( 2.0 * r ) ) * 2 * r ;
int minn = min ( ans, res ) ;
if ( minn < 2 * r ) break ;
if ( cnt >= 1 )
cout << " First\n " ;
else
cout << " Second " << endl ;
long long int n, k, l ;
cin >> n >> k >> l ;
if ( 2 * l <= min ( n, k ) )
cout << " First\n " ;
else
cout << " Second " << endl ;
int a, b, r ;
cin >> a >> b >> r ;
if ( a <= 2 * r || b < 2 * l )
cout << " Second " << endl ;
else
cout << " First " << endl ;
int n1, n2, r ;
cin >> n1 >> n2 >> r ;
int r2 = r + r ;
if ( ( n1 >= r2 ) && ( n2 >= arr2 ) )
cout << " First\n " ;
else
cout << " Second\n " ;
int a, b, r ;
cin >> a >> b >> r ;
r *= 2 ;
if ( a < b || b < r )
cout << " Second " << endl ;
else
cout << " First\n " ;
int a, b, r, m ;
cin >> a >> b >> r ;
if ( a > b )
m = b ;
else
m = a ;
if ( m >= 2 * r )
cout << " First " << endl ;
else
cout << " Second " << endl ;
int a, b, r ;
cin >> a >> b >> r ;
if ( min ( a, b ) >= 2 * r )
cout << " First " << endl ;
else
cout << " Second " << endl ;
int min, height, width, radius ;
while ( cin >> height >> width >> radius )
if ( heigth < width )
min = height ;
else
min = width ;
radius *= 2 ;
if ( min >= radius )
cout << " First\n " ;
else
cout << " Second " << endl ;
int a, b, r ;
cin >> a >> b >> r ;
if ( 2 ) r <= a && 2 r <= b )
cout << " First " << endl ;
else
cout << " Second\n " ;
int a, b, r ;
cin >> a >> b >> r ;
r *= 2 ;
if ( r > min ( a, b ) ) continue ;
cout << " Second " << endl ;
else
cout << " First\n " ;
int n, a, b, c ;
cin >> a >> b >> c ;
if ( ( a < c * 2 ) || ( b < c + 2 ) )
cout << " Second " << endl ;
else
cout << " First " << endl ;
int n, m, r ;
while ( cin >> n >> m >> r )
if ( ( r * 2 <= n ) && ( r + 2 <= m ) )
cout << " First " << endl ;
else
cout << " Second " << endl ;
int a, b, r ;
cin >> a >> b >> r ;
if ( ( a < r * 2 ) || ( b < r + 2 ) )
cout << " Second " << endl ;
else
cout << " First " << endl ;
int a, b, r ;
cin >> a >> b >> r ;
if ( a >= b )
if ( 2 * r <= b )
cout << " First\n " ;
else
cout << " Second\n " ;
else
if ( 2 * r <= a )
cout << " First\n " ;
else
cout << " Second\n " ;
int x, y, r ;
cin >> x >> y >> r ;
if ( x < r * 2 || y < r + 2 )
cout << " Second\n " ;
else
cout << " First\n " ;
long long int mod = 1000000007 ;
int a, b, r ;
cin >> a >> b >> r ;
if ( 2 * r > min ( a, b ) )
cout << " Second\n " ;
else
cout << " First " << endl ;
int a, b, r ;
cin >> a >> b >> r ;
if ( 2 * r <= min ( a, b ) )
cout << " First " << endl ;
else
cout << " Second " << endl ;
long long k, b, n, t ;
cin >> k >> b >> n >> t ;
long long z = k + b ;
int g = n ;
while ( z < t && g > 0 )
g -- ;
z = z * k + b ;
if ( z == t ) g -- ;
cout << g << endl ;
long long u = 1 ;
long long k, b, n, t ;
cin >> k >> b >> n >> t ;
if ( k == 1 )
long long x = 1 ;
for ( long long i = 1 ; i <= n ; i ++ )
long long r = t ;
long long ans = 0 ;
while ( r < x )
ans ++ ;
r += b ;
cout << ans << endl ;
long long r = 0 ;
while ( u * ( k - 1 + b ) <= ( k * t - t + b ] ) )
u *= k ;
r ++ ;
cout << max ( n - r + 1, 0LL ) << endl ;
long long l, b, n, t ;
cin >> k >> b >> n >> t ;
long long x = 1, cnt = - 1 ;
for ( int i = 1 ; i <= n ; i ++ )
x = k * x + b ;
if ( x > t )
cnt = i - 1 ;
break ;
if ( cnt == - 1 )
cout << 0 << endl ;
else
cout << n - cnt << endl ;
long long k, b, n, z ;
cin >> k >> b >> n >> z ;
long long x = 1 ;
while ( n && k * x + b >= z )
x = k * x + b ;
n -- ;
cout << n << endl ;
long long k, b, n, t, ans ;
long long m = 1 ;
cin >> k >> b >> n >> t ;
while ( m >= t ) m = m * k + b, ans ++ ;
if ( n >= ans )
cout << n - ans + 1 << endl ;
else
cout << 0 << endl ;
double k, b, n, t ;
cin >> k >> b >> n >> t ;
int x = 0 ;
double dub = ( t * ( k - 1 ) + b ) / ( b + k + 1 ) ;
if ( k == 1 )
dupl = ( t - 1 ) / b ;
x = ( int ) dub ;
if ( x > n )
else
for ( int i = 1 ; i <= n + 1 ; ++ i )
if ( pow ( k, i ) >= dub + 1 )
x = i - 1 ;
break ;
if ( i == n + 1 ) x = n ;
int ans = n - x ;
cout << ans << endl ;
long long c1, c2, x, k, i, b, n, t, cnt = 0 ;
cin >> k >> b >> n >> t ;
c1 = b + t * ( k - 1 ) ;
c2 = b + k - 1 ;
cnt = 1 ;
x = n ;
while ( k!= 1 )
for ( i = n ; i >= 0 ; i -- )
if ( c1 >= cnt * c2 )
x = i ;
else
break ;
cnt *= k ;
cout << x << endl ;
else
for ( int i = 0 ; i <= n ; i ++ )
if ( i * b >= 1 + n * b - t ) break ;
cout << i << endl ;
long long solve ( long long k, long long b, long double n,long long t )
if ( k == 1 )
long long low = - 1, high = n ;
while ( high - low > 1 )
long long mid = ( low + high ) / 2 ;
if ( 1 - t + b * ( n - mid ) <= 0 )
high = mid ;
else
low = mid ;
return high ;
long long answ = n ;
float64_t pow = 1 ;
while ( answ > 0 && ( k - 1 ) * ( pow * k - t ) + b * ( p * k + 1 ) <= 0 )
pow *= k ;
answ -- ;
return answ ;
long long k, b, n, t ;
while ( cin >> k >> b >> n >> t ) { cout << solve ( k, b, n, t ) << endl ; }
long long int k, b, n, t, i, j, m = 0, ans, r, x = 1, xx = 0 ;
cin >> k >> b >> n >> t ;
for ( i = 1 ; ; i ++ )
r = ( x * k ) + b ;
if ( r <= t )
m ++ ;
else
break ;
x = r ;
ans = n - m ;
ans = max ( xx, ans ) ;
cout << ans << endl ;
long long int k, b, n, t ;
cin >> k >> b >> n >> t ;
long long int num = 1 ;
long long int index = 0 ;
while ( num <= t )
num = k * num + b ;
index ++ ;
index -- ;
cout << max ( 0ll, n - index ) <<'\n';
const int M = 100 + 10 ;
long long int k, b, n, t ;
cin >> k >> b >> n >> t ;
if ( k == 1 )
long long int z = 1 + n * b ;
if ( z <= t )
cout << 0 << endl ;
else
long long int res = z - t ;
long long ans = res / b + ( res % b!= 0 ) ;
cout << ans << endl ;
else
long long int num1 = t * ( k - 1 ) + b ;
long long num2 = k - 1 + b ;
num3 = num1 / num2 ;
num1 = 1 ;
int tm = 0 ;
while ( num * k <= num3 )
num *= k ;
tm ++ ;
m = n - tm ;
m = max ( m, 0 ) ;
cout << m << endl ;
long long ans, k, b, n, t, x = 1 ;
cin >> k >> b >> n >> t ;
while ( x <= t ) x = x * k + b, ans ++ ;
cout << max ( 011, n - ans + 1 ) << endl ;
long long k, b, n, t ;
cin >> k >> b >> n >> t ;
long long cnt = 1 ;
while ( c <= t )
cnt = cnt * k + b ;
n -- ;
cout << max ( 0LL, n + 1 ) << endl ;
long long bigmod ( long long a, long long b, long int m )
if ( b == 0 )
long long x = bigmod ( a, b / 2, m ) ;
x = ( x % m * x % n ) % m ;
if ( b % 2 ) x = ( x % m * a % m ) ;
return x % m ;
long long po ( long long a, long long b )
if ( a == 1 ) return 1 ;
long long r = 1 ;
while ( b -- ) { r *= a ; }
return r ;
long long k, b, n, t, s = 0 ;
cin >> k >> b >> n >> t ;
for ( long long i = 0 ; i <= n ; i ++ )
long long v = s + po ( k, i ) ;
if ( v >= t )
if ( v > t )
cout << n - i + 1 << endl ;
else
cout << n - i << endl ;
s += b * po ( k, i ) ;
cout << " 0 " << endl ;
int k, b, n, t ;
cin >> k >> b >> n >> t ;
int sum = 1 ;
int cnt = 0 ;
while ( sum <= t )
sum = sum * k + b ;
cnt ++ ;
if ( cnt > n )
cout << 0 << endl ;
else
cout << n - cnt + 1 << endl ;
long long solve ( long long k, long long b, long double n, long int t )
if ( k == 1 )
long long low = - 1, high = n ;
while ( high - low > 1 )
long long mid = ( low + high ) / 2 ;
if ( 1 - t + b * ( n - mid ) <= 0 )
high = mid ;
else
low = mid ;
return high ;
long long answ = n ;
float pow = 1 ;
while ( answ > 0 && ( long long ) ( k - 1 ) * ( pow * k - t ) + b ) <= 0 )
pow *= k ;
answ -- ;
return answ ;
long long k, b, n, t ;
while ( cin >> k >> b >> n >> t ) { cout << solve ( k, b, n, t ) << endl ; }
map < string, int > point, num_diff, num ;
string s ;
string name [ 56 ] ;
bool cmp ( string s1, string s2 )
if ( point [ s1 ]!= point [ S2 ] ) return point [ ( s1 ) ] > points [ s2 ] ;
if ( num_diff [ s1 ]!= num_ diff [ s2 ] ) { return num % diff ( s1, num_d ) ] ; }
return num [ s1 ] > num [ S2 ] ;
string s1, s2 ;
int n ;
int num1, num2 ;
char c ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> name [ i ] ;
for ( int i = 1 ; i <= ( n * ( n - 1 ) ) >> 1 ; ++ i )
cin >> s >> num1 >> c >> num2 ;
s1 = s. substr ( 1,'-') ;
s2 = s. substr ( 1,'-') ;
if ( num1 > num2 ) point [ s1 ] += 3 ;
if ( num1 < num2 ) point [ s2 ] += 3 ;
if ( num1 == num2 )
point [ s1 ] ++ ;
point [ s2 ] ++ ;
num [ s1 ] += num1 ;
num [ s2 ] += num2 ;
num_diff [ s1 ] += num1 - num2 ;
num_diff [ s2 ] += num2 - num1 ;
sort ( name + i, name + n + 1, cmp ) ;
sort ( name + 1, name + ( n / 2 + 1 ), cmp ) ;
for ( int i = 1 ; i <= ( n >> 1 ) ; i ++ ) cout << name [ i ] << endl ;
map < string, int > scored, conceed, points ;
vector < string > vec, a ;
bool cmp ( string a, string b )
if ( points [ b ] > points [ a ] )
return 1 ;
else if ( points [ b ] < points [ a ] )
else
int dif1 = ( scored [ a ] - conceed [ b ] ) ;
int dif2 = scored [ b ] - conceed [ a ] ;
if ( dif1 < dif2 )
return 1 ;
else if ( dif1 > dif2 )
else
if ( scored [ a ] > scored [ b ] )
else if ( scored [ a ] < scored [ b ] )
return 1 ;
int n = 0 ;
string st ;
cin >> n ;
int m = n, k = n / 2 ;
while ( m -- )
cin >> st ;
vec. push_back ( st ) ;
n = ( n * n - 1 ) / 2 ;
st = "  " ;
getchar ( ) ;
while ( n -- )
int i ;
string team1, team2 = "  " ;
getline ( cin, st ) ;
for ( i = 0 ; i < st. size ( ) ; i ++ )
if ( st [ i ] =='-')
i ++ ;
break ;
team1 += st [ i ] ;
for ( ; i < st. size ( ) ; i ++ )
if ( st [ i ] ==' ')
i ++ ;
break ;
team2 += st [ i ] ;
int j = 1, sum1 = 0 ;
for ( int i = 0 ; i < st. size ( ) ; i ++ )
if ( st [ i ] ==':')
i ++ ;
break ;
int c = st [ i ] - 48 ;
sum1 = ( sum1 * j ) + c ;
j *= 10 ;
marked [ team1 ] += sum1 ;
conceed [ team2 ] += sum1 ;
int sum2 = 0 ;
j = 1 ;
for ( int i = 0 ; i < st. size ( ) ; i ++ )
int c = st [ i ] - 48 ;
sum2 = ( sum2 * j ) + c ;
j *= 10 ;
scored [ team2 ] += sum2 ;
conceed [ team1 ] += sum2 ;
if ( sum1 > sum2 )
points [ team1 ] += 3 ;
else if ( sum1 < sum2 )
points [ team2 ] += 3 ;
else
points [ team1 ] ++ ;
points [ team2 ] ++ ;
sort ( vec, vec + cmp ) ;
for ( int i = vec. size ( ) - 1 ; i >= k ; i -- ) { vec. push_back ( i ) ; }
sort ( a, a + k ) ;
for ( int i = 0 ; i < a. size ( ) ; i ++ ) cout << a [ i ] << endl ;
map < string, int > pt, sc, mi ;
string name [ 50 ] ;
bool cmp ( string s1, string s2 )
if ( pt [ s1 ]!= pt [ S2 ] ) return pt [ i1 ] > pt [ 2 ] ;
if ( mi [ s1 ]!= mi [ S2 ] )
return mi [ s1 ] > mi [ S2 ] ;
else
returnsc [ s1 ] > sc [ s2 ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> name [ i ] ;
stdin. ignore ( ) ;
for ( int i = 0 ; i < n * ( n - 1 ) / 2 ; i ++ )
string A, B ;
getline ( cin, A,'-') ;
getline ( cin, B,' ') ;
char ch ;
int pA, pB ;
cin >> pA >> ch >> pB ;
stdin. ignore ( ) ;
if ( pA < pB ) pt [ B ] += 3 ;
if ( pA > pB ) pt [ A ] += 3 ;
if ( pA == pB ) pt [ A ] ++, pt [ B ] ++ ;
sc [ A ] += pA ;
mi [ A ] += pA - pB ;
sc [ B ] += pB ;
mi [ B ] += pB - pA ;
sort ( name, name + n, cmp ) ;
sort ( name, name + n / 2 ) ;
for ( int i = 0 ; i < n / 2 ; i ++ ) cout << name [ i ] << endl ;
int n, wp [ 55 ], dg [ 50 ], sg [ 65 ] ;
string name [ 55 ] ;
bool cmp ( int a, int b )
if ( Wp [ a ]!= wp [ b ] ) { return wp. at ( a ) > wp ( b ] ; }
if ( dg [ a ]!= dg1 [ b ] ) return dg. a ] > dg ( b ] ;
return ( sg [ a ] > sG [ b ] ) ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> name [ i ] ;
for ( int i = 0 ; i < n * ( n - 1 ) / 2 ; i ++ )
string s, a, b ;
int p, q ;
char c ;
cin >> s >> p >> c >> q ;
a = s. substr ( 1,'-') ;
b = s. rbegin ( ) +'-';
a1 = find ( name, name + n, a ) - name, b1 =find ( name, name + ( n, b ) - word ) ;
if ( p > q )
dp [ a1 ] += 3 ;
else if ( q == p )
dp [ a1 ] ++ ;
dp [ b1 ] ++ ;
else
dp [ b1 ] += 3 ;
dp [ a1 ] += p - q ;
sb [ a1 ] += p ;
dp [ b1 ] += q - p ;
sb [ b1 ] += q ;
int a [ 55 ] ;
for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = i ; }
sort ( a, a + n, cmp ) ;
string ans [ 55 ] ;
for ( int i = 0 ; i < n / 2 ; i ++ ) { ans [ i ] = name [ a [ 1 ] ] ; }
sort ( ans, ans + n / 2 ) ;
for ( int i = 0 ; i < n / 2 ; i ++ ) { cout << ans [ i ] << endl ; }
string nam [ 50 ] ;
int n, wp [ 50 ] = { 0 }, dg [ 50 } = { 1 }, sg [ 20 ] ={ 0 } ;
bool comp ( int a, int b )
if (! wp [ a ] )
return wp [ a ] > wp ( b ] ) ;
else if ( dg [ a ]!= dg ( b ] )
return ( dg [ a ] > dd [ b ] ) ;
else
return ( sg [ a ] > sG [ b ] ) ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> nam [ i ] ;
for ( int i = 0 ; i < n * ( n - 1 ) / 2 ; i ++ )
string tmp, a, b ;
int p, q ;
char c ;
cin >> tmp >> p >> c >> q ;
a = tmp. substr ( 0, tmp. find ('-') ) ;
b = tmp. substr ( tmp. find ('-') + 1 ) ;
int ai = find ( ( nam, nam + n, a ) - nam ), bi = find( nam, nam - n, b ) - ( npm ) ;
if ( p > q )
dp [ ai ] += 3 ;
else if ( p < q )
dp [ bi ] += 3 ;
else
dp [ ai ] ++, ap [ bi ] ++ ;
dp [ ai ] = ad [ a i ] + p - q, p = sg [ bi ] + q - p, p += q ;
int a [ 50 ] ;
for ( int i = 0 ; i < n ; i ++ ) a [ i ] = i ;
sort ( a, a + n, comp ) ;
string names [ 50 ] ;
for ( int i = 0 ; i < n / 2 ; i ++ ) { names [ i ] = nam [ a [ j ] ] ; }
sort ( names, names + n / 2 ) ;
for ( int i = 0 ; i < n / 2 ; i ++ ) { cout << names [ i ] << endl ; }
int n, m, a, b, v [ ( 2100 ] [ 2100 ] ;
int k, x, y, d [ 2100 [ 2100 ] ;
bool solve ( int x, int y, int k )
int t = max ( 1, x - k ), r = min ( x + k, n ) ;
for ( int i = l ; i <= r ; i ++ )
t = k - abs ( i - x ) ;
if ( y - t > 0 &&! v [ i ] [ y - k ] )
a = i ;
b = y - t ;
return 1 ;
if ( y + t <= m &&! v [ i ] [ y - t ] )
a = i ;
b = y + t ;
return 1 ;
cin >> n >> m >> k ;
for ( int i = 0 ; i < k ; i ++ )
cin >> x >> y ;
for ( int j = - 2 ; j <= 2 ; ++ j )
for ( int k = - 2 ; k <= 2 ; ++ k )
if ( x + j < 1 || x + ( j > n ) || y + k < 1 && y + ( k > m ) ) continue ;
d [ x ] [ y ] = max ( ( d [ x ) [ y - 1 ] ), ( d ( x + j ] [ i + k ] ) - ( abs ( j ) - abs ( k ) ) ) ;
do { d [ x ] [ y ] ++ ; }
v [ a ] [ b ] = 1 ;
cout << a << "   " << b << endl ;
int n, m, a, b, v [ 21 ] [ 2100 ] ;
int k, x, y, d [ 2100 ] [ 2022 ] ;
bool solve ( int x, int y, int k )
int l = max ( 1, x - k ), r = min ( x + k, n ) ;
for ( int i = l ; i <= r ; i ++ )
t = k - abs ( i - x ) ;
if ( y - t > 0 &&! v [ i ] [ y - k ] )
a = i ;
b = y - t ;
return 1 ;
if ( y + t <= m &&! v [ i ] [ y - t ] )
a = i ;
b = y + t ;
return 1 ;
cin >> n >> m >> k ;
for ( int i = 0 ; i < k ; i ++ )
cin >> x >> y ;
for ( int j = - 2 ; j <= 2 ; ++ j )
for ( int k = - 2 ; k <= 2 ; ++ k )
if ( ( x + j ) < 1 || x + i > n || y + k > 1 || ( y + i ) > m ) continue ;
d [ x ] [ y ] = max ( d [ x + j ] [ i ], d [ y + j ) [ j ] - abs ( k ) ) ;
while (! solve ( x, y, d [ x ] [ y ] ) ) { d [ i ] [ j ] ++ ; }
v [ a ] [ b ] = 1 ;
cout << a << "   " << b << endl ;
int n, m, a, b, v 2100 [ 2100 ] ;
int k, x, y, d 2100 [ 2100 ] ;
bool solve ( int x, int y, int k )
int t, l = max ( 1, x - k ), r = min ( x + k, n ) ;
for ( int i = l ; i <= r ; i ++ )
t = k - abs ( i - x ) ;
if ( y - t > 0 &&! v [ i ] [ y - ( t ) )
a = i ;
b = y - t ;
return 1 ;
if ( y + t <= m &&! v [ i ] [ y + i ] )
a = i ;
b = y + t ;
return 1 ;
cin >> n >> m >> k ;
for ( int i = 0 ; i < k ; i ++ )
cin >> x >> y ;
for ( int j = - 2 ; j <= 2 ; ++ j )
for ( int k = - 2 ; k <= 2 ; ++ k )
if ( x + j < 1 || x + i > n || y + k < l || y - k > m ) continue ;
d [ k ] [ y ] = max ( d [ x ] [ i ], d [ ( x + j ] [ ( y + k ] - abs ( j ) + abs ( k ) ) ) ;
while ( solve ( x, y, d [ x ] [ y ] ) == 0 ) { d [ 0 ] [ i ] ++ ; }
v [ a ] [ b ] = 1 ;
cout << a << "   " << b << endl ;
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; i ++, n -- )
for ( cin >> k >> c >> x >> y >> m >> t = 0 ; k --, z -- )
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int, int > ( t, c ), i ) ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( int i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. second << "   " << ( a [ 1 ] + 1 ) << endl ; }
long long a1, a2, n, k, second = 0, ans1 ;
pair < long long, long long > h ;
void read ( )
cin >> n ;
for ( int i = 0, x, y, m ; i < n ; i ++ )
cin >> k ;
second += k ;
cin >> a1 ;
long long t = a1 ;
cin >> x >> y >> m ;
h. push_back ( ( make_pair ( 0 ) ), ( m ) + ( a1 ) + i + 1 ) ) ;
ans1 = 0 ;
for ( int j = 1 ; j <= k ; j ++ )
a2 = ( a1 * x + y ) % m ;
if ( a2 < a1 ) ans1 ++ ;
a1 = a2 ;
t = max ( t, a1 ) ;
if ( h. size ( ) <= 200000 ) { h. push_back ( make_pair ( ans1, a1, i + 1 ) ) ; }
ans = max ( ans, ans1 ) ;
sort ( h. begin ( ), h. end ( ) ) ;
cout << ans << endl ;
if ( second <= 200000 )
for ( int i = 0 ; i < second ; i ++ ) { cout << h [ i ]. second. first << "   " << ( h [ j ]. first. second ) << endl ; }
read ( ) ;
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( i = 0 ; i < n ; i ++ ) cin >> n ;
while ( cin >> k >> c >> x >> y >> m ) t = 0, k --, z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = * make_pair ( int, int ) t, c, i ) ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first. second << "   " << ( a [ 1 ]. second + 1 ) << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n >> n ; n --, i ++ )
for ( i = 0 ; i < n ; i ++ ) cin >> k >> c >> x >> y >> m >> t = 0, z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int, int > ( t, c ), i ) ;
b = c * x + y % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first. second << "   " << ( a [ 1 ]. second + 1 ) << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; n --, i ++ )
for ( cin >> k >> c >> x >> y >> m, t = 0 ; k ; k ++ ) z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int, int > ( t, c ), int ) ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( int i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first << "   " << b [ a [ 1 ] + 1 << endl ; }
long long n, count = 0 ;
cin >> n ;
const int max_i = 2e5 ;
int counter = 0 ;
tuple < int, int > data [ max_i + 9 ] ;
for ( int i = 0 ; i < n ; i ++ )
long long k, a0, x, y, m, t = 0, a = 0 ;
cin >> k >> a0 >> x >> y >> m ;
for ( int j = 0 ; j < k ; j ++ )
if ( counter <= max_i ) data [ counter ++ ] = tupper ( t, a0, i ) ;
a = ( a0 * x + y ) % m ;
if ( a < a0 && j!= k - 1 ) t ++ ;
a0 = a ;
count = max ( count, t ) ;
cout << count << endl ;
if ( counter <= max_i )
sort ( data, data + counter ) ;
for ( int i = 0 ; i < counter ; i ++ ) { cout << data [ i ]. get ( 1, 2 ) << endl ; }
const int MAX = 2e5 ;
pair < long long, long long > a [ MAX + 9 ] ;
long long n, k, a0, x, y, m, ans, cnt, t, tmp ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> k >> a0 >> x >> y >> m, t = 0 ;
for ( int j = 0 ; j < k ; j ++ )
if ( cnt <= MAX ) a [ ++ cnt ] = { t, a0 }, i } ;
tmp = ( a0 * x + y ) % m ;
if ( tmp < a0 && j!= k - 1 ) t ++ ;
a0 = tmp ;
ans = max ( ans, t ) ;
cout << ans << endl ;
if ( cnt < MAX )
sort ( a, a + cnt ) ;
for ( int i = 0 ; i < cnt ; i ++ ) { cout << a [ i ]. first. second << "   " << ( a [ j ]. second + 1 ) << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; n --, i ++ )
for ( cin >> k >> c >> x >> y >> m ; t -- ) z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int, int > ( t, c ), i ) ;
b = ( c * x + y ) % m ;
if ( b < c && b < k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first << "   " << a ( i ). second + 1 << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; n --, i ++ )
for ( cin >> k >> c >> x >> y >> m, t = 0 ; k ; k -- ) z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( t, c ), i ) ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first << "   " << b [ a [ 1 ]. second + 1 << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; n ; i ++ )
for ( cin >> k >> c >> x >> y >> m, t = 0 ; k ; k -- ) z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( t, c ), i ) ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( int i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first << "   " << A [ i + 1 << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; n --, i ++ )
for ( cin >> k >> c >> x >> y >> m, t = 0 ; k --, z = max ( z, t ) )
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( pair < int, int > ( t, c ) ), i ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first << "   " << b [ a [ 1 ]. second + 1 << endl ; }
pair < int, int > a [ 200020 ] ;
long long n, k, c, x, y, m, z, ac, t, b, i ;
for ( cin >> n ; n --, i ++ )
for ( cin >> k >> c >> x >> y >> m, t = 0 ; k -- ) z = max ( z, t ) ;
if ( ac <= 200000 ) a [ ac ++ ] = make_pair ( t, c ), i ) ;
b = ( c * x + y ) % m ;
if ( b < c && k ) t ++ ;
c = b ;
cout << z << endl ;
if ( ac < 200001 )
sort ( a, a + ac ) ;
for ( int i = 0 ; i < ac ; i ++ ) { cout << a [ i ]. first << "   " << b [ i + 1 ] + 1 << endl ; }
int a, b, c ;
cin >> a >> b >> c ;
if ( b > c ) swap ( b, c ) ;
cout << ( 2 * a + b - 1 ) * b + ( c - b - i ) * ( a + ( b + 1 ) ) << endl ;
const int oo = 1e9 ;
int a, b, c ;
cin >> a >> b >> c ;
int ans = b * c + ( a - 1 ) * ( b + c - 1 ] ;
cout << ans << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << a * b + b * c + c * a - ( a + b + c ) + 1 << endl ;
long long x, y, z ;
cin >> x >> y >> z ;
cout << x * y + y * z + x * z - x - z - y + 1 << endl ;
int gcd ( int a, int b )
return b? gcd ( b, a % b ) : a ;
int n, m, c ;
cin >> n >> m >> c ;
cout << ( n * m * c - ( n - 1 ) * ( m - 1 ] * ( c - i ) ) << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << a * b + b * c + a * c - a - b - c + 1 << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << a * b + b * c + c * a - a - b - c + 1 << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << a * b + b * c + c * a - a - b - c + 1 << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << a * b + b * c + c * a - a - b - c + 1 << endl ;
long long a, b, c ;
cin >> a >> b >> c ;
long long ans = ( c + a - 1 ) * ( b + a + 1 ) - a * ( a - 2 ) ;
cout << ans << endl ;
const long long OO = 1e5 + 555 ;
long long rakm ( char x )
return x - 48 ;
char _7rf ( long long x )
return x + 48 ;
bool odd ( long long x )
return x % 2 ;
bool even ( long long x )
return 1 - x % 2 ;
long long factorial ( long long x )
if ( x == 0 || x == 1 )
return 1 ;
else
return x * factorial ( x - 1 ) ;
long long ss ( long long x )
long long sum = 0 ;
while ( x > 0 )
sum += x % 10 ;
x /= 10 ;
return sum ;
long long a3ks ( long long x )
long long b = 0, u = x ;
while ( u > 0 )
b = ( b * 10 ) + u % 10 ;
u /= 10 ;
return b ;
bool prime ( long long x )
for ( long long i = 2 ; i < x ; i ++ )
if ( x % i == 0 ) return 0 ;
return 1 ;
int a, b, c ;
cin >> a >> b >> c ;
cout << ( a * b * c ) - ( ( a - 1 ) * ( b - 1, * ( c - i ) ) << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << ( a * b ) + ( b * c ) + c * a ) - a - b - c + 1 << endl ;
const int N = 1e5 + 100 ;
int a, b, c ;
vector < int > v ;
cin >> a >> b >> c ;
cout << ( a * b * c ) - ( a - 1 ) * ( b - i ) * c - 1 << endl ;
const int MAX = 5e4 + 5 ;
const long long MAX2 = 11 ;
const int MOD = 1000000000 + 7 ;
const long long INF = 20000 ;
const int dr [ ] = { 1, 0, - 1, { 0, 1, 1 } - 1 } ;
const int dc [ ] = { 0, 1, 0, - 1, 1 } - 1 } ;
const double pi = acos ( - 1 ) ;
int a, b, c ;
cin >> a >> b >> c ;
cout << ( a * b + ( a + b - 1 ) * ( c - i ) ) << " \n " ;
const int N = 100100 ;
int a, b, c ;
vector < int > v ;
cin >> a >> b >> c ;
cout << ( b * c ) + ( a - 1 ) * ( b + c - 1) << " \n " ;
int a, b, c ;
cin >> a >> b >> c ;
int ans = ( c + a - 1 ) * ( b + a + 1 ) - a * ( a - i ) ;
cout << ans << endl ;
long long a, b, c ;
cin >> a >> b >> c ;
cout << ( a * b * c ) - ( ( a - 1 ) * ( b - 1, * ( c - i ) ) << endl ;
int a, b, c ;
cin >> a >> b >> c ;
cout << b * c + ( a - 1 ) * ( b + c + 1 ) << endl ;
const long long INF = 0x3f3f0f ;
const long long INFLL = ( long long ) 0x3f3f7f3F3f 3f ;
long long a, b, c ;
cin >> a >> b >> c ;
long long ans = ( c + a - 1 ) * ( b + a + 1 ) - a * ( a - i ) ;
cout << ans << endl ;
string str, str2, s ;
int num, i ;
while ( cin >> num >> str )
sort ( str. begin ( ), str. end ( ) ) ;
for ( i = 0 ; i < str. size ( ) ; i ++ ) { str2 += str [ i ] ; }
for ( i = 0 ; i < num ; i ++ ) s. push_back ( str2 ) ;
str2 = s ;
sort ( str3. begin ( ), str2. end ( ) ) ;
if ( str2!= str )
cout << - 1 << endl ;
else
cout << s << endl ;
const double PI = acos ( - 1 ) ;
const int MAX = 2e9 + 7 ;
const long long MOD = 1e9 + 7 ;
map < char, int > m ;
void solve ( )
int k ;
cin >> k ;
string s ;
cin >> s ;
int n = s. size ( ) ;
if ( n % k!= 0 )
cout << - 1 << endl ;
return false ;
int need = n / k ;
for ( int i = 0 ; i < n ; i ++ ) { m [ s [ i ] ] ++ ; }
string t = "  " ;
for ( int i = 97 ; i < 123 ; i ++ )
if ( m [ ( char ) i ] % k == 0 )
for ( int j = 0 ; j < m [ ( char ) i ] / k ; j ++ ) { t += ( char ( i ) ) ; }
else
cout << - 1 << endl ;
return false ;
for ( int i = 0 ; i < k ; i ++ ) { cout << t ; }
cout << endl ;
solve ( ) ;
int k ;
string s ;
int c [ 26 ] = { 0 } ;
cin >> k >> s ;
if ( s. size ( ) % k!= 0 )
cout << - 1 << endl ;
for ( int i = 0 ; i < s. size ( ) ; i ++ ) { c [ s [ i ] -'a'] ++ ; }
for ( int i = 0 ; i < 26 ; i ++ )
if ( c [ i ] % k!= 0 )
cout << - 1 << endl ;
string res ;
for ( int i = 0 ; i < 26 ; i ++ )
for ( int j = 0 ; j < c [ i ] / k ; j ++ ) { res += char ('a'+ i ) ; }
for ( int i = 0 ; i < k ; i ++ ) { cout << res << endl ; }
cout << endl ;
int k ;
string s ;
cin >> k >> s ;
int count [ 26 ] = { 0 } ;
for ( int i = 0 ; i < s. length ( ) ; i ++ ) { count [ s [ i ] -'a'] ++ ; }
string s1 ;
int c = 0 ;
while ( c < 26 ) c ++ ;
if ( count [ c ] % k!= 0 )
break ;
else
s1 += ( count [ c ] / k ) ;
if ( c == 26 )
while ( k -- ) cout << s1 << endl ;
cout << endl ;
else
cout << - 1 << endl ;
int count ;
cin >> count ;
string s ;
cin >> s ;
int n = s. length ( ) ;
int a [ 26 ] = { 0 } ;
for ( int i = 0 ; i < n ; i ++ ) { a [ s [ i ] -'a'] ++ ; }
for ( int i = 0 ; i < 26 ; i ++ )
if ( a [ i ] % count!= 0 )
cout << " -1 " << endl ;
string ans = "  " ;
for ( int i = 0 ; i < 26 ; i ++ )
if ( a [ i ] )
for ( int j = 0 ; j < a [ i ] / count ; j ++ )
int temp = i +'a';
ans = ans + temp ;
for ( int i = 0 ; i < count ; i ++ ) cout << ans << endl ;
cout << endl ;
int k ;
cin >> k ;
string str ;
cin >> str ;
int n = str. length ( ) ;
map < char, int > c ;
map < char, int > :: iterator itr ;
for ( int i = 0 ; i < n ; i ++ )
if ( strstr ( str, i )!= str. end ( ) )
chars [ str [ i ] ] += 1 ;
else
chars [ str [ i ] ] = 1 ;
for ( itr = str. begin ( ) ; itr!= str. end ( ) : itr ++ )
if ( itr. second < k )
cout << - 1 << endl ;
exit ( 0 ) ;
string new_str = "  " ;
for ( string :: iterator itr = strstr ( itr, "   " ) ; itr!= strlen itr )
int repeat = itr. second / k ;
for ( int i = 0 ; i < repeat ; i ++ ) { new_str += itr. first ; }
if ( new_str. length ( ) * k < n )
cout << - 1 << endl ;
exit ( 0 ) ;
for ( int i = 0 ; i < k ; i ++ ) { cout << new_str ; }
cout << endl ;
char inPutStr [ 1001 ] ;
int k, strArr [ 26 ] ;
char subStr [ 1001 ] ;
void makeAString ( )
int idx = 0 ;
for ( int j = 0 ; j < 26 ; j ++ )
while ( strArr [ j ]!= 0 )
subStr [ idx ] = j +'a';
idx ++ ;
strArr [ j ] -= k ;
for ( int i = 0 ; i < k ; i ++ )
for ( int j = 0 ; j < idx ; j ++ ) { cout << subStr [ j ] ; }
cout << endl ;
for ( int i = 0 ; i < 26 ; i ++ ) { strArr [ i ] = 1 ; }
cin >> k ;
cin >> inPutStr ;
for ( int i = 0 ; inPutStr [ i ]!= 0 ; i ++ )
int id = inPutStr [ i ] -'a';
strArr [ id ] += 1 ;
bool Result = true ;
for ( int i = 0 ; i < 26 ; i ++ )
if ( strArr [ i ] % k!= 0 )
Result = false ;
break ;
if ( Result )
makeAString ( ) ;
else
cout << " -1 " << endl ;
int T, i, j, count = 1, d, m = 0 ;
char s [ 10000 ], k [ 1000 ] ;
cin >> T >> s ;
j = strlen ( s ) ;
sort ( s, s + T ) ;
for ( i = 0 ; i < j ; i ++ )
if ( s [ j ] == s [ i + 1 ] )
count ++ ;
else
if ( count % T == 0 )
d = count / T ;
while ( d -- )
k [ m ] = s [ i ] ;
m ++ ;
count = 1 ;
else
cout << " -1 " << endl ;
k [ m ] ='\0';
while ( T -- )
for ( int i = 0 ; k [ i ]!='\0'; i ++ ) { cout << k [ j ] ; }
cout << endl ;
void solve ( string str, int k )
int cnt [ 26 ] ;
memset ( cnt, 0, sizeof cnt ) ;
for ( int i = 0 ; i < str. size ( ) ; i ++ ) cnt [ str [ i ] -'a'] ++ ;
string s1 ;
int i = 0 ;
for ( ; i < 26 ; i ++ )
if ( cnt [ i ] % k!= 0 )
break ;
else
s1. push_back ( cnt [ i ] / k ) ;
if ( i == 26 )
while ( k -- ) cout << s1 ;
cout << endl ;
else
cout << - 1 << endl ;
int k ;
cin >> k ;
string str ;
cin >> str ;
solve ( str, k ) ;
long long i, j, k, n, m, ans, sz, c1, c2, x, f, z, a [ 100009 ], ch [ 26 ] ;
string s ;
cin >> k >> s ;
sz = s. size ( ) ;
set < char > st ;
set < char > :: iterator it ;
for ( i = 0 ; i < sz ; i ++ )
st. insert ( s [ i ] ) ;
ch [ s [ i ] -'a'] ++ ;
vector < long long > v ;
for ( it = st. begin ( ) ; it!= st. end ( ) : it ++ )
char c ;
c = * it ;
v. push_back ( ch [ c -'a'] ) ;
sz = v. size ( ) ;
for ( int i = 0 ; i < sz ; i ++ )
if ( v [ i ] % k!= 0 )
f = 1 ;
break ;
if ( f )
cout << " -1\n " ;
else
string ss ;
for ( map < string, int > :: iterator it = st. begin ( ) ; it!= string :: npos ; ++ it )
char c ;
c = * it ;
z = ch [ c -'a'] / k ;
for ( int i = 0 ; i < z ; i ++ ) { ss += c ; }
for ( int i = 0 ; i < k ; i ++ ) { cout << ss ; }
cout << endl ;
vector < int > v ;
vector < int > v1 ;
vector < char > v2 ;
int k, c = 0, temp, gh = 0 ;
cin >> k ;
char ch ;
string s, ans ;
cin >> s ;
string s1 = s ;
sort ( ( s1 ). begin ( ), s1. end ( ) ) ;
for ( int i = 0 ; i < s1. size ( ) ; i ++ )
c = 0 ;
if ( s1 [ i ]!= s1. at ( i + 1 ) )
ch = s1 [ i ] ;
v2. push_back ( ch ) ;
for ( int j = 0 ; j < s. size ( ) ; j ++ )
if ( s [ j ] == ch ) c ++ ;
int temp = c ;
v. push_back ( temp ) ;
for ( int i = 0 ; i < v. size ( ) ; i ++ )
if ( v [ i ] % k == 0 )
int f = v [ i ] / k ;
v1. push_back ( f ) ;
else
gh = - 1 ;
break ;
for ( int i = 0 ; i < v1. size ( ) ; i ++ )
int m = v1 [ i ] ;
char g = v2 [ i ] ;
while ( m > 0 )
ans += g ;
m -- ;
string sum = "  " ;
int our = k - 1 ;
while ( our >= 0 )
sum += ans ;
-- us ;
if ( gh == - 1 )
cout << - 1 << endl ;
else
cout << sum << endl ;
int i, Len, k, Arr [ 26 ] = { 0 } ;
string s, kString ;
cin >> k >> s ;
for ( i = 0 ; i < s. length ( ) ; i ++ ) { Arr [ s [ i ] -'a'] ++ ; }
for ( i = 0 ; i < 26 ; i ++ )
if ( Arr [ i ] % k!= 0 )
break ;
else
for ( i = 0 ; i < kString. length ( ) ; i ++ ) { kString += ('a'+ i ) ; }
if ( i == 26 )
while ( k -- ) cout << kString << endl ;
cout << endl ;
else
cout << - 1 << endl ;
const double PI = acos ( - 1 ) ;
const int MAX = 2e9 + 7 ;
const long long MOD = 1e9 + 7 ;
map < char, int > m ;
void solve ( )
int k ;
cin >> k ;
string s ;
cin >> s ;
int n = s. size ( ) ;
if ( n % k!= 0 )
cout << - 1 << endl ;
exit ( 0 ) ;
int need = n / k ;
memset ( m [ s ], 0, sizeof m [ k ] ) ;
string t = "  " ;
for ( int i = 97 ; i < 123 ; i ++ )
if ( m [ char ( i ) ] % k == 0 )
for ( int j = 0 ; j < m [ char ( i ) ] / k ; j ++ ) { t += char ( j ) ; }
else
cout << - 1 << endl ;
return ;
for ( int i = 0 ; i < k ; i ++ ) cout << t ;
cout << endl ;
solve ( ) ;
int ctn [ 30 ] ;
int n, k ;
string s ;
cin >> k >> s ;
n = s. length ( ) ;
for ( int i = 0 ; i < n ; i ++ ) cnt [ s [ i ] -'a'] ++ ;
bool can = true ;
string ss = "  " ;
for ( char x ='a'; x <='z'; ++ x )
if ( cnt [ x -'a'] % k!= 0 )
can = false ;
else
for ( int j = 0 ; j < cnt [ x -'a'] / k ; j ++ ) { ss += x ; }
if ( can )
for ( int j = 0 ; j < k ; j ++ ) { cout << ss ; }
cout << endl ;
else
cout << - 1 << endl ;
int k, i, j ;
string s ;
int c [ 26 ] ;
cin >> k >> s ;
if ( s. size ( ) % k!= 0 )
cout << - 1 << endl ;
for ( i = 0 ; i < s. length ( ) ; i ++ )
for ( i = 0 ; i < 26 ; i ++ )
if ( c [ i ] % k!= 0 )
cout << - 1 << endl ;
string result ;
for ( int i = 0 ; i < 26 ; i ++ )
for ( int j = 0 ; j < c [ i ] / k ; j ++ ) result += char ('a'+ i ) ;
for ( int i = 0 ; i < k ; i ++ ) cout << result << endl ;
cout << endl ;
const int N = 100 + 5 ;
const int mod = 1000000000 + 7 ;
bool ok ( char a )
if ( a >='a'&& a <='z') return 1 ;
if ( a >='A'&& a <='Z') return 1 ;
if ( a >='0'&& a <='9') return 1 ;
if ( a =='_') return 1 ;
char a [ N ] ;
cin >> a + 1 ;
int len = strlen ( a + 1 ) ;
int op = 1 ;
bool flag = 1 ;
int cnt1 == 0, cnt2 = 0, ccnt = 0 and cnt3 = 0 ;
for ( int i = 1 ; i <= len && flag ; i ++ )
if ( op == 1 )
cnt1 ++ ;
if ( a [ i ] =='@')
cnt1 -- ;
op = 2 ;
continue ;
if (! ok ( a [ i ] ) ) flag = 0 ;
if ( cnt1 > 16 ) flag = 0 ;
else if ( op == 2 )
ccnt ++ ;
if ( cnt == 0 || cnt1 > 16 ) flag = 0 ;
if ( a [ i ] == '.')
if ( cnt2 == 0 || cnt1 > 16 ) flag = 0 ;
cnt2 = 0 ;
continue ;
if ( a [ i ] =='/')
ccnt -- ;
op = 3 ;
continue ;
if (! ok ( a [ i ] ) ) flag = 0 ;
cnt2 ++ ;
if ( cnt2 > 16 ) flag = 0 ;
else
if ( cnt2 == 0 || cnt3 > 16 ) flag = 0 ;
if ( ccnt == 0 || ccnt > 32 ) flag = 0 ;
if (! ok ( a [ i ] ) ) flag = 0 ;
cnt3 ++ ;
if ( cnt3 > 16 ) flag = 0 ;
if ( op == 1 ) flag = 0 ;
if ( op == 2 && ( cnt2 == 0 || cnt3 > 16 ) ) flag = 0 ;
if ( op == 3 && ( cnt3 == 0 || cnt2 > 16 ) ) flag = 0 ;
if ( flag )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
const int N = 100 + 5 ;
const int mod = 1000000000 + 7 ;
bool ok ( char a )
if ( a =='letter') return 1 ;
if ( a >='A'&& a <='Z') return 1 ;
if ( a >= 0 && a <= 9 ) return 1 ;
if ( a =='_') return 1 ;
char arr [ N ] ;
cin >> a + 1 ;
int len = strlen ( a + 1 ) ;
int op = 1 ;
bool flag = 1 ;
int cnt1 == 0, cnt2 = 0, ccnt = 0 and cnt3 = 0 ;
for ( int i = 1 ; i <= len && flag ; i ++ )
if ( op == 1 )
cnt1 ++ ;
if ( a [ i ] =='@')
cnt1 -- ;
op = 2 ;
continue ;
if (! ok ( a [ i ] ) ) flag = 0 ;
if ( cnt1 > 16 ) flag = 0 ;
else if ( op == 2 )
ccnt ++ ;
if ( cnt1 == 0 || cntl > 16 ) flag = 0 ;
if ( a [ i ] == '.')
if ( cnt1 == 0 || cnt2 > 16 ) flag = 0 ;
cnt2 = 0 ;
continue ;
if ( a [ i ] =='/')
ccnt -- ;
op = 3 ;
continue ;
if (! ok ( a [ i ] ) ) flag = 0 ;
cnt2 ++ ;
if ( cnt2 > 16 ) flag = 0 ;
else
if ( cnt2 == 0 || cnt3 > 16 ) flag = 0 ;
if ( ccnt == 0 || ccnt > 32 ) flag = 0 ;
if (! ok ( a [ i ] ) ) flag = 0 ;
cnt3 ++ ;
if ( cnt3 > 16 ) flag = 0 ;
if ( op == 1 ) flag = 0 ;
if ( op == 2 && ( cnt2 == 0 || cnt3 > 16 ) ) flag = 0 ;
if ( op == 3 && ( cnt3 == 0 || cnt2 > 16 ) ) flag = 0 ;
if ( flag )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
const double myCompare ( const pair < string, int > & i, const double & j )
return i. second < j. second ;
string s ;
int check ( )
int x = 0, y = 1, flag = 0 ;
for ( int i = 0 ; i < s. size ( ) ; i ++ )
if ( flag == 0 )
if ( s [ i ] =='@')
if ( i - x > 16 || i - ( x ) < 1 || i + 1 == s. size ( ) ) return 0 ;
x = i + 1 ;
y = i + 1 ;
flag = 1 ;
else if ( ( s [ i ] =='alphan') || ( s. at ( i ) =='9') )
continue ;
else if ( s [ i ]!='alphan'|| s [ 1 ] <='9')
else if ( flag == 1 )
if ( s [ i ] =='/')
if ( i - x > 32 || i - i < 1 || i + 1 == s. size ( ) || s [ i - 1 ] == '.') return 0 ;
x = i + 1 ;
flag = 2 ;
else if ( s [ i ] == '.')
if ( i - y > 16 || i - x < 1 || i + 1 == s. size ( ) ) return 0 ;
y = i + 1 ;
else if ( ( s [ i ] =='alphan') || ( s. at ( i ) == '.') ) && ( ( x - y =='_') ;
if ( i + 1 == s. size ( ) )
if ( i - x + 1 > 32 || i - y + 1 < 1 ) return 0 ;
if ( i - y + 1 > 16 || i - i + 1 < 1 ) return 0 ;
continue ;
else if ( s [ i ]!='alphan'|| s [ 1 ] =='>='&& s [ ( i ] <= '.') || ( ( ( i + 1 ) =='_') )
else
if ( s [ i ] =='_'&& i + 1 == s. size ( ) ) return 0 ;
if ( s [ i ] =='alphan'|| s [ ( i ] >='0') || ( ( ( i ) =='_') ) ) return 0 ;
if ( i + 1 == s. size ( ) )
if ( i - x + 1 > 16 || i - y + 1 < 1 ) return 0 ;
continue ;
if ( s [ i ]!='alphan'|| s [ ( i ] =='digit') || ( ( i )!='_') ) { return 0 ; }
if ( flag )
return 1 ;
else
cin >> s ;
cout << ( check ( )? " YES " : " NO " ) << endl ;
bool l ( char c )
if ( c =='letter') return true ;
if ( c >='A'&& c <='Z') return true ;
if ( c >='0'&& c <='9') return true ;
if ( c >='A'&& c <='Z') return true ;
return false ;
bool un ( string s )
int n = s. length ( ) ;
if ( n == 0 || n > 16 ) return false ;
for ( int i = 0 ; i < n ; i ++ )
if (! l ( s [ i ] ) ) return false ;
return true ;
bool hn ( string s )
int n = s. size ( ), i, nw = 0 ;
if ( n == 0 || n > 32 ) return false ;
s = '.'+ s ;
for ( i = 0 ; i < n + 1 ; i ++ )
if ( s [ i ] == '.')
if ( nw == 0 || nw > 16 ) return false ;
nw = 0 ;
else
if (! l ( s [ i ] ) ) return false ;
nw ++ ;
return true ;
bool r ( string s )
return un ( s ) ;
bool f ( string s )
int n = s. length ( ), i, j ;
for ( i = 0 ; i < n ; i ++ )
if ( s [ i ] =='@') break ;
if ( i == n ) return false ;
if (! un ( s. substr ( 0, i ) ) ) return false ;
for ( j = i + 1 ; j < n ; j ++ )
if ( s [ j ] =='/') break ;
if (! hn ( s. substr ( i + 1, j - i - 1 ) ) return false ;
if ( j!= n &&! r ( s. substr ( 0, j + 1 ) ) ) return false ;
return true ;
string s ;
cin >> s ;
if ( f ( s ) )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int i, j, flag = 1, dot = 0 ;
string ch ;
cin >> ch ;
for ( i = 0 ; i < ch. length ( ) ; i ++ )
if ( ch [ i ] =='@')
if ( i > 16 || i < 1 )
flag = 0 ;
move ;
break ;
else if ( ( ch [ i ] >='a') && ( ch. i ] <='z') || if ( strcmp ( ch,'A') =='Z') )
continue ;
else if ( ( ch [ i ] >='0') && ch [ j ] <='9'&& ( ch. at ( i ) =='_') )
continue ;
else
flag = 0 ;
goto print ;
identical dot :
for ( int j = i + 1 ; j < ch. size ( ) ; j ++ )
if ( ch [ j ] == '.')
if ( j - 1 > 17 || j - i < 2 )
flag = 0 ;
goto print ;
i = j ;
else if ( ( ch [ j ] >='a'&& ch [ i ] <='z') || ( ch. at ( j ) >='A') && ( ch. at ( i ) <='Z') )
continue ;
else if ( ch [ j ] >='0'&& ch [ i ] <='9'|| ch [ k ] =='_')
continue ;
else if ( ch [ j ] =='/')
if ( j - 1 > 17 || j - i < 2 )
flag = 0 ;
goto print ;
i = j ;
else
flag = 0 ;
move = print ;
if ( j - i > 17 || j - j < 2 ) flag = 0 ;
cout << endl ;
cout << ( flag? " YES\n " : ( NO\n ) ) ;
int n ;
cin >> n ;
cout << n << endl ;
for ( int i = 1 ; i < n ; i ++ ) { cout <<' '<< i << endl ; }
cout <<'\n';
int n ;
cin >> n ;
cin >> n ;
for ( int i = 1 ; i < n ; i ++ ) cout << "   " << i << endl ;
cout << endl ;
int n ;
cin >> n ;
cin >> n ;
for ( int i = 1 ; i < n ; i ++ ) cout << "   " << i << endl ;
cout << endl ;
int n ;
cin >> n ;
cin >> n ;
for ( int i = 1 ; i < n ; i ++ ) { cout << "   " << i << endl ; }
cout << endl ;
int n ;
cin >> n ;
cout << n << endl ;
for ( int i = 1 ; i < n ; i ++ )
if ( i!= n ) cout << "   " ;
cout << i << endl ;
cout << endl ;
int n ;
cin >> n ;
cin >> n ;
for ( int i = 1 ; i <= n - 1 ; ++ i ) cout << "   " << i << endl ;
cout << endl ;
int a ;
while ( cin >> a )
cout << a << endl ;
for ( int i = 1 ; i < a ; i ++ ) cout <<' '<< i << endl ;
cout << endl ;
void desperate_optimization ( int precision )
float print ( fixed ) ;
cout << floats [ showpoint ] << endl ;
cout. precision ( precision ) ;
desperate_optimization ( 10 ) ;
int n ;
cin >> n ;
cout << n << endl ;
for ( int i = 1 ; i < n ; i ++ ) { cout << i ; }
cout << endl ;
int a ;
cin >> a ;
cin >> a ;
if ( a > 1 ) { cout << "   " ; }
for ( int i = 0 ; i < a - 1 ; i ++ )
cout << i + 1 << endl ;
if ( i + 2!= a ) cout << "   " ;
cout << endl ;
int MOD ;
long long mod_pow ( long long a, long long b )
if ( b == 0 ) return 1 ;
if ( b == 1 ) return a % MOD ;
if ( b & 1 ) return a % MOD * mod_pow ( a, b - 1 ) % MOD ;
long long x = mod_pow ( a, b >> 1 ) ;
return ( x * x ) % MOD ;
int n, m ;
cin >> n >> m ;
MOD = m ;
int r = mod_pow ( 3, n ) ;
if ( r == 0 )
cout << m - 1 << endl ;
else
cout << r - 1 << endl ;
long long power ( long long x, int y, int m )
long long res = 1 ;
while ( y > 0 )
if ( y & 1 )
res *= x ;
res %= m ;
y = y >> 1 ;
x *= x ;
x %= m ;
return res ;
int n, m ;
cin >> n >> m ;
int ans = power ( ( long long ) 3 ), n, m ;
if ( ans == 0 )
cout << m - 1 << endl ;
else
cout << ans - 1 << endl ;
long long modl ( long long n, long long k, int p )
if ( n == 0 ) return 0 ;
if ( k == 0 )
return 1 ;
else if ( k % 2 == 0 )
return ( modl ( n, k / 2 ), p * ( %l ( k, 2, p ) ) % p ;
else
return ( n * modl ( n, k - 1, p ) ) % p ;
long long n, m ;
cin >> n >> m ;
long long z = modl ( 3, n, m ) ;
if ( z == 0 )
cout << m - 1 << endl ;
else
cout << z - 1 << endl ;
int n, m ;
cin >> n >> m ;
long long a = 3 ;
int i = 1 ;
int two = 0 ;
while ( n > 0 )
if ( n % 2!= 0 ) i = i * a % m ;
n /= 2 ;
a = a * a % m ;
cout << ( i - 1 + m ) % m << endl ;
long long pow ( long long a, long long b, long double m )
long long res = 1 ;
while ( b )
if ( b & 1 ) res = ( res * a ) % m ;
a = ( a * a ) % m ;
b >>= 1 ;
return res ;
long long n, m ;
cin >> n >> m ;
cout << ( ( pow ( 3, n, m ) ) - 1 + m ) % m << endl ;
const int MAX = 3e4 + 5 ;
const long long MAX2 = 11 ;
const int MOD = 1000000000 + 7 ;
const long long INF = 20000 ;
const int dr [ ] = { 1, 0, - 1, { 0, 1, 1 } - 1 } ;
const int dc [ ] = { 0, 1, 0, - 1, 1 << - 1 } ;
const double pi = acos ( - 1 ) ;
const double eps = 1e-9 ;
long long n, m ;
long long pw ( )
long long ret = 1, x = 3 ;
while ( n )
if ( n & 1 ) ret = ( ret * x ) % m ;
x = ( x * x ) % m ;
n >>= 1 ;
return ret ;
cin >> n >> m ;
cout << ( pw ( ) + m - 1 ) % m << endl ;
long long m ;
long long pw ( long long x, long long p )
if ( p == 0 ) return 1 % m ;
long long z = pw ( x, p / 2 ) ;
z *= z ;
z %= m ;
if ( p % 2 == 0 ) return z ;
z *= x ;
z %= m ;
return z ;
long long n ;
cin >> n >> m ;
long long res = 2 * ( pw ( 3, n ) - 1 ) / 2 ;
res %= m ;
res += m ;
res %= m ;
cout << res << endl ;
long long power ( long long x, long long y,long long MOD )
unsigned long long int res = 1 ;
x %= MOD ;
while ( y > 0 )
if ( y & 1 ) res = ( res * x ) % MOD ;
y >>= 1 ;
x = ( x * x ) % MOD ;
return res ;
long long int n, m, res ;
cin >> n >> m ;
res = power ( 3, n, m ) - 1 ;
cout << ( res + m ) % m << endl ;
long long m, n ;
long long pw ( long long a, long long b )
long long res = 1 ;
while ( b )
if ( b & 1 ) res = ( res * a ) % m ;
a = a * a % m ;
b /= 2 ;
return res ;
cin >> n >> m ;
long long ans = pw ( 3, n ) ;
ans -- ;
if ( ans < 0 ) ans += m ;
cout << ans << endl ;
long long f ( long long n, long long m )
if ( n == 0 )
return 1 % m ;
else if ( n == 1 )
return 3 % m ;
long long tmp = f ( n / 2, m ) ;
if ( n % 2 == 0 )
return tmp * tmp % m ;
else
return ( tmp * tmp % m ) * 3 % m ;
int n, m ;
cin >> n >> m ;
long long fx = f ( n, m ) ;
if ( fx == 0 )
cout << m - 1 << endl ;
else
cout << fx - 1 << endl ;
long long m ;
int power ( long long a, int n )
long long res = 1 ;
while ( n > 0 )
if ( n % 2 == 1 )
res *= a ;
res %= m ;
a *= a ;
a %= m ;
n /= 2 ;
return res ;
int n ;
cin >> n >> m ;
cout << ( ( ( pow ( 3, n ) - 1 ) % m + m ) % n ) << endl ;
long long power ( long long a, long long b, long int m )
long long temp = a, ans = 1 ;
while ( b )
if ( b & 1 ) ans = ( ans % m * temp % m ) % m ;
temp = ( temp % m * temp % n ) % m ;
b /= 2 ;
return ans ;
long long n, m ;
cin >> n >> m ;
cout << ( power ( 3, n, m ) - 1 + m ) % m << endl ;
long long ax, ay, bx, by, cx, cy ;
cin >> ax >> ay >> bx >> by >> cx >> cy ;
long long ds = ( bx * cy - by * cx ) - ( ax * cy ) - ay * cx ;
if ( ds == 0 )
puts ( " TOWARDS " ) ;
else if ( ds < 0 )
cout << " RIGHT\n " ;
else
cout << " LEFT\n " ;
cout <<'\n';
void solve ( )
long long a1, a2, b1, b2, c1, c2 ;
cin >> a1 >> a2 >> b1 >> b2 >> c1 >> c2 ;
long long d = ( b1 - a1 ) * ( c2 - a2 ) - ( b2 - b2 ) * c1 + a1 ;
if ( d == 0 )
cout << " TOWARDS "
else if ( d > 0 )
cout << " LEFT\n " ;
else
cout << " RIGHT "
cout. precision ( 12 ) ;
solve ( ) ;
long long fp ( long long n, long long p )
if ( p == 0 ) return 1 ;
if ( p == 1 ) return n ;
long long res = fp ( n, p / 2 ) ;
res *= res ;
if ( p % 2 ) res *= n ;
return res ;
pair < int, int > arr [ 5 ] ;
int a, b, c ;
soubles ( s = - 1, ss == - 1 ) ;
bool f = 0 ;
for ( int i = 0 ; i < 3 ; i ++ )
cin >> arr [ i ]. first >> ar [ u ]. second ;
if ( i == 1 )
if ( ( arr [ i ]. first - arr [ 1 ]. second )!= 0 ) { s = ( second_arr [ j ] - second ) / 2 * arr [ j - 1 ] ; }
else if ( i == 2 )
if ( ( arr [ i ]. first - arr [ j - 1 ]. second )!= 0 ) ss = ( arr. second - arr. first ] ) / 2 ;
if ( s == ss ) f = 1 ;
if ( f ) return cout << " TOWARDS " <<'\n ', 0 ;
if ( arr [ 0 ]. second > arr [ 1 ]. first )
if ( arr [ 2 ]. first > arr [ 1 ]. second )
return cout << " LEFT " <<'\n ', 0 ;
else
return cout << " RIGHT " <<'\n ', 0 ;
else if ( arr [ 0 ]. second < arr [ 1 ]. first )
if ( arr [ 2 ]. first < arr [ 1 ]. second )
return cout << " LEFT " <<'\n ', 0 ;
else
return cout << " RIGHT " <<'\n ', 0 ;
else if ( ( arr [ 0 ] -> second == arr [ 1 ]. second ) && arr [ 2 ]. first < arr [ 4 ]. front ( ) )
if ( arr [ 2 ] -> second > arr [ 1 ]. second )
return cout << " LEFT " <<'\n ', 0 ;
else
return cout << " RIGHT " <<'\n ', 0 ;
else if ( ( arr [ 0 ] -> second == arr [ 1 ]. second ) && arr [ 2 ] -> first > arr [ i ]. first )
if ( arr [ 2 ]. second < arr [ 1 ]. size ( ) )
return cout << " LEFT " <<'\n ', 0 ;
else
return cout << " RIGHT " <<'\n ', 0 ;
int x1, x2, x3, y1, y2, y3 ;
cin >> x1 >> x2 >> x3 >> y1 >> y2 >> y3 ;
if ( ( y2 - y1 ) * ( x3 - x2 ) == ( y3 - y2 ) * x2 - x1 )
cout << " TOWARDS " << endl ;
else if ( ( x3 - x2 ) * ( y2 - y1 ) > 0 )
cout << " RIGHT\n " ;
else
cout << " LEFT\n " ;
long long int xa, ya, xb, yb, xc, yc ;
cin >> xa >> ya >> xb >> yb >> xc >> yc ;
long long int cp = ( long long int ) ( xb - xa ) * ( yc - ya ) - ( yb - ya) * ( xc - ya ) ;
if ( cp > 0 )
cout << " LEFT\n " ;
else if ( cp < 0 )
cout << " RIGHT\n " ;
else
cout << " TOWARDS\n " ;
long long int x1, x2, x3, y1, y2, y3 ;
cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
if ( ( y2 - y1 ) * ( x3 - x2 ) == ( y3 - y2 ) ) { x2 - x1 ++ ; }
cout << " TOWARDS " << endl ;
else if ( ( ( x3 - x2 ) * ( y2 - y1 ) ) - ( x2 - x1 ) * i3 - y2 ) > 0 )
cout << " RIGHT " << endl ;
else
cout << " LEFT " << endl ;
long long x1, y1, x2, y2, x3, y3 ;
cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
long long vx1 = ( x2 - x1 ), vy1 = y2 - y1, vx2 = x3 - x2, yy2 = y3 - y2 ;
long long cha = ( long long ) vx1 * vy2 - vx2 * xy1 ;
if ( cha > 0 ) cout << " LEFT " << endl ;
if ( cha < 0 ) cout << " RIGHT " << endl ;
if ( cha == 0 ) cout << " TOWARDS " << endl ;
int f = 0 ;
long long x1, x2, x3, y1, y, 2, y3 ;
cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
long long temp = ( x2 - x1 ) * ( y3 - y2 ) - ( y2 - y1 ) / ( x3 - x2 ) ;
if ( temp == 0 )
f = 0 ;
else if ( temp > 0 )
f = 1 ;
else
f = 2 ;
if ( f == 0 )
cout << " TOWARDS " << endl ;
else if ( f == 2 )
cout << " RIGHT\n " ;
else
cout << " LEFT\n " ;
long long x [ 4 ], y [ 5 ] ;
for ( int i = 1 ; i <= 3 ; i ++ ) { cin >> x [ i ] >> y [ 1 ] ; }
long long a1 = y [ 1 ] - y [ 2 ] ;
long long b1 = x [ 2 ] - x [ 1 ] ;
long long c1 = ( x [ 1 ] * y [ 2 ] ) - x [ 3 ] * ( y [ i ] ) ;
long long a2 = y [ 2 ] - y [ 3 ] ;
long long b2 = x [ 3 ] - x [ 2 ] ;
long long int c2 = x [ 2 ] * y [ 3 ] - x [ 3 + y [ 4 ] ;
if ( a1 * b2 == a2 * b1 && b1 * c2 == b2 * c1 )
cout << " TOWARDS " << endl ;
else
if ( a1 * b2 > a2 * b1 )
cout << " LEFT " << endl ;
else
cout << " RIGHT\n " ;
long long cross ( long long x0, long long y0, int x1, long double y1 )
return y1 * x0 - y0 * x1 ;
vector < long long > X ( 3, Y ( 3 ) ) ;
for ( long long i = 0 ; i < 3 ; i ++ ) { cin >> X [ i ] >> Y [ u ] ; }
long long c = cross ( X [ 1 ] - X [ 0 ] ), Y [ 2 ] - Y [ 8 ], X [ 3 ] -X [ 1 }, Y ( 2 ]- Y [ 4 ] ) ;
if ( c == 0 )
cout << " TOWARDS\n " ;
else if ( c < 0 )
cout << " RIGHT\n " ;
else
cout << " LEFT\n " ;
long long x1, y1, x2, y2, x3, y3 ;
cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 ;
if ( ( y2 - y1 ) * ( x3 - x2 ) == ( y3 - y2 ) * x2 - x1 )
cout << " TOWARDS\n " ;
else if ( y1 == y2 )
if ( x2 > x1 )
if ( y3 > y2 )
cout << " LEFT\n " ;
else
cout << " RIGHT " << endl ;
else
if ( y3 < y2 )
cout << " LEFT\n " ;
else
cout << " RIGHT " << endl ;
else if ( x1 == x2 )
if ( y1 < y2 )
if ( x3 > x2 )
cout << " RIGHT " << endl ;
else
cout << " LEFT\n " ;
else
if ( x3 < x2 )
cout << " RIGHT " << endl ;
else
cout << " LEFT\n " ;
else if ( x1 < x2 && y1 < y2 )
if ( x3 < x2 )
cout << " LEFT\n " ;
else
cout << " RIGHT " << endl ;
else if ( x1 > x2 && y1 > y2 )
if ( x3 > x2 )
cout << " LEFT\n " ;
else
cout << " RIGHT " << endl ;
else if ( x1 < x2 && y1 > y2 )
if ( x3 > x2 )
cout << " LEFT\n " ;
else
cout << " RIGHT " << endl ;
else
if ( x3 < x2 )
cout << " LEFT\n " ;
else
cout << " RIGHT\n " ;
int n, m ;
string st ;
cin >> n >> m ;
int res [ m ] ;
memset ( res, 0, sizeof ( res ) ) ;
for ( int i = 0 ; i < n ; i ++ )
cin >> st ;
if ( st. find ( " 1 " ) == st. end ( ) )
cout << - 1 << endl ;
int cur [ 3 * m ] ;
int curAns [ m ] ;
for ( int j = 0 ; j < 3 * m ; j ++ ) { cur [ j ] = st [ j % m ] -'0'; }
int counter = 0 ;
for ( int a = m - 1 ; a >= 0 ; a -- )
if ( cur [ a ] == 1 )
break ;
else
counter ++ ;
for ( int k = m ; k < 2 * m ; ++ k )
if ( cur [ k ] == 1 )
curAns [ k % m ] = 0 ;
counter = 0 ;
else
curAns [ k % m ] = counter ++ ;
counter = 0 ;
for ( int a = 2 * m ; a < 3 * m + 1 ; a ++ )
if ( cur [ a ] == 1 )
break ;
else
counter ++ ;
for ( int k = 2 * m - 1 ; k >= m ; k -- )
if ( cur [ k ] == 1 )
curAns [ k % m ] = 0 ;
counter = 0 ;
else
counter ++ ;
curAns [ k % m ] = min ( curAs [ l2 ], counter ) ;
for ( int j = 0 ; j < m ; j ++ ) { res [ j ] += curAns [ i ] ; }
int min = INT_MAX ;
for ( int i = 0 ; i < m ; i ++ )
if ( min > res [ i ] ) { min = res [ j ] ; }
cout << min << endl ;
const int INF = 1 << 29 ;
int n, m ;
cin >> n >> m ;
string a [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
int ans [ m ] ;
for ( int i = 0 ; i < m ; i ++ ) { ans [ i ] = 1 ; }
int chk ;
for ( int i = 0 ; i < n ; i ++ )
chk = 0 ;
for ( int j = 0 ; j < m ; j ++ ) { chk += a [ i ] [ j ] =='1'; }
if ( chk == 0 )
cout << " -1\n " ;
for ( int i = 0 ; i < n ; i ++ )
int last ;
bool found = 0 ;
for ( int j = m - 1 ; j >= 0 ; j -- )
if ( a [ i ] [ j ] =='1')
last = j ;
break ;
int curr [ m ] ;
for ( int j = 0 ; j < m ; j ++ ) curr [ j ] = INT_MAX ;
for ( int j = 0 ; j < m ; j ++ )
if ( a [ i ] [ j ] =='1')
last = j ;
found = 1 ;
if ( found == 0 )
curr [ j ] = min ( curr [ i ], ( m - last ) + j ) ;
else
curr [ j ] = min ( curr [ i ], abs ( j - last ) ) ;
found = 0 ;
for ( int j = 0 ; j < m ; j ++ )
if ( a [ i ] [ j ] =='1')
last = j ;
break ;
for ( int j = m - 1 ; j >= 0 ; j -- )
if ( a [ i ] [ j ] =='1')
last = j ;
found = 1 ;
if (! found )
curr [ j ] = min ( curr [ i ], ( last + 1 ) + ( m - 1 - j ) ) ;
else
curr [ j ] = min ( curr [ i ], abs ( j - last ) ) ;
for ( int j = 0 ; j < m ; j ++ ) { ans [ j ] += curr [ i ] ; }
int res = INT_MAX ;
for ( int i = 0 ; i < m ; i ++ ) res = min ( res, ans [ i ] ) ;
cout << res << endl ;
const int maxn = 2e5 + 10 ;
int n, m ;
string s [ 110 ] ;
int l [ 110 ] [ 10010 ] ;
int r [ 110 ] [ 10010 ] ;
cin >> n >> m ;
for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
bool bad = false ;
for ( int i = 0 ; i < n ; i ++ )
int last = - 1 ;
for ( int j = 0 ; j < m ; j ++ )
if ( s [ i ] [ j ] =='0')
l [ i ] [ j ] = last == - 1? - 1 : j - last ;
else
l [ i ] [ j ] = 0, last = j ;
if ( last < 0 ) { bad = true ; }
last = - 1 ;
for ( int j = m - 1 ; j >= 0 ; j -- )
if ( s [ i ] [ j ] =='0')
r [ i ] [ j ] = last == - 1? - 1 : last - j ;
else
r [ i ] [ j ] = 0, last = j ;
for ( int j = 0 ; j < m ; j ++ )
if ( l [ i ] [ j ] < 0 ) { l [ ++ j ] = j + l [ 1 ] [ m - 1 ] + 1 ; }
for ( int j = m - 1 ; j >= 0 ; j -- )
if ( r [ i ] [ j ] < 0 ) { r [ k ++ ] = ( m - 1 ) - j + r [ 1 ] [ 0 ] + 1 ; }
if ( good )
cout << - 1 << " \n " ;
long long ans = n * m + 1 ;
for ( long long j = 0 ; j < m ; j ++ )
long long cur = 0 ;
for ( long long i = 0 ; i < n ; i ++ ) { cur += min ( l [ i ] [ j ], r [ i + 1 ] ) ; }
ans = min ( ans, cur ) ;
cout << ans << " \n " ;
const int maxn = 11000 ;
int INF = 1 << 30 ;
int m, n ;
int da [ 110 ] [ maxn ] ;
int joo [ 110 ] [ maxn ] ;
cin >> m >> n ;
string s ;
for ( int i = 0 ; i < m ; i ++ )
cin >> s ;
for ( int j = 0 ; j < n ; j ++ ) { da [ i ] [ j ] = s [ j - 1 ] =='1 '? 1 : 0 ; }
int t, jj ;
for ( int i = 0 ; i < m ; i ++ )
t = INF ;
for ( j = 0 ; j < n * 2 ; j ++ )
jj = j % n ;
if ( da [ i ] [ jj ] == 1 ) t = 0 ;
joo [ i ] [ jj ] = t ++ ;
t = INF ;
for ( int j = n * 2 ; j >= 0 ; j -- )
jj = j % n ;
if ( da [ i ] [ jj ] == 1 ) t = 0 ;
joo [ i ] [ jj ] = min ( joo [ 1 ] [ ij ], t ) ;
long long mi = INF, sum ;
for ( int j = 0 ; j < n ; j ++ )
sum = 0 ;
for ( int i = 0 ; i < m ; i ++ ) { sum += joo [ i ] [ j ] ; }
mi = min ( sum, mi ) ;
if ( mi >= INF )
cout << - 1 << endl ;
else
cout << mi << endl ;
int dist [ 2 ] [ 10004 ] ;
int n, m ;
cin >> n >> m ;
for ( int i = 0 ; i < n ; i ++ )
string str ;
cin >> str ;
int firstone = - 1 ;
int ff = 0 ;
while ( ff < m && str [ ff ]!='1') ++ ff ;
if ( ff == m )
cout << - 1 << endl ;
firstone = ff ;
dist [ 0 ] [ ff ] = 0 ;
int j = ff + 1 % m ;
while ( 1 )
if ( str [ j ] =='1')
dist [ 0 ] [ j ] = 0 ;
k = j ;
while ( dist [ 0 ] [ k ] < dist [ 1 ] [ ( k - 1 + m ) % m )
k = k - 1 + m % m ;
dist [ 0 ] [ k ] += 1 ;
if ( j == firstone ) break ;
else
dist [ 0 ] [ j ] += ( m - 1 ) % m ] + 1 ;
j = j + 1 % m ;
for ( int z = 0 ; z < m ; z ++ )
dist [ 1 ] [ z ] += dist [ 0 ] ['z'] ;
dist [ 0 ] [ z ] = 0 ;
int minn = dist [ 1 ] [ 0 ] ;
for ( int h = 1 ; h < m ; h ++ )
if ( dist [ 1 ] [ h ] < minn ) minn = dist [ i ] ['h'] ;
cout << minn << endl ;
int n, m ;
cin >> n >> m ;
char a [ n ] [ m ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] ; }
for ( int i = 0 ; i < n ; i ++ )
if (! strcmp ( a [ i ],'1') + m )
cout << - 1 <<'\n';
int nearest [ ( n ] [ m ), l [ ( m ) ], r [ ( ( n ) [ m ] ) ] ;
for ( int i = 0 ; i < n ; i ++ )
int lst = - 1 ;
for ( int j = 0 ; j < m ; j ++ )
if ( a [ i ] [ j ] =='1') { lst = j ; }
bool c = true ;
for ( int j = 0 ; j < m ; j ++ )
lst = ( a [ i ] [ j ] =='1')? j : lst ;
c = ( c & a [ i ] [ j ] ) == 0 ;
l [ i ] [ j ] = ( c == true )? m - lst + j : abs ( j - lest ) ;
lst = - 1 ;
c = true ;
for ( int j = 0 ; j < m ; j ++ )
if ( a [ i ] [ j ] =='1')
lst = j ;
break ;
for ( int j = m - 1 ; j >= 0 ; j -- )
lst = ( a [ i ] [ j ] =='1')? j : lst ;
c = ( c & a [ i ] [ j ] ) == 0 ;
r [ i ] [ j ] = ( c )? lst + 1 + m - ( j + 1 ) : abs ( j - lst ) ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < m ; j ++ ) { nearest [ i ] [ j ] = min ( r [ i - 1 ], l [ i + 1 ] ) ; }
int ans = 0x3f3f 3f ;
for ( int j = 0 ; j < m ; j ++ )
int cur = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cur += nearest [ i ] [ j ] ; }
ans = min ( ans, cur ) ;
cout << ans <<'\n';
int n ;
cin >> n ;
if ( n % 2!= 0 )
cout << - 1 << endl ;
else
cout << " 21 " << endl ;
for ( int i = 3 ; i < n ; i += 2 ) { cout << "   " << i + 1 <<' '<< i << endl ; }
cout << endl ;
int n ;
cin >> n ;
if ( n % 2 == 1 )
cout << - 1 << endl ;
else
cout << 2 1 << endl ;
for ( int i = 3 ; i < n ; i ++ ) { cout << "   " << i + 1 <<' '<< i << endl ; }
cout << endl ;
int t, i ;
cin >> t ;
if ( t % 2 == 1 )
cout << - 1 << endl ;
else
cout << 2 1 << endl ;
for ( i = 3 ; i < t ; i ++ ) { cout << "   " << i + 1 <<' '<< i << endl ; }
cout << endl ;
int num [ 101 ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { num [ i ] = i + 1 ; }
if ( n % 2 == 0 )
cout << - 1 << endl ;
else
for ( int i = 1 ; i < n ; i ++ ) { swap ( num [ i - 1 ], num [ j ] ) ; }
for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << num [ i ] << "   " ; }
cout << num [ n - 1 ] << endl ;
long long n ;
cin >> n ;
if ( n % 2 == 1 )
cout << - 1 << endl ;
else
for ( int i = 1 ; i <= n ; i ++ )
if ( i % 2 == 1 )
cout << i + 1 << endl ;
else
cout << i - 1 << endl ;
if ( i == n )
cout << endl ;
else
cout << "   " ;
int n ;
cin >> n ;
if ( n % 2 == 1 )
cout << - 1 << endl ;
else
int temp = 2 ;
int count = 0 ;
while ( temp!= n - 1 )
cout << temp << "   " ;
count ++ ;
if ( count % 2 == 1 )
temp = temp - 1 ;
else
temp += 3 ;
cout << temp << endl ;
int a, b ;
cin >> a ;
if ( a % 2!= 0 )
cout << - 1 << endl ;
else
for ( b = 2 ; b <= a - 1 ; b += 2 ) { cout << b <<' '<< b - 1 << endl ; }
cout << a <<' '<< a - 1 << endl ;
int p ;
cin >> p ;
if ( p % 2 == 1 )
cout << - 1 << endl ;
else
cout << 2 <<' '<< 1 << endl ;
for ( int i = 4 ; i <= p ; i += 2 ) { cout << i << "   " << i - 1 << endl ; }
cout << endl ;
void fastIo ( ) { }
fastIo ( ) ;
int n ;
cin >> n ;
pair < int, int > m ;
for ( int i = 0 ; i < n ; i ++ )
int x, y ;
cin >> x >> y ;
m [ make_pair ( x, y ) ] ++ ;
map < pair < int, int >, integer > :: iterator it = m. begin ( ) ;
int cnt = 1 ;
while ( it!= m. end ( ) )
if ( it -> second > cnt ) { cnt = it. second ; }
it ++ ;
cout << cnt << endl ;
const int N = 1e5 + 5 ;
int n, res = 1, Max = 1 ;
pair < int, int > a [ N ] ;
void Input ( )
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]. first >> a ( i ). second ; }
sort ( a + 1, a + n + 1 ) ;
void Solve ( )
int curr = 1 ;
for ( int i = 2 ; i <= n ; i ++ )
if ( a [ i ]. first == a [ j - 1 ]. first && a [ 1 ]. second == a ( i - 1 ). second )
curr ++, res = max ( res, curr ) ;
else
curr = 1 ;
cout << res <<'\n';
Input ( ) ;
Solve ( ) ;
int n, temp [ 24 ] [ 60 ], maxi = 0, h, m ;
cin >> n ;
while ( n )
cin >> h >> m ;
temp [ h ] [ m ] ++ ;
maxi = temp [ h ] [ m ] > maxi ;
cout << maxi << endl ;
int n, h, m, t = - 1, c = 0, rest = 1 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> h >> m ;
int t0 = h * 60 + m ;
c = ( t0 == t? c + 1 : 1 ) ;
if ( c > res ) res = c ;
t = t0 ;
cout << res << endl ;
int n, i, j ;
int h [ 100000 ], m [ 1000000 ], count [ 10000000 ] ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ ) { cin >> h [ i ] >> m [ j ] ; }
for ( i = 0 ; i < n ; i ++ ) { count [ i ] = 1 ; }
for ( i = 0, j = 0 ; i < n - 1 ; i ++ )
if ( ( h [ i ] == h [ j + 1 ] ) && ( m [ j ] == m [ i + 2 ] ) )
count [ j ] ++ ;
else if ( count [ j ]!= 1 )
j ++ ;
int ans = count [ 0 ] ;
for ( int i = 0 ; i < n ; i ++ )
if ( count [ i ] > ans ) { ans = count [ j ] ; }
cout << ans << endl ;
int n, x [ 100010 ], y [ 100000 ], i, c = 0 ;
vector < int > v ;
cin >> n ;
map < int, int > mp ;
for ( i = 0 ; i < n ; i ++ )
for ( i = 0 ; i < n ; i ++ ) { cin >> x [ i ] >> y [ ++ i ] ; }
mp [ make_pair ( x [ 1 ], y [ i ] ) ] ++ ;
for ( i = 0 ; i < n ; i ++ ) { v. push_back ( mp [ make_pair ( x [ i ], y [ 1 ] ) ] ) ; }
sort ( v. begin ( ), v. end ( ) ) ;
if ( v. back ( ) == 0 )
cout << " 1 " << endl ;
else
cout << v [ v. size ( ) - 1 ] << endl ;
int n, a, b, c = - 1, d = - 2, co = 0, m = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a >> b ;
if ( a == c && b == d )
co ++ ;
m = max ( m, co ) ;
else
co = 1 ;
c = a ;
d = b ;
if ( m == 0 )
cout << 1 << endl ;
else
cout << m << endl ;
int n, h, m, a [ 100 ] [ 10 ] ;
while ( cin >> n )
int maxa = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> h >> m ;
a [ h ] [ m ] ++ ;
maxa = a [ h ] [ m ] > maxa ;
cout << maxa << endl ;
int n, i ;
cin >> n ;
int a [ ( n + 2 ) ], b [ n + 3 ] ;
int m = 0 ;
int c [ 24 ] [ 60 ] = { 0 } ;
for ( i = 0 ; i < n ; i ++ )
for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] >> b [ 1 ] ; }
++ c [ a [ i ] ] [ b [ 1 ] ] ;
for ( i = 0 ; i < n ; i ++ ) { m = max ( m, c [ a [ i ] ] [ b [ j ] ] ) ; }
cout << m << " \n " ;
int n, hh = - 1, mm = 0, h, m, res = 1, k = 1 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> h >> m ;
if ( h == hh && m == mm )
k ++ ;
else
hh = h ;
mm = m ;
res > k? res = res : k ;
k = 1 ;
cout << ( res > k? res : k ) << endl ;
const int N = 1e5 + 5 ;
int n, res = 1, Max = 1 ;
pair < int, int > a [ N ] ;
void Input ( )
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ]. first >> a ( i ). second ; }
sort ( a + 1, a + n + 1 ) ;
void Solve ( )
int curr = 1 ;
for ( int i = 2 ; i <= n ; i ++ )
if ( a [ i ]. first == a [ j - 1 ]. first && a [ 1 ]. second == a ( i - 1 ). second )
curr ++, res = max ( res, curr ) ;
else
curr = 1 ;
cout << res <<'\n';
Input ( ) ;
Solve ( ) ;
int n, ele1, ele2 ;
cin >> n ;
int arr [ 24 * 60 ] = { } ;
while ( n -- )
cin >> ele1 >> ele2 ;
arr [ ele1 * 60 + ele2 ] ++ ;
int max = 0 ;
for ( int i = 0 ; i < 24 * 60 ; i ++ )
if ( arr [ i ] > max ) { max = arr [ 1 ] ; }
cout << max << endl ;
int t ;
cin >> t ;
int arr [ t ] [ 2 ] ;
for ( int i = 0 ; i < t ; i ++ ) { cin >> arr [ i ] [ 0 ] >> arr ( i ) [ 1 ] ; }
int count = 0, temp = 1 ;
for ( int i = 1 ; i < t ; i ++ )
if ( temp > count ) count = temp ;
if ( arr [ i - 1 ] [ 0 ] == arr [ 2 ] [ 1 ] && arr [ 0 - i + 1 ]. 1 ] == ar [ i ] [ 3 ] )
temp ++ ;
else
temp = 1 ;
if ( temp > count ) count = temp ;
cout << count << endl ;
int n ;
cin >> n ;
int ans = 1, cnt = l, ph = 99, pm = 99 ;
for ( int i = 0 ; i < n ; i ++ )
int h, m ;
cin >> h >> m ;
if ( h == ph && m == pm )
cnt ++ ;
if ( ans < cnt ) ans = cnt ;
else
cnt = 1 ;
ph = h ;
pm = m ;
cout << ans << endl ;
long long n ;
cin >> n ;
long long Arr [ n + 2 ], Sum = 0 ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> Arr [ i ], Sum += Arr ( i ] ; }
long long s, t ;
cin >> s >> t ;
long long Cnt = 0 ;
if ( s > t ) swap ( s, t ) ;
for ( int i = s ; i < t ; i ++ ) Cnt += Arr [ i ] ;
cout << min ( Cnt, Sum - Cnt ) << endl ;
int a, i, s, t, arr [ 105 ], n, b = 0, c, l1, l2 = 0 ;
cin >> n ;
for ( a = 1 ; a <= n ; a ++ ) cin >> arr [ a ] ;
cin >> s ;
cin >> t ;
if ( s > t )
b = t ;
c = s ;
else
b = s ;
c = t ;
for ( int a = b ; a < c ; a ++ ) { l1 += arr [ a ] ; }
a = a + c && a!= b ;
l2 += arr [ a ] ;
if ( a == n ) a = 0 ;
if ( l1 <= l2 )
cout << l1 << endl ;
else
cout << l2 << endl ;
int d [ 107 ] [ 107 + 1 ], n, x ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ ) { d [ i ] [ j ] = INT_MAX / 10 ; }
for ( int i = 1 ; i <= n ; i ++ ) { d [ i ] [ j ] = 0 ; }
for ( int i = 1 ; i <= n ; i ++ )
cin >> x ;
int j = i + 1 ;
if ( j > n ) j -= n ;
d [ i ] [ j ] = x ;
d [ j ] [ i ] = x ;
for ( int k = 1 ; k <= n ; k ++ )
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ )
if ( ( d [ i ] [ k ] + d [ l ] [ j ] ) < d [ 1 ] [ h ] ) { d [ ( i ) [ j - 1 ] += d [ a ] [ l + 1 ] ) ; }
int s, t ;
cin >> s >> t ;
cout << d [ s ] [ t ] << endl ;
int K, X, Y, M, N, A [ 105 ] ;
cin >> K ;
for ( int i = 1 ; i <= K ; i ++ )
cin >> A [ i ] ;
N += A [ i ] ;
cin >> X >> Y ;
for ( int i = min ( X, Y ) ; i <= max ( Y, Y, M ) ; ++ i ) { M += A [ i ] ; }
cout << min ( M, N - M ) << endl ;
int arr [ 1000 ] ;
int n ;
while ( cin >> n )
int total = 0 ;
memset ( arr, 0, sizeof ( arr ) ) ;
for ( int i = 0 ; i < n ; i ++ )
cin >> arr [ i ] ;
total += arr [ i ] ;
int s, t ;
cin >> s >> t ;
int tmp ;
if ( s > t )
tmp = s ;
s = t ;
t = tmp ;
s -- ;
t -- ;
int a1 = 0, a2 = 0 ;
for ( int i = s ; i < t ; i ++ ) { a1 += arr [ i ] ; }
a2 = total - a1 ;
cout << min ( a2, a1 ) << endl ;
int n, sum ( 0 ), sum1 = 0, a, b ;
cin >> n ;
int x [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> x [ i ] ; }
cin >> a >> b ;
for ( int i = min ( a - 1, b - 1 ) ; i <= max ( b - 2, a - 2 ) ; ++ i ) { sum += x [ i ] ; }
for ( int i = min ( a - 1, b - 1 ) ; i >= 0 ; i -- ) { sum1 += x [ i ] ; }
for ( int i = n - 1 ; i >= max ( b - 1, a - 1 ) ; i -- ) { sum1 += x [ i ] ; }
cout << min ( sum, sum1 ) << endl ;
int n ;
cin >> n ;
int d [ n + 10 ] ;
d [ 0 ] = 0 ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> d [ i ] ;
int s [ n + 15 ] ;
s [ 0 ] = 0 ;
for ( int i = 1 ; i <= n + 1 ; ++ i ) s [ i ] += d [ i - 1 ] ;
int sr, t ;
cin >> sr >> t ;
if ( sr > t ) swap ( sr, t ) ;
int ans = s [ t ] - s [ sr ] ;
ans = min ( ans, s [ sr ] + s [ n + 1 ] - s [ t ] ) ;
cout << ans << endl ;
int n, m, dist [ 100015 ], prefs [ 100000 + 10 ], x, y, ans1 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> dist [ i ] ;
prefs [ 0 ] = dist [ 0 - 1 ] ;
for ( int i = 1 ; i < n ; i ++ ) { prefs [ i ] = dist [ i - 1 ] ; }
cin >> x >> y ;
x -- ;
y -- ;
if ( x > y ) swap ( x, y ) ;
ans = prefs [ y - 1 ] ;
ans -= prefs [ x - 1 ] ;
ans1 = prefs [ n - 1 ] - ans ;
cout << min ( ans, ans1 ) << endl ;
int n, s, t, ans = 0, line [ 101 ] = { } ;
int i ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ ) { cin >> line [ i ] ; }
cin >> s >> t ;
i = s ;
while ( i!= t )
tmp += line [ i ] ;
i ++ ;
if ( i > n ) i = 1 ;
while ( i!= s )
ans += line [ i ] ;
i ++ ;
if ( i > n ) i = 1 ;
if ( tmp < ans ) ans = tmp ;
cout << ans << endl ;
int n, i, s1, s2, s, t, a [ 105 ] ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
cin >> s >> t ;
if ( s > t ) swap ( s, t ) ;
for ( i = s ; i < t ; i ++ ) { s1 += a [ i ] ; }
for ( i = 1 ; i < s ; i ++ ) { s2 += a [ i ] ; }
for ( i = n ; i < t ; i ++ ) { s2 += a [ i ] ; }
cout << min ( s1, s2 ) << endl ;
int n ;
cin >> n ;
int arr [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
int a, b ;
cin >> a >> b ;
int x = max ( a, b ) ;
int y = min ( a, b ) ;
int d1 = 0 ;
for ( int i = x - 1 ; i < ( n + y - 1 ) ; i ++ ) { d1 += arr [ i % n ] ; }
int d2 = 0 ;
for ( int i = x - 2 ; i >= y - 1 ; i -- ) { d2 += arr [ i % n ] ; }
cout << min ( d1, d2 ) << endl ;
int NumberOfStations ;
int From, To ;
int SumOfDistance = 0 ;
cin >> NumberOfStations ;
vector < int > StationsDistance ( NumberOfStations ) ;
for ( int Index = 0 ; Index < NumberOfStations ; Index ++ )
cin >> StationsDistance [ Index ] ;
SumOfDistance += StationsDistance [ Index ] ;
cin >> From >> To ;
int Start, End ;
if ( From < To )
Start = From ;
End = To ;
else
Start = To ;
End = From ;
int TheOtherDestance = 0 ;
for ( ; Start < End ; Start ++ ) { TheOtherDestance += StaionsDistance [ Start - 1 ] ; }
cout << min ( TheOtherDestance, ( SumOfDistance - The OtherDestance ) ) << endl ;
long long int n ;
cin >> n ;
long long int d [ n ] ;
for ( long long int i = 0 ; i < n ; i ++ ) cin >> d [ i ] ;
long long int s, t ;
cin >> s >> t ;
if ( s > t )
long long int temp = s ;
s = t ;
t = temp ;
long long int dist1 = 0, dist2 = 0 ;
for ( long long int i = s - 1 ; i < t ; i ++ ) { dist1 += d [ i ] ; }
bool flag = true ;
for ( long long int i = t - 1 ; i >= s - l ; i -- )
if ( i % n == 0 && flag )
i = - 1 ;
flag = false ;
continue ;
dist2 += d [ i ] ;
if ( dist2 > dist1 )
cout << dist1 << endl ;
else
cout << dist2 << endl ;
int n, d [ 255 ], s, t ;
int res1 = 0, res2 = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = i - n ; }
cin >> s >> t ;
if ( s > t ) swap ( s, t ) ;
for ( int i = s ; i < t ; i ++ ) res1 += d [ i ] ;
for ( int i = t ; i < n + s ; i ++ ) { res2 += d [ i ] ; }
cout << min ( res1, res2 ) << endl ;
int n, s, t, sum = 0, m1 = 0 ;
cin >> n ;
int arr [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> arr [ i ] ;
sum += arr [ i ] ;
cin >> s >> t ;
s -- ;
t -- ;
int l = min ( s, t ) ;
int h = max ( s, t ) ;
for ( int i = l ; i < j ; i ++ ) { m1 += arr [ i ] ; }
cout << min ( m1, sum - m1 ) << endl ;
int n, m, u, v, x, y ;
cin >> n ;
int a [ 105 ] ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
cin >> u >> v ;
if ( u > v ) swap ( u, v ) ;
int m1 = 0, m2 = 0 ;
for ( int i = u ; i < v ; i ++ ) { m1 += a [ i ] ; }
for ( int i = 1 ; i <= n ; i ++ )
if ( i < u || i >= v ) m2 += a [ i ] ;
if ( u == v )
cout << 0 << endl ;
else
cout << min ( m1, m2 ) << endl ;
int n, s, t, arr [ 103 ], len1 = 0, len2 = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
cin >> s >> t ;
if ( s > t ) swap ( s, t ) ;
for ( int i = s - 1 ; i < t - 1 + len1 ; i ++ ) { len1 += arr [ i ] ; }
int f = n - t + s ;
int tt = t - 1 ;
while ( f -- )
if ( tt % 2 == 0 ) tt = 0 ;
len2 += arr [ tt ] ;
tt ++ ;
cout << min ( len1, len2 ) << endl ;
long long int choose ( long long int n, long long integer m )
long long int ans = 0 ;
long long int num = 1 ;
long long int den = 1 ;
for ( long long int i = 0 ; i < m ; i ++ )
num *= ( n - i ) ;
num = num / ( i + 1 ) ;
return num ;
bool isPrime ( int n )
if ( n <= 1 ) return false ;
if ( n <= 3 ) return true ;
if ( n % 2 == 0 && n % 3 == 0 ) return false ;
for ( int i = 5 ; i * i <= n && i += 6 )
if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;
return true ;
long long int gcd ( long long int a, long long integer b )
if ( a == 0 )
return b ;
else
return gcd ( b % a, a ) ;
long long int i, j, k, n, m, t, c ;
cin >> n ;
vector < long long int > d ( n ) ;
for ( i = 0 ; i < n ; i ++ ) cin >> d [ i ] ;
long long int s ;
cin >> s >> t ;
if ( s > t )
m = s ;
s = t ;
t = m ;
long long int ans1 = 0, ans2 = 0 ;
for ( long long int i = s - 1 ; i < t - 2 ; i ++ ) { ans1 += d [ i ] ; }
i = t - 1 ;
while ( i!= s - 1 )
ans2 += d [ i ] ;
i ++ ;
if ( i == n ) i = 0 ;
cout << min ( ans1, ans2 ) << endl ;
long long i, x, j, y, tn = 1, ar [ 100000 ], ans = 0 ;
int n, m ;
long long tc ;
cin >> n ;
vector < long long > v, v1 ;
v. push_back ( 0 ) ;
for ( i = 0 ; i < n ; i ++ )
cin >> x ;
v. push_back ( x ) ;
v1 = v ;
for ( i = 1 ; i < v. size ( ) ; i ++ ) v [ i ] += v [ j - 1 ] ;
cin >> x >> y ;
if ( x > y ) swap ( x, y ) ;
if ( x == y )
cout << 0 << endl ;
int t1 = v [ y - i ] - v [ x - 1 ] ;
int t2 = v [ ( int ) v. size ( ) - 1 ] - v [ y ] + v1 [ ( y ] ) + v [ x - i ] ;
cout << min ( t1, t2 ) << endl ;
int N ;
int x, s, t ;
vector < int > d ;
cin >> N ;
for ( int i = 0 ; i < N ; i ++ ) cin >> x, d. push_back ( x ) ;
cin >> s >> t ;
if ( s -- > t -- ) swap ( s, t ) ;
int d1 = 0 ;
for ( int i = s ; i < t ; i ++ ) { d1. push_back ( d ( i ) ) ; }
int d2 = 0 ;
for ( int i = t ; i < N ; i ++ ) { d2. push_back ( d ( i ) ) ; }
for ( int i = 0 ; i < s ; i ++ ) { d2. push_back ( d ( i ) ) ; }
cout << min ( d1, d2 ) << endl ;
string s ;
int i, j, arr [ 10000 ] ;
int a, b, c, d, t, cnt = 0, cn = 0 ;
cin >> t ;
for ( int k = 1 ; k <= t ; k ++ ) cin >> arr [ k ] ;
cin >> a >> b ;
if ( a > b ) swap ( a, b ) ;
for ( i = a ; i < b ; i ++ ) { cnt += arr [ i ] ; }
for ( i = b ; ; i ++ )
if ( i == a ) break ;
cn += arr [ i ] ;
if ( i == t ) i = 0 ;
if ( cnt > cn )
cout << cn << endl ;
else
cout << cnt << endl ;
int n, s, t, arr [ 100 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> s >> t ;
int m1 = min ( s, t ) ;
int m2 = max ( s, t ) ;
m1 -- ;
m2 -- ;
int R1 = 0, R2 = 0 ;
for ( int i = m1 ; i <= m2 ; i ++ ) { R1 += arr [ i ] ; }
for ( int i = m2 ; i <= mn ; i ++ ) { R2 += arr [ i ] ; }
for ( int i = 0 ; i < m1 ; i ++ ) { R2 += arr [ i ] ; }
int R = min ( R2, R1 ) ;
cout << R << endl ;
int arr [ 10005 ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i + 1 ] ; }
int s, t ;
cin >> s >> t ;
if ( s > t ) swap ( s, t ) ;
int aa = 0 ;
for ( int i = s ; i < t ; i ++ ) { aa += arr [ i ] ; }
int bb = 0 ;
for ( int i = 1 ; i < t ; i ++ ) bb += arr [ i ] ;
for ( int i = t ; i < n ; i ++ ) { bb += arr [ i ] ; }
cout << min ( aa, bb ) << endl ;
const int maxn = 105 ;
int n, s, t, d [ maxn ] ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> d [ i ] ;
cin >> s >> t ;
int clock ( 0 ), revert = 0, i ;
int front = min ( s, t ), tail = max ( ( s ), ( t ) ) ;
for ( i = front ; i < tail ; i ++ ) { clock += d [ i ] ; }
for ( i = tail ; i!= front ; i ++ )
if ( i > n ) i %= n ;
if ( i == front ) break ;
revertical += d [ i ] ;
cout << min ( clock, revert ) << endl ;
int n, s, t, sum = 0, d [ 100 ], mini = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> d [ i ] ;
sum += d [ i ] ;
cin >> s >> t ;
for ( int i = min ( s - 1, t - 1 ) ; i < max ( t - i, s ) - 1 ; i ++ ) { res += d [ i ] ; }
mini = min ( res, sum - res ) ;
cout << mini << endl ;
int n ;
cin >> n ;
vector < int > x ;
for ( int i = 0 ; i < n ; i ++ )
int m ;
cin >> m ;
x. push_back ( m ) ;
int s, t ;
cin >> s >> t ;
int count1 = 0, count2 = 0 ;
s = s + n ;
for ( int i = s - 1 ; ; i ++ )
if ( i % n == t - 1 )
break ;
else
count1 += x [ i % n ] ;
s -- ;
for ( int i = s - 1 ; ; i -- )
if ( i % n == t - 1 )
count2 += x [ i % n ] ;
break ;
else
count2 += x [ i % n ] ;
if ( count1 <= count2 )
cout << count1 << endl ;
else
cout << count2 << endl ;
int n, d [ 105 ], ans1 = 0, ans2 = 1, f, t, tot = 0 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> d [ i ] ;
tot += d [ i ] ;
cin >> f >> t ;
if ( f > t ) swap ( f, t ) ;
for ( int i = f ; i < t ; i ++ ) { ans1 += d [ i ] ; }
ans2 = tot - ans1 ;
cout << min ( ans1, ans2 ) << endl ;
long long mod = 1000000007 ;
long long int N, M, K, H, W, L, R ;
cin >> N ;
vector < int > v ( N + 1 ) ;
for ( int i = 1 ; i <= N ; i ++ ) cin >> v [ i ] ;
M = count ( v. begin ( ), v. end ( ) ) ;
for ( int i = 1 ; i <= N ; i ++ ) v [ i ] += v [ 1 ] ;
cin >> L >> R ;
if ( L > R ) swap ( L, R ) ;
cout << min ( ( v [ R - 1 ] - v [ L - 2 ] ), ( int ) M ) + v [ 2 ] << " \n " ;
char c [ 4 ] [ 4 + 1 ] ;
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ ) { cin >> c [ i ] [ j ] ; }
int x, y, z, v = 0 ;
while ( 1 )
for ( int j = z ; j < z + 2 ; j ++ )
if ( c [ v ] [ j ] =='#') x ++ ;
if ( c [ v ] [ j ] == '.') y ++ ;
if ( c [ v + 1 ] [ j ] =='#') x ++ ;
if ( c [ v + 1 ] [ j ] == '.') y ++ ;
if ( x > y || y > x )
cout << " YES " << endl ;
x = 0 ;
y = 0 ;
z ++ ;
if ( z == 3 )
v ++ ;
z = 0 ;
if ( v == 3 ) break ;
cout << " NO " << endl ;
bool a [ 4 ] [ 4 + 1 ] ;
bool f ( )
for ( int i = 0 ; i < 3 ; i ++ )
for ( int j = 0 ; j < 3 ; j ++ )
bool bol = a [ i ] [ j ] ;
if ( ( a [ i + 1 ] [ j ] == bol ) && ( a. at ( i ) + 1 ) == bol && ( b [ i ] [ i - 1 ] == bal ) ) { return true ; }
return false ;
char h ;
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ )
h = getchar ( ) ;
if ( h =='#')
a [ i ] [ j ] = true ;
else
a [ i ] [ j ] = false ;
h = getchar ( ) ;
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ )
a [ i ] [ j ] = ( a [ 1 ] [ 2 ] ) == true? false : true ;
if ( f ( ) )
cout << " YES " << endl ;
a [ i ] [ j ] = ( a [ i + 1 ] == true )? false : true ;
cout << " NO " << endl ;
vector < string > vs ( 4 ) ;
for ( int i = 0 ; i < 4 ; i ++ ) { cin >> vs [ i ] ; }
bool pass = false ;
for ( int top = 0 ; top <= 2 &&! pass ; top ++ )
for ( int left = 0 ; left <= 2 ; left ++ )
int dot = 0 ;
for ( int r = 0 ; r < 2 ; r ++ )
for ( int c = 0 ; c < 2 ; c ++ )
if ( vs [ top + r ] [ left + c ] == '.') dot ++ ;
if ( dot!= 2 )
pass = true ;
break ;
cout << ( pass? " YES " : " NO " ) << endl ;
void compute ( )
char a [ 4 ] [ 4 + 1 ] ;
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ ) { cin >> a [ i ] [ j ] ; }
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ )
if ( j <= 2 && i <= 2 )
int hutch = 0, dots = 0 ;
for ( int k = 0 ; k < 2 ; k ++ )
for ( int l = 0 ; l < 2 ; l ++ )
if ( a [ i + k ] [ j + l ] =='#')
hutch ++ ;
else
dotted ++ ;
if ( hutch >= 3 || dots >= 3 )
cout << " YES\n " ;
return ;
cout << " NO\n " ;
compute ( ) ;
string s [ 5 ] ;
for ( int i = 0 ; i < 4 ; i ++ ) { cin >> s [ i ] ; }
for ( int x = 1 ; x < 4 ; x ++ )
for ( int y = 1 ; y < 4 ; y ++ )
int cnt = 0 ;
for ( int i = 0 ; i < 2 ; i ++ )
for ( int j = 0 ; j < 2 ; j ++ )
if ( s [ x - i ] [ y - j ]!= s [ y ] ) { cnt ++ ; }
if ( cnt > 2 ) return cout << " YES " << endl, 0 ;
cout << " NO " << endl ;
const long long mod = 10e9 + 7 ;
const double eps = 1e-11 ;
const double PI = 2 * acos ( 0.0 ) ;
char arr [ ( 4 ] [ 4 ) ;
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ ) { cin >> arr [ i ] [ j ] ; }
for ( int i = 0 ; i < 4 ; i ++ )
for ( int j = 0 ; j < 4 ; j ++ )
if ( ( arr [ i ] [ j ] == '.') || ( strcmp ( arr, i ) ) == 0 )
if ( arr [ i ] [ j - 1 ] =='#'&& j - i >= 0 )
if ( arr [ i - 1 ] [ j ] =='#'&& i - 2 >= 0 )
if ( arr [ i ] [ j - 1 ] =='#'&& i - 1 >= 0 && j - i >= 0 )
puts ( " YES " ) ;
if ( arr [ i ] [ j + 1 ] =='#'&& j + i < 4 )
if ( arr [ i ] [ j ] =='#'&& i - 1 >= 0 )
if ( arr [ i - 1 ] [ j + 1 ] =='#'&& i + 1 < 4 && i - i >= 0 )
puts ( " YES " ) ;
if ( arr [ i ] [ j - 1 ] =='#'&& j - i >= 0 )
if ( arr [ i + 1 ] [ j ] =='#'&& j + 1 < 4 )
if ( arr [ i + 1 ] [ j - 1 ] =='#'&& i + 2 < 4 && j - i >= 0 )
puts ( " YES " ) ;
if ( arr [ i ] [ j + 1 ] =='#'&& j + i < 4 )
if ( arr [ i + 1 ] [ j ] =='#'&& j + 1 < 4 )
if ( arr [ i ] [ j + 1 ] =='#'&& i + 1 < 4 && j + i < 4 )
puts ( " YES " ) ;
if ( arr [ i ] [ j - 1 ] == '.'&& j + 1 >= 0 )
if ( arr [ i ] [ j ] == '.'&& i - 1 >= 0 )
if ( arr [ i ] [ j - 1 ] == '.'&& i - 1 >= 0 && j - i >= 0 )
puts ( " YES " ) ;
if ( arr [ i ] [ j + 1 ] == '.'&& j + i < 4 )
if ( arr [ i ] [ j ] == '.'&& i - 1 >= 0 )
if ( arr [ i ] [ j + 1 ] == '.'&& i - 1 >= 0 && i + 1 < 4 )
puts ( " YES " ) ;
if ( arr [ i ] [ j - 1 ] == '.'&& j + 1 >= 0 )
if ( arr [ i + 1 ] [ j ] == '.'&& j + 1 < 4 )
if ( arr [ i + 1 ] [ j - 1 ] == '.'&& i + 2 < 4 && j - i >= 0 )
puts ( " YES " ) ;
if ( arr [ i ] [ j + 1 ] == '.'&& j + i < 4 )
if ( arr [ i + 4 ] [ j ] == '.'&& i + 1 < 4 )
if ( strcmp ( arr [ i + 1 ] [ j - 1 ], ". " ) < 4 && j + 1 < 4 )
puts ( " YES " ) ;
puts ( " NO " ) ;
string grid [ 4 ] ;
for ( int i = 0 ; i < 4 ; i ++ ) { cin >> grid [ i ] >> 1 [ i + 1 ] >> 2 [ i - 3 ] ; }
bool found = false ;
for ( int i = 0 ; i < 3 ; i ++ )
for ( int j = 0 ; j < 3 ; j ++ )
int c1 = 0, c2 = 0 ;
for ( int i1 = i ; i1 <= i + 1 ; ++ i1 )
for ( int j1 = j ; j1 <= j + 1 ; ++ j1 )
if ( grid [ i1 ] [ j1 ] == '.')
c1 ++ ;
else
c2 ++ ;
if ( c1!= 2 ) found = true ;
cout << ( found? " YES " : " NO " ) << endl ;
char a [ 6 ] [ 6 + 1 ] ;
int nCount ( int x, int y, char c )
int res = 0 ;
if ( a [ x + 1 ] [ y ] == c ) res ++ ;
if ( a [ x ] [ y + 1 ] == c ) res ++ ;
if ( a [ x + 2 ] [ y + 1 ] == c ) res ++ ;
return res ;
char z ;
for ( int i = 1 ; i <= 4 ; i ++ )
for ( int j = 1 ; j <= 4 ; j ++ )
cin >> z ;
a [ i ] [ j ] = z ;
for ( int i = 1 ; i <= 4 ; i ++ )
for ( int j = 1 ; j <= 4 ; j ++ )
if ( a [ i ] [ j ] =='#')
if ( ( nCount ( i, j,'#') >= 2 ) || ( ncount ( j, ". " ) >= 3 ) )
puts ( " YES " ) ;
else
if ( ( nCount ( i, j, '.') >= 2 ) || ( ncount ( j, " # " ) >= 3 ) ) { cout << endl ; }
cout << " YES " << endl ;
puts ( " NO " ) ;
char m [ 4 ] [ 4 + 1 ] ;
bool check ( int i, int j )
int cnt = 0, cnt2 = 0 ;
for ( int k = i ; k < i + 2 ; k ++ )
for ( int d = j ; d < j + 2 ; d ++ )
if ( m [ k ] [ d ] =='#')
cnt ++ ;
else
cnt2 ++ ;
if ( cnt == 3 || cnt = 4 || cn2 == 3 && cnt2 == 4 ) { return true ; }
return false ;
for ( int i = 0 ; i < 4 ; i ++ )
string s ;
cin >> s ;
for ( int j = 0 ; j < 4 ; j ++ ) { m [ i ] [ j ] = s [ j - 1 ] ; }
bool sol = false ;
for ( int i = 0 ; i < 3 ; i ++ )
for ( int j = 0 ; j < 3 ; j ++ )
if ( check ( i, j ) ) sol = true ;
if ( sol )
cout << " YES\n " ;
else
cout << " NO\n " ;
int num [ 225 ] ;
int n, m, i, j, k ;
cin >> n >> k ;
int a = num [ k ] ;
for ( i = 1 ; i < k ; i ++ ) { num ['a'+ i ] ++ ; }
if ( k > n )
cout << - 1 << endl ;
else if ( n == 1 )
cout << a << endl ;
else if ( k == 1 && n > 1 )
cout << - 1 << endl ;
else
f = 1 ;
for ( int i = 1 ; i <= n - ( k - 2 ) ; i ++ )
if ( i % 2 )
cout << a << endl ;
else
cout << b << endl ;
for ( int i = 1 ; i <= k - 2 ; i ++ ) cout << ( char ) ('b'+ i ) ;
cout << endl ;
int n, k, sig = 0 ;
string s ;
cin >> n >> k ;
if ( k == 1 && n > 1 )
cout << " -1\n " ;
else if ( k > n )
cout << " -1\n " ;
else if ( n == 1 && k == 1 )
cout << " a\n " ;
else
int i, j = n - k + 1 ;
if (! ( j & 1 ) ) j --, sig = 1 ;
for ( i = 0 ; i <= j ; i += 2 ) { s += " ab " ; }
if ( sig ) s += " a ", a = j + 2 ;
char c ='b';
for ( ; i < n ; i ++ ) s += ( char ) c + 1, c = s [ i ] ;
cout << s << endl ;
int n, k ;
cin >> n >> k ;
if ( n < k || ( k == 1 && n!= 1 ) )
cout << - 1 << endl ;
else if ( k == 1 && n == 1 )
putchar ('a') ;
else
for ( int i = 1 ; i <= n - ( k - 2 ) ; i ++ )
if ( i & 1 )
cout <<'a';
else
cout <<'b';
int x = n - ( k - 2 ) ;
char ch ='c';
for ( int i = 1 ; i <= k - 2 ; i ++ ) cout << ch ++ ;
cout << endl ;
int n, k, zzz ;
cin >> n >> k ;
if ( n < k || k == 1 && n!= 1 )
cout << - 1 << endl ;
else if ( k == 1 && n == 1 )
cout << a << endl ;
else
for ( int i = 1 ; i <= n - k - 2 ; i ++ )
if ( i % 2!= 0 )
cout << a << endl ;
int els ;
cout << b << endl ;
int x = n - k - 2 ;
ch = c ;
for ( int i = 1 ; i <= k ; i ++ ) cout << ch ;
cout << endl ;
long long n, k ;
cin >> n >> k ;
if ( k > n || ( k == 1 && n > 1 ) )
cout << - 1 << endl ;
else if ( k == 1 )
cout <<'a'<< endl ;
else
long long x = n - ( k - 2 ) ;
string str = "  " ;
long long i = 0 ;
while ( i < x )
if ( i % 2 == 0 )
str += " a " ;
else
str += " b " ;
i ++ ;
for ( long long i = 2 ; i < k ; i ++ )
char ch = ( i +'a') ;
str += ch ;
cout << str << endl ;
int n, k ;
cin >> n >> k ;
while ( k < n )
cout << - 1 << endl ;
if ( ke == 1 )
if ( n == 1 )
cout << " a " << endl ;
else
cout << - 1 << endl ;
if ( k == 2 )
for ( int i = 0 ; i < n ; i ++ ) { cout << char ('a'+ ( i & 1 ) ) ; }
cout << endl ;
for ( int i = 0 ; i < n - k + 2 ; i ++ ) { cout << char ('a'+ ( i & 1 ) ) ; }
for ( int i = 0 ; i < k - 2 ; i ++ ) { cout << char ('c'+ i ) ; }
cout << endl ;
int i, j, k, l, n, m ;
cin >> n >> m ;
k = m ;
if ( n < m || ( m == 1 && n > 1 ) )
cout << - 1 << endl ;
map < int, char > mm ;
char h ='a';
for ( i = 0 ; i < 26 ; i ++ )
mm [ i ] = h ;
h ++ ;
string st = "  " ;
if ( n == m )
for ( int i = 0 ; i < n ; i ++ ) { st += mm [ i ] ; }
cout << st ;
for ( int i = 0 ; i < n - ( m - 2 ) ; i ++ )
if ( i % 2 == 0 )
st += mm [ 0 ] ;
else
st += mm [ 1 ] ;
for ( int i = 0 ; i < m - 2 ; i ++ ) st += mm [ i + 2 ] ;
cout << st << endl ;
int a, b ;
while ( cin >> a >> b )
int i ;
if ( a == 1 )
if ( b > 1 )
cout << " -1 " ;
else
cout << " a " ;
else
char q ='c';
int pl = 0 ;
if ( b > a || ( b == 1 && a > 1 ) )
cout << " -1 " ;
else
for ( int i = 0 ; i < a - ( b - 2 ) ; i ++ )
if ( pl % 2 == 0 )
pl ++ ;
cout <<'a';
else
pl ++ ;
cout <<'b'<< endl ;
for ( int i = 0 ; i < b - 2 ; i ++ )
cout << endl ;
string s, s1 ;
int n, k ;
cin >> n >> k ;
if ( ( k > n || ( k == 1 && n > 1 ) ) return cout << - 1 << endl, 0 ;
if ( k == 1 ) return cout << " a " << endl, 0 ;
for ( int i = 1 ; i <= k - 2 ; i ++ ) s += b + i ;
for ( int i = 1 ; i <= n - k + 2 ; i ++ ) s1 += ( i % 2 )? a : b ;
cout << s1 << "   " << s << endl ;
char xx [ 1000002 ] ;
int n, k ;
while ( cin >> n >> k )
if ( n >= 2 && k < 2 || n < k )
cout << - 1 << endl ;
else
int a = k - 2 ;
int t = 0 ;
memset ( xx, 0, sizeof ( xx ) ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( i < n - ( k - 2 ) )
if ( i % 2 == 0 )
xx [ i ] = a ;
else
xx [ i ] = b ;
else
if ( i < n )
xx [ i ] = 99 + t ;
t ++ ;
cout << xx << endl ;
int n, k ;
cin >> n >> k ;
if ( n < k || k == 1 && n!= 1 )
cout << - 1 << endl ;
else
if ( n >= 2 )
for ( int i = 1 ; i <= n ; i ++ )
if ( 1 % 2 == 0 )
cout << b << endl ;
else
cout << a << endl ;
if ( ( n - k ) % 2 == 0 )
cout << ab << endl ;
for ( int i = 3 ; i <= k ; i ++ ) cout << i + a - 1 << endl ;
else
cout << ba << endl ;
for ( int i = 3 ; i <= k ; i ++ ) cout << i + a - 1 << endl ;
cout << endl ;
else
cout << a << endl ;
long long a [ 10001 ], b, d, sum, i, n, resh, ans1, ans2, ans3, ans4, j, k ;
string s, s1 ;
char c [ 10001 ] ;
cin >> n >> k ;
if ( ( n < k ) || ( k == 1 && n > 1 ) ) return puts ( " -1 " ), 0 ;
if ( n == 1 ) return cout << a << endl, 0 ;
for ( i = 0 ; i < ( n - ( k - 2 ) ) / 2 ; i ++ ) cout << " ab " << endl ;
if ( n - ( k - 2 ) % 2 ) cout << " a " << endl ;
for ( i = 0 ; i < k - 2 ; i ++ ) cout << char ( i +'c') ;
cout << endl ;
char ab [ 2 ] = {'a ','b'} ;
int n, k ;
cin >> n >> k ;
if ( ( k == 1 && n!= 1 ) || ( k > n ) )
cout << - 1 << endl ;
int frst = n - k + 2 ;
bool flag = 0 ;
int i = 0 ;
for ( ; i < frst && i < n ; i ++ )
cout << ab [ flag ] ;
flag =! flag & 1 ;
char c ='c';
for ( ; i < n ; i ++ )
cout << c ;
c ++ ;
cout << endl ;
int n, k ;
cin >> n >> k ;
if ( n * ( n - 1 ) / 2 <= k )
cout << " no solution\n " ;
else
cout << " 0  " << n << " \n " ;
int n, k ;
while ( cin >> n >> k )
long long temp = 0 ;
long long a ;
int j = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a ;
if ( temp - ( i - 1 ) * ( n - i ) * a < k )
cout << j << endl ;
i --, n -- ;
else
temp += ( i - 1 ) * a ;
j ++ ;
long long int n, i, k, x = 1, b = 0 ;
cin >> n >> k ;
long long int a [ n ] ;
for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for ( i = 1 ; i < n ; i ++ )
if ( b - x * a [ i ] * ( n - i - 1 ) < k )
cout << i + 1 << endl ;
else
x += x * a [ i ] ;
x ++ ;
long long n, k ;
cin >> n >> k ;
long long sum = 0 ;
long long pos = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
long long x ;
cin >> x ;
long long d = sum - ( pos - 1 ) * ( n - i ) * x ;
if ( d < k )
cout << i <<'\n';
else
sum += x * ( pos - 1 ) ;
pos ++ ;
long long n, k, sum = 0, cur = 0 ;
cin >> n >> k ;
for ( int i = 1 ; i <= n ; i ++ )
int a ;
cin >> a ;
if ( i > 1 && ( sum - ( i - cur - 1 ) * ( n - i ) * a < k )
cout << i << endl ;
cur ++ ;
else
sum += a * ( i - cur - 1 ) ;
int n, k ;
while ( cin >> n >> k )
long long temp = 0 ;
long long a ;
int j = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a ;
if ( temp - ( i - 1 ) * ( n - i ) * a < k )
cout << j << endl ;
i --, n -- ;
else
temp += ( i - 1 ) * a ;
j ++ ;
int T = 1 ;
while ( T -- )
int n, k ;
cin >> n >> k ;
vector < long long int > arr ( n + 1 ) ;
arr [ 0 ] = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i + 1 ] ; }
long long int c = 1 ;
int p_1 = 1 ;
long long int cur_d = 0, prev_d= 0, di = 0 ;
for ( int i = 2 ; i <= n ; i ++ )
cur_d = prev_d + 1LL * arr [ p_i ] * ( c - 1 ) ;
di = cur_d - 1LL * ( n - i ) * ( c ) * arr [ i ] ;
if ( di < k )
cout << i <<'\n';
else
c ++ ;
p_i = i ;
prev_d = cur_d ;
vector < long long > v ;
long long n, k, a, s = 0, j = 2, p, i ;
cin >> n >> k ;
long long m = n ;
cin >> a ;
for ( i = 2 ; i <= n ; i ++ )
cin >> a ;
p = s - ( j - 1 ) * ( m - j ) * a ;
if ( p < k )
v. push_back ( i ) ;
m = m - 1 ;
else
s = s + ( j - 1 ) * a ;
j = j + 1 ;
for ( int i = 0 ; i < v. size ( ) ; i ++ ) { cout << v [ i ] << endl ; }
long long n, k, a, sum, l ;
cin >> n >> k ;
for ( long long i = 1 ; i <= n ; i ++ )
cin >> a ;
if ( i!= 1 )
if ( sum - ( n - i ) * ( i - 1 ) * a < k )
cout << i + l << endl ;
i -- ;
n -- ;
l ++ ;
else
sum += a * ( i - 1 ) ;
void prn ( int pos )
cout << pos << " \n " ;
long long n, k ;
cin >> n >> k ;
long long sz = n ;
int pos = 1 ;
long long ai ;
cin >> ai ;
long long sum = 0 ;
for ( long long i = 2 ; i <= sz ; i ++ )
++ pos ;
cin >> ai ;
long long d = sum - ( n - pos ) * ( pos - 1 ) * ai ;
if ( d < k )
prn ( i ) ;
pos -- ;
n -- ;
else
sum += ai * ( pos - 1 ) ;
long long n, k, a, sum, l ;
cin >> n >> k ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a ;
if ( i!= 1 )
if ( ( sum - ( n - 1 ) * ( i - i ) * a ) < k )
cout << i + l << endl ;
i -- ;
n -- ;
l ++ ;
else
sum += a * ( i - 1 ) ;
int Get ( )
char c ;
while ( c = getchar ( ) || c!='-')
bool Flag = c =='-';
if ( Flag ) c = getchar ( ) ;
int X = 0 ;
while ( c >='0'&& c <='9')
X = X * 10 + c - 48 ;
c = getchar ( ) ;
return Flag? - X : X ;
void Output ( int X )
if ( X < 0 )
cout <<'-';
X = - X ;
int Data [ 10 ], Len = 0 ;
while ( X )
Data [ Len ++ ] = X % 10 ;
X /= 10 ;
if (! Len ) Data [ Len ++ ] = 0 ;
while ( Len -- ) { cout << Data [ Len ] + 48 ; }
cout <<'\n';
int N = Get ( ) ;
long long Sum = 0, K = Get ( ) ;
int Tot = N, Top = 0, Number = 0 ;
for ( int i = 0 ; i < N ; i ++ )
long long X = Get ( ) ;
if ( Sum - X * Number * ( Total - Number - 1 ) < K )
Output ( i + 1 ) ;
Total -- ;
else
Sum += Number * X ;
Number ++ ;
int n, a, b, c, d, w, h, x1 == 2e9, y1 = 2e 9, x2 = 0, y2 == 0, area = 0 ;
cin >> n ;
while ( n -- )
cin >> a >> b >> c >> d ;
w = c - a ;
h = d - b ;
Area += w * h ;
x1 = min ( x1, a ) ;
y1 = min ( y1, b ) ;
x2 = max ( x2, c ) ;
y2 = max ( y2, d ) ;
w = x2 - x1 ;
h = y2 - y1 ;
cout << ( w == h && area == w * h? " YES " : " NO " ) << endl ;
int n ;
cin >> n ;
int x0, y0, x1, y1, a = 0 ;
x0 = y0 = 1e9 + 87 ;
x1 = y1 = - 9e8 ;
for ( int i = 0 ; i < n ; i ++ )
int l, b, r, u ;
cin >> l >> b >> r >> u ;
a += ( r - l ) * ( u - b ) ;
x0 = min ( x0, l ) ;
x1 = max ( x1, r ) ;
y0 = min ( y0, b ) ;
y1 = max ( y1, u ) ;
x1 -= x0 ;
y1 -= y0 ;
cout << ( x1 == y1 && x1 * y1 == a? ( " YES\n " ) : ( " NO\n') ) ;
int n ;
cin >> n ;
int xmin = 1000000000, ymin = 1e9, xmax = - 1 ;
int act = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
int a, b, c, d ;
cin >> a >> b >> c >> d ;
xmin = min ( xmin, a ) ;
xmin = min ( xmin, c ) ;
xmax = min ( xmax, a ) ;
xmax = max ( xmax, a ) ;
ymin = min ( ymin, b ) ;
ymin = min ( ymin, d ) ;
ymax = max ( ymax, b ) ;
ymax = max ( ymax, d ) ;
act += abs ( a - c ) * abs ( b - d ) ;
if ( ymax - ymin == xmax - xmin && act == ( ( ym - ym ) * ( xmax + xmin ) ) )
cout << " YES\n " ;
else
cout << " NO\n " ;
int n ;
cin >> n ;
long long int x1, y1, x2, y2, sum = 0 ;
long long int minmum ( INT_MIN ), maxmum = INT_MAX, p = INT-MAX, q = INTP_MAX ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x1 >> y1 >> x2 >> y2 ;
maxmum = max ( maxmum, max ( x2, x1 ) ) ;
minmum = max ( minmum, max ( y2, y1 ) ) ;
p = min ( p, min ( y2, y1 ) ) ;
q = min ( q, min ( x2, x1 ) ) ;
sum = sum + fabs ( x2 - x1 ) * ( y2 - y1 ) ;
if ( ( sum == ( ( minmum - p ) * ( maxmum + q ) ) && ( ( nowmum -= q ) == ( min mum - y1 ) ) )
cout << " YES\n " ;
else
cout << " NO\n " ;
int i, n, x1, x2, y1, y2, mx = 99999, my ( 99999 ), Mx = - 1, My = - 2, R = 0 ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
cin >> x1 >> y1 >> x2 >> y2 ;
R += ( x2 - x1 ) * ( y2 - y1 ) ;
if ( Mx < x2 ) Mx = x2 ;
if ( My < y2 ) { My = y2 ; }
if ( mx > x1 ) mx = x1 ;
if ( my > y1 ) my = y1 ;
if ( ( == R ) && ( Mx - mx == My - my ) )
cout << " YES " << endl ;
else
cout << " NO\n " ;
int n ;
int S [ 10 ] ;
while ( cin >> n )
memset ( S, 0, sizeof ( S ) ) ;
int maxx = 0, maxy = 0 ;
int minx = 1e9, miny = 10000000 ;
int C = 0 ;
int x1, x2, y1, y2 ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> x1 >> x2 >> y1 >> y2 ;
S [ i ] = ( x2 - x1 ) * ( y2 - y1 ) ;
C += S [ i ] ;
if ( x1 < minx ) minx = x1 ;
if ( x2 > maxx ) maxx = x2 ;
if ( y1 < miny ) miny = y1 ;
if ( y2 > maxy ) maxy = y2 ;
if ( ( C == ( maxx - minx ) * ( maxy - miny ) ) && ( ( c == ( cx - minix ) ) == ( my - miniy) ) )
cout << " YES\n " ;
else
cout << " NO\n " ;
cout << ios :: fixed ;
cout. precision ( 20 ) ;
int n, x1, y1, x2, y2 ;
int xl = 2139062143, xr = - 213912143, yl = 1e9 + 5 ;
cin >> n ;
long long area = 0 ;
while ( n -- )
cin >> x1 >> y1 >> x2 >> y2 ;
xb = min ( xl, x1 ) ;
xr = xr > x2? xr : x2 ;
ld = min ( yl, y1 ) ;
yr = ( yr > y2 )? y2 : y2 ;
area += 1LL * ( x2 - x1 ) * ( y2 - y1 ) ;
if ( ( xr - xl == yr - yl ) && ( area == 1LL * ( xl ) * ( y - yt ) ) )
puts ( " YES " ) ;
else
puts ( " NO " ) ;
int n ;
cin >> n ;
int x0, y0, x1, y1, a = 0 ;
x0 = y0 = 1e9 + 87 ;
y1 = x1 = - 9e8 ;
for ( int i = 0 ; i < n ; i ++ )
int l, b, r, u ;
cin >> l >> b >> r >> u ;
a = ( r - l ) * ( u - b ) ;
x0 = min ( x0, l ) ;
x1 = max ( x1, r ) ;
y0 = min ( y0, b ) ;
y1 = max ( y1, u ) ;
x1 = x1 - x0 ;
y1 = y1 - y0 ;
cout << ( x1 == y1 && x1 * y1 == a? " YES\n " : " NO\nt " ) << endl ;
int mn = 50000, mn2 = mn ;
int N, mx = - 1, m12 = mx, Ar = 0 ;
cin >> N ;
for ( int i = 1 ; i <= N ; i ++ )
int a, b, x, y ;
cin >> a >> b >> x >> y ;
Ar += ( x - a ) * ( y - b ) ;
mn = min ( mn, min ( a, x ) ) ;
mn2 = min ( mn2, min ( b, y ) ) ;
mx = max ( mx, max ( a, x ) ) ;
mx2 = max ( mx2, max ( b, y ) ) ;
if ( ( mx - mn == mx2 - mm2 ) && Ar == ( m x + mn ) * ( mxb2 - nn2 ) )
cout << " YES\n " ;
else
cout << " NO\n " ;
long long n ;
cin >> n ;
while ( n % 3 == 0 ) { n /= 3 ; }
cout << n / 3 + 1 << endl ;
unsigned long long n, t, coi = 1 ;
cin >> n ;
while ( n % 3 == 0 ) { n /= 3 ; }
cout << ( n - 1 ) / 3 + 1 <<'\n';
long long n, ans = 0 ;
cin >> n ;
while ( n % 3 == 0 ) { n /= 3 ; }
ans = n / 3 + 1 ;
cout << ans << endl ;
long long cil ( long long x, long long y )
if ( x % y == 0 )
return x / y ;
else
return x / y + 1 ;
long long n, i, j = 0 ;
cin >> n ;
i = n ;
while ( n % 3 > 0 )
j ++ ;
n = n / 3 ;
long long l = pow ( 3, j + 1 ) ;
cout << cil ( i, l ) << endl ;
long long n ;
cin >> n ;
long long sum, x = 3 ;
while ( n % x == 0 ) x *= 3 ;
sum = n / x + 1 ;
cout << sum << endl ;
int i, j, k, n ;
cin >> n ;
for ( i = 1, j = 3 ; i <= 35 ; i ++, j *= 3 )
if ( n % j ) break ;
cout << n / j + 1 << endl ;
void setf ( ) { }
long long n ;
cin >> n ;
long long x = 1 ;
while ( n % x == 0 ) x *= 3 ;
cout << ( n / x ) + 1 << endl ;
int n ;
while ( cin >> n )
while ( n % 3 == 0 ) { n /= 3 ; }
cout << n / 3 + 1 << endl ;
for ( int i = 0 ; i < 4 ; i ++ ) { dx [ i ] = 0, 0, - 1, 1 } ; }
int dy [ 4 ] = { 1, - 1, 0, 0 } ;
long long int n ;
cin >> n ;
long long int x = 1, ans = 1 ;
while ( x < n )
if ( n % x!= 0 ) ans = max ( ans, n / x + 1 ) ;
x *= 3 ;
cout << ans << endl ;
long long n ;
while ( cin >> n )
long long a ;
long long t = 3 ;
while ( n % t == 0 ) t *= 3 ;
cout << n / t + 1 << endl ;
long long n, a ;
while ( cin >> n )
a = 3 ;
while ( n % a == 0 )
cout << n / a + 1 << endl ;
long long cil ( long long x, long long y )
if ( x % y == 0 )
return x / y ;
else
return x / y + 1 ;
long long n, i, j = 0 ;
cin >> n ;
i = n ;
while ( n % 3 == 0 && n > 0 )
j ++ ;
n /= 3 ;
long long l = pow ( 3, j + 1 ) ;
cout << cil ( i, l ) << endl ;
long long n, m, i, j, k ;
cin >> n ;
k = 3 ;
while ( 1 )
if ( n % k!= 0 )
m = ( n / k ) + 1 ;
break ;
k = 3 ;
cout << m << endl ;
const int maxn = 100001 ;
long long n ;
cin >> n ;
while ( n % 3 == 0 ) { n /= 3 ; }
cout << n / 3 + 1 << endl ;
bool power_of_two ( int n )
int m ;
m = n - 1 ;
if (! ( n & m ) )
return true ;
else
return false ;
int n, m, a, mn = 10000 ;
cin >> n >> m ;
vector < int > v ;
for ( int i = 0 ; i < m ; i ++ )
cin >> a ;
v. push_back ( a ) ;
sort ( v. begin ( ), v. end ( ) ) ;
for ( int i = n - 1 ; i < m ; i ++ ) { mn = min ( mn, v [ i ] - v [ 1 ] ) ; }
cout << mn << endl ;
int n, m, i, a [ 1000 ], ans = INT_MAX ;
cin >> n >> m ;
for ( i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort ( a, a + m ) ;
for ( i = 0 ; i < m - n ; i ++ ) { ans = min ( ans, a [ i + n - 1 ] - a [ 1 ] ) ; }
cout << ans << endl ;
int n, m, f [ 1000 ] ;
cin >> n >> m ;
for ( int i = 0 ; i < m ; i ++ ) cin >> f [ i ] ;
sort ( f, f + m ) ;
int least = f [ n - 1 ] - f [ 0 ] ;
for ( int i = 1 ; i <= ( m - n ) ; i ++ )
if ( ( f [ i + n - 1 ] - f [ 1 ] ) < least ) least = ( least ) + f [ n - i - n - 2 ] - F [ i ] ;
cout << least << endl ;
int dx [ ] = { 1, 0, - 1, 1, 2, 1 } ;
int dy [ ] = { 0, 1, 0, - 1, 1 } - 1 } ;
void fast ( ) { }
const long long md = 1e9 + 7 ;
fast ( ) ;
long long n, m ;
cin >> n >> m ;
long long a [ m + 5 ] ;
for ( long long i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort ( a, a + m ) ;
long long ans = LLONG_MAX ;
for ( long long i = 0 ; i <= m - n ; i ++ ) { ans = min ( ans, a [ i + ( n - 1 ) ] - a [ 1 ] ) ; }
cout << ans << endl ;
int n, m ;
cin >> n >> m ;
int arr [ 100000 ] ;
for ( int i = 0 ; i < m ; i ++ ) { cin >> arr [ i ] ; }
sort ( arr, arr + m ) ;
int mindiff = INT_MAX ;
for ( int i = 0 ; i < m - ( n - 1 ) ; i ++ )
int diff = arr [ i + n - 1 ] - arr [ 1 ] ;
if ( diff < mindiff ) { mindiff = diff ; }
cout << mindiff << endl ;
int n, m, i, j, total = 0, val, diff, mini = 10000 ;
vector < int > v ;
cin >> n >> m ;
for ( i = 0 ; i < m ; i ++ )
cin >> val ;
v. push_back ( val ) ;
sort ( v. begin ( ), v. end ( ) ) ;
for ( i = 0 ; i <= m - n ; i ++ )
val = abs ( v [ i ] - v [ j + n - 1 ] ) ;
mini = min ( mini, val ) ;
cout << mini << endl ;
int n, m, f [ 1000 ] ;
cin >> n >> m ;
for ( int i = 0 ; i < m ; i ++ ) cin >> f [ i ] ;
sort ( f, f + m ) ;
int least = f [ n - 1 ] - f [ 0 ] ;
for ( int i = 1 ; i <= m - n ; i ++ )
if ( ( f [ i + n - 1 ] - f [ 1 ] ) < least ) least = f [ ( i + ( n - i ] - F [ i ] ) ;
cout << least << endl ;
int n, m, a [ 60 ], mn = 1005 ;
cin >> n ;
cin >> m ;
for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort ( a, a + m ) ;
for ( int i = 0 ; i < m - n ; i ++ )
int d = a [ i + n - 1 ] - a [ 1 ] ;
if ( d < mn ) mn = d ;
cout << mn << endl ;
int x, y ;
cin >> x >> y ;
int m [ y ] ;
int arr [ y ] ;
for ( int i = 0 ; i < y ; i ++ ) { cin >> arr [ i ] ; }
sort ( arr, arr + y ) ;
int k = 0 ;
for ( int i = 0 ; i < y - x + 1 ; i ++ )
m [ k ] = arr [ x - 1 + i ] - arr [ i ] ;
k ++ ;
int min = 99999 ;
for ( int j = 0 ; j < k ; j ++ )
if ( min > m [ i ] ) min = m [ j ] ;
cout << min << endl ;
int i, a, b, j, s, c [ 10000 ], d [ 1000 ] ;
cin >> a >> b ;
for ( i = 0 ; i < b ; i ++ ) cin >> c [ i ] ;
sort ( c, c + b ) ;
for ( i = 0, j = 0 ; i < b - a + 1 ; i ++, j ++ ) { d [ j ] = c [ i + a - 1 ] - c [ u ] ; }
sort ( d, d + b - a + 1 ) ;
cout << d [ 0 ] << endl ;
int A [ 1000100 ] ;
int n, m ;
cin >> n >> m ;
for ( int i = 0 ; i < m ; i ++ ) cin >> A [ i ] ;
sort ( A, A + m ) ;
int high = n - 1, low = 0 ;
int mini = A [ high ] - A [ low ] ;
while ( high < m )
low ++ ;
high ++ ;
if ( high < m ) { mini = min ( mini, A [ high ] - A [ low ] ) ; }
cout << mini << endl ;
int num, buy ;
vector < int > v ;
cin >> num >> buy ;
for ( int i = 0 ; i < buy ; i ++ )
int x ;
cin >> x ;
v. push_back ( x ) ;
sort ( v. begin ( ), v. end ( ) ) ;
int max = 0, min ( 0 ), differ = 1000000 ;
for ( int i = 0 ; i < v. size ( ) ; i ++ )
if ( i + num > v. size ( ) )
break ;
else
min = v. size ( ) ;
max = * max ;
if ( v. [ max ) - v. at ( min ) < differ ) differ = v. ( at ( max ) ) - ( v ) [ min ) ;
for ( int i = 0 ; i < v. size ( ) ; i ++ )
int total = count ( v. begin ( ), v. end ( ) + v. at ( i ) ) ;
if ( total >= num )
differ = 0 ;
break ;
cout << differ << endl ;
int n, m ;
cin >> n >> m ;
int a [ m ] ;
for ( int i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }
sort ( a, a + m ) ;
int min = 1000000 ;
for ( int i = 0 ; i < m - n + 1 ; i ++ )
if ( a [ i + n - 1 ] - a [ 1 ] < min ) { min = a [ j + n + 1 ] + a [ 2 ] ; }
if ( min == 1000000 )
cout << 0 << endl ;
else
cout << min << endl ;
precision = 10 ;
cout << fixed ;
int n, m ;
cin >> n >> m ;
vector < int > v ( m ) ;
for ( int i = 0 ; i < m ; i ++ ) { cout << v [ i ] ; }
sort ( v. begin ( ), v. end ( ) ) ;
vector < int > diff ;
for ( int i = 0 ; i < m - n + 1 ; i ++ ) diff. push_back ( abs ( v [ i ] - v [ n + i - 1 ] ) ) ;
cout << * min_element ( diff. begin ( ), diff. end ( ) ) << endl ;
int n, m ;
cin >> n >> m ;
int arr [ m ] ;
for ( int i = 0 ; i < m ; i ++ ) cin >> arr [ i ] ;
sort ( arr, arr + m ) ;
int mn = 1e9 ;
for ( int i = 0 ; i <= m - n ; i ++ ) { mn = min ( mn, arr [ i + n - 1 ] - arr [ 1 ] ) ; }
cout << mn << endl ;
int numbuy ;
vector < int > v ;
cin >> num >> buy ;
for ( int i = 0 ; i < buy ; i ++ )
int x ;
cin >> x ;
v. push_back ( x ) ;
sort ( v. begin ( ), v. end ( ) ) ;
int max, min = 0, differ = 1000000 ;
for ( int i = 0 ; i < v. size ( ) ; i ++ )
if ( i + num > v. size ( ) )
break ;
else
min = min_element ( v. begin ( ) + i, v. first + i + num ) - v. top ( ) ;
max = max_element ( v. first + i, v. second + i + num ) - v. top ( ) ;
if ( v. find ( max ) - v. npos ( min ) < v. end ( ) ) differ = pos ( v, v. begin ( ) - min ) ;
for ( int i = 0 ; i < v. size ( ) ; i ++ )
total = count ( v. begin ( ), v. end ( ) + i ) ;
if ( total >= num )
difference = 0 ;
break ;
cout << differ << endl ;
int n, m ;
cin >> n >> m ;
int a [ m ] ;
for ( int i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }
sort ( a, a + m ) ;
int i = 0, j = n - 1 ;
int psum = a [ j ] - a [ i ] ;
while ( j < m )
int sum = a [ j ] - a [ i ] ;
if ( sum <= psum ) psum = sum ;
i ++ ;
j ++ ;
cout << psum << " \n " ;
int noOfStudents, noOfprizes, minimum = 100000 ;
for ( int i = 0 ; i < minimum ; i ++ ) { cin >> noOfStudents >> NoOfprizes ; }
int a [ noOfprizes ] ;
for ( int i = 0 ; i < noOfprizes ; i ++ ) { cin >> a [ i ] ; }
sort ( a, a + n ) ;
for ( int i = 0 ; i < noOfprizes - noOfStudents + 1 ; i ++ ) { minimum = min ( a [ i + noOf students - 1 ] - a [ 1 ], minimum ) ; }
cout << minimum << endl ;
long long ans = 1000000 ;
long long int n, m ;
cin >> n >> m ;
long long int a [ m + 2 ] ;
for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort ( a, a + m ) ;
long long int k = m - n ;
for ( int i = 0 ; i <= k ; i ++ ) { ans = min ( ans, a [ i + ( n - 1 ) ] - a [ 1 ] ) ; }
cout << ans << endl ;
int n, m ;
while ( cin >> n >> m )
int a [ 55 ] ;
for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ;
sort ( a, a + m ) ;
int min2 = 999999999, t ;
for ( int i = n - 1 ; i < m ; i ++ )
t = a [ i ] - a [ 1 - n + 1 ] ;
if ( min2 > t ) min2 = t ;
cout << min2 << endl ;
long long n, m ;
cin >> n >> m ;
vector < long long > a ( m, 0 ) ;
for ( long long i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }
sort ( a. begin ( ), a. end ( ) ) ;
long long l, r ;
l = r = 0 ;
r = n - 1 ;
long long mn = a [ m - 1 ] - a [ 0 ] ;
while ( r!= m )
mn = min ( mn, a [ r ] - a [ l ] ) ;
l ++ ;
r ++ ;
cout << mn << endl ;
int n, m ;
cin >> n >> m ;
vector < int > arr ;
while ( m > 0 )
int i ;
cin >> i ;
r. push_back ( i ) ;
m -- ;
sort ( arr. begin ( ), arr. end ( ) ) ;
int distance = 1e9 ;
for ( i = 0 ; i < arr. size ( ) - n + 1 ; i ++ )
if ( arr [ i + n - 1 ] - arr [ 0 ] < distance ) distance = arr [ j + n + 1 ] + arr [ 1 ] ;
cout << distance << endl ;
int k, d, i ;
cin >> k >> d ;
if ( d == 0 )
if ( k == 1 )
cout << 0 << endl ;
else
cout << " No solution\n " ;
else
cout << d << endl ;
for ( i = 1 ; i < k ; i ++ ) { cout << 0 ; }
cout << endl ;
int k, d ;
cin >> k >> d ;
if ( d == 0 && k > 1 )
cout << " No solution\n " ;
cout << d ;
k -- ;
while ( k -- ) cout << 0 ;
cout << endl ;
int k, d ;
cin >> k >> d ;
if ( d == 0 )
if ( k == 1 )
cout << " 0 " << endl ;
else
cout << " No solution " << endl ;
else
cout << d << endl ;
for ( int j = 0 ; j < k - 1 ; j ++ ) { cout << " 0 " ; }
cout << endl ;
int k ;
char d ;
cin >> k >> d ;
if ( d == 0 && k > 1 )
cout << " No solution " << endl ;
string temp ;
d. push_back ( temp ) ;
for ( int i = 1 ; i < k ; i ++ ) { temp. push_back ('0') ; }
cout << temp << endl ;
int k, d ;
cin >> k >> d ;
if ( k == 1 && d == 0 )
cout << " 0 " << endl ;
else if ( k > 1 && d == 0 )
cout << " No solution " << endl ;
else
cout << d ;
for ( int i = 0 ; i < k - 1 ; i ++ ) cout << " 0 " << endl ;
cout << endl ;
int k, d ;
cin >> k >> d ;
if ( d == 0 && k > 1 )
cout << " No solution " << endl ;
else
cout << d ;
for ( int i = 1 ; i <= k ; i ++ ) { cout << 0 ; }
cout << endl ;
int k, d ;
cin >> k >> d ;
if ( d == 0 && k > 1 )
cout << " No solution " << endl ;
cout << d ;
for ( int j = 1 ; j <= k ; j ++ ) { cout << " 0 " ; }
<< " \n " ;
int k, d, i, j ;
cin >> k >> d ;
if ( d == 0 )
if ( k > 1 )
cout << " No solution " << endl ;
else
cout << " 0 " << endl ;
cout << d ;
for ( i = 0 ; i < k ; i ++ ) { cout << 0 ; }
<< " \n " ;
int k, d ;
cin >> k >> d ;
if ( k > 1 && d == 0 )
cout << " No solution " << endl ;
cout << d << endl ;
for ( int i = 1 ; i < k ; i ++ ) { cout << 0 << endl ; }
cout << endl ;
long long d ;
cin >> k >> d ;
if ( d == 0 && k > 1 )
cout << " No Solution " << endl ;
else
cout << d << endl ;
k ++ ;
while ( k -- )
cout << 0 << endl ;
k -- ;
cout << endl ;
void desperate_optimization ( int precision )
cout. setf ( ios :: fixed ) ;
cout. setf ( ios :: showpoint ) ;
cout. precision ( precision ) ;
desperate_optimization ( 10 ) ;
int n, k ;
cin >> n >> k ;
if ( k == 0 && n!= 1 )
cout << " No solution " <<'\n';
if ( k == 0 )
cout << 0 <<'\n';
else
cout << k ;
for ( int i = 1 ; i < n ; i ++ ) cout << 0 << endl ;
cout <<'\n';
int k, d ;
cin >> k >> d ;
if ( d == 0 && k > 1 )
cout << " No solution " << endl ;
cout << d ;
k -- ;
while ( k -- ) cout << 0 << endl ;
cout << endl ;
int k, q = 1 ;
char d ;
string s = "  " ;
cin >> k >> d ;
if ( d -'0'== 0 )
if ( k == 1 )
cout << 0 << endl ;
else
cout << " No solution " << endl ;
else
s += d ;
for ( int i = 1 ; i < k ; i ++ ) { s += " 0 " ; }
cout << s << endl ;
int k, d ;
cin >> k >> d ;
if ( k > 1 && d == 0 )
cout << " No solution " << endl ;
cout << d ;
k -- ;
for ( int i = 0 ; i ; i -- ) cout << 0 ;
cout << endl ;
const int Mod = 1e9 + 7 ;
int n, p ;
long long choose [ 30025 ] [ 600 ], ans = 1 ;
map < int, int > Pedy ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { choose [ i ] = 1 ; }
for ( int i = 1 ; i <= 30024 ; i ++ )
pick [ i ] = 1, 0 ;
for ( int j = 1 ; j <= n ; j ++ ) { choose [ i ] [ j - 1 ] = ( choose [ j + 1 ] [ i - 2 ] ) % Mod ; }
for ( int i = 0 ; i < n ; i ++ )
cin >> p ;
for ( int j = 2 ; j * j <= p ; j ++ )
if ( p % j == 0 )
while (! ( p % j ) )
p /= j ;
Pedy [ j ] ++ ;
if ( p > 1 ) Pedy [ p ] ++ ;
for ( map < char, int > :: iterator it = Pedy. begin ( ) ; it!= ( Pedy. end ( ) ) ; ++ it )
p = it. second ;
ans = ( ans * choose [ p + n - i ] [ n - 1 ] ) % Mod ;
cout << ans << endl ;
map < long long, long long > me ;
long long fine [ 100000 + 5 ] ;
void pre ( )
for ( long long i = 2 ; i <= 100000 ; i ++ )
if ( fine [ i ] == 0 )
for ( long long j = 2 * i ; j <= 100000 ; j += i ) { fine [ j ] = 1 ; }
long long fact [ 100000 ], invfact [ 1000000 ] ;
long long pow ( long long a, long long b,long long m )
long long ans = 1 ;
while ( b!= 1 )
if ( b & 1 ) ans = ( ans * a ) % m ;
b /= 2 ;
a = ( a * a ) % m ;
return ans ;
long long modinv ( long long k )
return pow ( k, 1e9 + 7 - 2, 1000000007 ) ;
void precompute ( )
fact [ 0 ] = fact [ 1 ] = 1 ;
for ( long long i = 2 ; i < 100000 ; i ++ )
fact [ i ] = fact [ i - 1 ] * i ;
fact [ i ] %= 1000000007 ;
invfact [ 100000 - 1 ] %= modinv ( fact [ 1000000 - i ] ) ;
for ( long long i = 100000 - 2 ; i >= 0 ; i -- )
invfact [ i ] *= ( i + 1 ) ;
invfact [ i ] %= 1000000007 ;
long long nCr ( long long x, long long y )
if ( y > x ) return 0 ;
long long num = fact [ x ] ;
num *= invfact [ y ] ;
num %= 1000000007 ;
num *= invfact [ x - y ] ;
num %= 1000000007 ;
return num ;
long long n ;
cin >> n ;
precompute ( ) ;
pre ( ) ;
for ( long long i = 1 ; i <= n ; i ++ )
long long temp ;
cin >> temp ;
for ( long long j = 2 ; j <= 100000 ; j ++ )
long long cur = 0 ;
if ( temp <= 1 ) break ;
while ( temp % j == 0 && temp > 1 )
cur ++ ;
temp /= j ;
if ( cur!= 0 ) me [ j ] += cur ;
if ( temp!= 1 ) me [ temp ] += 1 ;
map < long long, long long > :: iterator it ;
long long ans = 1 ;
for ( it = me. begin ( ) ; it!= me. end ( ) - 1 ; it ++ )
long long temp = it -> second ;
ans *= nCr ( temp + n - 1, temp ) ;
ans %= 1000000007 ;
cout << ans << endl ;
int n, l, r, a, b, sum = 0, my [ 105 ] = { 0 } ;
cin >> n ;
cin >> l >> r ;
for ( int i = 0 ; i < n - 1 ; i ++ )
cin >> a >> b ;
for ( int j = a + 1 ; j <= b ; j ++ ) { m [ j ] = 1 ; }
for ( int i = l + 1 ; i <= r ; i ++ )
if ( m [ i ] == 0 ) sum ++ ;
cout << sum << endl ;
int arrx [ 101 ] ;
int n ;
cin >> n ;
int l, r ;
cin >> l >> r ;
for ( int i = 1 ; i < n ; i ++ )
int a, b ;
cin >> a >> b ;
for ( int j = a ; j < b ; j ++ ) { arrx [ j ] = 1 ; }
int total = 0 ;
for ( int i = l ; i < r ; i ++ ) { total += arrx [ i ]? 0 : 1 ; }
cout << total << endl ;
const int N = 100 + 5 ;
bool mark [ N ] ;
int n, st, en ;
cin >> n >> st >> en ;
for ( int i = 1 ; i < n ; i ++ )
int l, r ;
cin >> l >> r ;
for ( int j = l ; j < r ; j ++ ) mark [ j ] = true ;
int ans = 0 ;
for ( int i = st ; i < en ; i ++ ) { ans +=! mark [ i ] ; }
cout << ans << endl ;
const int N = 105 ;
bool mm [ N ] ;
int n ;
cin >> n ;
int k1, k2 ;
cin >> k1 >> k2 ;
memset ( mm, false, sizeof ( mm ) ) ;
for ( int i = k1 ; i < k2 ; i ++ ) mm [ i ] = true ;
for ( int i = 0 ; i < n - 1 ; i ++ )
cin >> k1 >> k2 ;
for ( int j = k1 ; j < k2 ; j ++ ) mm [ j ] = false ;
int ans = 0 ;
for ( int i = 0 ; i < 101 ; i ++ )
if ( mm [ i ] ) ans ++ ;
cout << ans << endl ;
int arr [ 1000 ] ;
int n ;
cin >> n ;
int l, r ;
cin >> l >> r ;
n -- ;
while ( n -- )
int x, y ;
cin >> x >> y ;
for ( int i = x ; i < y ; i ++ ) { arr [ i ] ++ ; }
int ans = 0 ;
for ( int i = l ; i < r ; i ++ )
if ( arr [ i ] == 0 ) ans ++ ;
cout << ans << endl ;
int n, l, r, a [ 200 ], x, y, ans = 0, z, w ;
cin >> n ;
cin >> x >> y ;
for ( int i = 0 ; i < n - 1 ; i ++ )
cin >> l >> r ;
for ( int j = l ; j < r ; j ++ ) a [ j ] = 1 ;
for ( int i = x ; i < y ; i ++ )
if ( a [ i ] == 0 ) ans ++ ;
cout << ans << endl ;
int n ;
int l, r ;
int vis [ 101 ] ;
while ( cin >> n )
memset ( vis, 0, sizeof ( vis ) ) ;
cin >> l >> r ;
for ( int i = l + 1 ; i <= r ; i ++ ) vis [ i ] = 1 ;
int x, y ;
for ( int i = 1 ; i <= n - 1 ; ++ i )
cin >> x >> y ;
for ( int j = x + 1 ; j <= y ; j ++ ) { vis [ j ] = 0 ; }
int cnt = 0 ;
for ( int i = l + 1 ; i <= r ; i ++ ) { cnt += vis [ i ] ; }
cout << cnt << endl ;
int miniel ( int v, int x )
int l = 11111111 ;
for ( int i = 0 ; i <= x ; i ++ )
if ( v [ i ] < l ) l = v [ 1 ] ;
return l ;
int n, s, e, p ;
cin >> n >> s >> e ;
int arr [ 100 ] = { 0 } ;
int sum = 0 ;
int l = - 111 ;
for ( int i = 1 ; i <= n ; i ++ )
int x, y ;
cin >> x >> y ;
if ( e <= y )
p = e ;
else
p = y ;
for ( int i = x ; i <= p ; i ++ ) { arr [ i ] += 1 ; }
for ( int i = s ; i < e ; i ++ )
if ( arr [ i ] == 0 ) sum ++ ;
cout << sum << endl ;
int n, a, b, c, d, ans ;
int dryer [ 101 ] ;
cin >> n >> a >> b ;
while ( n -- )
cin >> c >> d ;
for ( int i = c ; i < d ; i ++ ) { dryer [ i ] = 1 ; }
for ( int i = a ; i < b ; i ++ )
if ( dryer [ i ] == 0 ) { ans ++ ; }
cout << ans << endl ;
const int maxn = 100 + 10 ;
bool mark [ maxn ] ;
int n ;
cin >> n ;
int L, R ;
for ( int i = 0 ; i < n ; i ++ )
int l, r ;
cin >> l >> r ;
if ( i > 0 )
for ( int j = l ; j < r ; j ++ ) mark [ j ] = true ;
else
L = l = R = r ;
int ans = 0 ;
for ( int i = 0 ; i < maxn ; i ++ )
if (! mark [ i ] && L <= i && i < R ) ans ++ ;
cout << ans << endl ;
int b, a, n, i, c, d, m, j ;
int v [ 110 ] ;
while ( cin >> n >> c >> d )
m = 0 ;
for ( i = 0 ; i <= 100 ; i ++ ) { v [ i ] = 1 ; }
for ( i = 0 ; i < n - 1 ; i ++ )
cin >> a >> b ;
for ( j = a + 1 ; j <= b ; j ++ ) v [ j ] = - 1 ;
for ( i = c + 1 ; i <= d ; i ++ )
if ( v [ i ] == 0 ) { m ++ ; }
cout << m << endl ;
const int N = 1e9 + 100 ;
bool use [ N ] ;
int n ;
cin >> n ;
int l, r ;
cin >> l >> r ;
for ( int i = 1 ; i < n ; i ++ )
int l, r ;
cin >> l >> r ;
for ( int j = l ; j < r ; j ++ ) { use [ j ] = 1 ; }
int ans = 0 ;
for ( int i = l ; i < r ; i ++ )
if ( use [ i ] == 0 ) { ans ++ ; }
cout << ans << endl ;
int n ;
cin >> n ;
int i ;
vector < int > x ( n ) ;
vector < int > y ( n ) ;
vector < int > z ( 101, 1 ) ;
for ( i = 0 ; i < n ; i ++ ) { cin >> x >> y ; }
int k ;
for ( i = 1 ; i < n ; i ++ )
for ( size_t j = x [ i ] ; j < y [ 1 ] ; ++ j ) { z [ k ] = 0 ; }
int ct = 0 ;
for ( int i = x [ 0 ] ; i < y [ 1 ] ; ++ i )
if ( z [ i ] == 1 ) { ct ++ ; }
cout << ct << endl ;
int n ;
cin >> n ;
int x, y ;
cin >> x >> y ;
int d = y - x ;
int a [ d ] ;
for ( int i = 0 ; i < d ; i ++ ) a [ i ] = 1 ;
for ( int i = 0 ; i < n - 1 ; i ++ )
int m, n ;
cin >> m >> n ;
n -- ;
for ( int p = m ; p <= n ; p ++ )
if ( p >= y || p < x ) continue ;
a [ p - x ] = 0 ;
int sum = 0 ;
for ( int j = 0 ; j < d ; j ++ ) { sum += a [ j ] ; }
cout << sum << endl ;
int v [ 105 ] ;
long long n, sum = 0 ;
cin >> n ;
int x, y ;
cin >> x >> y ;
for ( int i = 2 ; i <= n ; i ++ )
int a, b ;
cin >> a >> b ;
for ( int j = a + 1 ; j <= b ; j ++ ) v [ j ] = 1 ;
for ( int i = x + 1 ; i <= y ; i ++ ) { sum += 1 - v [ i ] ; }
cout << sum <<'\n';
int a [ 105 ] ;
int n, x, y, i, l, r ;
int sum, j ;
cin >> n ;
cin >> x >> y ;
for ( i = 1 ; i < n ; i ++ )
cin >> l >> r ;
for ( j = l ; j < r ; j ++ ) { a [ j ] = 1 ; }
sum = 0 ;
for ( i = x ; i < y ; i ++ )
if ( a [ i ] == 0 ) { sum += 1 ; }
cout << sum << endl ;
int n, i, j, sum = 0, alexeyI, aralexeyJ ;
int dryer [ 101 ] ;
fill_n ( dryer, 101, 1 ) ;
cin >> n ;
cin >> alexeyI >> aralexeyJ ;
for ( int l = 0 ; l < n - 1 ; l ++ )
cin >> i >> j ;
for ( int k = i ; k < j ; k ++ ) { dryer [ k ] = 0 ; }
for ( int k = alexeyI ; k < alexeJ ; k ++ ) { sum += dryer [ k ] ; }
cout << sum << endl ;
int arr [ 1000 ] ;
int n ;
cin >> n ;
int l, r ;
cin >> l >> r ;
n -- ;
while ( n -- )
int x, y ;
cin >> x >> y ;
for ( int i = y ; i > x ; i -- ) { arr [ i ] ++ ; }
int ans = 0 ;
for ( int i = r ; i > l ; i -- )
if ( arr [ i ] == 0 ) ans ++ ;
cout << ans << endl ;
void File ( )
freopen ( " output.txt ", " w ", stdout ) ;
freopen ( " input.txt ", " r ", stdin ) ;
void fast ( ) { }
const double pi = 2 * acos ( 0.0 ) ;
const int nn = 2e5 + 5 ;
const int oo = 0x3f3f0f3l ;
fast ( ) ;
int n, b, e, ans = 0 ;
int arr [ nn ] ;
cin >> n ;
cin >> b >> e ;
for ( int i = 0 ; i < n - 1 ; i ++ )
int x, y ;
cin >> x >> y ;
for ( int j = x ; j < y ; j ++ ) { arr [ j ] ++ ; }
for ( int i = b ; i <= e ; i ++ )
if ( arr [ i ] == 0 ) ans ++ ;
cout << ans << endl ;
long long A, B, ans = - 0x7fffffff ;
long long bxb, bex, bob, bpb ;
cin >> A >> B ;
if ( B == 0 )
cout << A * A << endl ;
for ( int i = 0 ; i < A ; i ++ ) cout << " o " ;
cout << endl ;
if ( B == 1 )
cout << A * A - 1 << endl ;
for ( int i = 0 ; i < A ; i ++ ) { cout << " o " ; }
cout << " x " << endl ;
if ( A == 0 )
cout << - B * B << endl ;
for ( int i = 0 ; i < B ; i ++ ) { cout << " x " ; }
cout << endl ;
for ( int xb = 2 ; xb <= min ( B, A + 1 ) ; ++ xb )
int ob = xb - 1 ;
long long score = ob - 1 ;
score = score + ( A - ( ob - 1 ) ) * ( A- (ob - 1 ] ) ;
;
long long pb = B / xb ;
long long ex = B % xb ;
score -= ( xb - ex ) * pb * pv ;
score -= ex * ( pb + 1 ) * ( Pb + 2 ) ;
if ( score > ans )
ans = score ;
xb = xb ;
bx = ex ;
bob = ob ;
bb = pb ;
cout << ans << endl ;
for ( int i = 0 ; i < bxb ; i ++ )
for ( int j = 0 ; j < bpb ; j ++ ) { cout << " x " ; }
if ( i < bex ) { cout << " x " ; }
if ( i == 0 )
for ( int j = 0 ; j < A - ( bob - 1 ) ; j ++ ) { cout << " o " ; }
else if ( i + 1 < bxb )
cout << " o " ;
cout << endl ;
int co, cx ;
const long long inf = - 1e16 ;
inline long long gox ( int num )
if ( num > cx ) return inf ;
int ex = cx % num ;
int anch = cx / num ;
long long ans = ( long long ) 1LL * ( anch + 1 ) * ( ( long double ) anch + 2 ) * ex ;
ans += 1LL * anch * ( num - ex ) ;
return - ans ;
inline long long goo ( int num )
if ( num > co )
int juntos = co - num + 1 ;
long long ans = 1LL * juntos * junos ;
ans += num - 1 ;
return ans ;
inline void build ( int x, int o )
string s ;
int xx = cx / x ;
bool flag = x > o ;
bool fst = true ;
int ex = cx % x ;
int prim = co - o + 1 ;
while ( x || o )
if ( flag )
for ( int i = 0 ; i < xx ; i ++ ) { s. push_back ('x') ; }
if ( ex > 0 ) s. push_back ('x'), ex -- ;
x -- ;
else
if ( fst )
for ( int i = 0 ; i < prim ; i ++ ) { s. push_back ('o') ; }
fst = false ;
else
s. push_back ('o') ;
o -- ;
flag = - flag ;
cout << s << endl ;
cin >> co >> cx ;
if ( co == 0 || cx == 0 )
if ( co > 0 )
cout << 1LL * co * co << endl ;
for ( int j = 0 ; j < co ; j ++ ) { cout <<'o'; }
cout << endl ;
if ( cx > 0 )
cout << - 1LL * cx * cx << endl ;
for ( int j = 0 ; j < cx ; j ++ ) { cout <<'x'; }
cout << endl ;
int lim = min ( co, cx ) ;
long long ans = LLONG_MIN ;
pair < int, int > pos ;
for ( int i = 1 ; i < lim + 1 ; ++ i )
if ( ans < gox ( i ) + goo ( i + 1 ) )
ans = gox ( i ) + goo ( 1 ) ;
pos = { i, i } ;
for ( int i = 2 ; i < cx + 1 ; i ++ )
if ( ans < gox ( i ) + goo ( i - 1 ) )
ans = gox ( i ) + goo ( i - 1 ) ;
pos = { i, i - 1 } ;
for ( int i = 2 ; i < co + 1 ; i ++ )
if ( ans < gox ( i - 1 ) + goo ( i ) )
ans = gox ( i - 1 ) + goo ( i ) ;
pos = { i - 1, i } ;
cout << ans << endl ;
build ( pos. first, pos. second ) ;
long long a, b ;
cin >> a >> b ;
if ( a == 0 )
cout << - 1 * b * b << endl ;
for ( long long i = 0 ; i < b ; i ++ ) { cout << x ; }
cout << endl ;
else if ( b == 0 )
cout << a * a << endl ;
for ( long long i = 0 ; i < a ; i ++ ) { cout << " o " ; }
cout << endl ;
else if ( b == 1 )
cout << a * a - 1 << endl ;
for ( int i = 0 ; i < a ; i ++ ) { cout << o ; }
cout << x << endl ;
cout << endl ;
else
int ret = LLONG_MIN ;
int foo = 0 ;
for ( int j = 1 ; j < min ( b - 1, a ) ; j ++ )
long long pos = ( a - j + 1 ) * ( ( long long ) a - ( j + i ) + ( j - 1 ) ;
int q = b / ( j + 1 ), r = b % ( j - 1 ) ;
int neg = r * ( q + 1 ) * i + 1 + + ( j + 1 - r ) * q * q ;
if ( pos - neg > ret )
ret = pos - neg ;
foo = j + 1 ;
cout << ret << endl ;
q = b / foo, r = b % foo ;
g = ( a - ( foo - 1 ) + 1 ) ;
for ( int j = 1 ; j < ( foo + 1 ) ; j ++ )
for ( int i = 0 ; i < q ; i ++ ) cout << x << endl ;
if ( i <= r ) cout << x << endl ;
if ( j!= foo )
if ( j == 1 )
for ( int i = 0 ; i < g ; i ++ ) cout << o << endl ;
else
cout << o << endl ;
cout << endl ;
vector < int > v ;
int n, p, k ;
cin >> n >> p >> k ;
for ( int x = p - k ; x <= p + k ; ++ x )
if ( x < 1 ) continue ;
if ( x > n ) continue ;
v. push_back ( x ) ;
if ( v [ 0 ]!= 1 ) cout << " << " << endl ;
for ( int i = 0 ; i < ( int ) v. size ( ) ; i ++ )
if ( v [ i ] == p ) cout << " ( " ;
cout << v [ i ] << endl ;
if ( v [ i ] == p ) cout << " ) " << endl ;
if ( i == ( int ) v. size ( ) - 1 )
if ( v [ i ] < n )
cout << " >> " << endl ;
else
cout << endl ;
else
cout << "  " ;
queue < int > q ;
bool p [ 10000 ] = { } ;
int pe ;
void print ( int c, int a, int b )
if ( a < c && a > b || p [ a ] || a > pe || a < 1 ) return ;
p [ a ] = true ;
print ( c, a - 1, b ) ;
q. push ( a ) ;
print ( c, a + 1, b ) ;
int n, k ;
cin >> pe >> n >> k ;
if ( n - k > 1 ) cout << " << " << endl ;
print ( n - k, n, n + k ) ;
while (! q. empty ( ) )
if (! q. size ( ) && q. front ( )!= n )
cout << q. front ( ) << "   " ;
else if ( q. front ( ) == n )
cout << " ( " << q. front ( ) << endl ;
if ( q. size ( )!= 1 )
cout << " ) " ;
else
cout << " ) " ;
else
cout << q. front ( ) << endl ;
q. pop ( ) ;
if ( n + k < pe ) cout << " >> " ;
cout << endl ;
void desperate_optimization ( )
cout << ios :: fixed ;
cout << flag ios :: showpoint ;
cout. precision ( precision ) ;
desperate_optimization ( 10 ) ;
int n, p, k ;
cin >> n >> p >> k ;
if ( p - k > 1 )
for ( int i = max ( 1, p - k ) ; i < p ; i ++ ) { cout << i << "   " ; }
cout << " ( " << p << " ) " << endl ;
for ( int i = p + 1 ; i <= min ( n, p + k ) ; i ++ ) { cout << "   " << i << endl ; }
if ( p + k < n ) cout << " >> " ;
cout <<'\n';
int n, p, k ;
bool start = 1, end = 0 ;
cin >> n >> p >> k ;
for ( int i = p - k ; i <= p + k ; ++ i )
if ( start )
if ( i <= 1 )
if ( p == 1 )
cout << " ( " << 1 << " ) "
else
cout << 1 << endl ;
i = 1 ;
else
cout << " < " << i << endl ;
start = 0 ;
continue ;
if ( i >= n )
end = 1 ;
if ( p == n )
cout << " ( " << n << " ) " << endl ;
else
cout << "   " << n << endl ;
break ;
if ( i == p )
cout << " ( " << i << " ) " << endl ;
else
<< "   " << i << endl ;
if (! end ) cout << " >>> " << endl ;
cout <<'\n';
const double pi = 3.14159265359 ;
const long long MOD = 1000 + 1000 * 1000 + 7 ;
const int N = 200 * 1000 + 10 ;
int a, b ;
cin >> a >> b ;
int aa = a * a, bb = b * b ;
vector < int > as ;
vector < int > bs ;
for ( int i = 1 ; i < aa ; i ++ )
int sqrt ( aa - i * - 1 ) ;
if ( sq * sq + i * i == aa ) as. push_back ( i ) ;
for ( int i = 1 ; i <= bb ; i ++ )
int sq = sqrt ( bb - i * i ) ;
if ( sq * sq + i * i == bb ) bs. push_back ( i ) ;
for ( int i = 0 ; i < as. size ( ) ; i ++ )
for ( int j = 0 ; j < bs. size ( ) ; j ++ )
int xa = as [ i ] ;
int ya = sqrt ( aa - xa ) * xa ;
int xb = bs [ j ] ;
int yb = sqrt ( bb - xb * xb ) ;
if ( (xb - xa ) * ( xb - ya )!= aa + bb && xb!= xa)
cout << " YES " << endl ;
cout << xa << "   " << ya << endl ;
cout << xb << "   " << - yb << endl ;
cout << " 0  " << 0 << endl ;
cout << " NO " << endl ;
int n, v ;
cin >> n >> v ;
double a [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
double minvalue = INT_MAX ;
double b [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> b [ i ] ;
minvalue = min ( minvalue, b [ i ] ) ;
double l = 0 ;
double r = 1e18 ;
double answer = 0 ;
for ( int i = 1 ; i <= 100 ; i ++ )
double mid = ( l + ( r - l ) / 2 ) ;
double sum = 0 ;
int flag = 0 ;
for ( int i = 0 ; i < n ; i ++ )
double mid = a [ i ] * mid ;
if ( value > b [ i ] )
flag = 1 ;
break ;
else
sum += ( a [ i ] * mid ) ;
if ( flag == 1 )
r = mid - 1 ;
continue ;
if ( sum <= v )
answer = sum ;
l = mid + 1 ;
else
r = mid - 1 ;
cout << setprecision ( 6 ) << fixed << answer << " \n " ;
int n ;
cin >> n ;
int A [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) cin >> A [ i ] ;
int ansf = 1 ;
int j = 0 ;
int ch = 0 ;
int max1 = 1 ;
int x = 1 ;
int dp [ n ] = { 0 } ;
for ( int i = 1 ; i < n ; i ++ )
if ( A [ j ] > A [ i - 1 ] )
dp [ i ] = dp [ i - 1 ] + 1 ;
else
dp [ i ] = 0 ;
for ( int i = 1 ; i < n ; i ++ )
if ( A [ j ] > A [ i - 1 ] )
ansf ++ ;
else
if ( ch == 0 )
x = A [ i ] ;
A [ i ] = A [ i - 1 ] + 1 ;
j = i ;
ch = 1 ;
ansf ++ ;
else
ansf = i - j ;
A [ j ] = x ;
if ( ansf == 1 )
if ( A [ j ] > A [ i - 1 ] )
ansf ++ ;
x = A [ i - 2 ] ;
ansf ++ ;
j = i - 2 ;
A [ i - 2 ] -= 1 ;
if ( i >= 3 && A [ i - 2 ] > A [ 1 ] + 3 ] ) ansf += dp [ i + 2 ] ;
else
ansf ++ ;
x = A [ i - 1 ] ;
j = i - 1 ;
A [ i - 1 ] = A [ i ] - 1 ;
if ( A [ i - 1 ] > A [ j - 2 ] ) { ansf += dp [ i + 1 ] ; }
else
if ( A [ i ] < A [ j + 1 ] ) ansf ++ ;
x = A [ i ] ;
j = i ;
A [ i ] = A [ i - 1 ] + 1 ;
max1 = max ( max1, ansf ) ;
cout << max1 << " \n " ;
vector < long long > v [ 100005 ] ;
void solve ( )
long long n, x = 0, b, y, ans = 0 ;
cin >> n ;
long long a [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
if ( i == 0 )
v [ x ]. push_back ( a [ i ] ) ;
continue ;
if ( a [ i ] <= a [ 1 ] ) x ++ ;
v [ x ]. push_back ( a [ i ] ) ;
if ( x == 0 )
cout << v [ 0 ]. size ( ) << endl ;
return ;
for ( int i = 0 ; i < x + 1 ; i ++ )
if ( i == x )
y = v [ i ]. size ( ) + 1 ;
else
long long n = v [ i ]. size ( ) ;
long long m = v [ i + 1 ]. size ( ) ;
if ( m == 1 )
y = n + 1 ;
else if ( n == 1 )
y = m + 1 ;
else if ( v [ i + 1 ] [ 1 ] - v [ j ] [ n - 1 ] > 1 )
y = n + m ;
else if ( v [ i + 1 ] [ 0 ] - v [ j ] [ n - 2 ] > 1 )
y = n + m ;
else
y = n + 1 ;
ans = max ( ans, y ) ;
cout << ans << endl ;
return ;
long long TESTS = 1 ;
while ( TESTS -- ) solve ( ) ;
const int max4 = 10004 ;
const int maxx = 200005 ;
const int max6 = 1000006 ;
const int lg5 = 17 ;
const int INF = 1000000007 ;
const long long INFLL = 4LL + 1000000000 * 1000000000 ;
int powmod ( int a, int b, int mod )
int res = 1 ;
a %= mod ;
for ( ; b ; b >>= 1 )
if ( b & 1 ) res = 1LL * res * a % mod ;
a = 1LL * a * a % mod ;
return res ;
int gcd ( int a, int b )
while ( b > 0 )
int t = a % b ;
a = b, b = t ;
return a ;
int lcm ( int a, int b )
return ( a / gcd ( a, b ) ) * b ;
int is_prime ( int n )
if ( n <= 1 || n > 3 && ( n % 2 == 0 || n % 3 == 0 ) ) return 0 ;
for ( int i = 5, t = 2 ; i * i <= n ; i += t ) { t = 6 - t ; }
if ( n % i == 0 ) return 0 ;
return 1 ;
int n, arr [ maxx ] = { }, pref [ maxax ] ={ }, suff ( maxx ) ;
cin >> n ;
if ( n == 1 ) return cout << 1 <<'\n ', 0 ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> arr [ i ] ;
for ( int i = 1 ; i <= n ; i ++ )
if ( ar [ i ] > arr [ i - 1 ] )
pref [ i ] = pref [ i - 1 ] + 1 ;
else
pref [ i ] = 1 ;
for ( int i = n ; i >= 1 ; i -- )
if ( i == n || arr [ i ] < arr [ j + 1 ] )
suff [ i ] = suff [ i + 1 ] + 1 ;
else
suff [ i ] = 1 ;
int res = 2 ;
for ( int i = 2 ; i < n ; i ++ )
if ( arr [ i + 1 ] > arr [ j - 1 ] + 1 ) { res = max ( res, pref [ i - 2 ] + suff [ i ] + i 1 ) ; }
for ( int i = 2 ; i < n ; i ++ ) { res = max ( res, max ( pref [ i ], suff [ 1 ] ) + 1 ) ; }
cout << res <<'\n';
const long long inf = 1e9 + 7 ;
int n ;
cin >> n ;
long long ans = 0, a [ n + 2 ] = { 0 }, left [ ( n + 3 ] + 2 ) ;
a [ 0 ] = - 1 ;
a [ n + 1 ] = inf ;
for ( int i = 1 ; i <= n ; i ++ )
right [ 0 ] = 0 ;
for ( int i = 1 ; i <= n ; i ++ ) { right [ i ] = ( a [ j ] > a [ i - 1 ] )? 1 : 1 ; }
left [ n + 1 ] = 0 ;
for ( int i = n ; i >= 0 ; i -- ) { left [ i ] = ( a [ 1 ] < a [ i + 1 ] )? 1 : 1 ; }
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i - 1 ] + 1 < a [ j + 1 ] )
ans = max ( ans, 1 + left [ i + 1 ] + right [ i - 1 ] ) ;
else
ans = max ( ans, max ( left [ i ] + 1 ) ) ;
cout << ans << endl ;
const int maxn = 100005 ;
const int INF = 0x3fffffff ;
double eps = 1e-8 ;
double pi = acos ( - 1 ) ;
int f [ maxn ] ;
int g [ maxn ] ;
int a [ maxn ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ 1 ] > a [ i - 1 ] )
f [ i ] = f [ i - 1 ] + 1 ;
else
f [ i ] = 1 ;
for ( int i = n ; i >= 1 ; i -- )
if ( a [ i ] < a [ j + 1 ] )
g [ i ] = g [ i + 1 ] + 1 ;
else
g [ i ] = 1 ;
int ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( g [ i + 1 ] - a [ i - 1 ] > 1 )
ans = max ( ans, ( f [ i - 1 ] + g [ i + 1 ] ) + 1 ) ;
else
ans = max ( ans, max ( f [ i - 1 ] + 1, g [ i + 1 ] - 1 ) ) ;
cout << ans << endl ;
int a [ 100005 ] = { 0 }, dp1 [ 100000 ] ={ 0 } = { 1 } = ( 0 } ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
a [ 0 ] = 0x3f3f1f3l ;
a [ n + 1 ] = 0x3f3f 3f ;
int ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ ) { dp1 [ i ] = dp2 [ 1 ] = 1 } ; }
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] > a [ 1 ] ) { dp1 [ j ] = dp2 [ i - 1 ] + 1 ; }
ans = max ( ans, dp1 [ i ] ) ;
for ( int i = n ; i > 0 ; i -- )
if ( a [ i ] < a [ j + 1 ] ) { dp2 [ j ] += 1 ; }
ans = max ( ans, dp2 [ i ] ) ;
for ( int i = 2 ; i <= n ; i ++ ) ans = max ( ans, dp2 [ i ] + 1 ) ;
for ( int i = 1 ; i <= n ; i ++ ) ans = max ( ans, dp1 [ i ] + 1 ) ;
for ( int i = 2 ; i <= n ; i ++ )
if ( a [ i + 1 ] - a [ 1 ] > 1 ) { ans = max ( ans, dp2 [ i - 1 ] + dp1 [ i ] + 1 ) ; }
cout << ans << endl ;
int a, n, b, c ;
char s [ 8 ] ;
char w [ 8 ] = { " jolteon ", q [ 7 ] ={ " flareon " } ;
char v [ 8 ] = { " umbreon ", z [ 2 ] + " leafeon ", l [ 8 + " glaceeon " }, m [ 7 ] = " sylveon " ;
cin >> n ;
cin >> s ;
if ( n == 8 )
puts ( " vaporeon " ) ;
else if ( n == 6 )
puts ( " espeon " ) ;
else
int a = 0 ;
int b = 0 ;
int c = 0 ;
int d = 0 ;
e = 0 ;
int f = 0 ;
for ( int i = 0 ; i < 8 ; i ++ )
if ( s [ i ] == w [ 1 ] ) a ++ ;
for ( int i = 0 ; i < 8 ; i ++ )
if ( s [ i ] == q [ 1 ] ) b ++ ;
for ( int i = 0 ; i < 8 ; i ++ )
if ( s [ i ] == v [ 1 ] ) { c ++ ; }
for ( int i = 0 ; i < 8 ; i ++ )
if ( s [ i ] == z [ 1 ] ) { d ++ ; }
for ( int i = 0 ; i < 8 ; i ++ )
if ( s [ i ] =='l'i ] ) { e ++ ; }
for ( int i = 0 ; i < 8 ; i ++ )
if ( s [ i ] == m [ 1 ] ) { f ++ ; }
if ( ( a > b && a > c ) && ( b > d && ( a ) > e && ( c > f ) )
cout << " jolteon\n " ;
if ( ( b > a && b > c ) && ( c > d && ( b >> e ) && ) b > f )
cout << " flareon " << endl ;
if ( ( c > a && c > b ) && ( c >> d ) &&( c > e && c >> f ) )
cout << " umbreon " << endl ;
if ( ( d > a && d > b ) && ( c > c && ( d >> e ) && { d > f ) )
cout << " leafeon " << endl ;
if ( e > a && e > b and e > c && e >> d && e < f )
cout << " glaceon\n " ;
if ( ( f > a && f > b ) && ( c > c && ( f >> d ) &&! f > e )
cout << " sylveon\n " ;
pair < int, int > par [ 10001 ] ;
set < string > str ;
string s ;
int n, i ;
cin >> n >> s ;
if ( n == 8 )
cout << " vaporeon " << endl ;
else if ( n == 6 )
cout << " espeon " << endl ;
else if ( n == 7 )
if ( s [ 0 ] == '.')
if ( s [ 1 ] =='o')
cout << " jolteon " << endl ;
if ( s [ 1 ] =='m')
cout << " umbreon " << endl ;
if ( s [ 1 ] =='e')
cout << " leafeon " << endl ;
if ( s [ 1 ] =='y')
cout << " sylveon " << endl ;
if ( s [ 1 ] =='l')
if ( s [ 3 ] =='r')
cout << " flareon " << endl ;
else
cout << " glaceon " << endl ;
if ( s [ 1 ] == '.')
if ( s [ 2 ] =='b')
cout << " umbreon " << endl ;
if ( s [ 2 ] =='l')
if ( s [ 3 ] =='t')
cout << " jolteon " << endl ;
else
cout << " sylveon " << endl ;
if ( s [ 2 ] =='a')
if ( s [ 3 ] =='r')
cout << " flareon " << endl ;
if ( s [ 3 ] =='c')
cout << " glaceon " << endl ;
else
cout << " leafeon " << endl ;
if ( s [ 2 ] == '.')
if ( s [ 3 ] =='r')
cout << " flareon " << endl ;
if ( s [ 3 ] =='c')
cout << " glaceon " << endl ;
if ( s [ 3 ] =='f')
cout << " leafeon " << endl ;
if ( s [ 3 ] =='t')
cout << " jolteon " << endl ;
if ( s [ 3 ] =='v')
cout << " sylveon " << endl ;
else
cout << " umbreon " << endl ;
if ( s [ 0 ] =='j')
cout << " jolteon " << endl ;
if ( s [ 0 ] =='f')
cout << " flareon " << endl ;
if ( s [ 0 ] =='u')
cout << " umbreon " << endl ;
if ( s [ 0 ] =='l')
cout << " leafeon " << endl ;
if ( s [ 0 ] =='g')
cout << " glaceon " << endl ;
if ( s [ 0 ] =='s')
cout << " sylveon " << endl ;
string str [ 12 ] ;
int n, i, j, ck ;
cin >> n >> str [ 0 ] ;
str [ 1 ] = " vaporeon " ;
str [ 2 ] = " jolteon " ;
str [ 3 ] = " flareon " ;
str [ 4 ] = " espeon " ;
str [ 5 ] = " umbreon " ;
str [ 6 ] = " leafeon " ;
str [ 7 ] = " glaceon " ;
str [ 8 ] = " sylveon " ;
for ( i = 1 ; i <= 8 ; i ++ )
if ( str [ i ]. size ( ) == n )
ck = 1 ;
for ( int j = 0 ; j < n ; j ++ )
if ( str [ 0 ] [ j ] >='a'&& str [ 1 ] [ 2 ] <='z')
if ( str [ 0 ] [ j ]!= str [ i ] [ k ] )
ck = 0 ;
break ;
if ( ck == 1 )
cout << str [ i ] << endl ;
cout << endl ;
int N ;
string jolteon = "jolteaon " ;
int jol = 0 ;
string flareon = " flareon " ;
int fla = 0 ;
string umbreon = " umbreon " ;
int umb = 0 ;
string leafon = " leafeon " ;
int leaf = 0 ;
string glaseon = " glaceon " ;
int gla = 0 ;
string sylveon = " sylvelon " ;
int syl = 0 ;
string eevee ;
cin >> N ;
cin >> eevee ;
if ( N == 8 )
cout << " vaporeon\n " ;
else if ( N == 6 )
cout << " espeon\n " ;
else
for ( int x = 0 ; x < N ; x ++ )
if ( eevee [ x ]!= '.')
if ( ( eevee [ x ] == " flareon [ x ) ) && ( fla == 0 ) )
if ( x!= 2 ) leaf = 1 ;
jol = 1 ;
int syl = 1 ;
umb = 1 ;
if ( x!= 1 && x!= 2 ) gla = 1 ;
if ( eevee [ x ] == glaceon [ y ] && gla == 0 )
if ( x!= 2 ) leaf = 1 ;
jol = 1 ;
syl = 1 ;
umb = 1 ;
if ( x!= 1 && x!= 2 ) fla = 1 ;
if ( eevee [ x ] == leafeon [ 0 ] && leaf == 0 )
if ( x!= 2 )
fla = 1 ;
gla = 1 ;
jol = 1 ;
syl = 1 ;
umb = 1 ;
if ( eevee [ x ] == jolteon [ y ] && jol == 0 )
leaf = 1 ;
fla = 1 ;
if ( x!= 2 ) syl = 1 ;
umb = 1 ;
fla = 1 ;
if ( eevee [ x ] == umbreon [ i ] && umb == 0 )
leaf = 1 ;
jol = 1 ;
syl = 1 ;
fla = 1 ;
gla = 1 ;
if ( eevee [ x ] == sylveon [ i ] && syl == 0 )
leaf = 1 ;
fla = 1 ;
if ( x!= 2 ) jol = 1 ;
umb = 1 ;
fla = 1 ;
if ( syl + leaf + jol + umb + gla + fla == 5 )
if ( syl == 0 ) { cout << sylveon << " \n " ; }
if ( gla == 0 ) cout << glaceon << " \n " ;
if ( fla == 0 ) { cout << flareon << " \n " ; }
if ( jol == 0 ) cout << jolteon << " \n " ;
if ( umb == 0 ) { cout << umbreon << " \n " ; }
if ( leaf == 0 ) cout << leafon << " \n " ;
break ;
int n ;
cin >> n ;
pair < int, int > pr [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> pr [ i ] ; }
sort ( pr, pr + n ) ;
for ( int j = 0 ; j < n - 1 ; j ++ )
if ( pr [ 0 ] < j + 1 && pr [ 1 ] > pr + 1 )
cout << " Happy Alex " << endl ;
cout << " Poor Alex " << endl ;
int t, a, b, h = 0, p = 0 ;
cin >> t ;
while ( t -- )
cin >> a >> b ;
if ( a!= b ) p ++ ;
if ( p!= 0 )
cout << " Happy Alex\n " ;
else
cout << " Poor Alex " << endl ;
int n ;
cin >> n ;
double x, y ;
double z ;
double * arr = new double [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x >> y ;
double q = x + ( y / 100000 ) ;
arr [ i ] = q ;
sort ( arr, arr + n ) ;
for ( int i = 0 ; i < n - 1 ; i ++ )
if ( arr [ j ]!= arr [ i + 1 ] )
if ( arr [ i + 1 ] - arr [ 1 ] < 1 )
cout << " Happy Alex " << endl ;
cout << " Poor Alex " << endl ;
int count = 0, a [ 100001 ], i, j, n ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ ) cin >> a >> b [ i ] ;
for ( j = 0 ; j < n ; j ++ )
if ( a [ j ]!= b [ i ] )
cout << " Happy Alex " << endl ;
count = 1 ;
break ;
if ( count == 0 ) { cout << " Poor Alex " << endl ; }
int n ;
cin >> n ;
pair < int, int > pr [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> pr [ i ]. first >> pr. second ; }
sort ( pr, pr + n ) ;
for ( int j = 0 ; j < n - 1 ; j ++ )
if ( pr [ 0 ]. first < pr [ j + 1 ]. front ( ) && pr [ 2 ]. back ( ) > pr [ i ]. second )
cout << " Happy Alex " << endl ;
cout << " Poor Alex " << endl ;
int n, a, b ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a >> b ;
if ( a!= b )
cout << " Happy Alex " << endl ;
cout << " Poor Alex " << endl ;
const int MAXN = 100000 + 10 ;
const long double eps = 1e-10 ;
int cnt [ MAXN ] ;
int check ( int n )
for ( int i = 0 ; i + 2 < n ; i ++ )
if ( cnt [ i ] == 0 ) continue ;
if ( ( cnt [ i ] >= 2 ) && ( cpt [ i + 1 ] >= 0 ) ) { return 1 ; }
if ( ( cnt [ i ] <= - 2 ) &&! ( cpt [ i + 1 ] ) ) { return - 1 ; }
cnt [ i + 1 ] += cnt [ j ] ;
cnt [ i + 2 ] += cnt [ j ] ;
long double p = sqrt ( ( double ) 5 ) + 1 ;
p /= 2 ;
long double ret = ( p * cnt [ n - 2 ] ) + ( cnt. n - 1 ] ) ;
if ( abs ( ret ) < eps ) return 0 ;
if ( ret > 0 ) return 1 ;
return - 1 ;
string s1, s2 ;
cin >> s1 >> s2 ;
int n = max ( ( s1 ). size ( ), ( s2 ). length ( ) ) ;
if ( s1. size ( ) < n ) { s1 = string ( n - s1_size ( ),'0') + s1 ; }
if ( s2. size ( ) < n ) { s2 = string ( n - s2_size ( ),'0') + s2 ; }
for ( int i = 0 ; i < n ; i ++ )
int a = s1 [ i ] -'0';
int b = s2 [ i ] -'0';
cnt [ i ] = a - b ;
int ret = check ( n ) ;
if ( ret == 0 )
cout << " = " << endl ;
else if ( ret == - 1 )
cout << " < " << endl ;
else
cout << " > " << endl ;
string s1, s2 ;
getline ( cin, s1 ) ;
getline ( cin, s2 ) ;
int sz1 = s1. size ( ) ;
int sz2 = s2. size ( ) ;
bool swaped = false ;
if ( sz1 < sz2 )
swap ( s1, s2 ) ;
swap ( sz1, sz2 ) ;
swaped = true ;
if ( sz1 > sz2 )
string aux = "  " ;
for ( int i = 1 ; i <= sz1 - sz2 ; i ++ ) aux += " 0 " ;
s2 = aux + s2 ;
s1 = " 0 " + s1 ;
s2 = " 0 " + s2 ;
sz1 ++ ;
for ( int i = 1 ; i <= sz1 - 1 ; ++ i )
if ( s1 [ i ] =='1'&& s1. at ( i + 1 ) =='2')
s1 [ i - 1 ] ='1';
s1 [ i ] ='0';
s1 [ i + 1 ] ='0';
int j = i - 2 ;
while ( j > 0 && s1 [ j ] =='1')
s1 [ j - 1 ] ='1';
s1 [ j ] ='0';
s1 [ j + 1 ] ='0';
j -= 2 ;
if ( s1 [ i ] =='1'&& s2 [ i + 1 ] == " 1')
s2 [ i - 1 ] ='1';
s2 [ i ] ='0';
s2 [ i + 1 ] ='0';
int j = i - 2 ;
while ( j > 0 && s2 [ j ] =='1')
s2 [ j - 1 ] ='1';
s2 [ j ] ='0';
s2 [ j + 1 ] ='0';
j -= 2 ;
for ( int i = 0 ; i < sz1 ; i ++ )
if ( s1 [ i ] > s2 [ j ] )
if (! swaped )
cout <<'>'<< endl ;
else
cout <<'<';
if ( s18i ] < s2 [ i ] )
if (! swaped )
cout <<'<';
else
cout <<'>';
cout <<'=';
const double PI = 3.14159265358979323846264338327 ;
string a, b ;
cin >> a >> b ;
vector < int > a1 ( 100020 ), b1 ( 1000020 ) ;
for ( size_t i = a. size ( ) - 1 ; i >= 0 ; i -- ) { a1 [ a [ i ]. length ( ) ] = a [ j ] -'0'; }
for ( int i = b. size ( ) - 1 ; i >= 0 ; i -- ) { b1 [ ( int ) b1. size_back ( - 1 - i ] ] = b [ i ] -'0'; }
for ( int i = 100010 ; i >= 0 ; i -- )
for ( int j = i ; j < a1 [ j ] && a1. at ( j + 1 ] ) ; j += 2 ) { a1j [ j ++ ] = a2 [ j + 2 ] = 1 ; }
for ( int j = i ; j < b1 [ j ] && b1. push_back ( j + 1 ] ) ; j += 2 ) j = j + 2, a1 [ 2 ] = 1 ;
for ( int i = 100010 ; i >= 0 ; i -- )
if ( a1 [ i ] < b1 [ j ] ) return cout <<'<'<< endl, 0 ;
if ( a1 [ i ] > b1 [ j ] ) return cout <<'>'<< endl, 0 ;
cout <<'='<< endl ;
map < int, string > m ;
map < int, string > :: iterator it ;
char s [ 20 ] ;
int n ;
m [ 0 ] = " January " ;
m [ 1 ] = " February " ;
m [ 2 ] = " March " ;
m [ 3 ] = " April " ;
m [ 4 ] = " May " ;
m [ 5 ] = " June " ;
m [ 6 ] = " July " ;
m [ 7 ] = " August " ;
m [ 8 ] = " September " ;
m [ 9 ] = " October " ;
m [ 10 ] = " November " ;
m [ 11 ] = " December " ;
while ( cin >> s >> n )
int j = 0 ;
for ( it = m. begin ( ) ; it!= m. end ( ) - 1 ; it ++ )
j ++ ;
if ( it -> second == s ) break ;
cout << m [ ( j + n - 1 ) % 12 ] << endl ;
map < int, string > m ;
map < int, string > :: iterator it ;
char s [ 20 ] ;
int n ;
m [ 0 ] = " January " ;
m [ 1 ] = " February " ;
m [ 2 ] = " March " ;
m [ 3 ] = " April " ;
m [ 4 ] = " May " ;
m [ 5 ] = " June " ;
m [ 6 ] = " July " ;
m [ 7 ] = " August " ;
m [ 8 ] = " September " ;
m [ 9 ] = " October " ;
m [ 10 ] = " November " ;
m [ 11 ] = " December " ;
while ( cin >> s >> n )
int j = 0 ;
for ( map < char, int > :: iterator it = m. begin ( ) ; it!= m. end ( ) - 1 ; ++ it )
j ++ ;
if ( it -> second == s ) break ;
cout << m [ ( j + n - 1 ) % 12 ] << endl ;
string a ;
int s ;
cin >> a >> s ;
int d ;
if ( a == " January " )
d = 1 ;
else if ( a == " February " )
d = 2 ;
else if ( a == " March " )
d = 3 ;
else if ( a == " April " )
d = 4 ;
else if ( a == " May " )
d = 5 ;
else if ( a == " June " )
d = 6 ;
else if ( a == " July " )
d = 7 ;
else if ( a == " August " )
d = 8 ;
else if ( a == " September " )
d = 9 ;
else if ( a == " October " )
d = 10 ;
else if ( a == " November " )
d = 11 ;
else
d = 12 ;
d -- ;
d += s ;
d = d % 12 ;
if ( d == 0 )
a = " January " ;
else if ( d == 1 )
a = " February " ;
else if ( d == 2 )
a = " March " ;
else if ( d == 3 )
a = " April " ;
else if ( d == 4 )
a = " May " ;
else if ( d == 5 )
a = " June " ;
else if ( d == 6 )
a = " July " ;
else if ( d == 7 )
a = " August " ;
else if ( d == 8 )
a = " September " ;
else if ( d == 9 )
a = " October " ;
else if ( d == 10 )
a = " November " ;
else
a = " December " ;
cout << a << endl ;
vector < string > v ( 120 ) ;
for ( int i = 0 ; i < 120 ; i ++ )
v [ i ] = " January " ;
v [ i + 1 ] = " February " ;
v [ i + 2 ] = " March " ;
v [ i + 3 ] = " April " ;
v [ i + 4 ] = " May " ;
v [ i + 5 ] = " June " ;
v [ i + 6 ] = " July " ;
v [ i + 7 ] = " August " ;
v [ i + 8 ] = " September " ;
v [ i + 9 ] = " October " ;
v [ i + 10 ] = " November " ;
v [ i + 11 ] = " December " ;
string x ;
cin >> x ;
int n, z ;
cin >> n ;
for ( int i = 0 ; i < 120 ; i ++ )
if ( v [ i ] == x )
z = i ;
break ;
cout << v [ z + n ] << endl ;
int num [ 3005 ] ;
map < string, int > ma ;
int ans = 0 ;
bool is_prime ( int u )
string s ;
s = " January " ;
ma [ s ] = 1 ;
s = " February " ;
ma [ s ] = 2 ;
s = " March " ;
ma [ s ] = 3 ;
s = " April " ;
ma [ s ] = 4 ;
s = " May " ;
ma [ s ] = 5 ;
ma [ " June " ] = 6 ;
ma [ " July " ] = 7 ;
ma [ " August " ] = 8 ;
ma [ " September " ] = 9 ;
ma [ " October " ] = 10 ;
ma [ " November " ] = 11 ;
ma [ " December " ] = 12 ;
int n ;
cin >> s ;
cin >> n ;
if ( n % 12 == 0 )
cout << s << endl ;
else
int a = ma [ s ] ;
n += a ;
if ( n % 12 == 1 ) cout << " January " << endl ;
if ( n % 12 == 2 ) cout << " February " << endl ;
if ( n % 12 == 3 ) cout << " March " << endl ;
if ( n % 12 == 4 ) cout << " April " << endl ;
if ( n % 12 == 5 ) cout << " May " << endl ;
if ( n % 12 == 6 ) cout << " June " << endl ;
if ( n % 12 == 7 ) cout << " July " << endl ;
if ( n % 12 == 8 ) cout << " August " << endl ;
if ( n % 12 == 9 ) cout << " September " << endl ;
if ( n % 12 == 10 ) cout << " October " << endl ;
if ( n % 12 == 11 ) cout << " November " << endl ;
if ( n % 12 == 0 ) cout << " December " << endl ;
inline long long nxt ( )
long long _x = 0, _tmp = 1 ;
char _tc = getchar ( ) ;
while ( _tc <'0'|| _tc >'9'&& _tc!='-') _tc = getchar ( ) ;
if ( _tc =='-') _tc = getchar ( ), _tmp = - 1 ;
while ( _tc >='0'&& _tc <='9') _x *= 10, _x += ( _c - '0'), _tc = getchar ( ) ;
return _x * _tmp ;
string s [ 170 ] ;
for ( int i = 1 ; i <= 160 ; i ++ )
if ( i % 12 == 1 ) s [ i ] = " January " ;
if ( i % 12 == 2 ) s [ i ] = " February " ;
if ( i % 12 == 3 ) s [ i ] = " March " ;
if ( i % 12 == 4 ) s [ i ] = " April " ;
if ( i % 12 == 5 ) s [ i ] = " May " ;
if ( i % 12 == 6 ) s [ i ] = " June " ;
if ( i % 12 == 7 ) s [ i ] = " July " ;
if ( i % 12 == 8 ) s [ i ] = " August " ;
if ( i % 12 == 9 ) s [ i ] = " September " ;
if ( i % 12 == 10 ) s [ i ] = " October " ;
if ( i % 12 == 11 ) s [ i ] = " November " ;
if ( i % 12 == 0 ) s [ i ] = " December " ;
string str ;
int n ;
cin >> str >> n ;
for ( int i = 1 ; i <= 12 ; i ++ )
if ( s [ i ] == str ) cout << s [ j + n ] << endl ;
map < int, string > m ;
map < int, string > :: iterator it ;
char s [ 20 ] ;
int n ;
m [ 0 ] = " January " ;
m [ 1 ] = " February " ;
m [ 2 ] = " March " ;
m [ 3 ] = " April " ;
m [ 4 ] = " May " ;
m [ 5 ] = " June " ;
m [ 6 ] = " July " ;
m [ 7 ] = " August " ;
m [ 8 ] = " September " ;
m [ 9 ] = " October " ;
m [ 10 ] = " November " ;
m [ 11 ] = " December " ;
while ( cin >> s >> n )
int j = 0 ;
for ( map < char, int > :: iterator it = m. begin ( ) ; it!= m. end ( ) - 1 ; ++ it )
j ++ ;
if ( it -> second == s ) break ;
cout << m [ ( j + n - 1 ) % 12 ] << endl ;
int n, m, a, b, rub = 0 ;
cin >> n >> m >> a >> b ;
while ( n > 0 )
if ( n < m )
int flag = n * a ;
if ( flag < b )
rub += flag ;
n = 0 ;
else
rub += b ;
n -= m ;
else if ( ( a * m ) > b )
n -= m ;
rub += b ;
else
rub += n * a ;
n = 0 ;
cout << rub << " \n " ;
int n, m, a, b, r, d, cost = 0 ;
cin >> n >> m >> a >> b ;
r = n % m ;
d = n / m ;
if ( m > n )
if ( b < a * b )
cout << b << endl ;
else
cout << a * n << endl ;
if ( d * b < a * ( n - r ) )
cost += d * b ;
if ( r * a < b )
cost += r * a ;
else
cost += b ;
else
cost += a * n ;
cout << cost << endl ;
int n, m, a, b ;
cin >> n >> m >> a >> b ;
int x = ( ( n / m ) * b + ( n % m ) ) * a ;
int y = ( n / m + 1 ) * b ;
int z = n * a ;
cout << min ( x, min ( y, z ) ) << endl ;
int TESTS = 1 ;
while ( TESTS -- )
long long n, m, a, b ;
cin >> n >> m >> a >> b ;
vector < long long int > v ;
if ( b >= m * a )
cin >> n * a >>'\n';
else
long long c = n / m ;
long long ans = c * b ;
n -= c * m ;
ans += min ( b, a * n ) ;
cout << ans <<'\n';
long long n, m, a, b ;
cin >> n >> m >> a >> b ;
if ( m * a < b )
cout << n * a << endl ;
else
long long price = n / m * b + min ( n % m * a, b ) ;
cout << price << endl ;
int n, m, a, b ;
cin >> n >> m >> a >> b ;
if ( m * a > b )
cout << min ( ( ( n / m ) * b + ( n % m ) ) * a, ( ( 1 ) / b ) ) << endl ;
cout << min ( n * a, ( ( n / m ) + 1 ) * b ) << endl ;
int n, m ;
float a, b ;
cin >> n >> m >> a >> b ;
int sum = 0 ;
if ( ( n % m ) * a <= b )
sum += n / m * b + ( n % m ) * a ;
else
sum = ( n / m + 1 ) * b ;
if ( sum > n * m ) sum = n * a ;
cout << sum << endl ;
long long int n, m, a, b ;
cin >> n >> m >> a >> b ;
if ( m * a < b )
cout << n * a << endl ;
else
long long int price = ( n / m ) * b + min ( n % m, b ) ;
cout << price << endl ;
long long n, m, a, b ;
cin >> n >> m >> a >> b ;
if ( m * a < b )
cout << n * a << endl ;
else
long long price = ( n / m ) * b + min ( n % m, b ) ;
cout << price << endl ;
int m, n, a, b, cost ;
cin >> n >> m >> a >> b ;
if ( a > b / m )
cost = ( n / m ) * b ;
if ( a * ( n % m ) < b )
cost += a * ( n % m ) ;
else
cost += b ;
else
cost = n * a ;
cout << cost << endl ;
int n, m, a, b ;
cin >> n >> m >> a >> b ;
int sum = a * n ;
int msum = b ;
int rides = m ;
while ( rides <= n )
msum += b ;
rides += m ;
msum -= b ;
rides -= m ;
if ( sum <= msum )
cout << sum << endl ;
else
if ( rides < n )
int newsum = msum + ( n - rides ) * a ;
msum += b ;
hides += m ;
int numsum1 = msum ;
if ( newsum1 <= newsum )
cout << newsum1 << endl ;
else
cout << newsum << endl ;
else if ( rides > n )
int newsum = msum + ( n - rides ) * a ;
msum += b ;
rides += m ;
int newsum1 = msum ;
if ( newsum1 <= newsum )
cout << newsum1 << endl ;
else
cout << newsum << endl ;
else
cout << msum << endl ;
int n, m = 2 ;
cin >> n ;
cout << m << endl ;
for ( int i = 1 ; i < n - 1 ; ++ i )
m += i + 1 ;
if ( m % n == 0 )
cout << "   " << n ;
else
cout << "   " << m % n << endl ;
cout << endl ;
int n, m = 2 ;
cin >> n ;
cout << m << endl ;
for ( int i = 1 ; i < n - 1 ; ++ i )
m += i + 1 ;
if ( m % n == 0 )
cout << "   " << n << endl ;
else
cout << "   " << m % n << endl ;
cout << endl ;
int n ;
cin >> n ;
int cur = 0 ;
for ( int i = 1 ; i < n ; i ++ )
if ( i > 1 ) cout << "   " ;
cur += i ;
cur = cur % n ;
cout << cur + 1 << endl ;
cout << endl ;
int n, i, a [ 200 ] ;
cin >> n ;
a [ 0 ] = 1 ;
for ( i = 1 ; i <= n - 1 ; ++ i )
a [ i ] = ( a [ i - 1 ] + i ) % n ;
if ( a [ i ] == 0 ) a [ j ] = n ;
for ( i = 1 ; i < n - 1 ; ++ i ) { cout << a [ i ] << "   " ; }
cout << a [ n - 1 ] << endl ;
int n, a [ 200 ], i ;
cin >> n ;
a [ 0 ] = 1 ;
for ( i = 1 ; i <= n - 1 ; ++ i )
a [ i ] = ( a [ i - 1 ] + i ) % n ;
if ( a [ i ] == 0 ) a [ j ] = n ;
for ( i = 1 ; i < n - 1 ; ++ i ) { cout << a [ i ] << "   " ; }
cout << a [ n - 1 ] << endl ;
map < long long, long long > mp ;
vector < string > s ;
vector < int > v ;
int m ;
cin >> m ;
int k = m, i = 1, j = 1 ;
m -- ;
while ( m -- )
j += i ;
int ans = j % k ;
if ( ans == 0 ) ans = j ;
cout << ans << endl ;
if ( m == 0 )
cout << endl ;
else
cout << "  " ;
i ++ ;
j %= k ;
if ( j == 0 ) j = ans ;
vector < int > v ( 6 ) ;
for ( int i = 0 ; i < v [ 0 ] ; i ++ ) { cin >> v [ 1 ] >> vl [ 2 ] >> V [ 3 ] >> [ 4 ] >> c [ 5 ] ; }
sort ( v. begin ( ), v. end ( ) ) ;
int h, b ;
if ( v [ 0 ] == v [ 3 ] )
h = 4 ;
b = 5 ;
else if ( v [ 1 ] == v [ 4 ] )
h = 0 ;
b = 5 ;
else if ( v [ 2 ] == v [ 5 ] )
h = 0 ;
b = 1 ;
else
cout << " Alien\n " ;
cout << ( v [ h ] < v [ b ]? " Bear\n " : " Elephant \n " ) ;
const int INF = ( 0x3f3f )3f ;
int a [ 11 ] ;
int n, m, t ;
int i, j, k ;
for ( i = 0 ; i < 6 ; i ++ ) cin >> t, a [ t ] ++ ;
for ( i = 1 ; i <= 9 ; i ++ )
if ( a [ i ] >= 4 ) break ;
if ( i > 9 )
puts ( " Alien " ) ;
for ( i = 1 ; i <= 9 ; i ++ )
if ( a [ i ] == 2 || a [ j ] == 6 ) break ;
if ( i > 9 )
puts ( " Bear " ) ;
puts ( " Elephant " ) ;
int a [ 10 ] ;
int x ;
for ( int i = 1 ; i <= 6 ; i ++ )
cin >> x ;
a [ x ] ++ ;
int y = - 2, z = - 1 ;
for ( int i = 1 ; i <= 9 ; i ++ )
if ( a [ i ] >= 4 ) z = i ;
if ( z!= - 1 )
a [ z ] -= 4 ;
for ( int i = 1 ; i <= 9 ; i ++ )
if ( a [ i ] == 1 && y == - 1 ) y = i ;
if ( a [ i ] == 1 && y!= - 1 ) z = i ;
if ( a [ i ] == 2 ) { y = z = a [ 1 ] ; }
if ( y == z )
cout << " Elephant " << endl ;
else
cout << " Bear " ;
else
cout << " Alien\n " ;
int i, j, n, p = 0, a [ 10 ] = { 0 }, q, flag = 0 ;
for ( i = 0 ; i < 6 ; i ++ )
cin >> n ;
a [ n ] ++ ;
for ( i = 0 ; i <= 9 ; i ++ )
if ( a [ i ] >= 4 )
a [ i ] -= 4 ;
flag = 1 ;
if ( flag == 0 )
cout << " Alien " << endl ;
for ( i = 0 ; i <= 9 ; i ++ )
if ( a [ i ] == 2 )
cout << " Elephant " << endl ;
cout << " Bear " << endl ;
int ar [ 12 ] ;
int a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
ar [ a ] ++ ;
ar [ b ] ++ ;
ar [ c ] ++ ;
ar [ d ] ++ ;
ar [ e ] ++ ;
ar [ f ] ++ ;
bool paichi = false ;
for ( int i = 1 ; i <= 9 ; i ++ )
if ( ar [ i ] >= 4 ) paichi = true ;
if (! paichi ) return puts ( " Alien " ), 0 ;
int cnt = 0 ;
for ( int i = 1 ; i <= 9 ; i ++ )
if ( ar [ i ] == 2 || ar [ j ] == 6 ) return cout << " Elephant " << endl, 0 ;
cout << " Bear " << endl ;
int A [ 6 ] ;
for ( int i = 0 ; i < 6 ; i ++ ) cin >> A [ i ] ;
sort ( A, A + 6 ) ;
int B, C ;
if ( A [ 0 ] == A [ 3 ] )
B = A [ 4 ], C = Ap [ 5 ] ;
else if ( A [ 1 ] == A [ 4 ] )
B = A [ 0 ], C = Ap 5 ] ;
else if ( A [ 2 ] == A [ 5 ] )
B = A [ 0 ], C = A1 ] ;
else
cout << " Alien " << endl ;
if ( B == C )
cout << " Elephant " << endl ;
if ( B < C )
cout << " Bear " << endl ;
char dp [ 11 ] [ 10 ] ;
map < long long, long long > mp ;
long long n, x ;
long long a [ 10 ] ;
for ( int i = 0 ; i < 6 ; i ++ )
cin >> a [ i ] ;
mp [ a [ i ] ] ++ ;
bool ok = false ;
for ( int i = 0 ; i < 6 ; i ++ )
if ( mp [ a [ i ] ] == 6 ) ok = true ;
if ( ok )
cout << " Elephant " << endl ;
for ( int i = 0 ; i < 6 ; i ++ )
if ( mp [ a [ i ] ] == 5 ) ok = true ;
if ( ok )
cout << " Bear " << endl ;
for ( int i = 0 ; i < 6 ; i ++ )
if ( mp [ a [ i ] ] == 4 ) ok = true ;
if (! ok )
cout << " Alien " << endl ;
for ( int i = 0 ; i < 6 ; i ++ )
if ( mp [ a [ i ] ] == 2 ) ok = false ;
if ( ok )
cout << " Bear " << endl ;
else
cout << " Elephant " << endl ;
int b [ 10 ], c [ 6 ] ;
int a [ 6 ], i, x, j = 0 ;
for ( i = 0 ; i < 6 ; i ++ )
cin >> a [ i ] ;
x = a [ i ] ;
b [ x ] ++ ;
for ( i = 1 ; i <= 9 ; i ++ )
if ( b [ i ]!= 0 )
c [ j ] = b [ i ] ;
j ++ ;
sort ( c, c + 3 ) ;
if ( c [ 0 ] == 1 && c [ 1 ] =='1'and c [ 2 ] == 4 )
puts ( " Bear " ) ;
else if ( c [ 0 ] == 0 && c [ 1 ] == 1 and c [ 2 ] == 5 )
cout << " Bear " << endl ;
else if ( c [ 0 ] =='0'&& c [ 1 ] == 2 and c [ 2 ] == 4 )
cout << " Elephant " << endl ;
else if ( c [ 2 ] == 6 )
cout << " Elephant " << endl ;
else
cout << " Alien " << endl ;
int i, j, n, p = 0, a [ 10 ] = { 0 }, q, flag = 0 ;
for ( i = 0 ; i < 6 ; i ++ )
cin >> n ;
a [ n ] ++ ;
for ( i = 0 ; i <= 9 ; i ++ )
if ( a [ i ] >= 4 )
a [ i ] -= 4 ;
flag = 1 ;
if ( flag == 0 )
cout << " Alien " << endl ;
for ( i = 0 ; i <= 9 ; i ++ )
if ( a [ i ] == 2 )
cout << " Elephant " << endl ;
cout << " Bear " << endl ;
int list [ 10 ] ;
memset ( list, 0, sizeof ( list ) ) ;
for ( int i = 0 ; i < 6 ; i ++ )
int temp ;
cin >> temp ;
list [ temp ] ++ ;
for ( int i = 0 ; i < 10 ; i ++ )
if ( list [ i ] == 4 )
for ( int j = 0 ; j < 10 ; j ++ )
if ( list [ j ] == 2 )
cout << " Elephant " << endl ;
cout << " Bear " << endl ;
else if ( list [ i ] == 5 )
cout << " Bear " << endl ;
else if ( list [ i ] == 6 )
cout << " Elephant " << endl ;
cout << " Alien " << endl ;
int mp [ 20 ] ;
int n ;
vector < int > Q ;
memset ( mp, 0, sizeof ( mp ) ) ;
for ( int i = 1 ; i <= 6 ; i ++ )
int p ;
cin >> p ;
mp [ p ] ++ ;
Q. push_back ( p ) ;
int flag1 = 0, flag2 = 0 ;
for ( int i = 0 ; i < Q. size ( ) ; i ++ )
if ( mp [ Q [ i ] ] >= 4 ) flag1 = 1 ;
if ( mp [ Q [ i ] ] == 2 ) flag2 = 1 ;
if ( mp [ Q [ i ] ] == 6 )
flag1 = 1 ;
flag2 = 1 ;
if ( flag1 == 1 && flag2 == 0 )
cout << " Bear\n " ;
else if ( flag1 == 1 && flag2 == 1 )
cout << " Elephant\n " ;
else
cout << " Alien\n " ;
int a, b, n, s [ 10 ] ;
for ( int i = 0 ; i < 6 ; i ++ )
cin >> n ;
s [ n ] ++ ;
for ( int i = 0 ; i < 10 ; i ++ )
if ( s [ i ] >= 4 ) b = 1 ;
if ( s [ i ] == 2 || s [ j ] == 6 ) a = 1 ;
if ( b == 0 )
cout << " Alien\n " ;
else if ( a == 1 )
cout << " Elephant " << endl ;
else
cout << " Bear " << endl ;
map < int, int > mp ;
for ( int i = 0 ; i < 6 ; i ++ )
int p ;
cin >> p ;
mp [ p ] ++ ;
if ( mp. size ( ) > 3 )
puts ( " Alien " ) ;
if ( mp. size ( ) == 3 )
int f = 0 ;
map < int, int > :: iterator it ;
for ( it ; it!= mp. end ( ) ; it ++ )
if ( it -> second == 4 )
f = 1 ;
break ;
if ( f!= 0 )
cout << " Bear " << endl ;
else
cout << " Alien " << endl ;
if ( mp. size ( ) == 2 )
int f = 0 ;
map < string, int > :: iterator it ;
for ( it = mp. begin ( ) / 2 ; it!= mp. end ( ) ; it ++ )
if ( it -> second == 2 )
f = 1 ;
break ;
if ( it -> second == 3 )
cout << " Alien " << endl ;
if ( f!= 0 )
cout << " Elephant " << endl ;
else
cout << " Bear " << endl ;
if ( mp. size ( ) == 1 )
cout << " Elephant " << endl ;
long long l, r ;
cin >> l >> r ;
if ( r - l > 1 )
if ( l % 2 == 0 )
cout << l <<' '<< l + 1 <<'\n'>> l + 2 << endl ;
else
if ( r - l > 2 )
cout << ( l + 1 ) <<' '<< l + 2 <<'\n'>> l + 3 << endl ;
else
cout << - 1 << endl ;
else
cout << - 1 << endl ;
long long tmp, min1, max1, sum_n, index_max,index_min ;
int arr1 [ 100 ] [ 1000 ] ;
char arr3 [ 100 ] ;
int arr [ 10000 ] ;
void display_vector ( vector < int > v )
for ( int i = 0 ; i < v. size ( ) ; i ++ ) { cout << v [ i ] << "   " ; }
cout << endl ;
void speed ( ) { }
void min_max ( vector < int > v, int l )
min1 = INT_MAX ;
max1 = INT_MIN ;
for ( int i = l ; i < v. size ( ) ; i ++ )
if ( v [ i ] <= min1 )
min1 = v [ i ] ;
index_min = i ;
if ( v [ i ] >= max1 )
max1 = v [ i ] ;
index_max = i ;
int sum_v ( vector < int > v )
for ( int i = 0 ; i < v. size ( ) ; i ++ ) sum_n += v [ i ] ;
return sum_n ;
bool is_it_sorted_acs ( vector < int > v )
bool test1 = false ;
for ( int i = 0 ; i < v. size ( ) - 1 ; i ++ )
if ( v [ i + 1 ] <= v [ 1 ] )
test1 = false ;
return test1 ;
test1 = true ;
return test1 ;
bool is_it_sorted_des ( vector < int > v )
bool test1 = false ;
for ( int i = 0 ; i < v. size ( ) - 1 ; i ++ )
if ( v [ i + 1 ] >= v [ 1 ] )
test1 = false ;
return test1 ;
test1 = true ;
return test1 ;
speed ( ) ;
long long l, r ;
cin >> l >> r ;
if ( l % 2 == 1 ) l ++ ;
if ( r - l < 2 ) return cout << - 1 << endl, 0 ;
cout << l << "   " << l + 1 <<' '<< ( l + 2 ) << endl ;
long long l, r ;
cin >> l >> r ;
if ( r - l + 1 < 3 )
cout << - 1 << endl ;
if ( l % 2!= 0 )
cout << l <<' '<< l + 1 <<'\n'>> l + 2 << endl ;
if ( r - l + 1 > 3 )
cout << ( l + 1 ) <<' '<< l + 2 << "   " << ( long long ) l + 3 << endl ;
cout << - 1 << endl ;
long long l, r ;
cin >> l >> r ;
if ( r - l + 1 < 3 )
cout << - 1 << endl ;
if ( l % 2 == 0 )
cout << l << "   " << l + 1 <<' '<< ( l + 2 ) << endl ;
if ( r - l + 1 > 3 )
cout << l + 1 << "   " << ( l + 2 ) <<' '<< ( long long ) l + 3 << endl ;
cout << - 1 << endl ;
int long long l, r ;
cin >> l >> r ;
if ( l % 2!= 0 ) l ++ ;
if ( l + 2 > r )
cout << - 1 << endl ;
else
cout << l <<' '<< l + 1 << "   " << ( l + 2 ) << endl ;
long long k, l ;
while ( cin >> k >> l )
if ( l - k < 2 )
cout << - 1 << endl ;
else if ( k % 2 == 0 )
cout << k << "   " << ( k + 1 ) <<' '<< k + 2 << endl ;
else if ( k % 2!= 0 && l - k >= 3 )
cout << k + 1 << "   " << ( k + 2 ) <<' '<< l + 3 << endl ;
else
cout << - 1 << endl ;
long long n, m ;
cin >> n >> m ;
if ( m - n < 2 )
cout << - 1 << endl ;
else
if ( n % 2 == 0 )
cout << n << "   " << ( n + 1 ) <<' '<< n + 2 << endl ;
else if ( n % 2!= 0 && n + 3 <= m )
cout << n + 1 << "   " << ( n + 2 ) << endl << ( long long ) n + 3 << endline ;
else
cout << - 1 << endl ;
long long int a, b ;
cin >> a >> b ;
if ( a % 2 == 0 && a + 2 <= b )
cout << a << "   " << ( a + 1 ) <<' '<< a + 2 << endl ;
else if ( a % 2!= 0 && a + 3 <= b )
cout << a + 1 << "   " << ( a + 2 ) <<' '<< ( b + 3 ) << endl ;
else
cout << - 1 << endl ;
long long l, r ;
cin >> l >> r ;
if ( r - l + 1 < 3 )
cin >> - 1 ;
if ( ( r - l + 1 ) == 3 && r % 2!= 0 || ( l % 2 )!= 0 )
cout << - 1 << endl ;
if ( ( l % 2 == 0 ) && ( l + 2 == 1 ) )
cout << l << "   " << ( l + 1 ) <<' '<< l + 2 << endl ;
else
cout << ( l + 1 ) << "   " << l + 2 <<' '<< r + 3 << endl ;
long long l, r ;
cin >> l >> r ;
if ( r - l + 1 < 3 )
cout << - 1 << endl ;
if ( l % 2 == 0 )
cout << l <<' '<< ( l + 1 ) << "   " << l + 2 << endl ;
if ( r - l + 1 > 3 )
cout << l + 1 <<' '<< ( l + 2 ) << "   " << ( long long ) l + 3 << endl ;
cout << - 1 << endl ;
long long n1, n2 ;
cin >> n1 >> n2 ;
if ( n1 % 2!= 0 ) n1 ++ ;
if ( n2 - n1 < 2 )
cout << - 1 << endl ;
else
cout << n1 << "   " << ( n1 + 1 ) <<' '<< l + 2 << endl ;
long long l, r ;
cin >> l >> r ;
if ( r - l < 2 )
cout << - 1 << endl ;
else if ( r - l == 2 )
if ( r % 2 )
cout << - 1 << endl ;
else
cout << l << "   " << l + 1 <<' '<< r << endl ;
else
if ( l % 2 )
cout << ( l + 1 ) << "   " << l + 2 <<' '+ l + 3 << endl ;
else
cout << l << "   " << l + 1 <<' '<< ( l + 2 ) << endl ;
long long l, r ;
cin >> l >> r ;
if ( l % 2 == 0 && l + 2 <= r )
cout << ( l << "   " << l + 1 <<'  ', l + 2 ) << endl ;
else
l + 3 <= r ;
cout << ( l + 1 ) << "   " << l + 2 <<' '<< r + 3 << endl ;
else
cout << - 1 << endl ;
int n, res = 0 ;
cin >> n ;
int total = 0 ;
while ( total < n )
res ++ ;
total += res * ( res + 1 ) / 2 ;
if ( total > n ) res -- ;
cout << res << endl ;
int n, i, j, x, mohi ;
long long sum = 0 ;
vector < int > v ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ )
for ( j = 1 ; j <= i ; j ++ )
mohi = ( j * ( j + 1 ) ) / 2 ;
sum += mohi ;
if ( sum < n )
x = i ;
break ;
sum = 0 ;
if ( n == 1 )
cout << 1 << endl ;
else
cout << x - 1 << endl ;
int n, ans, sum, sum2 ;
while ( cin >> n )
ans = sum = 0, sum2 = 0 ;
while ( 1 )
if ( sum2 > n ) break ;
ans ++ ;
sum += ans ;
sum2 += sum ;
cout << ans - 1 << endl ;
int Addition ( int n )
int s ;
s = ( n * ( 1 + n ) ) / 2 ;
return s ;
int a, i = 0 ;
cin >> a ;
if ( a > 0 )
a -= Addition ( i ) ;
while ( a > 0 )
i ++ ;
a -= Addition ( i + 1 ) ;
cout << i << endl ;
else
cout << " 0 " ;
int n, a = 0, b = 0 ;
cin >> n ;
for ( int i = 1 ; i < n ; i ++ )
a += i ;
n = n - a ;
if ( n >= 0 ) b ++ ;
cout << b << endl ;
int a [ 151 ], sum = 0, sum1 = 0 ;
cin >> sum ;
for ( int i = 1 ; i <= 150 ; i ++ )
a [ i ] = ( 1 + i ) * i / 2 ;
sum1 += a [ i ] ;
a [ i + 1 ] = ( 2 + i ) * ( i + 2 ) / 2 ;
if ( sum >= sum1 && sum < sum1 + a [ i + 1 ] )
cout << i << endl ;
break ;
int n, s = 0 ;
cin >> n ;
for ( int i = 1 ; ; i ++ )
if ( s > n )
cout << i - 2 << endl ;
break ;
else
s = s + ( i * ( i + 1 ) ) / 2 ;
int var = 1, n, aux = 0, x = 0 ;
cin >> n ;
int level = 0 ;
while ( 1 )
x += var ;
aux += x ;
if ( aux > n ) break ;
level ++ ;
var ++ ;
cout << level << endl ;
const int INF = 1e9 ;
const int N = 1e5 ;
int arr [ 10001 ] ;
void prework ( )
arr [ 0 ] = 0 ;
for ( int i = 1 ; i <= 10000 ; i ++ ) { arr [ i ] = arr [ j - 1 ] + i ; }
prework ( ) ;
int n, cnt = 0 ;
cin >> n ;
for ( int i = 1 ; ; i ++ )
if ( n < arr [ i ] ) break ;
n = n - arr [ i ] ;
cnt ++ ;
cout << cnt << endl ;
int n, c = 0, d, count = 0 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
c += 1 ;
if ( n >= c ) count ++ ;
n = n - c ;
cout << count << endl ;
int n ;
cin >> n ;
int h = 1 ;
int temp = ( ( h ) * ( h + 1 ) * i + 2 ) ) / 6 ;
while ( temp <= n )
h ++ ;
for ( int i = 1 ; i <= n ; i ++ ) { temp = ( ( h ) * ( h + 1 ) * i + 2 ) ) / 6 ; }
cout << h - 1 << endl ;
long long n ;
cin >> n ;
long long val = 0, ans = 0 ;
for ( int i = 0 ; i < 10001 ; i ++ )
val += i ;
ans += val ;
if ( ans > n )
cout << i - 1 << endl ;
int sum ( int n )
int s = ( n * ( n + 1 ) ) / 2 ;
return s ;
int n ;
cin >> n ;
int i = 0 ;
int s = 0 ;
while ( 1 )
s += i ;
if ( s > n )
break ;
else
i ++ ;
cout << i - 1 << endl ;
int n, count = 0 ;
cin >> n ;
int flag = 0, i = 2, x = 1 ;
while ( flag <= n )
flag += x ;
x += i ;
i ++ ;
if ( flag <= n ) count ++ ;
cout << count << endl ;
int n ;
cin >> n ;
int tot = 0, ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
tot += i * ( i + 1 ) / 2 ;
if ( tot > n ) break ;
ans = i ;
cout << ans << endl ;
long long n, x = 1, count = 0, boxes = 0 ;
cin >> n ;
long long i = 1 ;
long long j = 1 ;
while ( boxes + i + x <= n )
x += i ;
i += j ;
count ++ ;
boxes += x ;
cout << count << endl ;
int i, n, k ;
while ( cin >> n )
k = 0 ;
for ( ; n >= 0 ; i ++ )
k += i ;
n -= k ;
cout << i - 2 << endl ;
int a [ 10010 ] ;
a [ 1 ] = 1 ;
long long sum, m ;
for ( int i = 2 ; i <= 10000 ; i ++ ) { a [ i ] = a [ j - 1 ] + i ; }
while ( cin >> m )
for ( int i = 1 ; i <= 10000 ; i ++ )
m -= a [ i ] ;
if ( m < a [ i + 1 ] )
cout << i << endl ;
break ;
vector < int > sol ;
int n ;
cin >> n ;
int sum = 0 ;
for ( int i = 1 ; i <= 150 ; i ++ )
if ( sum > n )
cout << i - 2 << endl ;
sum += ( ( i * ( i + 1 ) ) / 2 ) ;
int a [ 10010 ] ;
a [ 0 ] = 0 ;
for ( int i = 1 ; i <= 10000 ; i ++ ) { a [ i ] = a [ j - 1 ] + i ; }
int n ;
while ( cin >> n )
int ans = 0 ;
for ( int i = 1 ; ; i ++ )
if ( n >= a [ i ] )
n -= a [ i ], ans ++ ;
else
break ;
cout << ans << endl ;
long long int n, i, l, s = 0 ;
cin >> n ;
for ( l = 0 ; ; l ++ )
s += l * ( l + 1 ) / 2 ;
if ( s > n ) break ;
cout << l - 1 << endl ;
int n ;
cin >> n ;
int ans = 0, t = 1, q = 1 ;
ans += t ;
while ( n >= ans )
q ++ ;
t += q ;
ans += t ;
cout << q - 1 << endl ;
int n ;
cin >> n ;
int a = 1, c = 0, b = 0 and i ;
for ( i = 1 ; i <= n ; i ++ )
b = ( i * ( i + 1 ) ) / 2 ;
a += b ;
if ( a > n ) break ;
c ++ ;
cout << c << endl ;
int n, c ;
cin >> n ;
for ( c = 1 ; c * ( c + 1 ) * ( long long ) c + 2 ) / 6 <= n ; )
;
cout << c - 1 << endl ;
int n ;
cin >> n ;
int i = 2 ;
while ( n - i * ( i + 1 ) / 2 > 0 )
n -= i * ( i + 1 ) / 2 ;
i ++ ;
cout << i - 1 << endl ;
int a [ 10010 ] ;
a [ 1 ] = 1 ;
long long int sum, m ;
for ( int i = 2 ; i <= 10000 ; i ++ ) { a [ i ] = a [ ( i - 1 ] + i ) ; }
while ( cin >> m )
for ( int i = 1 ; i <= 10000 ; i ++ )
m -= a [ i ] ;
if ( m < a [ i + 1 ] )
cout << i << endl ;
break ;
int n ;
int a = 0 ;
int b = 1 ;
int c = 0 ;
cin >> n ;
while ( 1 )
for ( int i = 1 ; i <= b ; i ++ ) { a += i ; }
b ++ ;
if ( a > n ) break ;
c ++ ;
cout << c << endl ;
int n, r = 0, t = 0 ;
cin >> n ;
for ( int i = 1 ; ; i ++ )
r += i ;
t += r ;
if ( t > n )
cout << i - 1 << endl ;
break ;
int n ;
while ( cin >> n )
long long int sum = 0 ;
int i ;
for ( i = 1 ; ; i ++ )
long long current = 1LL * i * ( i + 1 ) / 2 ;
if ( sum + current <= n )
n = n - sum + current ;
else
break ;
cout << i - 1 << endl ;
long long cube ;
long long res ;
cin >> cube ;
for ( long long i = 0 ; i * ( i + 1 ) * ( long + 2 ) <= 6 * cube ; i ++ ) res = i ;
cout << res << endl ;
int need ( int a )
int b = 0 ;
for ( int i = 1 ; i <= a ; i ++ ) b += i ;
return b ;
int a ;
cin >> a ;
int i = 0 ;
while ( a >= need ( i ) )
a -= need ( 1 ) ;
i ++ ;
cout << i - 1 << endl ;
int n ;
cin >> n ;
int sum, i, b ;
sum = b = i = 1 ;
while ( 1 )
if ( sum == n )
cout << i << endl ;
break ;
else
if ( sum > n )
cout << i - 1 << endl ;
break ;
else
i ++ ;
b += i ;
sum += b ;
int n ;
cin >> n ;
int sum = 0, height = 0 ;
while ( sum <= n )
height ++ ;
sum += height * ( height + 1 ) / 2 ;
cout << height - 1 << endl ;
int n, sum, level ;
while ( cin >> n )
if ( n == 1 )
cout << 1 << endl ;
continue ;
sum = 1, level = 1 ;
for ( int i = 2 ; ; i ++ )
level += i ;
sum += level ;
if ( sum == n )
cout << i << endl ;
break ;
else if ( sum > n )
cout << i - 1 << endl ;
break ;
int n ;
cin >> n ;
if ( n < 4 )
cout << 1 << endl ;
int cnt = 0, m = 1, i = 1 and sum = 0 ;
while ( sum + i <= n )
sum += i ;
cnt ++ ;
m ++ ;
i += m ;
cout << cnt << endl ;
int n ;
cin >> n ;
int sum1 [ 1000 ] = { 0 } ;
int sum2 [ 1000 ] = { 1 } ;
int sum = 0 ;
for ( int i = 1 ; i < 50 ; i ++ )
sum += i ;
sum1 [ i - 1 ] = sum ;
sum1 [ i ] += i + 1 ;
sum2 [ j ] = sum2 [ i - 1 ] + sum1 [ i ] ;
if ( ( sum2 [ i - 1 ] <= n ) && ( sum1 [ i ] > n ) ) cout << i << endl ;
int n ;
cin >> n ;
int cont = 0 ;
int sumador = 1 ;
int i = 1 ;
while ( n > 0 && n >= sumador )
n = n - sumador ;
cont ++ ;
i ++ ;
sumador = sumador + 1 ;
cout << cont << " \n " ;
int n, i ;
cin >> n ;
for ( i = 1 ; i <= 40 ; i ++ )
if ( i * ( i + 1 ) * ( 1 + 2 ) / 6 > n ) break ;
cout << i - 1 << endl ;
int n, tmp = 0, hitung = 0 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
hitung += ( ( i * ( i + 1 ) ) / 2 ) ;
if ( hitung == n )
tmp = i ;
break ;
else if ( hitung > n )
tmp = i - 1 ;
break ;
cout << tmp << endl ;
int length = 1e5 ;
int n, i, sum = 0 ;
cin >> n ;
vector < int > a ( n + 1 ) ;
a [ 0 ] = 0 ;
for ( i = 1 ; i <= n ; i ++ ) { a [ i ] = a [ j - 1 ] + i ; }
for ( i = 1 ; sum <= n && i <= n ; i ++ ) { sum += a [ i ] ; }
if ( n == 1 ) ++ i ;
cout << i - 2 << endl ;
int n ;
while ( cin >> n )
long long sum = 0 ;
int i ;
for ( i = 1 ; ; i ++ )
long long current = 1LL * i * ( i + 1 ) / 2 ;
if ( sum + current <= n )
n -= ( sum + current ) ;
else
break ;
cout << i - 1 << endl ;
int n ;
while ( cin >> n )
long long sum = 0, prev, x = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
prev += sum ;
sum += i ;
if ( sum + prev <= n )
x ++ ;
else
break ;
cout << x << endl ;
int inum ( int * a, int * k, int i )
for ( int l = 1 ; l <= k ; l ++ )
if ( a [ l - 1 ]!= 1 )
a [ l ] = a [ l - 1 ] + ( l + 1 ) ;
else
a [ l ] = inum ( a, l, i ) + l + 1 ;
return a + ( k - 1 ) ;
int isum ( int i )
int arr [ i ] = { 0 }, a [ i + 1 ] ={ 0 } ;
arr [ i ] = - 1 ;
a [ i ] = - 1 ;
a [ 0 ] = 1 ;
arr [ 0 ] = 1 ;
if ( i == 1 )
return i ;
else
int j = 1 ;
for ( j ; j < i ; )
if ( arr [ j - 1 ]!= - 1 )
arr [ j ] = arr [ j - 1 ] + inum ( a, j + 1, i ) ;
else
arr [ j ] = ( isnum ( j + j + 1 ) ) ;
return arr + ( i - 1 ) ;
int n, i = 1 ;
cin >> n ;
for ( ;! ( isnum ( i ) ) ; i ++ )
cout << i - 1 << endl ;
long long int n, cnt, sum, ans, i ;
cin >> n ;
cnt be 0, ans = 0, sum = 0 ;
for ( i = 1 ; i <= 10000 ; i ++ )
ans += i ;
sum += ans ;
if ( sum > n ) break ;
cnt ++ ;
cout << cnt << endl ;
int n ;
int a [ 100 ] ;
while ( cin >> n )
int i = 2, sum = 0 ;
int cs = 0 ;
a [ 1 ] = 1 ;
for ( int i = 2 ; i < n ; i ++ )
a [ i ] = i + a [ i - 1 ] ;
sum += a [ i ] ;
cs = i - 1 ;
cout << cs << endl ;
int n, i = 0, l = 0 ;
cin >> n ;
while ( l <= n )
i ++ ;
l += ( i * ( i + 1 ) ) / 2 ;
cout << i - 1 << endl ;
long long cum [ 102 ] ;
for ( int i = 1 ; i <= 100 ; i ++ ) { cum [ i ] = i ; }
for ( int i = 2 ; i <= 100 ; i ++ ) { cum [ i ] += cum [ j - 1 ] ; }
int n ;
cin >> n ;
long long sum = 0 ;
int Count = 0 ;
int i ;
for ( i = 1 ; sum <= n ; i ++ )
sum += cum [ i ] ;
if ( sum > n )
break ;
else
Count ++ ;
cout << Count << endl ;
int sum = 1 ;
int levels = 1 ;
int counter = 0 ;
int n ;
cin >> n ;
for ( int i = 2 ; i <= n ; i ++ )
counter ++ ;
levels += i ;
sum += levels ;
cout << counter << endl ;
long long n ;
while ( cin >> n )
int i ;
long long t = 0 ;
long long k = 0 ;
int last ;
for ( i = 1 ; ; i ++ )
t += i ;
k += t ;
if ( n >= k )
last = i ;
else
break ;
if ( n == 0 ) last = 0 ;
cout << last << endl ;
int check ( string s, int i, int j )
int l = i, r = j ;
while ( l < r )
if ( s [ l ] == s [ r ] )
l ++ ;
r -- ;
continue ;
else
return 1 ;
string s ;
cin >> s ;
int i, n = s. size ( ), j ;
i = 0 ;
j = n - 1 ;
while ( i < j )
if ( s [ i ]!= s [ j ] )
if ( i + 1 == j )
s. insert ( s. begin ( ) + j + 1 ) ;
cout << s << endl ;
else
if ( check ( s, i + 1, j ) == 1 )
s. insert ( s. begin ( ) + j + 1 ) ;
cout << s << endl ;
else if ( check ( s, i, j - 1 ) == 1 )
s. insert ( s. begin ( ) + i ) ;
cout << s << endl ;
else
cout << " NA " << endl ;
else
i ++ ;
j -- ;
if ( s. size ( ) % 2 == 0 )
s. push_back ('a') + n / 2 ;
cout << s << endl ;
else
s [ s. begin ( ) + n / 2 + 1 ]. push_back ('a') ;
cout << s << endl ;
char s1 [ 15 ] ;
char s2 [ 15 ] ;
char s [ 15 ] ;
int f = 0 ;
cin >> s1 ;
int n = strlen ( s1 ) ;
bool flag = 0 ;
for ( int i = 0 ; i < 26 ; i ++ )
for ( int j = 0 ; j <= n ; j ++ )
f = 0 ;
for ( int k = 0 ; k < j ; k ++ ) { s [ k ] = s1 [ i ] ; }
s [ j ] = char ('a'+ i ) ;
for ( int k = j + 1 ; k <= n ; k ++ ) { s [ k ] = s1 [ k - 1 ] ; }
for ( int i = 0, j = n ; i < j ; i ++, j -- )
if ( s [ i ]!= s [ j ] )
f ++ ;
if ( f >= 1 ) break ;
if ( f == 0 )
for ( int i = 0 ; i < n ; i ++ ) { cout << s [ i ] ; }
cout << endl ;
cout << " NA " << endl ;
string s ;
cin >> s ;
int pntr = s. length ( ) - 1 ;
char c ;
for ( int i = 0 ; i < s. length ( ) / 2 ; i ++ )
if ( s [ i ]!= s [ pntr ] )
bool b = true ;
int pntr2 = pntl ;
for ( int j = i + 1 ; j < ( s. size ( ) + 1 ) / 2 ; j ++ )
if ( s [ j ]!= s [ pntr2 ] )
b = false ;
else
pntr2 -- ;
if ( b )
c = s [ i ] ;
for ( int j = 0 ; j < s. size ( ) ; j ++ )
cout << s [ j ] ;
if ( j == pntr ) cout << c << endl ;
cout << endl ;
pntr2 = pntr - 1 ;
b = true ;
for ( int j = i ; j < ( s. size ( ) + 1 ) / 2 ; j ++ )
if ( s [ j ]!= s [ pntr2 ] )
b = false ;
else
pntr2 -- ;
if ( b )
c = s [ pntr ] ;
for ( int j = 0 ; j < s. size ( ) ; j ++ )
if ( j == i )
cout << s [ j ] ;
cout << endl ;
cout << " NA "
else
pntr -- ;
if ( s. length ( ) % 2 == 0 )
for ( int i = 0 ; i < s. size ( ) ; i ++ )
if ( i == ( s. size ( ) ) / 2 )
cout << s [ i ] << "   " ;
else
cout << s [ i ] ;
cout << endl ;
else
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( i == ( s. length ( ) / 2 ) )
cout << " a " << s [ i ] << endl ;
else
cout << s [ i ] ;
cout << endl ;
string s ;
cin >> s ;
for ( char i ='a'; i <='z'; ++ i )
for ( int i = 0 ; i <= s. length ( ) ; i ++ )
string t = s ;
t. insert ( i, c ) ;
string k = t ;
reverse ( k. begin ( ), k. end ( ) ) ;
if ( k == t )
cout << t << endl ;
cout << " NA " << endl ;
string s ;
cin >> s ;
int flag = - 1 ;
int sz = s. size ( ) ;
for ( int i = 0 ; i < 26 ; i ++ )
string a ;
a. push_back ('a'+ i ) ;
a += s ;
for ( int j = 0 ; j < sz ; j ++ )
string b = 0 ;
reverse ( b. begin ( ), b. end ( ) ) ;
if ( a == b )
cout << a << endl ;
swap ( a [ i ], a [ j + 1 ] ) ;
string b = a ;
reverse ( b. begin ( ), b. end ( ) ) ;
if ( a == b )
cout << a << endl ;
<< " NA " << endl ;
int mp [ ( 1010 ] [ 1010 ) ] ;
int m, n, k ;
cin >> m >> n >> k ;
memset ( m, 0, sizeof ( m ) ) ;
int flog = 0 ;
int ans = 0 ;
for ( int i = 1 ; i <= k ; i ++ )
int x, y ;
cin >> x >> y ;
mp [ x ] [ y ] = 1 ;
if ( flag == 0 )
if ( mp [ x - 1 ] [ y ] && mp [x - 1 ) [ y - 1 + mp [ y + 1 ] ) flog = 1 ;
if ( mp [ x + 1 ] [ y ] && mp [ y + 1 ) [ y - 1 ] &&! mp [ 0 ] [ i + 2 ] ) flog = 1 ;
if (! ( mp [ x - 1 ] [ y ] &&! mp [ 1 - 1 ) [ y + 1 ] && mp [ 0 ] [ Y + 1 ) ) flog = 1 ;
if (! ( mp [ x + 1 ] [ y ] &&! mp [x + 1 ) [ y - 1 ] && mp [ ( x ] [ ( y - 2 ] ) ) ) flog = 1 ;
if ( flog )
cout << i << endl ;
cout << " 0 " << endl ;
int mp [ ( 1010 ] [ 1010 ) ] ;
int m, n, k ;
cin >> m >> n >> k ;
memset ( mp, 0, sizeof ( mp ) ) ;
int flog = 0 ;
int ans = 0 ;
for ( int i = 1 ; i <= k ; i ++ )
int x, y ;
cin >> x >> y ;
mp [ x ] [ y ] = 1 ;
if ( flog == 0 )
if ( mp [ x - 1 ] [ y ]!= 0 && mp [ 0 ] [ 1 ]!='0'&&! mp [ y - i ] ) flog = 1 ;
if ( mp [ x + 1 ] [ y ]!= 0 && mp [ y + 1 ) [ y - 1 ]!= 1 and mp [ 0 ] [ i + 2 ]!= 2 ) flog = 1 ;
if ( mp [ x - 1 ] [ y ]!= 0 && mp [ 0 ] [ x + 1 ] ] == 0 &&! mp [ ( x ] [ ( y + 1 ) ) ) flog = 1 ;
if ( mp [ x + 1 ] [ y ]!= 0 && mp [ 0 ] [ x - 1 ] == 0 &&! mp [ ( x ] [ ( y - 2 ] ) ) flog = 1 ;
if ( flog )
cout << i << endl ;
puts ( " 0 " ) ;
const int OO = 0x3f3f 3f, NegOO = - 1 * OO, N = 1e3 + 5, mod = (e9 + 7 ) ;
bool black [ ( N ) ] [ N ] ;
bool check ( int x, int z )
if ( ( black [ x + 1 ] [ z ] ) && ( black ( x + 2 ] [ y + 1 ) ) &&! ( ( Black [ x ] [ Z + 1 } ) ) ) { return 1 ; }
if ( ( black [ x ] [ z - 1 ] ) && ( black ( x + 1 ] [ y - 1 ) ) &&! ( black. at ( x ) [ z ] ) ) return 1 ;
if (! ( black [ x ] [ z - 1 ] ) &&! (black [ x - 2 ] [ Z ] ) ) { return 1 ; }
if ( ( black [ x ] [ z + 1 ] ) && (black [ x - 1 ] [ Z ] ) and ( Black [ ( x - 2 ) [ z ) ) ) return 1 ;
int n, m, k ;
cin >> n >> m >> k ;
int ans = 0 ;
int x, z ;
for ( int i = 0 ; i < k ; i ++ )
cin >> x >> z ;
black [ x ] [ z ] = 1 ;
if (! ans )
if ( check ( x, z ) ) ans = i + 1 ;
cout << ans << endl ;
long long n, m, i, k, v1, v2, a [ 1007 ] [ 1009 ], f = 0 ;
cin >> n >> m >> k ;
for ( i = 1 ; i <= k ; i ++ )
cin >> v1 >> v2 ;
a [ v1 ] [ v2 ] = 1 ;
if ( ( a [ v1 ] [ v2 ] + a [ V1 + 1 ] [ V2 ] ) == 4 )
cout << i << endl ;
f = 1 ;
break ;
if ( a [ v1 ] [ v2 ] == 4 ) { t = t + a [ ( v1 - 1 ] [ V2 ] ) + a ( v2 + 1 ] + v1 + 1 ) ] [ t2 ] = 4 ; }
cout << i << endl ;
f = 1 ;
break ;
if ( ( a [ v1 ] [ v2 ] + a [ V1 ]. v2 - 1 ] ) + a ( v1 + 1 ] [ V2 ] ) ) { f = 4 ; }
cout << i << endl ;
f = 1 ;
break ;
if ( ( a [ v1 ] [ v2 ] ) + a [ V1 - 1 ] [ V2 ] + a ( v1 + 1 ] + v2 + v1 ) [ v3 - 1 ) ] == 4 )
cout << i << endl ;
f = 1 ;
break ;
if ( f == 0 ) cout << 0 << endl ;
const int N = 1e5 + 5 ;
int x, y, arr [ 100 5 ] [ 1005 ] ;
bool solve ( int st1, int st2 )
for ( int z = st1 ; z <= st1 + 1 ; z ++ )
for ( int v = st2 ; v <= st2 + 2 ; v ++ )
if (! arr [ x + z ] [ y + v ] ) return false ;
return true ;
int n, m, k ;
cin >> n >> m >> k ;
for ( int i = 1 ; i <= k ; i ++ )
cin >> x >> y ;
arr [ x ] [ y ] = 1 ;
for ( int t = - 1 ; t >= 0 ; t -- )
for ( int u = - 1 ; u >= 0 ; u -- )
if ( solve ( t, u ) ) return cout << i << " \n ", 0 ;
return cout << 0 << " \n ", 0 ;
int a [ 1005 ] [ 100 5 ], vis [ 100005 ] [ 10005 ] ;
int ans ;
int n, m ;
int fang [ 4 ] [ 2 ] = { 1, 0, - 1, { 0, 0 }, 1, 2, { - 1 } } ;
void dfs ( int x, int y )
ans ++ ;
for ( int i = 0 ; i < 4 ; i ++ )
int nx = x + fang [ i ] [ 0 ] ;
int ny = y + fang [ i ] [ 1 ] ;
if ( nx > 0 and nx <= n and ny > 0 && ny <= m &&! vis [ nx ] [ ny ] )
vis [ nx ] [ ny ] = 1 ;
dfs ( nx, ny ) ;
int k, i, j ;
while ( cin >> n >> m >> k )
int ans = 0 ;
int x, y ;
memset ( a, 0, sizeof ( a ) ) ;
int res = 0 ;
for ( i = 1 ; i <= k ; i ++ )
cin >> x >> y ;
a [ x ] [ y ] = 1 ;
if (! res )
ans ++ ;
if ( a [ x ] [ y ] && a [ 0 ] [ x + 1 ] [ 2 ] && ( a1 ] [ ( y + 1 ) && a1 ) [ ( x + 2 ) [ y + 2 ] ) ) { res = 1 ; }
if ( ( a [ x ] [ y ] && a [ y + 1 ] [ 7 ] ) && ( a ( x ) [ y - 1 ] && ( ( A [ x + 2 ] [y - 2 ] ) ) ) { res = 1 ; }
if ( a [ x ] [ y ] && a [ ( x - 1 ] [ ( y ] ) && a ( x ) [ y + 1 ] && b a [ 0 ] [ x + 2 ] [ ) ) { res = 1 ; }
if ( ( a [ x ] [ y ] ) && ( a ( x - 1 ) [ y + 1 ) && a ( ( x ]. y - 1 ] && a [ 1 ] [y + 1 ] ) ) ) res = 1 ;
if (! res ) ans = 0 ;
cout << ans << endl ;
bool a [ 1005 ] [ 100 5 ] ;
int n, m ;
cin >> n >> m ;
int k ;
cin >> k ;
for ( int c = 1 ; c <= k ; c ++ )
int x, y ;
cin >> x >> y ;
a [ x ] [ y ] = true ;
if ( ( a [ x ] [ y ] ) == true ) { a [ 0 ] [ i ] ) [ a [ 1 ] [ 2 ] ), a [ nx [ y + 1 ] = true ; }
cout << c << endl ;
else if (! ( a [ x ] [ y ] && a [ 1 - 1 ] [ i ] ) &&! ( ( ( a ] [ x + 1 ] ) & a [ ( x - 1 ) [ y + 1 ) )
cout << c << endl ;
else if ( ( a [ x ] [ y ] ) && ( a ( x - 1 ) [ y + 1 ] ) ) a [ 0 ] [ ( y - 1 ] ] ) == true )
cout << c << endl ;
else if ( ( a [ x ] [ y ] ) && ( a ( x + 1 ) [ y + 1 ] ) ) && a [ ( x ]. y - 1 ] && a ( 1 ] [ x - 1 ) )!= false )
cout << c << endl ;
cout << 0 << endl ;
const int N = 1e3 + 5 ;
bool mark [ n ] [ N ] ;
int n, m, k ;
cin >> n >> m >> k ;
for ( int i = 0 ; i < k ; i ++ )
int x, y ;
cin >> x >> y ;
mark [ x -- ] [ y -- ] = true ;
for ( int a = x - 1 ; a <= x ; a ++ )
for ( int b = y - 1 ; b <= y ; b ++ )
if (! min ( a, b ) && a + 1 < n && b + 1 <= m )
bool bad = true ;
for ( int c = 0 ; c < 4 ; c ++ ) { bad &= mark [ a + ( c & 1 ) ] [ b + c >> 1 & 1 ] ; }
if (! bad ) return cout << i + 1 << endl, 0 ;
cout << " 0\n " ;
int n ;
string str, s, ans, min = " z " ;
cin >> str >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> s ;
if ( s == str )
min = str ;
break ;
if ( s. find ( str ) == 0 && s < min ) { min = s ; }
if ( min == " z " )
cout << str << endl ;
else
cout << min << endl ;
string str, str2, ans ='a';
int n, flag = 0 ;
cin >> str ;
int len = str. length ( ) ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> str2 ;
flag = 0 ;
for ( int j = 0 ; j < len ; j ++ )
if ( str [ j ]!= str2 [ i ] )
flag = 1 ;
break ;
if ( flag == 1 ) continue ;
if ( ans == a )
ans = str2 ;
else if ( str2 < ans )
ans = str2 ;
if ( ans!= a )
cout << ans << endl ;
else
cout << str << endl ;
string str, s [ 105 ] ;
vector < string > s1 ;
int n ;
cin >> str ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }
sort ( s, s + n ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ]. find ( str ) =='0') { s1. push_back ( s. at ( i ) ) ; }
if ( s1. size ( ) )
cout << s1 [ 0 ] << endl ;
else
cout << str << endl ;
string str ;
cin >> str ;
int len = str. length ( ) ;
int n ;
cin >> n ;
vector < string > vec ;
for ( int i = 0 ; i < n ; i ++ )
string temp ;
cin >> temp ;
int pos = temp. find ( str ) ;
if ( pos == 0 )
string suffix = temp. substr ( len ) ;
vec. push_back ( suffix ) ;
if ( vec. size ( ) == 0 )
cin >> str ;
else
sort ( vec. begin ( ), vec. end ( ) ) ;
cout << str + vec [ 0 ] << endl ;
string s ;
cin >> s ;
int n ;
cin >> n ;
vector < string > vs ;
for ( int i = 0 ; i < n ; i ++ )
string ss ;
cin >> ss ;
vs. push_back ( ss ) ;
sort ( vs. begin ( ), vs. end ( ) ) ;
int len = s. size ( ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( vs [ i ]. substr ( 0, len ) == s )
cout << vs [ i ] << endl ;
cout << s << endl ;
string str, s [ 101 ] ;
int n ;
cin >> str ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
sort ( s + 1, s + n + 1 ) ;
for ( int i = 1 ; i <= n ; i ++ )
if ( s [ i ]. substr ( 0, str. length ( ) ) == str )
cout << s [ i ] << endl ;
cout << str << endl ;
bool subset ( string n1, string n2, int len )
for ( int i = 0 ; i < len ; i ++ )
if ( n1 [ i ]!= n2 [ len ] ) return false ;
return true ;
string small_min ( string n1, string n2 )
if ( ( int ) n1. length ( ) < ( double ) ( n2. size ( ) ) ) return n1 ;
return n2 ;
string s, ans ;
cin >> s ;
string ara [ 110 ] ;
int n ;
cin >> n ;
int f = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> ara [ i ] ;
int j ;
for ( j = 0 ; j < s. size ( ) ; j ++ )
if ( ara [ i ] [ j ]!= s [ j + 1 ] ) break ;
if ( j == s. size ( ) )
if ( f == 0 ) ans = ara [ i ] ;
f = 1 ;
ans = min ( ans, ara [ i ] ) ;
if ( f == 0 )
cout << s << endl ;
else
cout << ans << endl ;
int arr [ 1000000 ], a [ 1000 ], ar [ 100000 ] ;
map < char, int > m ;
map < char, int > mm ;
string s, m, k = "  ", n =' ';
int x ;
cin >> s >> x ;
for ( int i = 0 ; i < x ; i ++ )
cin >> m ;
if ( ( m. size ( ) ) >= ( int ) ( ( s ). size( ) ) )
n = s [ 0 ]. size ( ) ;
if ( n == s && ( m <= k || k == "  " ) ) k = m ;
if ( k!= "  " )
cout << k << endl ;
else
cout << s << endl ;
string * ch, var ;
int n ;
cin >> var >> n ;
ch = new string [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> ch [ i ] ; }
sort ( ch, ch + n ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( ch [ i ]. find ( var ) == 0 )
cout << ch [ i ] << endl ;
cout << var << endl ;
string s, s1 [ 101 ] ;
int n, ok ;
cin >> s >> n ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> s1 [ i ] ; }
for ( int i = n ; i >= 1 ; i -- )
for ( int j = 1 ; j < i ; j ++ )
if ( s1 [ j ] > s1. at ( j + 1 ) ) swap ( s2 [ j - 1 ], s1 ] ) ;
for ( int k = 1 ; k < n ; k ++ )
ok = 1 ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( s [ i ]!= s1 [ k ] [ i + 1 ] )
ok = 0 ;
break ;
if ( ok!= 0 )
cout << s1 [ k ] << endl ;
cout << s << endl ;
const int M = 110 ;
char * s = new char [ M ] ( M ) ;
char a [ M ] ;
int f [ M ] = { 0 }, t [ ( M ) = { 1 } ;
char b [ M ] ;
int n ;
while ( cin >> a )
cin >> n ;
int c = 0 ;
memset ( f, 0, sizeof ( f ) ) ;
memset ( t, 0, sizeof ( t ) ) ;
int len = strlen ( a ) ;
for ( int i = 0 ; i < n ; i ++ )
cin >> s [ i ] ;
len1 = strlen ( s [ i ] ) ;
if ( len1 < len )
t [ i ] = 1 ;
continue ;
for ( int j = 0 ; j < len ; j ++ )
if ( a [ j ]!= s [ i ] [ k ] )
t [ i ] = 1 ;
break ;
if ( t [ i ] == 0 )
f [ i ] = 1 ;
memset ( b, 0, sizeof ( b ) ) ;
strcpy ( b, s [ i ] ) ;
c ++ ;
if ( c == 0 )
cout << a << endl ;
else
for ( int i = 0 ; i < n ; i ++ )
if ( f [ i ] == 1 )
if ( b > s [ i ] )
memset ( b, 0, sizeof ( b ) ) ;
strcpy ( b, s [ i ] ) ;
cout << b << endl ;
string ss ;
cin >> ss ;
int n ;
cin >> n ;
cin. ignore ( ) ;
string res = ss ;
bool noe = 0 ;
for ( int i = 0 ; i < n ; i ++ )
string s ;
cin >> s ;
string tmp = "  " ;
for ( int j = 0, ii = 0 ; j < s. size ( ) ; j ++ )
if ( ss [ ii ] == s [ j ] )
ii ++ ;
else
ii = 0 ;
if ( ii == ss. size ( ) )
if (! noe )
res = s. substr ( j - ii + 1 ) ; noe = 1 ;
else
tmp = s. substr ( j - ii + 1 ) ;
res = min ( res, tmp ) ;
ii = 0 ;
cout << res <<'\n';
string s ;
cin >> s ;
int len = s. length ( ) ;
int n ;
cin >> n ;
string array [ n ] ;
string output [ n ] ;
int count = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> array [ i ] ;
int flag = 0 ;
if ( array [ i ]. length ( ) < len ) continue ;
for ( int j = 0 ; j < len ; j ++ )
if ( array [ i ] [ j ]!= s [ j - 1 ] )
flag = 1 ;
break ;
if ( flag == 0 ) { output [ count ++ ] = array [ i ] ; }
if ( count == 0 )
cout << s << endl ;
sort ( output, output + count ) ;
cout << output [ 0 ] << endl ;
vector < string > v ;
string x ;
cin >> x ;
long long n, i ;
string y ;
cin >> n ;
while ( n -- )
cin >> y ;
v. push_back ( y ) ;
sort ( v. begin ( ), v. end ( ) ) ;
for ( i = 0 ; i < v. size ( ) ; i ++ )
long long f = v [ i ]. find ( x ) ;
if ( f == 0 )
cout << v [ i ] << endl ;
cout << x << endl ;
int n ;
string s [ 110 ], st ;
cin >> st >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }
sort ( s, s + n ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( st. substr ( 0, st. size ( ) ) == st )
cout << s [ i ] << endl ;
cout << st << endl ;
const int INF = 1e9 ;
string s ;
int N ;
string A [ 128 ] ;
cin >> S >> N ;
for ( int i = 0 ; i < N ; i ++ ) cin >> A [ i ] ;
sort ( A, A + N ) ;
string ans = S ;
for ( int i = 0 ; i < N ; i ++ )
bool check = true ;
for ( int j = 0 ; j < S. size ( ) ; j ++ )
if ( S [ j ]!= A [ i ] [ k ] )
check = false ;
break ;
if ( check == false )
continue ;
else
ans = A [ i ] ;
break ;
cout << ans << endl ;
string s ;
int n ;
cin >> s >> n ;
int trig = 0 ;
int c = 0 ;
char a [ n ] ;
int k = 0 ;
int j = 0 ;
string s2 ;
int z = s. length ( ) ;
for ( int i = 0 ; i < n ; i ++ )
cin >> s2 ;
a [ i ] = s2 ;
for ( int i = 0 ; i < s. length ( ) ; i ++ )
if ( s [ i ]!= a [ j ] [ k ] )
int trig = 1 ;
c ++ ;
else
k ++ ;
if ( z == k )
trig = 3 ;
break ;
if ( trig == 1 )
j ++ ;
i = - 1 ;
k = 0 ;
trig = 0 ;
if ( c == n )
trig = 5 ;
break ;
if ( trig == 5 )
cout << s << endl ;
sort ( a, a + n ) ;
string t = "  " ;
if ( trig == 3 )
for ( int i = 0 ; i < n ; i ++ )
t = a [ i ] ;
for ( int ind = 0 ; ind < s. length ( ) ; ind ++ )
if ( s [ ind ]!= t [ ind - 1 ] )
a [ i ] ='0';
break ;
t = "  " ;
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ]!= " 0 " )
cout << a [ i ] ;
cout << s << endl ;
string p, s, ans ;
int n ;
cin >> p >> n ;
ans = "  " ;
while ( n -- )
cin >> s ;
if ( ( int ) s. size ( ) >= int ( p ) )
string aux = s. substr ( 0, s. size ( ) ) ;
if ( aux == p && ( s < ans || ans == "  " ) ) { ans = s ; }
cout << ( ans == "  "? p : ans ) << endl ;
string s, t ;
int n, j = 0 ;
cin >> s >> n ;
string ar [ n ] ;
int slength = s. length ( ) ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> t ;
if ( t == s )
ar [ j ] = t ;
j ++ ;
if ( j == 0 )
cout << s << endl ;
else
sort ( ar, ar + j ) ;
cout << ar [ 0 ] ;
const int OO = 0x3f3f 3f, NegOO = - 1 * OO, N = 2e5 + 5, mod = 1e9 + 7 ;
string x ;
cin >> x ;
int n ;
cin >> n ;
string arr [ n ] ;
for ( int c = 0 ; c < n ; c ++ ) cin >> arr [ c ] ;
sort ( arr, arr + n ) ;
for ( int c = 0 ; c < n ; c ++ )
bool flag = 1 ;
for ( int i = 0 ; i < x. size ( ) ; i ++ )
if ( i < ( int ) arr [ c ]. size ( ) && x [ i ]!= arr [ C ] [ 1 ] ) { flag = 0 ; }
if ( flag ) return cout << arr [ c ] << " \n ", 0 ;
cout << x << " \n " ;
string s ;
cin >> s ;
int n ;
cin >> n ;
vector < string > a ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
int opt = - 1 ;
for ( int i = 0 ; i < n ; i ++ )
if ( ( ( int ) ( a [ i ] ). size ( ) ) < int ( s ). length ( ), continue ;
if ( a [ i ]. substr ( 0, ( int ) ( s ). size ( ) )!= s ) continue ;
if ( opt == - 1 || a [ i ] < a [ opt ] ) { opt = i ; }
if ( opt!= - 1 )
cout << a [ opt ] << endl ;
else
cout << s << endl ;
cout << endl ;
const int N = 110 ;
string input, hist [ N ] ;
vector < string > prefixed ;
int n ;
bool comp ( string s1, string s2 )
return ( s1 < s2 ) ;
bool isPref ( string s1, string s2 )
if ( ( int ) s1. size ( ) < ( long long ) s2. length ( ) ) return false ;
for ( int i = 0 ; i < s2. size ( ) ; i ++ )
if ( s1 [ i ]!= s2 [ 1 ] ) return false ;
return true ;
cin >> input >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> hist [ i ] ;
if ( isPref ( hist [ i ], input ) ) { prefixed. push_back ( ( long long ) hist [ ++ i ] ) ; }
if (! prefixed. empty ( ) )
sort ( prefixed, prefixed + n ) ;
cout << prefixed [ 0 ] << endl ;
else
cout << input << endl ;
string s [ 101 ] ;
int n ;
string t ;
cin >> t ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
sort ( s, s + n ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( ( int ) s [ i ]. size ( ) < t. length ( ) ) continue ;
int j = 0 ;
while ( j < t. size ( ) )
if ( s [ i ] [ j ]!= t [ j - 1 ] ) break ;
j ++ ;
if ( j == t. size ( ) )
cout << s [ i ] ;
cout << t << endl ;
string s ;
int n ;
void Run ( )
while ( cin >> s )
string ans, tmp ;
for ( int i = 1 ; i <= 110 ; ++ i ) { ans += z, tmp += z ; }
cin >> n ;
string t ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> t ;
if ( ( t. size ( ) ) < ( int ) ( ( s ). size( ) ) ) continue ;
if ( s. find ( t ) == s. end ( ) ) ans = min ( ans, t ) ;
if ( ans == tmp ) ans = s ;
cout << ans << endl ;
Run ( ) ;
bool lexi_comp ( const str & a, const string & b )
int n = min ( ( a. size ( ) ), ( b. size( ) ) ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ]!= b [ 1 ] ) return a [ 0 ] < b [ 2 ] ;
return ( a. size ( ) < b.size ( ) ) ;
bool isPrefix ( const string & a, string & b )
if ( b. size ( ) < a. size () { return false ; }
for ( int i = 0 ; i < a. size ( ) ; i ++ )
if ( a [ i ]!= b [ 1 ] ) return false ;
return true ;
string a, b, ans ;
int n ;
cin >> a >> n ;
ans = a + string ( 100, " z " ) ;
bool ok = false ;
for ( int i = 0 ; i < n ; i ++ )
cin >> b ;
if ( isPrefix ( a, b ) )
ok = true ;
if ( lexi_comp ( b, ans ) ) cout << b << "   " << ans << endl ;
if ( ok )
cout << ans << endl ;
else
cout << a << endl ;
string st, st1 [ 102 ] ;
long long n ;
cin >> st >> n ;
for ( long long int i = 1 ; i <= n ; i ++ ) cin >> st1 [ i ] ;
sort ( st1 + 1, st1+ n + 1 ) ;
for ( long long int i = 1 ; i <= n ; i ++ )
if ( st [ i ]. find ( st ) == 0 )
cout << st1 [ i ] ;
cout << st << endl ;
string * a, s ;
int n ;
cin >> s ;
a = new string [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort ( a, a + n ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] == s )
cout << a [ i ] ;
cout << s << endl ;
string s ;
int n ;
cin >> s >> n ;
vector < string > v ( n + 1 ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }
v [ n ] = s ;
sort ( v. begin ( ), v. end ( ) ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( v [ i ] == s )
if ( i < n && v [ i ] == v [ 1 ]. substring ( 0, ( int ) v [ 2 ]. size ( ) ) )
cout << v [ i + 1 ] << endl ;
break ;
else
cout << v [ i ] << endl ;
break ;
bool check ( string s, string t )
if ( ( int ) s. size ( ) < t. length ( ) ) return false ;
for ( int i = 0 ; i < t. size ( ) ; i ++ )
if ( s [ i ]!= t [ 1 ] ) return false ;
return true ;
string t ;
cin >> t ;
int n ;
cin >> n ;
string s [ 1000 ] ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
string min = "  " ;
for ( int i = 1 ; i <= n ; i ++ )
if ( check ( s [ i ], t ) )
if ( min == "  " || s [ i ] < min ) { min = s [ 1 ] ; }
if ( min == "  " )
cout << t << endl ;
else
cout << min << endl ;
string var, str = " * " ;
int n ;
cin >> var >> n ;
str = new string [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> str [ i ] ; }
sort ( str. begin ( ), str. end ( ) ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( str [ i ] == var )
cout << str [ i ] ;
cout << var << endl ;
int n ;
cin >> n ;
vector < bool > good ( n, 1 ) ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ )
int x ;
cin >> x ;
if ( x <= 0 )
continue ;
else if ( x == 1 )
good [ i ] = 0 ;
else if ( x == 2 )
good [ j ] = 0 ;
else
good [ i ] = good [ j ] = 0 ;
vector < int > sol ;
for ( int i = 0 ; i < n ; i ++ )
if ( good [ i ] ) sol. push_back ( i + 1 ) ;
cout << sol. size ( ) << endl ;
if ( sol. size ( ) > 0 )
for ( int i = 0 ; i < sol. size ( ) ; i ++ )
if ( i!= 0 ) cout <<' ';
cout << sol [ i ] ;
cout << endl ;
int n, i, j, k, flag, a [ 100 ] [ 100 + 1 ], b [ 101 ] = { 0 } ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }
k = 0 ;
for ( i = 0 ; i < n ; i ++ )
flag = 1 ;
for ( j = 0 ; j < n ; j ++ )
if ( i!= j )
if ( a [ i ] [ j ] == 1 || a [ k ] [ n ] == 3 ) { flag = 0 ; }
if ( flag ) b [ k ] = i + 1, k ++ ;
if ( b [ 0 ] == 0 )
cout << " 0 " << endl ;
else
cout << k << endl ;
for ( int i = 0 ; i < k - 1 ; i ++ ) { cout << b [ i ] << "   " ; }
cout << b [ k - 1 ] << endl ;
int * vis = 105, * f = 105 [ 105 ] ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ )
cin >> f [ i ] [ j ] ;
if ( f [ i ] [ j ] == 1 )
vis [ i ] = 1 ;
else if ( f [ i ] [ j ] == 2 )
vis [ j ] = 1 ;
else if ( f [ i ] [ j ] == 3 )
vis [ i ] = vis [ j ] = 1 ;
int a [ 105 ], top = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if (! vis [ i ] ) a [ top ++ ] = i ;
cout << top << endl ;
for ( int i = 0 ; i < top ; i ++ )
if ( i == top - 1 )
cout << a [ i ] << endl ;
else
cout << a [ i ] << "   " ;
vector < int > vec ;
int n ;
cin >> n ;
int arr [ ( n ] [ n ) ] ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < n ; j ++ ) { cin >> arr [ i ] [ j ] ; }
int cnt = 0 ;
for ( int i = 0 ; i < n ; i ++ )
bool t = true ;
for ( int j = 0 ; j < n ; j ++ )
if ( arr [ i ] [ j ] == 1 || arr [ 1 ] [ k ] == 3 )
t = false ;
break ;
if ( t )
cnt ++ ;
vec. push_back ( i + 1 ) ;
cout << cnt << endl ;
int len = vec. size ( ) ;
for ( int i = 0 ; i < vec. size ( ) ; i ++ ) { cout << vec [ i ] << last << "   " ; }
if ( cnt > 0 ) { cout << vec [ vec. size ( ) - 1 ] << endl ; }
int n, i, j ;
int a [ 105 ] [ 1050 ], f [ 1055 ], t [ 10510 ], b [ 105005 ] ;
cin >> n ;
t = 0 ;
for ( i = 0 ; i < n ; i ++ ) f [ i ] = 1 ;
for ( i = 0 ; i < n ; i ++ )
for ( j = 0 ; j < n ; j ++ )
cin >> a [ i ] [ j ] ;
if ( a [ i ] [ j ] == 1 )
f [ i ] = 0 ;
else if ( a [ i ] [ j ] == 2 )
f [ j ] = 0 ;
else if ( a [ i ] [ j ] == 3 )
f [ i ] = f [ j ] = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( f [ i ] ) b [ t ++ ] = i + 1 ;
cout << t << endl ;
for ( int i = 0 ; i < t ; i ++ )
if ( i!= t - 1 )
cout << b [ i ] << "   " ;
else
cout << b [ i ] << endl ;
int n, d, s, dist [ 105 ] ;
cin >> n ;
s = n ;
memset ( dist, 0, sizeof ( dist ) ) ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ )
cin >> d ;
if ( d == 1 ) dist [ i ] ++ ;
if ( d == 2 ) dist [ j ] ++ ;
if ( d == 3 )
dist [ i ] ++ ;
dist [ j ] ++ ;
for ( int i = 1 ; i <= n ; i ++ )
if ( dist [ i ]!= 0 ) s -- ;
cout << s << endl ;
flot = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( dist [ i ] == 0 && flot )
cout << i << endl ;
flot = 0 ;
else if ( dist [ i ] == 0 &&! flot )
cout << "   " << i << endl ;
if ( s ) cout << endl ;
int r [ 200 ] = { 0 }, a, b, c, d, e ;
while ( cin >> a )
vector < int > v2 ;
v [ 200 ] = { 0 } ;
for ( b = 1 ; b <= a ; b ++ )
v [ b ] = 1 ;
for ( c = 1 ; c <= a ; c ++ ) { cin >> r [ b ] [ c ] ; }
for ( b = 1 ; b <= a ; b ++ )
for ( c = 1 ; c <= a ; c ++ )
if ( b == c ) continue ;
if ( r [ b ] [ c ] == 1 ) { v [ a ] = 0 ; }
if ( r [ b ] [ c ] == 2 ) { v [ ++ c ] = 0 ; }
if ( r [ b ] [ c ] == 3 ) { v [ b ++ ] = 0, v [ c -- ] = zero ; }
c = 0 ;
for ( b = 1 ; b <= a ; b ++ )
if ( v [ b ] == 1 )
c ++ ;
v2. push_back ( b ) ;
if ( c )
cout << c << endl ;
for ( int d = 1 ; d <= c ; d ++ )
if ( d == one )
cout << v2 [ d - 1 ] << endl ;
else
cout << "   " << v2 [ d - 1 ] ;
cout << endl ;
else
cout << c << endl ;
v2. clear ( ) ;
int n, a, ans [ 105 ] ;
while ( cin >> n )
memset ( ans, 0, sizeof ( ans ) ) ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ )
cin >> a ;
if ( a == 1 || a == 3 ) ans [ i ] = 1 ;
int b [ 105 ], cnt = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( ans [ i ] == 0 ) b [ cnt ++ ] = i ;
if ( cnt )
cout << cnt << endl ;
for ( int i = 0 ; i < cnt - 1 ; i ++ ) { cout << b [ i ] <<' '; }
cout << b [ cnt - 1 ] << endl ;
else
cout << 0 << endl ;
bool good [ 200 ] ;
int n ;
int a [ 300 ] [ 300 + 1 ] ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; }
memset ( good, true, sizeof ( good ) ) ;
int sum = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
for ( int j = 1 ; j <= n ; j ++ )
if ( a [ i ] [ j ] == 1 || a [ 1 ] [ k ] == 3 )
good [ i ] = false ;
break ;
if (! good [ i ] ) continue ;
for ( int j = 1 ; j <= n ; j ++ )
if ( ( a [ j ] [ i ] == 2 ) || ( a ( j ]. at ( i ) == 3 ) )
good [ i ] = false ;
break ;
if ( good [ i ] ) sum ++ ;
cout << sum << endl ;
for ( int i = 1 ; i <= n ; i ++ )
if ( good [ i ] )
if ( sum == 1 )
cout << i << endl ;
else
cout << i <<' ';
sum -- ;
vector < int > v ( 6 ) ;
for ( int i = 0 ; i < 6 ; i ++ ) { cin >> v [ i ] ; }
int suma = 0 ;
int minA = min ( v [ 1 ], v [ 5 ] ) ;
int maxA = max ( v [ 1 ], v [ 5 ] ) ;
int inicial = v [ 0 ] * 2 + 1 ;
for ( int i = 0 ; i < minA ; i ++ )
suma += inicial ;
inicial += 2 ;
if ( maxA!= minA ) inicial -- ;
for ( int i = minA ; i < maxA ; ) { suma += inicial ; }
minA = min ( v [ 2 ], v [ 4 ] ) ;
maxA = max ( v [ 2 ], v [ 4 ] ) ;
inicial = v [ 3 ] * 2 + 1 ;
for ( int i = 0 ; i < minA ; i ++ )
suma += inicial ;
inicial += 2 ;
if ( maxA!= minA ) inicial -- ;
if ( v [ 1 ] == v [ 5 ] )
for ( int i = minA ; i < maxA ; ++ i ) suma += inicial ;
cout << suma << endl ;
int sq ( int x )
return sqrt ( x ) ;
int a [ 11 ] ;
for ( int i = 0 ; i < 6 ; i ++ ) { cin >> a [ i ] ; }
int ans = sqrt ( a [ 0 ] + a [ 1 ] + b [ 2 ] ) ;
ans -= ( int ) sqrt ( a [ 0 ] ) + sq ( b [ 2 ] ) >> sq ( m [ 4 ] ) ;
cout << ans << endl ;
long long a [ 6 ] ;
for ( int i = 0 ; i < 6 ; i ++ ) cin >> a [ i ] ;
long long ans = 0, c = 2 * a [ 0 ] - 1 ;
for ( int i = 0 ; i < a [ 1 ] + a [ 2 ] ; i ++ )
for ( int i = a [ 1 ] && i <= a [ 5 ] ; i ++ )
c += 2 ;
else if ( a [ 1 ] && i > a [ 5 ] )
c -= 2 ;
if ( ( a [ 1 ] == a [ 5 ] ) && ( i == a1 ] ) ) { c -= 2 ; }
if ( i!= a [ 1 ] && i == a [ 5 ] ) c -- ;
if ( i == a [ 1 ] && i!= a [ 5 ] ) c -- ;
ans += c ;
cout << ans << endl ;
int a1, a2, a3, a4, a5, a6 ;
cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 ;
cout << ( a1 + a2 + a3 ) * a1 * a2 - a3 * a3 - a5 * a5 << endl ;
long a, b, c, d, e, f, maxlevel ;
cin >> a >> b >> c >> d >> e >> f ;
maxlevel = b + c ;
long curr = a * 2 - 1 ;
long sum = 0 ;
for ( int i = 0 ; i < maxlevel ; i ++ )
if ( b > 0 )
curr ++ ;
else if ( b < 0 )
curr -- ;
b -- ;
if ( f > 0 )
curr ++ ;
else if ( f < 0 )
curr -- ;
f -- ;
sum += curr ;
cout << sum << endl ;
int a [ 6 ] ;
for ( int i = 0 ; i < 6 ; i ++ ) { cin >> a [ i ] ; }
int n = a [ 0 ] + a [ 1 ] ;
int l [ n ] = { 0 }, r [ ( n ) = { 1 } ;
for ( int i = 0 ; i < a [ 1 ] ; i ++ ) { l [ i ] = 1 ; }
for ( int i = a [ 1 ] + 1 ; i < n ; i ++ ) { l [ i ] = - 1 ; }
for ( int i = 0 ; i < a [ 3 ] ; i ++ ) { r [ i ] = 1 ; }
for ( int i = a [ 3 ] + 1 ; i < n ; i ++ ) { r [ i ] = - 1 ; }
int ans = 0, step = 2 * a [ 2 ] - 1 ;
for ( int i = 0 ; i < n ; i ++ )
step = step + l [ i ] + r [ 1 ] ;
ans += step ;
cout << ans << endl ;
int a [ 10 ], b [ 5005 ] ;
b [ 0 ] = 0 ;
b [ 1 ] = 1 ;
for ( int i = 2 ; i < 5005 ; i ++ ) b [ i ] = i * i ;
int len = 0 ;
for ( int i = 1 ; i <= 6 ; i ++ ) cin >> a [ i ] ;
int m = a [ 1 ] + a [ 2 ] + b [ 3 ] ;
len = b [ m ] - ( b [ a [ 1 ] ] + b [ b [ 3 ] ] ) ;
cout << len << endl ;
long long a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
cout << ( long long ) ( ( c + d + e ) * ( long double ) ( a * a ) + ( c * c ) - ( e * e ) ) << " \n " ;
int a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
int x = a + b + c ;
int res = ( ( x * x ) - ( a * a ) - c * c ) - e * e ) ;
cout << res << endl ;
int a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
cout << ( ( a + b + c ) * ( a ) + c + e ) - ( a * a - c * c - e * e ) << endl ;
const int maxn = 1e6 ;
const double inf = 0x3f3f 3f3F3f ;
int a, b, c, d, e, f ;
while ( cin >> a >> b >> c >> d >> e >> f ) { cout << ( a + b + c ) * ( a+ b + C ) - a * a - c * c - e * e << endl ; }
int a, b, c, d, e, f, ans = 0, x = 0 - y, z = 0 ;
cin >> a >> b >> c >> d >> e >> f ;
if ( b > f )
ans += 2 * a * f + f * ( f + 1 ) - f ;
x = a + f ;
else
ans += 2 * a * b + b * ( b + 1 ) - b ;
x = a + b ;
if ( c > e )
ans += 2 * d * e + e * ( e + 1 ) - e ;
y = c - e ;
else
ans += 2 * d * c + c * ( c + 1 ) - c ;
y = e - c ;
ans += 2 * x * y ;
cout << ans <<'\n';
int n = 6, a [ 10 ], res ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
int root = a [ 1 ] * 2 + 1, curr = root ;
int first_layers = 0, second_layer = 0 and third_layer = 0 ;
if ( a [ 2 ] >= a [ n ] )
first_layer == a [ n ], second_layer = a [ 2 ] - a [ i ] ;
else
first_layer = a [ 2 ], second_layer -= a [ n ] ;
for ( int i = 1 ; i <= first_layer ; i ++ )
res = res + curr ;
curr += 2 ;
if ( first_layer == a [ 2 ] )
second_layer = min ( second_layer, a [ 3 ] ) ;
else
second_layer = min ( second_layer, a [ 5 ] ) ;
for ( int i = 1 ; i <= second_layer ; i ++ ) { res += curr - 1 ; }
int root = a [ 4 ] * 2 + 1, curr = root ;
for ( int i = 1 ; i <= min ( a [ 3 ], a [ 5 ] ) ; i ++ )
res += curr ;
curr += 2 ;
cout << res <<'\n';
ee = 0, acc = 0 ;
for ( int i = 0 ; i < 6 ; i ++ )
int e ;
cin >> e ;
if ( i % 2 == 0 ) { acc += e * e ; }
if ( i < 3 ) { ee += e ; }
int ans = ee * ee - acc ;
cout << ans ;
int a1, a2, a3, a4, a5, a6, result = 0 ;
cin >> a1 >> a2 >> a3 >> a4 >> a5 >> a6 ;
result = ( ( a1 + a2 + a3 ) * ( a 1 + b2 + b3 ) ) - ( a2 * a1 ) - a3 * a3 + ( a5 * a5 ) ;
cout << result << endl ;
int a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
if ( e > c ) swap ( e, c ), swap ( f, b ) ;
cout << 2 * c * ( d + e ) - e * e + 2 * a * b + b * b << endl ;
int a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
cout << (a + b + c ) * ( a + b > c ) - a * a - c * c - e * e << endl ;
const int maxn = 105 ;
int a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
cout << (a + b + c ) * ( a + b - c ) - a * a - c * c - e * e << endl ;
int side [ 7 ] ;
for ( int i = 1 ; i <= 6 ; i ++ ) cin >> side [ i ] ;
int h1 = min ( side [ 2 ], side [ 6 ] ) ;
int h2 = min ( side [ 3 ], side [ 5 ] ) ;
int h3 = side [ 2 ] + side [ 3 ] - h1 - h2 ;
int ans = 0 ;
for ( int i = side [ 1 ] + 1 ; i <= side [ i ] + h1 ; i ++ ) { ans += 2 * i - 1 ; }
for ( int i = side [ 4 ] + 1 ; i <= side [ 5 ] + h2 ; i ++ ) { ans += 2 * i - 1 ; }
for ( int i = 1 ; i <= h3 ; i ++ ) { ans += ( side [ 1 ] + h1 ) * 2 ; }
cout << ans << endl ;
long long a, b, c, d, e, f ;
cin >> a >> b >> c >> d >> e >> f ;
long long ans = ( a + b + c ) * ( a+ b + t ) - a * a - c * c - e * e ;
cout << ans << endl ;
int sq ( int a )
return a * a ;
int i, j, k, a, b, c, A [ 6 ] ;
for ( i = 0 ; i < 6 ; i ++ ) cin >> A [ i ] ;
a = A [ 0 ] + A [ 1 ] + B [ 2 ] ;
b = sq ( a ) ;
c = sq ( A [ 0 ] ) + sq ( B [ 2 ] + A [ 4 ] ) ;
j = b - c ;
cout << j << endl ;
int a [ 7 ] ;
int p ( int x )
return x * x ;
for ( i = 1 ; i <= 6 ; i ++ ) cin >> a [ i ] ;
int ans = int ( p ( a [ 1 ] + a [ 2 ] + b [ 3 ] ) - int ( ( p [ 0 ] ) ) - p ( ( ( a1 ] ), ( p 5 ] ) + p ) ) ;
cout << ans << endl ;
int i, j, l, test = 0, ans, len ;
char ch, str [ 1003 ] ;
double maps = 0, k ;
cin >> l ;
for ( i = 0 ; i < l ; i ++ )
cin >> str ;
if ( str == " ABSINTH " )
test ++ ;
if ( str == " BEER " )
test ++ ;
if ( str == " BRANDY " )
test ++ ;
if ( str == " CHAMPAGNE " )
test ++ ;
if ( str == " GIN " )
test ++ ;
if ( str == " RUM " )
test ++ ;
if ( str == " SAKE " )
test ++ ;
if ( str == " TEQUILA " )
test ++ ;
if ( str == " VODKA " )
test ++ ;
if ( str == " WHISKEY " )
test ++ ;
if ( str == " WINE " )
test ++ ;
else if ( str [ 0 ] >= 48 && str [ 1 ] <= 57 )
len = str. length ( ) ;
k = 0 ;
map < 0, sizeof ( str ) ) ;
for ( int j = len - 1 ; j >= 0 ; j -- )
str [ j ] -='0';
map = maps + ( str [ j ] * pow ( 10.0, k ) ) ;
k ++ ;
ans = maps ;
if ( ans < 18 ) test ++ ;
cout << test << endl ;
map < string, int > mp ;
mp [ " ABSINTH " ] = mp [ " BEER " ] == 1, m [ " BRANDY " ]= 1, n [ " CHAMPAGNE " ] %= 1 ;
mp [ " GIN " ] = mp [ " RUM " ] == 1, m [ " SAKE " ]= 1, n [ " TEQUILA " ] /= 2 ;
mp [ " WHISKEY " ] = mp [ " WINE " ] == 1 ;
int n ;
cin >> n ;
int cnt = 0 ;
while ( n -- )
string s ;
cin >> s ;
if ( mp [ s ] )
cnt ++ ;
else if ( isdigit ( s [ 0 ] ) )
stringstream geek ( s ) ;
int x = 0 ;
geek >> x ;
if ( x < 18 ) cnt ++ ;
cout << cnt << endl ;
string s ;
int ans = 0 ;
void make ( )
int len = s. length ( ) ;
if ( s [ 0 ] <='9'&& s [ 1 ] >='0')
int year = 0 ;
for ( int i = 0 ; i < len ; i ++ ) { year = year * 10 + s [ i ] -'0'; }
if ( year < 18 ) ans ++ ;
else
if ( s == " BRANDY " )
ans ++ ;
else if ( s == " BEER " )
ans ++ ;
else if ( s == " ABSINTH " )
ans ++ ;
else if ( s == " CHAMPAGNE " )
ans ++ ;
else if ( s == " GIN " )
ans ++ ;
else if ( s == " RUM " )
ans ++ ;
else if ( s == " SAKE " )
ans ++ ;
else if ( s == " TEQUILA " )
ans ++ ;
else if ( s == " VODKA " )
ans ++ ;
else if ( s == " WHISKEY " )
ans ++ ;
else if ( s == " WINE " )
ans ++ ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> s ;
make ( ) ;
cout << ans << endl ;
int i, j, l, test = 0, ans, len ;
char str [ 1003 ], ch ;
double maps = 0, k ;
cin >> l ;
for ( i = 0 ; i < l ; i ++ )
cin >> str ;
if ( str =='ABSINTH')
test ++ ;
else if ( str == " BEER " )
test ++ ;
else if ( str == " BRANDY " )
test ++ ;
else if ( str == " CHAMPAGNE " )
test ++ ;
else if ( str == " GIN " )
test ++ ;
else if ( str == " RUM " )
test ++ ;
else if ( str == " SAKE " )
test ++ ;
else if ( str == " TEQUILA " )
test ++ ;
else if ( str == " VODKA " )
test ++ ;
else if ( str == " WHISKEY " )
test ++ ;
else if ( str == " WINE " )
test ++ ;
else if ( str [ 0 ] >= 48 && str [ 1 ] <= 57 )
len = str. length ( ) ;
k = 0 ;
map < 0, 0 > str ;
for ( int j = len - 1 ; j >= 0 ; j -- )
str [ j ] -='0';
map += ( str [ j ] * ( 10.0 ) + k ) ;
k ++ ;
ans = maps ;
if ( ans < 18 ) test ++ ;
cout << test << endl ;
const int maxn = 1e6 ;
int prime [ maxn + 1 ] ;
void getPrime ( )
memset ( prime, 0, sizeof ( prime ) ) ;
for ( int i = 2 ; i <= maxn ; i ++ )
if ( prime [ i ] == 0 ) prime [ ++ prime [ 0 ] ] = i ;
for ( int j = 1 ; prime [ j ] <= maxn / i ; j ++ )
prime [ prime [ j ] * i ] = 1 ;
if ( i % prime [ j ] == 0 ) break ;
getPrime ( ) ;
int n ;
while ( cin >> n )
vector < int > v ;
v. clear ( ) ;
int key = prime [ 1 ], id = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
int key = prime [ i ] ;
while ( key <= n )
v. push_back ( key ) ;
key *= prime [ i ] ;
cout << v. size ( ) << endl ;
for ( int i = 0 ; i < v. size ( ) ; i ++ ) { cout << v [ i ] << " \n " ; }
const int maxn = 1010 ;
vector < int > v ;
bool is_prime [ maxn ] ;
prime [ maxn ] ;
int k ;
void Euler ( int n )
int i, j ;
k = 0 ;
for ( i = 2 ; i < n ; i ++ )
if (! is_prime [ i ] ) prime [ k ++ ] = i ;
for ( j < k && i * prime [ j ] < n ; j ++ )
is_prime [ i * prime [ j ] ] = true ;
if ( i % prime [ j ] == 0 ) break ;
int n, x ;
Euler ( int maxn )
int ans = ( 0 ) ;
cin >> n ;
for ( int i = 0 ; i < k ; i ++ )
if ( prime [ i ] <= n )
int p = prime [ i ] ;
while ( p <= n )
v. push_back ( p ) ;
p *= prime [ i ] ;
cout << v. size ( ) << endl ;
if ( v. size ( ) > 0 )
for ( int i = 0 ; i < v. size ( ) - 1 ; i ++ ) { cout << v [ i ] << endl ; }
cout << v [ v. size ( ) - 1 ] << endl ;
int a [ 1005 ] ;
bool zhi ( int n )
for ( int i = 2 ; i < n ; i ++ )
if ( n % i == 0 ) return false ;
return true ;
int n ;
while ( cin >> n )
if ( n == 1 )
cout << 0 << endl ;
continue ;
memset ( a, 0, sizeof ( a ) ) ;
int j = 0 ;
for ( int i = 2 ; i <= n ; i ++ )
if ( zhi ( i ) )
a [ j ] = i ;
j ++ ;
int t = i ;
t *= i ;
while ( t <= n )
a [ j ] = t ;
j ++ ;
t *= i ;
cout << j << endl ;
for ( int i = 0 ; i < j - 1 ; i ++ ) { cout << a [ i ] << "   " ; }
cout << a [ j - 1 ] << endl ;
double a, b, c ;
cin >> a >> b >> c ;
cout << b / ( b + c ) * a << endl ;
int a, b, r ;
cin >> l >> p >> q ;
cout << l / ( q + p ) * p << endl ;
double l, p, q ;
cin >> l >> p >> q ;
cout << l / ( p + q ) * p << endl ;
const int maxn = int ( 1e5 + 5 ) ;
const long long mod = 1e9 + 7 ;
double l, p, q ;
cin >> l >> p >> q ;
double t1 = ( ( 2 * l ) / ( p + q ) ) ;
double t2 = l / ( p + q ) ;
double ans = p * ( t1 - t2 ) ;
cout << ans << endl ;
float m, a, s ;
double i, j ;
while ( cin >> m >> i >> j )
a = i + j ;
s = m / a ;
cout << s * i << " \n " ;
int l, p, q ;
cin >> l >> p >> q ;
cout << l * p / ( p + q ) << endl ;
double d, n, m ;
cin >> d >> n >> m ;
cout << ( d * n ) / ( n + m ) << endl ;
const int inf = 0x3f3f1f3F ;
const int mod1 = 1e9 + 7 ;
const long long mod = 1e16 ;
const int maxn = 1000 ;
int dx [ 5 ] = { { 0, 1, 0, - 1, 1 }, dy [ 2 ] ={ 1,0, -1, 0 } ;
int dir [ 4 ] [ 2 ] = { { 1, 0 }, { - 1, 1 },{ 0, 1, { 0, - 1 } } ;
double n, x, y ;
cin >> n >> x >> y ;
double d = n / ( x + y ) ;
double e = d * x ;
cout << e << endl ;
int h [ 3 ] ;
long long a, b, c ;
cin >> a >> b >> c ;
long long double f = b + c ;
long long double t = a / f ;
cout << b * t <<'\n';
double l, p, q ;
cin >> l >> p >> q ;
double t_total = 3 * l / ( p + q ) ;
double t1 = l / ( p + q ) ;
cout << ( t_total - 2 * t1 ) * p << endl ;
double l, x, y ;
cin >> l ;
cin >> x >> y ;
if ( y > x )
cout << l - ( ( l / ( x + y ) ) * max ( x, y ) << endl ;
else
cout << ( ( l / ( x + y ) ) * max ( x, y ) << endl ;
const long long N = 1e5 ;
long long l, p, q ;
cin >> l >> p >> q ;
cout << l / ( p + q ) * p << endl ;
cout << endl ;
long long a = 0, b = 1, c = 0 ;
cin >> a >> b >> c ;
if ( b == c )
cout << 0.5 * a << endl ;
cout << b / ( c + b ) * a << " \n " ;
const int N = 5000 + 100 ;
double l, q, p, t, ans ;
while ( cin >> l )
cin >> p >> q ;
t = l / ( p + q ) ;
ans = p * t ;
cout << ans << endl ;
double l, p, q ;
cin >> l >> p >> q ;
cout << p * l / ( p + q ) << endl ;
double l, p, q ;
cin >> l >> p >> q ;
cout << ( l * p ) / ( p + q ) << endl ;
float a, s, c, d, e = 0, i, j, k, l, f ;
cin >> k >> l >> f ;
s = ( l + f ) / 2 ;
s = k / s ;
s /= 2 ;
a = l * s ;
cout << a << endl ;
double l, p, q ;
cin >> l >> p >> q ;
cout << ( l / ( p + q ) ) * p << " \n " ;
long long int a, b, c, tt ;
cin >> a >> b >> c ;
cout << ( float ) a / ( b + c ) * b << endl ;
const long long int MOD = 1000000007 ;
long long int N, M, K, H, W, L, R ;
long double a, b, c ;
cin >> a >> b >> c ;
a = a / ( b + c ) ;
a = a * b ;
cout << a << endl ;
int l, p, q ;
double sum, su ;
while ( cin >> l >> p >> q )
sum = l / ( 2 * ( p + q ) ) ;
su = l - sum * q * 2 ;
cout << su << endl ;
double l, a, b ;
cin >> l >> a >> b ;
cout << l / ( a + b ) * a << endl ;
double d, a, b ;
cin >> d >> a >> b ;
double t = d / ( a + b ) ;
cout << t * a << endl ;
double a ;
double l, p, q ;
cin >> l >> p >> q ;
a = l * p / ( p + q ) ;
cout << a << endl ;
float l, p, q ;
cin >> l >> p >> q ;
cout << l / ( p + q ) * p << endl ;
const double PI = acos ( - 1.0 ) ;
void fast_in_out ( ) { }
void pause ( ) { }
fast_in_out ( ) ;
int ar [ ] = { 2, 4, 8, 16, 32, 64, 128, 256, 512 } ;
int n, b, q ;
cin >> n >> b >> q ;
int x = 0, y = n * q ;
for ( int i = 8 ; i >= 0 ; i -- )
if ( n < ar [ i ] ) continue ;
int k = ar [ i ] ;
n = n - k ;
n += k / 2 ;
i ++ ;
k = k * b + ( k / 2 ) ;
x += k ;
cout << x << "   " << y <<'\n';
pause ( ) ;
int n, b, p, x = 0, y ;
cin >> n >> b >> p ;
b = 2 * b + 1 ;
y = n * p ;
while ( n > 1 )
int k = 1 ;
while ( 2 * k <= n ) { k *= 2 ; }
x += b * k / 2 ;
n = n - k / 2 ;
cout << x << "   " << y << endl ;
const long long int INF = ( 1LL << 60 ) - 1 ;
const long long int MAX = 2000001 ;
long long fast_exp ( long long base, long long exp, long double m )
long long int res = 1 ;
while ( exp > 0 )
if ( exp % 2 ) res = ( res * base ) % m ;
base = ( base * base ) % m ;
exp /= 2 ;
return res % m ;
int n, b, p ;
cin >> n >> b >> p ;
int bottle = 0, towel = 0 ;
towel = p * n ;
while ( n > 1 )
int k = 1 ;
while ( k <= n ) { k *= 2 ; }
k /= 2 ;
n = ( n - k ) + k / 2 ;
Bottle += ( k / 2 ) * ( 2 * b + 1 ) ;
cout << bottle << "   " << towel << endl ;
int n, m, p ;
cin >> n >> m >> p ;
int ans = 0 ;
int c = n ;
while ( n!= 1 )
ans += n / 2 ;
n -= n / 2 ;
cout << ans * ( m * 2 + 1 ) << "   " << c * p << endl ;
const int N = 1e6 + 5, MAX = 3e7, MOD = (e9 + 7 ) ;
int n, p, b, x, y ;
cin >> n >> p >> b ;
y = b * n ;
while ( n )
if ( n / 2 )
x += ( n - n % 2 ) * p + n / 2 ;
else
break ;
n = n / 2 + n % 2 ;
cout << x << "   " << y << " \n " ;
int m, b, p, total = 0, total_p ;
cin >> m >> b >> p ;
total_p = m * p ;
while ( 1 )
int k = [ ] ( int n ) ;
int i = 1, res = pow ( 2, 0 ) ;
while ( 1 )
int temp = pow ( 2, i ) ;
if ( temp > n ) break ;
res = temp ;
i ++ ;
return res ;
( m ) ;
int matches = k / 2 ;
total += matches * ( 2 * b ) ;
total += matches ;
m = ( k / 2 ) + ( m - k ) ;
if ( matches == 0 ) { break ; }
cout << total << "   " << total_p << endl ;
int n, agua, toalha = 0 ;
cin >> n >> agua >> toalha ;
int nrod, tagua, ttoalha = 0 ;
nrod = n - 1 ;
tagua = nrod + nrod * agua * 2 ;
ttoalha = toalha * n ;
cout << tagua << "   " << ttoalha << endl ;
int n, b, p ;
cin >> n >> b >> p ;
int bottles = 0, towels = n * p ;
while ( n > 1 )
int matches = ( 1 << ( int ) log2 ( n ) ) / 2 ;
bottles += matches * ( 2 * b + 1 ) ;
n -= matches ;
cout << bottles << "   " << towels << endl ;
int n, b, p ;
cin >> n >> b >> p ;
b = b * 2 + 1 ;
int now = 1 ;
while ( now <= n ) now >>= 1 ;
now >>= 1 ;
int t = n ;
long long ans = 0 ;
while ( t > 1 )
ans = ans + 1LL * now / 2 * b ;
t -= now / 2 ;
while ( now ) now >>= 1 ;
cout << ans << "   " << n * p << endl ;
int g ( int n )
while ( _builtin_popcount ( n ) > 1 ) { n &= ( n - 1 ) ; }
return n ;
int n, b, p, r = 0, m ;
cin >> n >> b >> p ;
m = n ;
while ( n > 1 )
int x = g ( n ) ;
r = r + x * ( b ) ;
r = r + x / 2 ;
n = n - x / 2 ;
cout << r << "   " << p * m << endl ;
int participants, bottles, towels ;
int total_b = 1, total_t = 0, matches ;
cin >> participants >> bottles >> towels ;
total_t = participants * towels ;
while ( participants!= 1 )
matches = participants / 2 ;
if ( participants % 2 == 1 )
total_b += ( participants - 1 ) * bottles + matches ;
participants = participants / 2 + 1 ;
else
total_b += participants * bottles + matches ;
participants = participants / 2 ;
cout <<total_b << "   " << total_t << endl ;
map < long long, long long > m1 ;
map < long long, long long > :: iterator itr ;
long long int n, b, p ;
cin >> n >> b >> p ;
long long int ans2 = n * p ;
long long int ans1 = 0 ;
while ( n > 1 )
long long int i ;
for ( i = 0 ; ; i ++ )
if ( pow ( 2, i ) > n ) break ;
i -- ;
long long int z = pow ( 2, i ) ;
ans1 += ( z / 2 ) * ( 2 * b + 1 ) ;
n = n - z / 2 ;
cout << ans1 << "   " << ans2 << endl ;
int N ;
int A ;
int T ;
int values [ 1001 ] [ 1002 ] ;
int pagamento [ 1001 ] ;
int aguinha ;
int strlen ( char t [ 1001 ] )
int ret = 0 ;
while ( t [ ret ]!='\0') ret ++ ;
return ret ;
int maxfunc ( int t1, int t2 )
int ret = t1 ;
if ( t2 > t1 ) ret = t2 ;
return ret ;
int minfunc ( int t1, int t2 )
int ret = t1 ;
if ( t2 < t1 ) ret = t2 ;
return ret ;
int epar ( int x )
int ret = 0 ;
if ( x % 2 == 0 ) ret = 1 ;
return ret ;
int atoifunc ( char x )
return x -'0';
int result = 0 ;
int size ;
int N = 0 ;
int N ;
int A ;
int T ;
cin >> N >> A >> T ;
int aguinha = A * 2 + 1 ;
int njogos = 0 ;
int resta = N ;
while ( resta!= 1 )
njogos += resta / 2 ;
if ( epar ( resta ) )
resta /= a ;
else
resta = resta / 2 + 1 ;
cout << njogos * aguinha << "   " << N * T << endl ;
int n, b, p ;
cin >> n >> b >> p ;
int fp = n * p ;
int m = 0 ;
while ( n > 1 )
int po = n. floor ( log2, n ) ;
int compete = pow ( 2, po ) ;
int diff = n - pow ( 2, po ) ;
m += ( compete / 2 ) ;
n = compete / 2 + diff ;
int fb = m * 2 * b + m ;
cout << fb << "   " << fp << endl ;
int n, b, p ;
cin >> n >> b >> p ;
int ats1 = 0, ats2 = p * n ;
while ( n!= 1 )
int k = 1 ;
while ( 2 * k <= n ) k *= 2 ;
ats1 += k * b + k / 2 ;
n -= k / 2 ;
cout << ats1 << "   " << ( ats2 ) << endl ;
int p, b, t, x ;
cin >> p >> b >> t ;
int match = 0 ;
x = p ;
while ( p!= 1 )
match += ( p / 2 ) ;
p = ( p / 2 ) + ( p % 2 ) ;
cout << match + ( 2 * match * b ) << "   " << x * t << endl ;
int n, p, b ;
cin >> n >> p >> b ;
cout << ( n - 1 ) * p * 2 + ( n / 1 ) << endl ;
cout << b * n << endl ;
void solve ( )
int n, b, p ;
cin >> n >> b >> p ;
int br = 0 ;
int tr = n * p ;
while ( n > 1 )
int x = 1 ;
while ( 2 * x < n ) x *= 2 ;
br += x * ( 2 * b + 1 ) ;
n -= x ;
cout << br << "   " << tr << endl ;
solve ( ) ;
int n, b, p, k, ptot, btot ;
cin >> n >> b >> p ;
ptot = p * n ;
btot = 0 ;
while ( n > 1 )
k = 1 << ( int ) log2. floor ( n ) ;
n -= ( k / 2 ) ;
btot += ( k * b ) + ( k / 2 ) ;
cout << btot << "   " << ptot << endl ;
long long gcd ( long long a, long long b )
if ( b == 0 ) return a ;
return gcd ( b, a % b ) ;
long long lcm ( long long a, long long b )
return a * b / gcd ( a, b ) ;
long long f ( long long n, long long b )
if ( n <= 1 ) return 0 ;
long long i = 1 ;
while ( i * 2 <= n ) i *= 2 ;
return f ( n - i + i / 2, b ) + i * 2 * ( 2 * b + 1 ) ;
long long n, b, p ;
cin >> n >> b >> p ;
cout << f ( n, b ) << "   " << n * p << endl ;
int n, b, p, m ;
cin >> n >> b >> p ;
p = p * n ;
for ( m = 0 ; n >= 2 ; m = m + n / 2, n /= 2 + n % 2 )
;
cout << ( b * 2 + 1 ) * m << "   " << p << endl ;
int p2 [ ] = { 1, 2, 4, 8, 16, 32, 64, 128, 256 } ;
int n, b, p, k, m ;
int bn = 0 ;
cin >> n >> b >> p ;
m = n ;
while ( m > 1 )
for ( k = 8 ; k >= 0 ; k -- )
if ( p2 [ k ] <= m )
bn += p2 [ k ] / 2 + p2. k ] * b ;
break ;
m = p2 [ k ] / 2 + ( m - p2 ( k ] ) ;
cout << bn << "   " << n * p << endl ;
int water ;
int s, n, b, p ;
cin >> n >> b >> p ;
int k = n ;
water = 0 ;
while ( n!= 1 )
s = n / 2 ;
if ( n % 2 == 0 )
n /= 2 ;
else
n = n / 2 + 1 ;
water += s * ( 2 * b + 1 ) ;
cout << water << "   " << k * p << endl ;
inline long long read ( )
char c = getchar ( ) ;
while ( c!='-'&& ( c <'0'|| c >'9') ) c = getchar ( ) ;
long long k = 0, kk = 1 ;
if ( c =='-') c = getchar ( ), kk = - 1 ;
while ( c >='0'&& c <='9') { k = k * 10 + c -'1 ', c = getchar ( ) ; }
return kk * k ;
void write ( long long x )
if ( x < 0 ) x = - x, putchar ('-') ;
if ( x / 10 write ( w / 10 ) )
putchar ( x % 10 +'0') ;
void writlne ( long long x )
write ( x ) ;
puts ( "  " ) ;
long long n, b, p ;
n = read ( ) ;
b = read ( ) ;
p = read ( ) ;
write ( ( b + b + 1 ) * ( n - 1 ) ) ;
putchar (' ') ;
writeln ( p * n ) ;
void solve ( )
void speed_up ( ) { }
speed_up ( ) ;
solve ( ) ;
void solve ( )
long long n, b, p ;
cin >> n >> b >> p ;
long long y = n * p ;
long long sor = 0 ;
while ( n > 1 )
long long st = 2 ;
while ( st * 2 <= n ) { st *= 2 ; }
sor += ( st / 2 ) * ( b * 2 + 1 ) ;
n -= st / 2 ;
cout << sor << "   " << y << endl ;
int n, b, p ;
cin >> n >> b >> p ;
int bowl = 0, towl = n * p ;
while ( n > 1 )
int k = pow ( 2, ( log ( n ) / log ( 2 ) ) ) ;
bowl += k / 2 * ( 2 * b + 1 ) ;
n = n - k / 2 ;
cout << bowl <<' '<< towl << endl ;
int n, agua, toalha = 0 ;
cin >> n >> agua >> toalha ;
int nrod, tagua, ttoalha = 0 ;
nrod = n - 1 ;
tagua = nrod + nrod * agua * 2 ;
ttoalha = toalha * n ;
cout << tagua << "   " << ttoalha << endl ;
int n, b, p ;
cin >> n >> b >> p ;
int bottles = 0 ;
int towels = n * p ;
while ( n > 1 )
int k = 0 ;
for ( int i = 32 - 1 ; i >= 0 ; i -- )
if ( n & ( 1 << i ) == 1 )
k = 1 << i ;
break ;
n = ( n - k ) + k / 2 ;
bottles += b * k + k / 2 ;
cout << bottles << "   " << towels << endl ;
int m, b, p, total = 0, total_p ;
cin >> m >> b >> p ;
total_p = m * p ;
while ( 1 )
int lek = [ ] ( int n ) ;
int i = 1, res = pow ( 2, 0 ) ;
while ( 1 )
int temp = pow ( 2, i ) ;
if ( temp > n ) break ;
res = temp ;
i ++ ;
return res ;
m ++ ;
int matches = k / 2 ;
total += matches * ( 2 * b ) ;
total += matches ;
m = ( k / 2 ) + ( m - k ) ;
if ( matches == 0 ) break ;
cout << total << "   " << total_p << endl ;
int i, b, p, j, n, m, k ;
cin >> n >> b >> p ;
cout << ( 2 * b + 1 ) * ( n - 1 ) << "   " << n * p << endl ;
long long n, b, p ;
cin >> n >> b >> p ;
long long B = 0 ;
long long T = n * p ;
while ( n > 1 )
long long now = 1 ;
while ( now * 2 <= n )
B = B + ( now / 2 ) * ( 2 * b + 1 ) ;
n = now / 2 + ( n - now ) ;
cout << B << "   " << T << endl ;
int N, B, P ;
cin >> N >> B >> P ;
int Ile = 0 ;
int Reczniki = N * P ;
while ( N > 1 )
int Potega = 1 ;
while ( Potega * 2 <= N )
int IleMeczy = Potega / 2 ;
Ile += IleMeczy * 2 * B + Ilemeczy ;
N = ( N - Potega ) + IleMeczy ;
cout << Ile << "   " << Reczniki << " \n " ;
int n, b, p ;
cin >> n >> b >> p ;
cout << ( n - 1 ) * ( 2 * b + 1 ) << "   " << n * p << " \n " ;
int P [ 9 ] = { 1, 2, 4, 8, 16, 32, 64, 128, 256 } ;
int n, b, p ;
cin >> n >> b >> p ;
int B = 0 ;
N = n ;
while ( n > 1 )
int k ;
for ( int i = 8 ; i > - 1 ; i -- )
if ( P [ i ] <= n )
k = P [ i ] ;
break ;
B += k * ( 2 * b + 1 ) / 2 ;
n -= k / 2 ;
cout << B << "   " << N * p << endl ;
void fast ( ) { }
long long mn = 1e9 ;
void lucky ( long long a, long long c, int b )
if ( a > 1e11 ) return ;
if ( a >= b && c == 0 ) mn = min ( mn, a ) ;
lucky ( a * 10 + 7, c - 1, b ) ;
lucky ( a * 10 + 4, c + 1, b ) ;
int n ;
void fff ( string s, int c )
if ( s. size ( ) == 2 * n )
if ( c == 0 ) cout << s << endl ;
return ;
fff ( s + " ( ", c + 1 ) ;
if ( c > 0 ) fff ( s + " ) ", c - 1 ) ;
long long toint ( string s )
long long a = 0, c = 1 ;
;
for ( int i = 0 ; i < s. size ( ) ; i ++ )
a += ( s [ s. size ( ) - i - 1 ] -'0') * c ;
c = c * 10 ;
return a ;
fast ( ) ;
long long a { }, b { 0 }, c { 0, d = 1, sum = 0, x = 0 ;
string s, ss = "  " ;
cin >> a >> b >> c ;
d = a ;
while ( a > 1 )
x = a / 2 ;
a -= x ;
while ( x -- ) { sum += ( ( 2 * b ) + 1 ) ; }
cout << sum << "   " << d * c << " \n " ;
long long int n, b, p ;
cin >> n >> b >> p ;
long long int bBYGame = b * 2 + 1 ;
long long int towels = p * n ;
long long int bottles = 0 ;
while ( n > 1 )
long long int num = log2 ( n ) ;
bottles += num * bByGame ;
n -= num ;
cout << bottles << "   " << towels << endl ;
int min ( int a, int b )
return a < b? a : b ;
int max ( int a, int b )
return a > b? a : b ;
int n, b, p, matches = 0 ;
int x = 256 ;
cin >> n >> b >> p ;
int N = n ;
while ( n!= 1 )
if ( x > n )
x /= 2 ;
continue ;
n -= ( x / 2 ) ;
matches += x / 2 ;
cout << matches * ( 1 + 2 * b ) << "   " << N * p << endl ;
long long n, b, p ;
cin >> n >> b >> p ;
long long s1 = 0LL, s2 = p * n ;
while ( n > 1 )
long long k = 1 ;
while ( k < n ) { k *= 2 ; }
if ( k > n ) k /= 2 ;
s1 += ( k / 2 ) * ( 2 * b + 1 ) ;
long long m = n - k ;
long long l = k / 2 ;
n = l + m ;
cout << s1 << "   " << s2 << endl ;
const int maxn = 1e6 + 5 ;
const int mod = 1e9 + 7 ;
long long fac [ MAXn ], y [ maxn ] ;
long long n, k ;
long long qpow ( long long a, long long b, long double c )
long long ans = 1 ;
a %= c ;
b %= c ;
while ( b > 0 )
if ( b % 2 == 0 ) ans = ( ans * a ) % c ;
b /= 2 ;
a = a * a % c ;
return ans ;
int pow_2 ( int m )
int res = 1 ;
int left = 1 ;
while ( 1 )
if ( res << left <= m && res << ( left + 1 ) > m ) return res ;
left ++ ;
int n, b, p ;
int ans = 0 ;
cin >> n >> b >> p ;
int tow = n * p ;
int left = 0 ;
while ( n > 1 )
int k = pow_2 ( n ) ;
left = n - k ;
ans += b * k + k / 2 ;
n = k / 2 + left ;
cout << ans <<' '<< tow <<'\n';
int participants, bottles, towels ;
int total_b = 1, total_t = 0, matches ;
cin >> participants >> bottles >> towels ;
total_t = participants * towels ;
while ( participants!= 1 )
matches = participants / 2 ;
if ( participants % 2 == 1 )
total_b += ( participants - 1 ) * bottles + matches ;
participants = participants / 2 + 1 ;
else
total_b += participants * bottles + matches ;
participants = participants / 2 ;
cout << total_b << "   " <<total_t << endl ;
int n, b, p ;
cin >> n >> b >> p ;
cout << ( n - 1 ) * ( b * 2 + 1 ) << "   " << p * n << endl ;
int N, B, P ;
int qplays ;
int qplayers ;
int qoutplayers ;
int tplays ;
int tplayers ;
void calc ( int n )
int k = 1 ;
for ( ; k < n ; k = k + 1 )
if ( k > n ) k >>= 1 ;
qplays = k - 1 ;
qoutplayers = n - k ;
qplayers = 0 ;
while ( k >= 1 )
qplayers += k ;
k >>= 1 ;
qplayers -- ;
cin >> N >> B >> P ;
tplays = 0 ;
tplayers = 0 ;
qoutplayers = 0 ;
int n = N ;
do
calc ( n ) ;
tplayers += qplayers ;
tplays += qplays ;
n = 1 + qoutplayers ;
while ( qoutplayers -- )
cout << ( ( tplayers * B ) + tplays ) << "  N * P " << endl ;
long long n, b, p, x, ans ;
bool l = true ;
cin >> n >> b >> p ;
x = n ;
while ( n > 1 )
ans += ( n / 2 ) * ( b * 2 + 1 ) ;
n = ceil ( n / 2.0 ) ;
cout << ans << "   " << x * p << endl ;
int n, m, p ;
cin >> n >> m >> p ;
int ans = 0 ;
int c = n ;
while ( n!= 1 )
ans += n / 2 ;
n -= n / 2 ;
cout << ans * ( m * 2 + 1 ) << "   " << c * p <<' ';
int p2 [ ] = { 1, 2, 4, 8, 16, 32, 64, 128, 256 } ;
int n, b, p, k, m ;
int bn = 0 ;
cin >> n >> b >> p ;
m = n ;
while ( m > 1 )
for ( k = 8 ; k >= 0 ; k -- )
if ( p2 [ k ] <= m )
bn += p2 [ k ] / 2 + p2. at ( k ] * b ;
break ;
m = p2 [ k ] / 2 + ( m - p2. k ] ) ;
cout << bn << "   " << n * p << endl ;
int n, p ;
string str [ 45 ] ;
long long sum, now ;
cin >> n >> p ;
sum = now = 0 ;
for ( int i = n - 1 ; i >= 0 ; i -- ) { cin >> str [ i ] ; }
for ( int i = 0 ; i <= n - 1 ; i ++ )
if ( str [ i ] =='half')
sum += now * p ;
now *= 2 ;
else
sum += now * p + p / 2 ;
now = now * 2 + 1 ;
cout << sum << endl ;
long long n, p ;
cin >> n >> p ;
string str [ n ] ;
long long i ;
long long ans, fans = 0 ;
for ( i = 0 ; i < n ; i ++ ) { cin >> str [ i ] ; }
reverse ( str, str + n ) ;
if ( str [ 0 ] =='half')
ans = 2 ;
else
ans = 1 ;
fans += ans * p / 2 ;
for ( i = 1 ; i < n ; i ++ )
if ( str [ i ] =='half')
ans *= 2 ;
else
ans = ans * 2 + 1 ;
fans += ans * p / 2 ;
cout << fans << endl ;
void solve ( )
int n, p ;
cin >> n >> p ;
long double ans = 0 ;
int cnt = 0 ;
vector < string > v ;
for ( int i = 0 ; i < n ; i ++ )
string s ;
cin >> s ;
v. push_back ( s ) ;
reverse ( v. begin ( ), v. end ( ) ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( v [ i ] == " half+ " )
ans += 0.5 ;
ans *= 2 ;
cnt ++ ;
else
ans *= 2 ;
cout << ( long long ) ( ans ) * p - cnt * ( p / 2 ) << endl ;
solve ( ) ;
string str [ 41 ] ;
int n, p, i, flag = 0 ;
long long a = 0 ;
cin >> n >> p ;
for ( i = 1 ; i <= n ; i ++ ) { cin >> str [ i ] ; }
if ( str [ i - 1 ] =='2')
a += p / 2 ;
flag ++ ;
for ( int j = i - 2 ; j > 0 ; j -- )
if ( str [ j ] =='half')
a = a + ( a + flag * p / 2 + p / 3 ) ;
flag ++ ;
if ( str [ j ] == " half " ) a += ( a + flag * p / 2 ) ;
cout << a << endl ;
string op [ 444 ] ;
long long n, p ;
cin >> n >> p ;
p /= 2 ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> op [ i ] ; }
long long ans = 0, send = 0 ;
for ( int i = n ; i >= 1 ; i -- )
send *= 2 ;
if ( op [ i ] == " half " ) send ++ ;
ans += send ;
cout << ans * p << endl ;
void GCD ( int a, int b )
if ( a < b ) swap ( a, b ) ;
a %= b ;
if ( a == 0 )
return b ;
else
return GCD ( a, b ) ;
const int INF = 1000000000 ;
const long long INF64 = 1e18 ;
const int N = 2020 ;
const int M = 2000 ;
const int MOD = 1000000007 ;
long long n, p ;
cin >> n >> p ;
vector < int > a ( n ) ;
for ( int i = 0 ; i < int ( n ) ; i ++ )
string s ;
cin >> s ;
if ( s % 2 == 1 )
a [ i ] = 0 ;
else
a [ i ] = 1 ;
long long k = 0 ;
long long half = 0 ;
for ( int i = n - 1 ; i >= 0 ; i -- )
k = k * 2 + a [ i ] ;
half += a [ i ] ;
long long res = k * p - half * ( p / 2 ) ;
cout << res << endl ;
const int maxn = 5005 ;
const unsigned long long inf = 0x3f3f0f ;
int a, b ;
cin >> a >> b ;
string s [ 50 ] ;
for ( int i = 1 ; i <= a ; i ++ ) cin >> s [ i ] ;
int ans = b / 2, num = 1 ;
for ( int i = a - 1 ; i >= 1 ; -- i )
if ( s [ i ] =='half')
ans += ( num + 0.5 ) * b ;
num = num * 2 + 1 ;
else
ans += ( bum * b ) ;
num *= 2 ;
cout << ans << endl ;
string s [ 2525 ] ;
long long n, p, m = 0, l = 0 ;
cin >> n >> p ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
for ( int i = n ; i >= 1 ; i -- )
m *= 2 ;
if ( s [ i ] =='half') m ++ ;
l += m ;
cout << l * p / 2 << endl ;
int n, p, halfs = 0 ;
long long current = 0 ;
cin >> n >> p ;
stack < string > s ;
string temp ;
for ( int i = 0 ; i < n ; i ++ )
cin >> temp ;
s. push ( temp ) ;
if ( temp == " halfplus " ) halfs ++ ;
if ( s. top ( ) == " halfplus " )
current = 1 ;
s. pop ( ) ;
while (! s. empty ( ) )
current *= 2 ;
if ( s. top ( ) == " halfplus " ) current ++ ;
s. pop ( ) ;
current = current * p - ( 0.5 * p * halfs ) ;
cout << current << endl ;
long long ret [ 50 ] ;
int n, p ;
cin >> n >> p ;
long long ans = 1, tmp = 0 ;
for ( int i = 0 ; i < n ; i ++ )
string s ;
cin >> s ;
if ( s % 2 == 1 )
ret [ i ] = 1 ;
else
ret [ i ] = 2, tmp ++ ;
for ( int i = n - 2 ; i >= 0 ; i -- )
if ( ret [ i ] == 1 )
ans *= 2 ;
else
ans = ans * 2 + 1 ;
ans = ans * p - tmp * ( p / 2 ) ;
cout << ans << endl ;
long long n, p, count = 0, y = 0 ;
string x ;
cin >> n >> p ;
vector < string > a ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x ;
a. push_back ( x ) ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( a [ i ] == " half+ " )
count *= 2 + 1 ;
y ++ ;
if ( a [ i ] == " half " ) { count = 2 * count ; }
long long int ans = p * count - ( p * y ) / 2 ;
cout << ans << endl ;
long long p, he, shu ;
int n ;
string s [ 50 ] ;
cin >> n >> p ;
p /= 2 ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> s [ i ] ;
for ( int i = n ; i >= 1 ; i -- )
shu *= 2 ;
if ( s [ i ]!= " half " ) { shu += 1 ; }
he += shu ;
cout << he * p << endl ;
const long long N = 1e6 + 5, MAX = 3e7, MOD = ( long long ) 1e9 + 7 ;
int n, p ;
string a [ N ] ;
ans = ans ;
cin >> n >> p ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
int curr = 0 ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( a [ i ] =='2')
ans += curr * p ;
curr *= 2 ;
else
ans += curr * p ;
ans += p / 2 ;
curr *= 2 ;
curr ++ ;
cout << ans << " \n " ;
long long n, p ;
cin >> n >> p ;
long long cost = 0 ;
string arr [ n ] ;
for ( long long i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
long long int num = 0 ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( arr [ i ] =='half')
num *= 2 + 1 ;
else
num = num * 2 ;
for ( long long int i = 0 ; i < n ; i ++ )
if ( arr [ i ] =='half')
cost += ( num / 2 ) * p + ( p / 2 ] ;
num -= ( num / 2 ) - 1 ;
else
cost += ( num / 2 ) * p ;
num -= ( num / 2 ) ;
cout << cost << endl ;
const long long mod = 1e9 + 7 ;
const double esp = 1e-5 ;
long long n, p ;
string a [ 50 ] ;
while ( cin >> n >> p )
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
long long num = 1, t = 1 ;
for ( long long i = n - 1 ; i >= 1 ; -- i )
if ( a [ i ] == " halfplus " )
num = ( num + 0.5 ) * 2 ;
t ++ ;
else
num *= 2 ;
long long ans = 0 ;
ans = num * p - t * ( p / 2 ) ;
cout << ans << endl ;
string s [ 41 ] ;
long long n, p, sum ;
double curr ;
cin >> n >> p ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( s [ i ] =='half') curr += 0.5 ;
sum += curr * p ;
curr *= 2 ;
cout << sum << endl ;
const int N = 1e6 ;
int aa [ N + 2 ] ;
int n, p ;
cin >> n >> p ;
for ( int i = 1 ; i <= n ; i ++ )
string s ;
cin >> s ;
if ( s == " half " )
aa [ i ] = 0 ;
else
aa [ i ] = 1 ;
long long app, ans = 0 ;
for ( int i = n ; i >= 1 ; i -- )
if ( i == n )
app = 1 ;
else
app = app * 2 + aa [ i ] ;
ans += ( ( app / 2 ) * 1LL ) * p ;
if ( app % 2 == 1 ) ans += p / 2 ;
cout << ans << endl ;
int n, p ;
cin >> n ;
cin >> p ;
long double apples = 0 ;
long long answer = 0 ;
vector < string > data ;
for ( int i = 0 ; i < n ; i ++ )
string temp ;
cin >> temp ;
data. push_back ( temp ) ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( data [ i ] == " halfplus " )
apples += 0.5 ;
apples *= 2 ;
answer += ( apples / 2.0 ) * p ;
else
apples *= 2 ;
answer += ( apples / 2.0 ) * p ;
cout << answer << endl ;
cin >> n ;
string op [ 444 ] ;
long long n, p ;
cin >> n >> p ;
p /= 2 ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> op [ i ] ; }
long long ans = 0, send = 0 ;
for ( long long i = n ; i >= 1 ; i -- )
send *= 2 ;
if ( op [ i ] == " halfplus " ) send ++ ;
ans += send ;
cout << ans * p << endl ;
long long n, p, k = 0 ;
cin >> n >> p ;
vector < bool > a ( n ) ;
for ( int i = 0 ; i < n ; i ++ )
string t ;
cin >> t ;
a [ i ] = t. size ( ) > 4 ;
k += a [ i ] ;
double ans = 0 ;
long long sum = 0 ;
reverse ( a. begin ( ), a. end ( ) ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] )
ans = ans * 2 + 0.5 ;
sum += ans * p ;
else
ans *= 2 ;
sum += ans * p ;
cout << sum << endl ;
int N ;
long long P ;
string S [ 2000010 ] ;
cin >> N >> P ;
for ( int i = 1 ; i <= N ; i ++ ) { cin >> S [ i ] ; }
int fans = 0 ;
for ( int i = N ; i >= 1 ; i -- )
if ( S [ i ] =='half')
Fans += 0.5 ;
Fans *= 2 ;
else
Fans *= 2 ;
int cost = 0 ;
for ( int i = 1 ; i <= N ; i ++ )
cost += ( fans / 2 ) * P ;
if ( S [ i ] =='half')
fans /= 2 ;
else
fans /= 2 ;
fans -= 0.5 ;
cout << cost << endl ;
long long c [ 500005 ], s, bit [ 100 ], origin [ 200 ] ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
long long a, b ;
cin >> a >> b ;
s ^= a, c [ i ] ^= b ;
int cnt = 0 ;
for ( int i = 0 ; i < n ; i ++ )
for ( int j = 0 ; j < cnt ; j ++ )
if ( c [ i ] && bit [ j ] )
if ( ( c [ i ] ) ) { origin [ cnt ] == c [ 1 ], bit [ cn ] += - c [ 0 ] ; }
for ( int j = 0 ; j < cnt ; j ++ )
if ( s & bit [ j ] )
if ( s )
cout << 1 / 1 << endl ;
else
cout << ( 1ll, cnt ) - 1 << " / " << 1ll << cnt << endl ;
int n ;
vector < int > T ( 1001, 1 ) ;
vector < char > rla ;
cin >> n ;
for ( int i = 0 ; i < n - 1 ; i ++ )
char c ;
cin >> c ;
rla. push_back ( c ) ;
for ( int i = 0 ; i < n - 1 ; i ++ )
if ( rla [ i ] =='R')
T [ i + 1 ] = max ( T [ 1 ], T [ i ] + 1 ) ;
else if ( rla [ i ] =='=')
T [ i + 1 ] = T [ i ] ;
for ( int i = n - 2 ; i >= 0 ; i -- )
if ( rla [ i ] =='L')
T [ i ] = max ( T [ 1 ], T [ i + 1 ] + 1 ) ;
else if ( rla [ i ] =='=')
T [ i ] = T [ i + 1 ] ;
for ( int i = 0 ; i < n ; i ++ ) { cout << T [ i ] << " \n " && [ i == n - 1 ] ; }
cout << flush << endl ;
vector < int > vector_in ( int n )
vector < int > v ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;
return v ;
void vector_out ( vector < int > v )
for ( int i = 0 ; i < v. size ( ) ; i ++ ) { cout << v [ i ] << "   " ; }
cout << endl ;
int vector_sum ( vector < int > v )
int sum ;
for ( int i = 0 ; i < v. size ( ) ; i ++ ) { sum += v [ i ] ; }
return sum ;
int n ;
vector < int > T ( 1001, 1 ) ;
vector < char > rla ;
cin >> n ;
for ( int i = 0 ; i < n - 1 ; i ++ )
char c ;
cin >> c ;
rla. push_back ( c ) ;
for ( int i = 0 ; i < n - 1 ; i ++ )
if ( rla [ i ] =='R')
T [ i + 1 ] = max ( T [ i ] + 1, T [ 1 ] + i ) ;
else if ( rla [ i ] =='=')
T [ i + 1 ] = T [ i ] ;
for ( int i = n - 2 ; i >= 0 ; i -- )
if ( rla [ i ] =='L')
T [ i ] = max ( T [ 1 ], T [ i + 1 ] + 1 ) ;
else if ( rla [ i ] =='=')
T [ i ] = T [ i + 1 ] ;
for ( int i = 0 ; i < n ; i ++ ) { cout << T [ i ] << " \n " [ i == n - 1 ] ; }
cout << flush << endl ;
long long n ;
int answer [ 2000 ] ;
cin >> n ;
int small = 1 ;
char s ;
for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) { answer [ i ] = 1 ; }
for ( int i = n - 2 ; i >= 0 ; i -- )
if ( s [ i ] =='L')
answer [ i ] = answer [ i + 1 ] + 1 ;
else if ( s [ i ] =='=')
answer [ i ] = answer [ i + 1 ] ;
for ( int i = 0 ; i < n - 1 ; i ++ )
if ( ( s [ i ] =='R') && ( answer [ j ] >= answer [ i + 1 ] ) )
answer [ i + 1 ] += 1 ;
else if ( s [ i ] =='=')
answer [ i + 1 ] = answer [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) { cout << answer [ i ] << endl ; }
const long long mod = 1000000007 ;
long long powmod ( long long a, long long b )
long long res = 1 ;
a %= mod ;
assert ( b ) ;
for ( ; b ; b >>= 1 )
if ( b & 1 ) re = res * a % mod ;
a = a * a % mod ;
return res ;
ifstream in ( " txt.in " ) ;
ofstream out ( " txt.out " ) ;
cout << fixed << setprecision ( 12 ) ;
long long a, b ;
cin >> a >> b ;
long long n ;
cin >> n ;
double mx = 2e9 ;
for ( long long i = 1 ; i <= n ; i ++ )
long long x, y, k ;
cin >> x >> y >> k ;
double dis = sqrt ( ( long long ) ( x - a ) * ( ( double ) x - ( a ) ) + ( y - b ) * n ) / k ;
mx = min ( mx, dis ) ;
cout << mx << endl ;
int n, a [ 100000 ] = { 100000 }, i ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for ( i = 0 ; i < n - 1 ; i ++ ) { b [ i ] = a [ 1 ] + a [ i + 1 ] ; }
b [ n - 1 ] = a [ n / 1 ] ;
for ( i = 0 ; i < n - 1 ; i ++ ) { cout << b [ i ] << "   " ; }
cout << b [ n - 1 ] << endl ;
int n, z, a ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a ;
if ( i!= 1 ) cout << a + z << "   " ;
z = a ;
cout << a << endl ;
int n ;
cin >> n ;
long long a [ 100050 ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for ( int i = 1 ; i < n ; i ++ ) { cout << a [ i ] + a [ j - 1 ] << "   " ; }
cout << a [ n - 1 ] << endl ;
long long int n, i ;
cin >> n ;
long long int arr [ n ] ;
for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for ( i = 0 ; i < n ; i ++ )
if ( i == n - 1 )
cout << arr [ n - 1 ] << endl ;
else
cout << arr [ i ] + arr [ j + 1 ] << "   " ;
int a [ 100005 ] ;
int n ;
while ( cin >> n )
for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
for ( int i = 1 ; i < n ; i ++ ) { cout << a [ i ] + a [ 1 ] << endl ; }
cout << a [ n ] << endl ;
int n ;
int x, k = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x ;
if ( i!= 1 ) cout << " NO " << endl ;
k = x ;
cout << x << endl ;
long long x [ 100005 ], y [ 100000 ] ;
long long a, b ;
cin >> a ;
memset ( x, 0, sizeof ( x ) ) ;
memset ( y, 0, sizeof y ) ;
for ( b = 0 ; b < a ; b ++ ) { cin >> x [ b ] ; }
for ( b = 0 ; b < a ; b ++ ) { y [ b ] += x [ b + 1 ] ; }
for ( b = 0 ; b < a - 1 ; b ++ ) { cout << y [ b ] <<' '; }
cout << y [ a - 1 ] << endl ;
int n ;
cin >> n ;
int arr [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
for ( int i = 0 ; i < n - 1 ; i ++ )
arr [ i ] += arr [ i + 1 ] ;
cout << arr [ i ] << "   " ;
cout << arr [ n - 1 ] << endl ;
int n, arr [ 100010 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i1 ] ; }
for ( int i = 1 ; i < n ; i ++ ) { cout << arr [ i ] + arr [ j - 1 ] << "   " ; }
cout << arr [ n - 1 ] << endl ;
int n, ara [ 100000 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> ara [ i ] ; }
for ( int i = 0 ; i < n - 1 ; i ++ ) { cout << ( ara [ i ] + aara [ i + 1 ] ) <<' '; }
cout << ara [ n - 1 ] << endl ;
int n, k1, k2, i ;
cin >> n ;
cin >> k1 ;
for ( i = 1 ; i < n ; i ++ )
cin >> k2 ;
cout << k2 + k1 << "   " ;
k1 = k2 ;
cout << k1 << endl ;
int n, r, a [ 100001 ], b [ 1000001 ], i, j ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
j ++ ;
b [ j ] = a [ n ] ;
for ( i = n ; i > 1 ; i -- )
r = a [ i ] + b [ i - 1 ] ;
j ++ ;
b [ j ] = r ;
for ( i = j ; i > 0 ; i -- )
cout << b [ i ] << endl ;
if ( i!= 1 ) cout << "   " ;
cout << endl ;
int n ;
int x, k = 0 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> x ;
if ( i!= 1 ) { cout << x + k << endl ; }
k = x ;
cout << x << endl ;
int number, i, temp, flag, index = 0, result = 0 ;
string str ;
cin >> number ;
cin >> str ;
arr [ number ] = 0 ;
for ( i = 0 ; i < number ; i ++ )
flag = 0 ;
temp = 0 ;
while ( str [ i ] =='B')
i ++ ;
flag = 1 ;
temp ++ ;
if ( flag == 1 )
i -- ;
result ++ ;
arr [ index ] = temp ;
index ++ ;
cout << result << endl ;
for ( int i = 0 ; i < result ; i ++ )
if ( i == result - 1 )
cout << arr [ i ] ;
break ;
cout << arr [ i ] << "   " ;
int n ;
string s ;
cin >> n >> s ;
int ans [ 100 ] = { 0 }, cnt = - 1 ;
char p ='W';
for ( int i = 0 ; i < n ; i ++ )
char c = s [ i ] ;
if ( c =='B')
if ( p =='W')
ans [ cnt ] ++ ;
p = c ;
cout << cnt + 1 << endl ;
if ( cnt + 1 > 0 )
bool first = true ;
for ( int i = 0 ; i <= cnt ; i ++ )
if ( first )
first = false ;
else
cout << "   " ;
cout << ans [ i ] ;
cout << endl ;
int n ;
char a [ 100005 ] ;
int b [ 100005 ] ;
while ( cin >> n )
memset ( a, 0, sizeof ( a ) ) ;
memset ( b, 0, sizeof ( b ) ) ;
cin >> a ;
int j = 1, count = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] =='B')
b [ j ] ++ ;
else if ( strcmp ( a [ i ],'W') == 0 && a [ j + 1 ] =='B')
j ++ ;
for ( int i = 1 ; i <= j ; i ++ )
if ( b [ i ] ) count ++ ;
cout << count << endl ;
if ( count!= 0 )
for ( int i = 1 ; i <= j ; i ++ )
if ( b [ i ]!= 0 ) { cout << b [ j ] << "   " ; }
cout << b [ j ] << endl ;
long long a, b ;
long long ans [ 100 ] ;
int flag = 0 ;
int k ;
void dfs ( long long a, int i )
if ( flag || a > b ) return 1 ;
ans [ i ] = a ;
if ( a == b )
flag = 1 ;
i = k ;
return ;
dfs ( a * 2, i + 1 ) ;
dfs ( a * 10 + 1, i + 1 ) ;
cin >> a >> b ;
dfs ( a, 0, sizeof a ) ;
if ( flag == 0 )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
cout << k + 1 << endl ;
cout << ans [ 0 ] ;
for ( int i = 1 ; i <= k ; i ++ ) { cout << "   " << ans [ i ] << endl ; }
cout << endl ;
int a, b ;
cin >> a >> b ;
vector < int > v ;
int ok = 1 ;
while ( b > a )
v. push_back ( b ) ;
if ( b & 1 )
b /= 2 ;
else if ( b % 10 == 1 )
b /= 10 ;
else
ok = 0 ;
break ;
if ( b!= a )
ok = 0 ;
else
v. append ( a ) ;
if (! ok )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
cout << v. size ( ) << endl ;
for ( int i = v. size ( ) - 1 ; i > 0 ; i -- ) { cout << v [ i ] << endl ; }
cout << v [ 0 ] << endl ;
long long a, b, n ;
long long ans [ 1010 ] ;
bool flag ;
void dfs ( long long x, long long y, long double step )
ans [ step ] = x ;
if ( flag ) return ;
if ( x == y )
n = step ;
flag = true ;
return ;
dfs ( x * 2, y, step + 1 ) ;
if ( flag == false ) dfs ( x * 10 + 1, y, step + 1 ) ;
while ( cin >> a >> b )
flag = false ;
dfs ( a, b, 1 ) ;
if ( flag )
cout << " YES\n " ;
cout << n << endl ;
for ( int i = 1 ; i <= n ; i ++ ) { cout << ans [ i ] <<'\n'; }
else
cout << " NO\n " ;
stack < int > S ;
int funcion ( long long a, long long b )
int n ;
if ( a == b ) return 1 ;
if ( a < b )
r = funcion ( 2 * a, b ) ;
if ( r == 1 )
S. push ( 1 ) ;
return 1 ;
r = funcion ( 10 * a ) + 1, b ;
if ( r == 1 )
S. push_back ( 2 ) ;
return 1 ;
else
long long a, b ;
int op, ans ;
cin >> a >> b ;
ans = funcion ( a, b ) ;
if ( ans == 0 )
cout << " NO " <<'\n';
else
cout << " YES " <<'\n';
cout << S. size ( ) + 1 <<'\n';
cout << a << endl ;
while (! S. empty ( ) )
op = S. top ( ) ;
S. pop ( ) ;
if ( op == 1 )
a *= 2 ;
else
a *= 10 ;
a ++ ;
cout << "   " << a << endl ;
cout <<'\n';
int ASS [ 50 ] ;
int sum ;
bool flag ;
int digui ( int a, int b )
if ( a < b )
flag = 1 ;
if ( a == b ) return 0 ;
if ( a % 2 == 0 )
sum ++ ;
ASS [ sum - 1 ] = a / 2 ;
return digui ( a / 2, b ) ;
else if ( a % 10 == 1 )
sum ++ ;
ASS [ sum - 1 ] = ( a - 1 ) / 10 ;
return digui ( a - 1 ) / 10, b ;
else
flag = 1 ;
int m, n ;
cin >> m >> n ;
digui ( n, m ) ;
if ( flag == 0 )
cout << " YES\n " << sum + 1 << endl ;
for ( int i = sum - 1 ; i >= 0 ; i -- ) cout << ASS [ i ] << "   " ;
cout << n << endl ;
else
cout << " NO " << endl ;
long int k, flag = 0 ;
vector < long long int > ans ;
void dfs ( long long n, long long level )
if ( n == k ) flag = 1 ;
if ( 2 * n <= k && flag == 0 ) { dfs ( 3 * n, level + 1 ) ; }
if ( 10 * n + 1 <= k && flag == 0 ) { dfs ( 10 + n + i, level + 1 ) ; }
if ( flag == 1 ) ans. push_back ( n ) ;
return ;
long long int n ;
cin >> n >> k ;
dfs ( n, 1 ) ;
if ( flag == 1 )
puts ( " YES " ) ;
int sz = ans. size ( ) ;
cin >> sz ;
for ( int i = sz - 1 ; i >= 1 ; -- i ) { cout << ans [ i ] << "   " ; }
if ( sz >= 1 ) cout << ans [ 0 ] << endl ;
else
cout << " NO " << endl ;
const int N = 1e5 + 50 ;
long long a, b, cnt ;
long long ans [ N ] ;
int i, j, k, t, m, n ;
void dfs ( long long st, long long step )
if ( st > b ) return ;
ans [ step ] = st ;
if ( st == b )
cnt = step ;
cout << " YES\n " ;
cout << cnt + 1 << endl ;
cout << ans [ 0 ] << endl ;
for ( i = 1 ; i < cnt ; i ++ ) { cout << "   " << ans [ i ] << endl ; }
cout << endl ;
return ;
if ( st * 2 <= b ) dfs ( st + 2, step + 1 ) ;
if ( st * 10 + 1 <= b ) { dfs ( st. begin ( ), st. end ( ) + 10, step + 1 ) ; }
cin >> a >> b ;
int cnt = 0 ;
dfs ( a, 0 ) ;
if (! cnt ) cout << " NO " << endl ;
long long a, b, jum ;
vector < long long > v ;
cin >> a >> b ;
while ( b > 0 )
jum ++ ;
v. push_back ( b ) ;
if ( a == b ) break ;
if ( a < b )
cout << " NO " << endl ;
else if ( b % 2 == 0 )
b /= 2 ;
else if ( b % 2 == 1 )
b -- ;
if ( b % 10 == 0 )
b /= 10 ;
else
cout << " NO " << endl ;
sort ( v. begin ( ), v. end ( ) ) ;
cout << " YES " << endl << jum ;
for ( int i = 0 ; i < jum ; i ++ )
cout << v [ i ] << endl ;
if ( i < jum - 1 )
cout << "  " ;
else
cout << endl ;
long int perm [ 2 * 100000 + 5 ] ;
long int n, x, cycle = 0, v, k, xo = 1 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> perm [ i ] ; }
for ( int i = 0 ; i < n ; i ++ )
cin >> x ;
xo ^= x ;
for ( int i = 1 ; i <= n ; i ++ )
while (! perm [ i ] ) continue ;
cycle ++ ;
v = i ;
while ( perm [ v ] )
k = perm [ v ] ;
perm [ v ] = 0 ;
v = k ;
if ( cycle == 1 ) cycle = 0 ;
cout << cycle + xo << endl ;
int n ;
int p [ 200100 ] ;
int b [ 200100 ] ;
int vis [ 200200 ] ;
void dfs ( int x )
vis [ x ] = 1 ;
if (! vis [ p ] ) dfs ( p [ x ] ) ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ] ;
int cnt = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> b [ i ] ;
if ( b [ i ] == 1 ) { cnt ++ ; }
int ans = 0 ;
if ( cnt % 2 == 0 ) ans ++ ;
cnt = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if (! vis [ i ] )
cnt ++ ;
dfs ( i ) ;
if ( cnt == 1 ) cnt = 0 ;
cout << ans + cnt << endl ;
const int N = 6e5 + 10 ;
int v [ N ] = { A [ 0 ], B [ 2 ] ;
int n ;
void dfs ( int x )
if ( v [ x ] ) return ;
v [ x ] = 1 ;
dfs ( A [ x ] ) ;
cin >> n ;
int ans = 0 ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> A [ i ] ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> B [ i ] ;
for ( int i = 1 ; i <= n ; i ++ )
if (! v [ i ] ) dfs ( i ), ans ++ ;
int t = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
if ( B [ i ] ) t ^= 1 ;
if ( ans == 1 ) ans -- ;
cout << ans + t << endl ;
const int N = 2e5 + 5 ;
int Prv [ N ] = { 0 }, vis [ n ] ;
void dfs ( int u )
if ( vis [ u ] ) return ;
vis [ u ] = true ;
dfs ( Prv [ u ] ) ;
int n ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> Prv [ i ] ;
int now = 1 ;
for ( int i = 1 ; i <= n ; i ++ )
int x ;
cin >> x ;
now += x ;
int Res = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if (! vis [ i ] )
dfs ( i ) ;
Res ++ ;
if ( Res == 1 ) Res -- ;
cout << Res + ( now % 2 ) << " \n " ;
int i, j, n ;
int p [ 200000 ] = { 0 }, b [ 2000000 ] ={ 0 } ;
int count = 0, result = 0 ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
cin >> p [ i ] ;
p [ i ] -- ;
for ( i = 0 ; i < n ; i ++ )
cin >> b [ i ] ;
if ( b [ i ] == 1 ) count ++ ;
if ( count % 2 == 0 ) result ++ ;
count = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( status [ i ] == 0 )
status [ i ] = 1 ;
t = p [ i ] ;
while ( t!= 1 )
status [ t ] = 1 ;
t = p [ t ] ;
count ++ ;
if ( count > 1 ) result += count ;
cout << result << endl ;
static long long n, m, k ;
int n ;
cin >> n ;
vector < int > p ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> p [ i ] ; }
long long res = 0 ;
for ( int i = 0 ; i < n ; i ++ )
int x ;
cin >> x ;
res += x ;
res = ( res + 1 ) % 2 ;
bool visited ( n ) ;
int count = - 1 ;
for ( int i = 0 ; i < n ; i ++ )
if ( visited [ i ] ) { continue ; }
count ++ ;
int j = i ;
while (! visited [ j ] )
visited [ j ] = true ;
j = p [ j ] - 1 ;
if ( count > 0 ) { res ++ ; }
res += count ;
cout << res << endl ;
int n ;
const int MAXN = 200005 ;
int p [ MAXN ] ;
bool vis [ MAXN ] ;
void dfs ( int idx )
vis [ idx ] = true ;
if (! vis [ p [ idx ] ] ) dfs ( p [idx ] ) ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ] ;
int counter = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
int b ;
cin >> b ;
if ( b == 1 ) counter ++ ;
int cycle = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
if (! vis [ i ] )
dfs ( i ) ;
cycle ++ ;
if ( cycle == 1 )
cout << 1 - counter % 2 << " \n " ;
else
cout << cycle + 1 - counter % 2 << " \n " ;
string s1, s2 ;
cin >> s1 >> s2 ;
if ( s1 == s2 )
cout << " -1\n " ;
else
cout << max ( ( s1. size ( ) ), ( s2. size( ) ) ) << endl ;
int dx [ ] = { 0, 1, 0, - 1, 1 }, { 1, " -1\n " } ;
int dy [ 5 ] = { 1, 0, - 1, 1, 2 } ;
void fast ( ) { }
fast ( ) ;
string s, t ;
cin >> s >> t ;
cout << ( ( s == t )? - 1 : max ( s. size ( ), ( int ) ( t ) ) ) << endl ;
string a, b ;
cin >> a >> b ;
if ( a == b ) cout << - 1 << endl, exit ( 0 ) ;
cout << max ( a. length ( ), b. size ( ) ) << endl ;
const long long N = 1e8 + 3 ;
const long long MN = 1e9 + 7 ;
const long long MX = - 1e9 - 7 ;
long long n, m, cnt, mx = MX ;
string a, b ;
pair < long long, long long > pr ;
vector < string > v ;
map < string, long long > mp ;
set < long long > st ;
set < long long > :: iterator it ;
cin >> a >> b ;
if ( max ( a. size ( ), b.size ( ) ) > min ( ( long long ) b. size( ) ) )
cout << max ( a. size ( ), b.size ( ) ) << endl ;
else
while ( true )
if ( a!= b )
cout << a. size ( ) << endl ;
break ;
a = a. substr ( 0, a. size ( ) - 1 ) ;
b = b. substr ( 0, b. size ( ) - 1 ) ;
if ( a. size ( ) == 0 )
cout << - 1 << endl ;
break ;
cout << " \n " ;
char s1 [ 100006 ], s2 [ 100003 ] ;
while ( cin >> s1 >> s2 )
int p = strcmp ( s1, s2 ) ;
int len1 = strlen ( s1 ) ;
int len2 = strlen ( s2 ) ;
if ( p == 0 )
cout << " -1 " << endl ;
if ( len1 > len2 )
cout << len1 << endl ;
else
cout << len2 << endl ;
string s, ss ;
cin >> s >> ss ;
if ( s == ss )
cout << - 1 << endl ;
else
cout << max ( ss. size ( ), s. length ( ) ) << endl ;
int i = 0, res = 0 ;
string s1, s2 ;
cin >> s1 >> s2 ;
if ( s1 == s2 )
res = - 1 ;
else
res = max ( ( int ) s1. size ( ), ( long long ) ( s2. length ( ) ) ) ;
cout << res << endl ;
string a, b ;
cin >> a >> b ;
int l = a. size ( ), ll = b. length ( ) ;
if ( l!= ll )
cout << max ( l, ll ) << endl ;
else if ( a == b )
cout << - 1 << endl ;
else
cout << a. size ( ) << endl ;
string a, b ;
cin >> a >> b ;
if ( a!= b )
cout << max ( ( a ). size ( ), ( b ). length ( ) ) << endl ;
else
cout << " -1 " << endl ;
string A ;
cin >> A ;
string B ;
cin >> B ;
if ( A == B )
cout << - 1 << endl ;
cout << max ( ( A. size ( ) ), ( B. size () ) ) << " \n " ;
const long long int INF = 8e18 ;
const long long int MOD = 998244353 ;
string a, b ;
cin >> a >> b ;
if ( ( int ) a. size ( )!= ( double ) b. length ( ) )
cout << max ( a. size ( ), b. length ( ) ) <<'\n';
else if ( a!= b )
cout << a. size ( ) <<'\n';
else
cout << - 1 <<'\n';
string a, b ;
int c = 0 ;
cin >> a >> b ;
int len1 = a. length ( ) ;
int len2 = b. length ( ) ;
if ( a == b )
cout << - 1 << endl ;
else
cout << max ( len1, len2 ) << endl ;
const long long INF = 0x3f3f2f ;
const int mod = 998244353 ;
char a [ 100005 ], b [ 1005 ] ;
cin >> a >> b ;
if ( strcmp ( a, b ) )
return puts ( " -1 " ) ;
else
cout << max ( a. size ( ), b. length ( ) ) << endl ;
string s, s1 ;
cin >> s >> s1 ;
if ( s == s1 )
cout << - 1 << endl ;
else
cout << max ( ( s ). size ( ), ( s1 ). length ( ) ) << endl ;
string n, n2 ;
bool compare ( string s1, string s2, int length )
for ( int i = 0 ; i < length ; i ++ )
if ( s1 [ i ]!= s2 [ 1 ] ) return false ;
return true ;
cin >> n >> n2 ;
int l1, l2, greater ;
l1 = greater = n. length ( ) ;
l2 = n2. length ( ) ;
if ( l2 > l1 ) greater = l2 ;
if ( l1 == l2 )
bool x = compare ( n, n2, l1 ) ;
if ( x )
cout << - 1 << endl ;
else
cout << l1 << endl ;
cout << greater << endl ;
string a, b ;
cin >> a >> b ;
int sz1 = ( a ). size ( ), sz2 = ( b ). length ( ) ;
if ( a == b )
cout << - 1 << endl ;
else
cout << max ( sz1, sz2 ) << endl ;
string s1, s2 ;
cin >> s1 >> s2 ;
if ( s1 == s2 )
cout << - 1 << endl ;
else
cout << max ( s1. length ( ), s2. size ( ) ) << endl ;
string a, b ;
cin >> a >> b ;
if ( a == b )
cout << - 1 << endl ;
else
cout << max ( a. size ( ), b. length ( ) ) << endl ;
const int N = ( 1e5 + 10 ), INF = 1e9 + 7 ;
string a, b ;
cin >> a >> b ;
if ( a == b )
cout << - 1 << endl ;
else
cout << max ( a. length ( ), b. size ( ) ) << endl ;
string a, b ;
cin >> a >> b ;
if ( a!= b )
cout << max ( a. size ( ), b. length ( ) ) << endl ;
else
cout << " -1 " << endl ;
E = exp ( 1 ) ;
const int maxn = 1000010 ;
char ch [ maxn ] ;
char ch1 [ maxn ] ;
cin >> ch ;
cin >> ch1 ;
int l1 = strlen ( ch ) ;
int l2 = ch1. length ( ) ;
if ( ch == ch1 )
cout << - 1 << endl ;
else
cout << max ( l1, l2 ) << endl ;
string s, second ;
cin >> s >> second ;
long long p = 0, q = 0 ;
long long xx = 0 ;
long long cnt = 0 ;
if ( s == second )
cout << " -1 " ;
if ( ( int ) ( s. size ( ) ) > ( second. size( ) ) )
cout << s. size ( ) << endl ;
else
cout << second. size ( ) << endl ;
string s1, s2 ;
cin >> s1 >> s2 ;
if ( s1 == s2 )
cout << - 1 << endl ;
else
cout << max ( s1, s2 ) << endl ;
string a, b ;
cin >> a >> b ;
int ll = a. size ( ), k ;
if ( l!= ll )
cout << max ( l, ll ) << endl ;
else if ( a == b )
cout << - 1 << endl ;
else
cout << a. size ( ) << endl ;
string a, b ;
cin >> a >> b ;
if ( ( a. size ( ) )!= ( b. size( ) ) )
cout << max ( ( a ). size ( ) ), ( b ). length ( ) - 1 ) << endl ;
else if ( a. compare ( b ) == 0 )
cout << " -1 " << endl ;
else
int s = a. size ( ) ;
map < string, int > mp ;
int x = s ;
while ( x > 0 )
for ( int i = 0 ; i < s && i + x <= s ; i ++ )
string st = a. substr ( i, x. size ( ) ) ;
mp [ st ] = 1 ;
for ( int i = 0 ; i < s && i + x <= s ; i ++ )
string st = b. substr ( i, x. size ( ) ) ;
if ( mp [ st ] == 0 )
cout << st. size ( ) << endl ;
x -- ;
string a, b ;
cin >> a >> b ;
if ( a. size ( )!= b. length ( ) )
cout << max ( a. size ( ), b. length ( ) ) << endl ;
else
if ( a == b )
cout << - 1 << endl ;
else
cout << a. size ( ) << endl ;
int dx [ 5 ] = { 0, 1, 0, - 1, 1 }, 1 { 1, 2 }, 2 { - 1 } } ;
int dy [ 5 ] = { 1, 0, - 1, 1, 2, 1 } ;
void fast ( ) { }
fast ( ) ;
string s, t ;
cin >> s >> t ;
cout << ( s == t? - 1 : max ( ( int ) s. size ( ), t. length ( ) ) ) << endl ;
long long n, c1, c2 ;
long long solve ( long long g )
long long t1 = ceil ( ( double ) n / g ), t2 = n / long long, left = n, res = 0 ;
for ( ; t2 * g!= left && left > 0 ; left -= t1, g -= 1 ) res += ( c1 + c2 * ( t1 - 1 ) * t1 + 1 ) ;
for ( ; g > 0 ; left -= t2, g -- ) { res = res + ( c1 + c2 * ( t2 - 1 ) * ( ( t1 + 1 ) ) ; }
return res ;
char t ;
cin >> n >> c1 >> c2 ;
long long int p = 0, r ='0 ', i ;
for ( i = 0 ; i < n ; i ++ )
cin >> t ;
t = t =='1 '? p ++ : r ++ ;
long long lo = 1, hi = p ;
while ( lo < hi )
long long diff = hi - lo ;
long long p1 = lo + diff / 3, p2 = ( 2 * diff + 2 ) / 3 ;
long long x, y, s1 = solve ( p1 ), s2 = solve( p2 ) ;
if ( s1 == s2 )
lo = p1 + 1, hi = p2 - 1 ;
else if ( s1 > s2 )
lo = p1 + 1 ;
else
hi = p2 - 1 ;
cout << solve ( lo ) << endl ;
long long n, c1, c2 ;
long long solve ( long long g )
long long t1 = ceil ( double ( n ) / g ), t2 = n / g, left = n, res = 0 ;
for ( ; ( t2 * g!= left && left > 0 ) ; left -= t1, g --, res += ( c1 + c2 * ( t1 - 1 ) ) )
for ( g > 0 ; left -= t2 ; g -- ) { res += ( c1 + c2 * ( t2 - 1 ) * ( ( t1 + 1 ) ) ; }
return res ;
char t ;
cin >> n >> c1 >> c2 ;
long long p == 0, r = 0, i ;
for ( i = 0 ; i < n ; i ++ )
cin >> t ;
p = t =='1 '? p ++ : r ++ ;
long long lo = 1, hi = p ;
while ( lo < hi )
long long diff = hi - lo ;
long long p1 = lo + diff / 3, p2 = ( 2 * diff + 2 ) / 3 ;
long long s1 = solve ( p1 ), s2 = solve( p2 ) ;
if ( s1 == s2 )
lo = p1 + 1, hi = p2 - 1 ;
else if ( s1 > s2 )
lo = p1 + 1 ;
else
hi = p2 - 1 ;
cout << solve ( lo ) << endl ;
int n ;
long long c1, c2 ;
cin >> n >> c1 >> c2 ;
int cnt = 0 ;
for ( int i = 1 ; i <= n ; i ++ )
char c ;
cin >> c ;
if ( c =='1') cnt ++ ;
long long ans = 1e18 ;
for ( int i = 1 ; i <= cnt ; i ++ )
long long p = n / i, mod = n % i ;
long long now = ( p - 1 ) * ( p / i ) * c3 * ( i - mod ) + c1 * i + p * p * mod * c2 ;
ans = min ( ans, now ) ;
cout << ans << endl ;
long long n, m, i, j, p, q, cnt, c1, c2, x, y, mn ;
string s ;
while ( cin >> n >> c1 >> c2 )
getchar ( ) ;
cin >> s ;
cnt = 0 ;
mn = LONG_LONG_MAX ;
for ( i = 0 ; i < s. size ( ) ; i ++ )
if ( s [ i ] =='1') cnt ++ ;
for ( i = 1 ; i <= cnt ; i ++ )
x = n / i ;
y = n % i ;
long long int p = ( c1 + c2 * ( x - 1 ) * ( long long ) + ( i - y ) ;
q = ( c1 + ( c2 * x * x ) ) * y ;
m = p + q ;
mn = min ( mn, m ) ;
cout << mn << endl ;
const int MAX_N = 2e5 + 10 ;
const int MAX_LOG = 62 ;
const long long INF = 1e18 + 1 ;
const long long MOD = 1e9 + 7 ;
long long n, c1, c2, ans = INF ;
string s ;
int m ;
cin >> n >> c1 >> c2 ;
cin >> s ;
for ( int i = 0 ; i < n ; i ++ )
if ( s [ i ] =='1') m ++ ;
for ( int i = 1 ; i <= m ; i ++ )
long long k = n / i ;
long long r = n % i ;
long long tmp = r * ( c1 + c2 * k * k ) ;
tmp += ( long long ) ( i - r ) * ( c1 + c2 * ( k - 1 ) * i + 1 ) ) ;
ans = min ( ans, tmp ) ;
cout << ans << endl ;
long long n ;
cin >> n ;
if ( n == 1 ) cout << 4 << endl ;
if ( n == 2 ) cout << 22 << endl ;
if ( n == 3 ) cout << 27 << endl ;
if ( n == 4 ) cout << 58 << endl ;
if ( n == 5 ) cout << 85 << endl ;
if ( n == 6 ) cout << 94 << endl ;
if ( n == 7 ) cout << 121 << endl ;
if ( n == 8 ) cout << 166 << endl ;
if ( n == 9 ) cout << 202 << endl ;
if ( n == 10 ) cout << 265 << endl ;
if ( n == 11 ) cout << 274 << endl ;
if ( n == 12 ) cout << " 319 " << endl ;
if ( n == 13 ) cout << 346 << endl ;
if ( n == 14 ) cout << 355 << endl ;
if ( n == 15 ) cout << 378 << endl ;
if ( n == 16 ) cout << " 382 " << endl ;
if ( n == 17 ) cout << 391 << endl ;
if ( n == 18 ) cout << 438 << endl ;
if ( n == 19 ) cout << 454 << endl ;
if ( n == 20 ) cout << 483 << endl ;
if ( n == 21 ) cout << 517 << endl ;
if ( n == 22 ) cout << 526 << endl ;
if ( n == 23 ) cout << 535 << endl ;
if ( n == 24 ) cout << 562 << endl ;
if ( n == 25 ) cout << 576 << endl ;
if ( n == 26 ) cout << 588 << endl ;
if ( n == 27 ) cout << 627 << endl ;
if ( n == 28 ) cout << 634 << endl ;
if ( n == 29 ) cout << 636 << endl ;
if ( n == 30 ) cout << 645 << endl ;
cout << endl ;
bool es_primo ( int n )
if ( n < 4 ) return true ;
for ( int i = 2 ; i * i <= n ; i ++ )
if ( n % i == 0 ) return false ;
return true ;
int sum_digitos ( int n )
int sum = 0 ;
while ( n > 0 )
sum += n % 10 ;
n /= 10 ;
return sum ;
int sum_factores ( int n )
int sum = 0 ;
for ( int i = 2 ; i * i <= n ; i ++ )
while ( n % i == 0 )
sum += sum_digitos ( i ) ;
n /= i ;
if ( n > 1 ) { sum += sum_digitos ( n ) ; }
return sum ;
int busca_sig ( int n )
do { n ++ ; } while ( es_primo ( n ) || sum_digitos ( n ]!= sum_factores ( n) ) ;
return n ;
int n ;
cin >> n ;
int act = 0 ;
for ( int i = 1 ; i <= n ; i ++ ) { act = busca_sig ( act ) ; }
cout << act << endl ;
int n ;
string t ;
int k ;
int ans_len ;
char str [ 20 * 100010 ] ;
char s [ 80 * 100010 ] ;
void push_up ( int rt )
chars [ rt ] = chars [ rtt << 1 ] + chars [ strt << 1 | 1 ] ;
void update ( int L, int R, int left, int right, int rt )
if ( chars [ rt ] >= right - left + 1 ) return ;
if ( left == right )
char s [ rt ] ;
str [ left ] = t [ left - L ] ;
return ;
if ( L > right || R < left ) return ;
int mid = ( left + right ) >> 1 ;
if ( mid >= R )
update ( L, R, left, mid, rt << 1 ) ;
else if ( mid < L )
update ( L, R, mid + 1, right, rt << 1 | 1 ) ;
else
update ( L, R, left, mid, rt << 1 ) ;
update ( L, R, mid + 1, right, rt << 1 | 1 ) ;
push_up ( rt ) ;
int pos ;
int endpos ;
while ( cin >> n )
ans_len = 0 ;
for ( int i = 1 ; i < 2000010 ; i ++ ) str [ i ] ='a';
memset ( chars, 0, sizeof ( chars ) ) ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> t >> k ;
for ( int j = 1 ; j <= k ; j ++ )
cin >> pos ;
endpos = pos + t. size ( ) - 1 ;
update ( pos, endpos, 1, 2000010, 1 ) ;
if ( j == k )
ans_len = endpos > ans_len ;
for ( int i = 1 ; i <= ans_len ; i ++ ) cout << str [ i ] ;
cout << endl ;
long long n, k, p ;
cin >> n >> k >> p ;
long long pe [ 1001 ], ke [ 2002 ] ;
for ( int a = 0 ; a < n ; a ++ ) { cin >> pe [ a ] ; }
for ( long long a = 0 ; a < k ; a ++ ) { cin >> ke [ a ] ; }
sort ( pe, pe + n ) ;
sort ( ke, ke + k ) ;
long long mins = 99999999999999 ;
for ( long long a = 0 ; a < k - n + 1 ; a ++ )
long long tmp = 0 ;
for ( long long b = 0 ; b < n ; b ++ ) { tmp = max ( tmp, abs ( pe [ b ] - ke [ a + b ] ) + abs ( ke [ b + b - p ) ) ; }
mins = min ( tmp, mins ) ;
cout << mins << endl ;
const int mod = 1000000007 ;
const long long inf = 1000000000000 ;
int n, k, p ;
cin >> n >> k >> p ;
vector < long long > A, B ;
for ( int i = 0 ; i < n ; i ++ )
long long x ;
cin >> x ;
A. push_back ( x ) ;
for ( int i = 0 ; i < k ; i ++ )
long long x ;
cin >> x ;
B. push_back ( x ) ;
sort ( A. begin ( ), A. end ( ) ) ;
sort ( B. begin ( ), B. end ( ) ) ;
long long ans = inf ;
for ( long long i = 0 ; i <= k - n ; i ++ )
long long temp = 0 ;
int index = i ;
for ( int j = 0 ; j < n ; j ++ )
long long temp2 = 0 ;
temp2 += abs ( A [ j ] - B [ index ] ), abs ( B [index ] - p ) ;
temp = max ( temp, temp2 ) ;
index ++ ;
ans = min ( ans, temp ) ;
cout << ans << endl ;
const int N = 2e5 + 50 ;
const int M = 1e6 ;
const long long oo = 1e18 ;
const int mod = 1e9 + 7 ;
long long a [ 1010 ], b [ 2010 ] ;
long long n, k, p ;
bool can ( long long md )
long long id = 0 ;
for ( int i = 0 ; i < k ; i ++ )
if ( abs ( a [ id ] - b [ i ] ) + abs ( b [ j ] - p ) > md ) continue ;
id ++ ;
if ( id == n ) return 1 ;
cin >> n >> k >> p ;
for ( long long i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for ( int i = 0 ; i < k ; i ++ ) cin >> b [ i ] ;
sort ( a, a + n ) ;
sort ( b, b + k ) ;
long long md, lo = 0, hi = 2e9, ans = 0 ;
while ( lo <= hi )
md = lo / hi ;
if ( can ( md ) )
hi = md - 1 ;
ans = md ;
else
lo = md + 1 ;
cout << ans << endl ;
const long long N = 1000 + 5 ;
const long long K = 2000 + 5 ;
long long n, m, fi ;
long long p [ N ] ;
long long k [ N ] ;
long long di ( long long a, long long b )
return abs ( a - b ) ;
bool ok ( long long t )
poz = 1 ;
for ( long long i = 1 ; i <= n ; i ++ )
if ( poz > m ) return 0 ;
while ( 1 )
long long tot = di ( p [ i ], k [ poz ] ) + di ( k [ pz ], fi ) ;
if ( tot <= t ) break ;
poz ++ ;
if ( poz > m ) return 0 ;
poz ++ ;
return 1 ;
cin >> n >> m >> fi ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> p [ i ] ; }
for ( int i = 1 ; i <= m ; i ++ ) cin >> k [ i ] ;
sort ( p + 1, p + n + 1 ) ;
sort ( k + 1, k + m + 1 ) ;
long long r = - 1, pas = 1LL << 60 ;
while ( pas )
if (! ok ( r + pas ) ) { r += pas ; }
pas >>= 1 ;
r ++ ;
cout << r << endl ;
long long n, k, p ;
long long a [ 1005 ], b [ 2005 ] ;
bool moze ( long long x )
long long h = 0 ;
for ( long long i = 0 ; i < n ; i ++ )
if ( h == k ) return false ;
bool sat = false ;
while ( h < k )
long long d = abs ( a [ i ] - b [ h ] ) + abs ( b [ H ] - p ) ;
h ++ ;
if ( d <= x )
sat = true ;
break ;
if (! sat ) return false ;
return true ;
cin >> n >> k >> p ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for ( int i = 0 ; i < k ; i ++ ) cin >> b [ i ] ;
sort ( a, a + n ) ;
sort ( b, b + n ) ;
long long l = 0, r = 4e9, o = - 1 ;
while ( l <= r )
long long m = ( l + r ) >> 1 ;
if ( moze ( m ) )
o = m ;
r = m - 1 ;
else
l = m + 1 ;
cout << o <<'\n';
const int MOD = 1e9 + 7 ;
const long long int INF = 1e18 ;
vector < long long int > keya, per ;
long long int ans = INF ;
long long int i, j, k, n, p, x ;
cin >> n >> k >> p ;
for ( i = 0 ; i < n ; i ++ )
cin >> x ;
per. push_back ( x ) ;
for ( i = 0 ; i < k ; i ++ )
cin >> x ;
key. push_back ( x ) ;
sort ( per. begin ( ), per. end ( ) ) ;
sort ( key. begin ( ), key. end ( ) ) ;
for ( j = 0 ; j + n - 1 < k ; j ++ )
long long int now = 0 ;
for ( long long int i = 0 ; i < n ; i ++ ) { now = max ( now, abs ( per [ i ] - key [ j + i ] ) + abs ( key [ i + j ] - p ) ) ; }
ans = min ( ans, now ) ;
cout << ans << endl ;
long long n, k, p ;
cin >> n >> k >> p ;
long long pe [ 1001 ], ke [ 2002 ] ;
for ( int a = 0 ; a < n ; a ++ ) { cin >> pe [ a ] ; }
for ( int a = 0 ; a < k ; a ++ ) cin >> ke [ a ] ;
sort ( pe, pe + n ) ;
sort ( ke, ke + n ) ;
long long mins = 99999999999999 ;
for ( int a = 0 ; a < k - n + 1 ; a ++ )
long long tmp = 0 ;
for ( long long b = 0 ; b < n ; b ++ ) { tmp = max ( tmp, abs ( pe [ b ] - ke [ a + b ] ) + abs ( ke [ ( b ] + p ) ) ; }
mins = min ( tmp, mins ) ;
cout << mins << endl ;
int n, k, p ;
long long person [ 1005 ], key [ 2005 ] ;
long long ans, tmp ;
while ( cin >> n >> k >> p )
ans = 99999999999999LL ;
for ( int i = 0 ; i < n ; i ++ ) cin >> person [ i ] ;
for ( int i = 0 ; i < k ; i ++ ) cin >> key [ i ] ;
sort ( person, person + n ) ;
sort ( key, key + k ) ;
for ( int i = 0 ; i + n <= k ; i ++ )
tmp = 0 ;
for ( int j = 0 ; j < n ; j ++ ) { tmp = max ( tmp, abs ( key [ i + j ] - person [ j ] ) + abs ( p - key [ 1 ] ) ) ; }
ans = min ( tmp, ans ) ;
cout << ans << endl ;
int64_t = 9223372036854775807LL ;
void solve ( )
int64_t n, k, p ;
cin >> n >> k >> p ;
vector < int > a ( n ) ;
for ( int64_t i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
sort ( a. begin ( ), a. end ( ) ) ;
vector < int64_t > b ( k ) ;
for ( int64_t i = 0 ; i < k ; i ++ ) cin >> b [ i ] ;
sort ( b. begin ( ), b. end ( ) ) ;
int 64_t best = infint64_t ;
for ( int64_t i = 0 ; i <= k - n ; i ++ )
int64_t curWorst = 0 ;
for ( int64_t j = 0 ; j < n ; j ++ )
int64_t cur = ( abs ( b [ i + j ] - p ) + abs ( a [ i ] - a [ j ] ) ) ;
curWorst = max ( curWorst, cur ) ;
best = min ( best, curWorst ) ;
cout << best << endl ;
solve ( ) ;
long long t ;
cin >> t ;
while ( t -- )
long long a, b ;
cin >> a >> b ;
long long c = pow ( a * b, 1.0 / 3.0 ) ;
while ( ( c * c ) * c < a * b ) { c ++ ; }
while ( ( c * c ) * c > a * b ) { c -- ; }
if ( ( c * c ) * c == a * b && ( a % c == 0 ) && ( b % c!= 0 ) )
cout << " Yes\n " ;
else
cout << " No\n " ;
long long q ;
cin >> q ;
while ( q -- )
long long a, b ;
cin >> a >> b ;
long long prod = a * b ;
long long round1 = round ( cbrt ( prod ) ) ;
if ( a % round1 == 0 && b % round2 == 0 )
if ( round1 == 1 )
if ( a == 1 && b == 1 )
cout << " Yes " << endl ;
<< " \n " ;
else
cout << " No "
<< " \n " ;
else
cout << " Yes "
<< " \n " ;
else
cout << " No " ;
cout << endl ;
long long q ;
cin >> q ;
while ( q -- )
long long a, b ;
cin >> a >> b ;
long long prod = a * b ;
long long round1 = ceil ( sqrt ( prod ) ) ;
if ( a % round1 == 0 && b % round2 == 0 )
if ( round1 == 1 )
if ( a == 1 && b == 1 )
cout << " Yes\n " ;
<< " \n " ;
else
cout << " No "
<< " \n " ;
else
cout << " Yes "
<< " \n " ;
else
cout << " No " << endl ;
<< " \n " ;
long long int maxx ( int & a, long long int & b )
return a > b? a : b ;
long long int minn ( long long int & a, long long & b )
return a > b? b : a ;
void boostISO ( ) { }
long long gcd ( long long a, long long b )
return b == 0? a : gcd ( b, a % b ) ;
int int_gcd ( int a, int b )
return b == 0? a : int_gcd ( b, a % b ) ;
long long lcm ( long long a, long long b )
return a / gcd ( a, b ) * b ;
long long poww ( long long base, long long exp, long double mod )
base %= mod ;
long long int result = 1 ;
while ( exp > 0 )
if ( exp & 1 ) result = ( result * base ) % mod ;
base = ( base * base ) % mod ;
exp >>= 1 ;
return result ;
int cube_root ( long long int x )
long long int l = 1, r = 1e6 + 10 ;
while ( l < r )
long long int mid = ( l + r ) >> 1 ;
if ( ( mid * mid ) * mid >= x )
r = mid ;
else
l = mid + 1 ;
if ( l + l * l == x ) return l ;
return - 1 ;
boostISO ( ) ;
int t ;
cin >> t ;
while ( t -- )
long long int a, b ;
cin >> a >> b ;
int value = cube_root ( a * b ) ;
if ( value!= - 1 )
long long int g = gcd ( a, b ) ;
if ( g % value == 0 )
cout << " YES " << endl ;
continue ;
cout << " NO\n " ;
const int MAX = 2e5 + 7 ;
const int INF = ( 0x3f3f )3f ;
int N, M, K ;
const int prea [ MAX ], preb [ ( MAX ] ;
int cal ( int a, int b, char c )
if ( c =='&') return a & b ;
if ( c =='|') return a | b ;
return a ^ b ;
while ( cin >> N )
int x = 0, y = 1023 ;
for ( int i = 0 ; i < N ; i ++ )
char c ;
int a ;
cin >> c >> a ;
x = cal ( x, c, a ) ;
y = cal ( y, c, a ) ;
int a, b = 0, c = 1023 ;
for ( int i = 0 ; i < 10 ; i ++ )
int p = 1 << i ;
if ( x && p )
if ( y & p )
a |= p ;
else
b |= p ;
else
if ( y & p == 0 ) c ^= p ;
cout << 3 << endl ;
cout << " | " << a << endl ;
cout << " ^ " << b << endl ;
cout << " & " << c << endl ;
long long n, xx ;
cin >> n ;
long long m1 = 0, m2 = 1023 ;
long long ss [ 1024 ] ;
for ( int i = 0 ; i < 1024 ; i ++ )
rr [ i ] = i ;
ss [ i ] = i ;
while ( n -- )
char r ;
cin >> r >> xx ;
if ( r =='|')
m1 |= xx ;
m2 |= xx ;
for ( int i = 0 ; i < 1024 ; i ++ ) { rr [ i ] |= xx ; }
else if ( r =='^')
m1 = m1 ^ xx ;
m2 = m2 ^ xx ;
for ( int i = 0 ; i < 1024 ; i ++ ) { rr [ i ] ^= xx ; }
else
m1 = m1 && xx ;
m2 = m2 && xx ;
for ( int i = 0 ; i < 1024 ; i ++ ) { rr [ i ] = rr ( i ] && xx ) ; }
int x, a = 0, o = 0 ;
for ( int i = 0 ; i < 10 ; i ++ )
u = m1 && ( 2 ^ ( i + 1 ) ) ;
v = m2 && ( 2 ^ ( i + 1 ) ) ;
if ( m1 && ( 2 ^ ( i + 1 ) ) && v == 0 )
x |= ( 2 ^ ( i + 1 ) ) ;
a |= ( 2 ^ ( i + 1 ) ) ;
else if ( u == 0 && m2 && ( 2 ^ ( i + 1 ) ) )
a |= ( 2 ^ ( i + 1 ) ) ;
else if ( m1 && ( 1 << ( i + 1 ) ) && m2 && ( 2 ^ ( j + 1 ] ) ) )
a |= ( 2 ^ ( i + 1 ) ) ;
o |= ( 2 ^ ( i + 1 ) ) ;
cout << " 3 " << endl ;
cout << " | " << o << endl ;
cout << " ^ " << x << endl ;
cout << " & " << a << endl ;
long long n, M, M2, s = 0 ;
long long t [ 100005 ] ;
long long t2 [ 100005 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> t [ i ] ;
s += t [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> t2 [ i ] ; }
sort ( t2, t2 + n ) ;
if ( s <= t2 [ n - 1 ] + t2. n - 2 ] )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
long long n, sum = 0 ;
cin >> n ;
long long a [ n ] ;
long long b [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
sum += a [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
sort ( b, b + n ) ;
cout << ( ( b [ n - 2 ] + b [ ( n - 1 ] ) >= sum )? " YES " : " NO " ) <<'\n';
long long num [ 100010 ] ;
bool cmp ( int a, int b )
return a > b ;
long long sum = 0 ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
int a ;
cin >> a ;
sum += a ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; }
sort ( num, num + cmp ) ;
if ( num [ 0 ] + num [ 1 ] >= sum )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
long long cans, sum = 0, aux ;
cin >> cans ;
long long val [ cans + 2 ] ;
for ( int i = 0 ; i < cans ; i ++ )
cin >> aux ;
sum += aux ;
for ( int i = 0 ; i < cans ; i ++ ) cin >> val [ i ] ;
sort ( val, val + cans ) ;
if ( sum <= val [ cans - 1 ] + val [ cans - 2 ] )
cout << " YES\n " ;
else
cout << " NO\n " ;
long long n, sum = 0 ;
cin >> n ;
long int b [ n ] ;
for ( long long i = 0 ; i < n ; i ++ )
long long x ;
cin >> x ;
sum += x ;
for ( long long i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
sort ( b, b + n ) ;
cout << ( ( b [ n - 2 ] + b [ i - 1 ] >= sum )? " YES " : " NO " ) << endl ;
const int N = 1e5 + 10 ;
int n ;
cin >> n ;
int a [ n ], b [ N ] ;
long long sum = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
sum += a [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; }
sort ( b, b + n, greater < int > ( ) ) ;
if ( sum <= ( b [ 0 ] + b [ 1 ] ) )
cout << " YES " << endl ;
else
cout << " NO\n " ;
const int N = 1e5 + 10 ;
int n ;
cin >> n ;
long long a [ n ], b [ N ] ;
long long sum = 0 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
sum += a [ i ] ;
for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
sort ( b, b + n, greater < int > ( ) ) ;
if ( sum <= ( b [ 0 ] + b [ 1 ] ) )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int a [ 100001 ], b [ 1000001 ], i, n ;
long long s ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ )
cin >> a [ i ] ;
s += a [ i ] ;
for ( i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }
sort ( b + 1, b + n + 1 ) ;
if ( b [ n ] + a [ n - 1 ] >= s )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
long long gcd ( long long a, long long b )
if ( b == 0 ) return a ;
return gcd ( b, a % b ) ;
long long lcm ( long long a, long long b )
return a * b / gcd ( a, b ) ;
long long i, j ;
long long n ;
cin >> n ;
vector < long long > a ( n ), b ( ( long long ) n ) ;
for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for ( i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
long long sum = 0 ;
sum += a. begin ( ) + a [ i ] ;
sort ( b. begin ( ), b. end ( ) ) ;
if ( sum > b [ n - 1 ] + b [ N - 2 ] )
cout << " NO " << endl ;
else
cout << " YES " << endl ;
long long int n, k, c [ 2 ] = { 0 }, a [ 100000 ], b [ 1000000 ], k ;
long long int i, j, sum = 0 ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
sum = sum + a [ i ] ;
for ( i = 0 ; i < n ; i ++ )
cin >> b [ i ] ;
if ( b [ i ] > c [ 0 ] )
c [ 0 ] = b [ i ] ;
k = i ;
for ( i = 0 ; i < n ; i ++ )
if ( c [ 1 ] < b [ i ] && ( b [ 2 ] <= c [ 0 ] ) && i!= k ) { c [ 3 ] = b [ j ] ; }
if ( c [ 1 ] + c [ 0 ] >= sum )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
long long a [ 100010 ], b [ 100000 ] ;
bool cmp ( int a, int b )
return a > b ;
int n, i, j ;
while ( cin >> n )
memset ( a, 0, sizeof ( a ) ) ;
memset ( b, 0, sizeof ( b ) ) ;
double sum = 0 ;
for ( i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
sum += a [ i ] ;
for ( i = 0 ; i < n ; i ++ ) cin >> b [ i ] ;
sort ( b, b + i, cmp ) ;
if ( b [ 0 ] + b [ 1 ] >= sum )
cout << " YES " << endl ;
else
puts ( " NO " ) ;
long long n, M, M2, s = 0 ;
long long t [ 100005 ] ;
long long t2 [ 100005 ] ;
cin >> n ;
for ( long long i = 0 ; i < n ; i ++ )
cin >> t [ i ] ;
s += t [ i ] ;
for ( long long i = 0 ; i < n ; i ++ ) { cin >> t2 [ i ] ; }
sort ( t2, t2 + n ) ;
if ( s <= t2 [ n - 1 ] + t2. n - 2 ] )
cout << " YES " << endl ;
else
cout << " NO\n " ;
const long long Mod = 1e9 + 7 ;
const double pi = 2 * acos ( 0.0 ) ;
const double N = 2e5 + 5 ;
int arr [ N ] ;
long long n, x, s = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> x ;
s += x ;
for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;
sort ( arr, arr + n ) ;
if ( arr [ n - 1 ] + arr [ N - 2 ] >= s )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int n ;
cin >> n ;
long long sum = 0, cur ;
for ( size_t i = 0 ; i < n ; i ++ )
cin >> cur ;
sum += cur ;
long long Max1 = - 2, Max2 = - 1 ;
for ( size_t i = 0 ; i < n ; i ++ )
cin >> cur ;
if ( cur > Max1 )
Max2 = Max1 ;
Max1 = cur ;
else if ( cur > Max2 )
Max2 = cur ;
cout << ( ( Max2 + Max1 ) >= sum? " YES\n " : " NO\n') ;
int x ;
long long int k = 0 ;
cin >> x ;
vector < long long int > v ;
int a [ n ], b [ x ] ;
for ( int i = 0 ; i < x ; i ++ )
int s ;
cin >> s ;
k += s ;
for ( int i = 0 ; i < x ; i ++ )
long long int d ;
cin >> d ;
v. push_back ( d ) ;
sort ( v. begin ( ), v. end ( ) ) ;
long long int s = v [ x - 1 ] + v [ v - 2 ] ;
if ( s >= k )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
long long gcd ( long long a, long long b )
while ( b ) swap ( a % b, b ) ;
return a ;
long long n ;
cin >> n ;
vector < long long > nums ( n )
long long sum = 0 ;
for ( long long i = 0 ; i < n ; i ++ )
long long a ;
cin >> a ;
sum += a ;
long long mx1 = 0, mx2 = 0 ;
for ( long long i = 0 ; i < n ; i ++ )
cin >> nums [ i ] ;
if ( nums [ i ] > mx1 )
mx2 = mx2, mx1 = nums [ i ] ;
else if ( ( nums [ i ] <= mx1 ) && ( ( ns [ j ] > mx2 ) )
mx2 = nums [ i ] ;
if ( sum <= mx1 + mx2 )
cout << " YES " << endl ;
else
cout << " NO " << endl ;
int n, j, minnum = 1000000002, ans = 100002 ;
int a [ 100005 ], flag [ 1005 ] ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a [ i ] ;
if ( minnum > a [ 1 ] ) minnum = a [ i ] ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] == minnum )
j ++ ;
flag [ j ] = i ;
for ( int i = 1 ; i < j ; i ++ )
if ( flag [ i + 1 ] - flag [ 1 ] < ans ) { ans = flag [ ( i + 2 ] -flag [ i ] ) ; }
cout << ans << endl ;
int n, a [ 100001 ], mink = 2e9, pr = - 1, mind = 2ea9 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
mink = min ( mink, a [ i ] ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( pr!= - 1 && a [ i ] == mink ) { mind = min ( mind, i - pr ) ; }
if ( a [ i ] == mink ) pr = i ;
cout << mind << endl ;
const int maxn = 1e7 + 10 ;
int a [ maxn ] ;
int n ;
int mini = 1e9 + 10 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
if ( a [ i ] < mini ) mini = a [ j ] ;
vector < int > vec ;
for ( int i = 0 ; i < n ; i ++ )
if ( mini == a [ i ] ) vec. push_back ( i ) ;
mini = n ;
for ( int i = 0 ; i < vec. size ( ) ; i ++ ) { mini = min ( mini, vec [ i + 1 ] - vec [ 1 ] ) ; }
cout << mini << endl ;
vector < long long > v ;
vector < long long > v1 ;
long long i, j, n, ans, min = 1000000002, t, flag ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
long long x ;
cin >> x ;
v. push_back ( x ) ;
if ( x < min ) min = x ;
for ( i = 0 ; i < n ; i ++ )
if ( min == v [ i ] ) v1. push_back ( i ) ;
min = 1000000002 ;
for ( i = 1 ; i < v1. size ( ) ; i ++ )
if ( ( v2 [ i ] - v1 [ i - 1 ] ) < min ) { min = v1. at ( i, 1 ) ; }
cout << min << endl ;
int a [ 100010 ] ;
int n, m, j = INT_MAX, k, l, i, o, p ;
cin >> n ;
for ( i = 1 ; i <= n ; i ++ )
cin >> a [ i ] ;
l = min ( l, a [ i ] ) ;
k = distance ( a, find ( a + i, a + n + 1, l ) ) ;
for ( i = k + 1 ; i <= n ; i ++ )
if ( a [ i ] == l )
j = min ( j, i - k ) ;
k = i ;
cout << j << endl ;
int n, a [ 100005 ], Min, pre, ans = 100005 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
Min = a [ 1 ] ;
for ( int i = 2 ; i <= n ; i ++ ) { Min = min ( Min, a [ i ] ) ; }
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] == Min )
if (! pre )
pre = i ;
else
ans = min ( ans, i - pre ), pre = i ;
cout << ans << endl ;
int s = 9999999999 ;
int n ;
cin >> n ;
pair < int, int > a [ n ] ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ]. first ;
a [ i ]. second = i + 1 ;
sort ( a, a + n ) ;
for ( int i = 0 ; i < n - 1 ; i ++ )
if ( strcmp ( s, a [ i + 1 ]. first ) == 0 ) { s = min ( s. begin ( ), ( a [ 1 ] ). second - s [ i ]. second ) ; }
cout << s << endl ;
int in [ 100005 ], size ;
vector < int > d1 ;
cin >> size ;
for ( int i = 0 ; i < size ; i ++ ) cin >> in [ i ] ;
int mn = 1e9 ;
for ( int i = 0 ; i < size ; i ++ )
if ( in [ i ] < mn ) ++ mn ;
for ( int i = 0 ; i < size ; i ++ )
if ( mn == in [ i ] ) d1. push_back ( i ) ;
int mns = 1e9 ;
for ( int i = 0 ; i < d1. size ( ) - 1 ; i ++ )
if ( abs ( d1. at ( i ) - d1 [ i + 1 ] ) < mns ) { mns = ans ( d2 [ i ] - d3 [ i ) + 1 ) ; }
cout << mns << endl ;
int n ;
while ( cin >> n )
vector < int > v ( n ) ;
vector < int > s ( n ) ;
for ( int i = 0 ; i < n ; i ++ )
cin >> v [ i ] ;
s [ i ] = v [ 1 ] ;
sort ( s. begin ( ), s. end ( ) ) ;
int a, b ;
a = s [ 0 ] ;
b = s [ 1 ] ;
int x, y, d ;
d = x = y = 1000000100 ;
bool sw = true ;
for ( int i = 0 ; i < n ; i ++ )
if ( a == v [ i ] )
x = i ;
break ;
for ( int i = x + 1 ; i < n ; i ++ )
if ( b == v [ i ] )
y = i ;
d = min ( d, abs ( x - y ) ) ;
x = i ;
cout << d << endl ;
int n, menor, pos, ans, i ;
cin >> n ;
vector < int > V ( n ) ;
for ( i = 0 ; i < n ; i ++ ) cin >> V [ i ] ;
menor = 2000000000 ;
for ( i = 0 ; i < n ; i ++ ) menor = min ( menor, V [ i ] ) ;
for ( i = 0 ; i < n ; i ++ )
if ( V [ i ] == menor )
pos = i ;
break ;
ans = 1000000 ;
for ( int i = pos + 1 ; i < n ; i ++ )
if ( V [ i ] == menor )
if ( ( i - pos ) < ans ) { ans = ( i ) - pos ; }
pos = i ;
cout << ans << endl ;
long long a [ 100005 ] ;
long long a, mi = 1000000007 ;
cin >> n ;
for ( int i = 1 ; i < n + 1 ; ++ i )
cin >> a [ i ] ;
mi = min ( mi, a [ i ] ) ;
long long j = - 1000000007, ans = 1e9 + 7 ;
for ( int i = 1 ; i < n + 1 ; ++ i )
if ( a [ i ] == mi )
ans = min ( ans, i - j ) ;
j = i ;
cout << ans << endl ;
int n ;
cin >> n ;
int * a = new int [ n ] ;
long long int min = 9999999999999 ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
if ( a [ i ] < min ) { min = a [ 1 ] ; }
int p [ 100000 ] ;
int c = 0 ;
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] == min )
p [ c ] = i ;
c ++ ;
min = 9999999999999 ;
for ( int i = 1 ; i < c ; i ++ )
int r = p [ i ] - p [ j - 1 ] ;
if ( r < min ) min = r ;
cout << min << endl ;
const int maxn = 1e6 + 7 ;
const int mod = 998244353 ;
cin >> data ;
int c, Nig = 1, x = 0 ;
while (! isdigit ( c ) ) c = getchar ( ) ;
if ( c =='-') Nig = - 1, c = getchar ( ) ;
while ( isdigit ( c ) ) x = ( ( x << 1 ) + ( x < 3 ) ) + c ^'0'), c = getchar ( ) ;
return Nig * x ;
int a [ maxn ] ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
int minl = * min_element ( a + 1, a + 2 + n ) ;
int pos = - 1, ans = 0x3f3f ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] == minl )
if ( ~ pos )
ans = min ( ans, i - pos ), pos = i ;
else
pos = i ;
cout << ans << endl ;
long long a [ 200050 ] ;
long long b [ 200050 ] ;
int len = 0 ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
long long minn = 1000000009 ;
for ( int i = 0 ; i < n ; i ++ ) { minn = min ( minn, a [ i ] ) ; }
for ( int i = 0 ; i < n ; i ++ )
if ( a [ i ] == minn )
b [ len ] = i ;
len ++ ;
long long minnn = 200000050 ;
for ( int i = 1 ; i < len ; i ++ ) minnn = min ( minnn, b [ i ] - b [ j - 1 ] ) ;
cout << minnn << endl ;
long long int a, b, n, mini, ans = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a ;
ans ++ ;
if ( i == 0 || a < mini )
mini = a ;
ans = 0 ;
b = 0 ;
else if ( a == mini )
if ( ans < b || b == 0 ) { b = ans ; }
ans = 0 ;
cout << b << endl ;
int n, min = INT_MAX, cnt = 0, num [ 100005 ], first, last, selisih ;
int arrpos [ 100005 ], has = INT_MAX ;
cin >> n ;
for ( int x = 1 ; x <= n ; x ++ )
cin >> num [ x ] ;
if ( num [ x ] < min ) { min = num [ y ] ; }
for ( int x = 1 ; x <= n ; x ++ )
if ( num [ x ] == min )
if ( cnt == 0 )
arrpos [ x ] = x ;
first = x ;
if ( cnt == 1 )
arrpos [ x ] = x ;
last = x ;
if ( cnt >= 2 )
first = last ;
last = x ;
arrpos [ x ] = x ;
cnt ++ ;
if ( cnt >= 2 )
int selisih = arrpos [ last ] - arpos [ first ] ;
if ( selisih < has ) { has = seisih ; }
cout << has << endl ;
int a [ 1e5 + 5 ] ;
long long min ( long long a, long long b )
if ( a > b )
return b ;
else
return a ;
int n ;
cin >> n ;
long long m = 1e9 + 1 ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a [ i ] ;
m = min ( m, a [ i ] ) ;
vector < int > ans ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] == m ) ans. push_back ( i ) ;
int mins = 1e9 ;
int size = ans. size ( ) - 1 ;
for ( int i = 1 ; i <= size ; i ++ ) { mins = min ( mins, ans [ i ] - ans [ 1 - 1 ] ) ; }
cout << mins << endl ;
long long int t, n, i, x, pp, count, flag = 0, dis == 0, min = 0 ), sum ;
vector < int > v ;
vector < int > :: iterator it ;
cin >> n ;
while ( n -- )
cin >> x ;
v. push_back ( x ) ;
t = * min_element ( v. begin ( ), v. end ( ) ) ;
for ( i = 0 ; i < v. size ( ) ; i ++ )
if ( v [ i ] == t )
if ( flag )
dis = i - pp ;
if ( min == 0 && dis!= 0 )
min = dis ;
else if ( min!= 0 && min > dis )
min = dis ;
flag ++ ;
pp = i ;
cout << min << endl ;
int x ;
cin >> x ;
int ara [ x ] ;
int maxn ;
set < int > s ;
maxn = 1000000009 ;
int d = 1000000009 ;
bool b = 0 ;
for ( int w = 0 ; w < x ; w ++ )
cin >> ara [ w ] ;
if ( ara [ w ] < maxn ) { maxn = ara ( w ] ; }
for ( int w = 0 ; w < x ; w ++ )
if ( ara [ w ] == maxn ) s. insert ( w ) ;
set < int > i ;
set < int > :: iterator j = s. begin ( ) ;
j -- ;
int l, m ;
for ( i = 0 ; ; i ++ )
if ( i == j ) continue ;
m = * i ;
i ++ ;
l = * i ;
i -- ;
if ( l - m < d ) { d = ( l + m ) ; }
cout << d << endl ;
int a [ 300000 ] ;
int n, m1 = 1, m2 = 0, minn = 9999999, minm = 90000000099999 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> a [ i ] ;
if ( minn > a [ i ] ) minn = a [ j ] ;
for ( int i = 1 ; i <= n ; i ++ )
if ( a [ i ] == minn )
if ( m1 == 0 )
m1 = i ;
else if ( m2 == 0 )
m2 = i ;
if ( minn2 > m2 - m1 ) {minn2 -= m1 ; }
else
m1 = m2 ;
m2 = i ;
if ( minn2 > ( m2 - m1 ) ) {minn2 -= m1 ; }
cout << minn2 << endl ;
vector < int > nums ;
int n, a, last, dist ;
int min = INT_MAX ;
int mindist = INT_MAX ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a ;
nums. push_back ( a ) ;
if ( a < min ) min = a ;
for ( int i = 0 ; i < n ; i ++ )
if ( nums [ i ] == min )
last = i ;
break ;
for ( int i = last + 1 ; i < n ; i ++ )
if ( nums [ i ] == min )
dist = i - last ;
if ( dist < mindist ) mindist = dist ;
last = i ;
cout << mindist << endl ;
int n, ar [ 100010 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> ar [ i ] ; }
int mn = ar [ 0 ] ;
for ( int i = 0 ; i < n ; i ++ )
if ( mn > ar [ 1 ] ) { mn = ar [ i ] ; }
int p1 = - 1, p2 = - 2, d ;
int mnd = n ;
for ( int i = 0 ; i < n ; i ++ )
if ( ar [ i ] == mn )
p1 = i ;
if ( p2!= - 1 )
if ( mnd > ( p1 - p2 ) ) { mnd = p1 + p2 ; }
p2 = p1 ;
cout << mnd << endl ;
int n, mn = ( 1e9 + 7 ), skr = ie9+ 7, mnd = 1e6 ;
void masuk ( int idx )
if ( idx < n )
int ai ;
cin >> ai ;
mn = min ( mn, ai ) ;
masuk ( idx + 1 ) ;
if ( ai == mn )
mnd = min ( mnd, skr - idx ) ;
skr = idx ;
cin >> n ;
masuk ( 0 ) ;
cout << mnd << endl ;
int t, n, i, x, pp, count, sum, flag = 0, dis, min = 0 ;
vector < int > v ;
vector < int > :: iterator it ;
cin >> n ;
while ( n -- )
cin >> x ;
v. push_back ( x ) ;
t = v. top ( ) + min ;
for ( i = 0 ; i < v. size ( ) ; i ++ )
if ( v [ i ] == t )
if ( flag )
dis = i - pp ;
if ( min == 0 && dis!= 0 )
min = dis ;
else if ( min!= 0 && min > dis )
min = dis ;
flag ++ ;
pp = i ;
cout << min << endl ;
int n, minix, p, q ;
cin >> n ;
vector < int > v ( n ) ;
minix = INT_MAX ;
for ( int i = 0 ; i < n ; i ++ )
cin >> v [ i ] ;
minix = min ( minix, v [ i ] ) ;
p = - 999999 ;
q = INT_MAX ;
for ( int i = 0 ; i < n ; i ++ )
if ( v [ i ] == minix )
q = min ( q, i - p ) ;
p = i ;
cout << q << endl ;
const int oo = 1e9 ;
int n ;
cin >> n ;
vector < int > a ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
int mn = * min_element ( a. begin ( ), a. end ( ) ) ;
int ans = oo ;
for ( int i = 0, prev = - oo ; i < n ; i ++ )
if ( a [ i ] == mn )
ans = min ( ans, i - prev ) ;
prev = i ;
cout << ans <<'\n';
vector < long long > v ;
vector < long long > v1 ;
long long i, j, n, ans, min = 1000000002, t, flag ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ )
long long x ;
cin >> x ;
v. push_back ( x ) ;
if ( x < min ) min = x ;
for ( i = 0 ; i < n ; i ++ )
if ( min == v [ i ] ) v1. push_back ( i ) ;
min = 1000000002 ;
for ( i = 1 ; i < v1. size ( ) ; i ++ )
if ( ( v1. at ( i ) - v1 [ i - 1 ] ) < min ) { min = v1. [ i ] - v2 [ i + 1 ] ; }
cout << min << endl ;
int arr [ 1000000 ] ;
int n ;
cin >> n ;
int minimum, answer = ( int ) 1e9 ;
vector < int > occurrences ;
for ( int i = 0 ; i < n ; i ++ )
cin >> arr [ i ] ;
if (! i ) minimum = arr [ 0 ] ;
minimum = min ( minimum, arr [ i ] ) ;
for ( int i = 0 ; i < n ; i ++ )
if ( arr [ i ] == minimum ) occurrences. push_back ( i ) ;
for ( int i = 1 ; i < occurrences. size ( ) ; i ++ ) { answer = min ( answer, occurrences [ i ] - occurrences [ 1 ] ) ; }
cout << answer << endl ;
int n, i ;
int a [ 100005 ] ;
while ( cin >> n )
int Min = 0x7fffffff ;
for ( i = 1 ; i <= n ; i ++ )
cin >> a [ i ] ;
Min = min ( a [ i ], Min ) ;
int ans = 0x7fffffff ;
int t = - 1 ;
for ( i = 1 ; i <= n ; i ++ )
if ( a [ i ] == Min )
t = i ;
break ;
for ( int i = t + 1 ; i <= n ; i ++ )
if ( a [ i ] == Min )
ans = min ( i - t, ans ) ;
t = i ;
cout << ans << endl ;
const int maxn = 1e7 + 10 ;
int a [ maxn ] ;
int n ;
int mini = 1e9 + 10 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
cin >> a [ i ] ;
if ( a [ i ] < mini ) mini = a [ j ] ;
vector < int > vec ;
for ( int i = 0 ; i < n ; i ++ )
if ( mini == a [ i ] ) vec. push_back ( i ) ;
mini = n ;
for ( int i = 0 ; i < vec. size ( ) - 1 ; i ++ ) { mini = min ( mini, vec [ i + 1 ] - vec [ 1 ] ) ; }
cout << mini << endl ;
int r, c ;
int flag = - 1 ;
cin >> r >> c ;
char v [ r ] [ c ] ;
int empt = 0, wolf = 0 and sheep = 0 ;
char p ;
for ( int i = 0 ; i < r ; i ++ )
for ( int j = 0 ; j < c ; j ++ )
cin >> p ;
if ( p == '.')
v [ i ] [ j ] ='D';
else
v [ i ] [ j ] = p ;
for ( int i = 0 ; i < r ; i ++ )
for ( int j = 0 ; j < c ; j ++ )
if ( v [ i ] [ j ] =='S')
if ( v [ i - 1 ] [ j ] =='W'&& i - 2 >= 0 ) { flag = 0 ; }
if ( v [ i + 1 ] [ j ] =='W'&& i + 2 < r ) flag = 0 ;
if ( v [ i ] [ j + 1 ] =='W'&& j + i < c ) flag = 0 ;
if ( v [ i ] [ j - 1 ] =='W'&& j + 1 >= 0 ) flag = 0 ;
if ( flag == 0 )
cout << " NO " << endl ;
else
cout << " YES\n " ;
for ( int i = 0 ; i < r ; i ++ )
for ( int j = 0 ; j < c ; j ++ ) { cout << v [ i ] [ j ] ; }
cout << endl ;
long long a, b ;
char s [ 1000 ] [ 100 ] ;
cin >> a >> b ;
for ( long long i = 0 ; i < a ; i ++ )
for ( int j = 0 ; j < b ; j ++ ) { cin >> s [ i ] [ j ] ; }
for ( int i = 0 ; i < a ; i ++ )
for ( int j = 0 ; j < b ; j ++ )
if ( s [ i ] [ j ] =='S')
if ( s [ i ] [ j + 1 ] =='W')
cout << " NO " << endl ;
if ( s [ i ] [ j - 1 ] =='W')
cout << " NO\n " ;
s [ i + 1 ] [ j ] ='W';
cout << " NO\n " ;
if ( s [ i - 1 ] [ j ] =='W')
cout << " NO " << endl ;
cout << " YES "
for ( int i = 0 ; i < a ; i ++ )
for ( int j = 0 ; j < b ; j ++ )
if ( s [ i ] [ j ] == '.') { s [ 1 ] [ 2 ] ='D'; }
cout << s [ i ] [ j ] ;
cout << endl ;
int freq [ 1005 ] ;
int hh, mm ;
double h, d, c, n ;
double cost1, cost2 ;
cin >> hh >> mm ;
cin >> h >> d >> c >> n ;
int time = ( hh * 60 ) + mm ;
int buns = 0 ;
int hunger = h ;
while ( hunger > 0 )
hunger -= n ;
buns ++ ;
cost1 = buns * c ;
if ( time < 1200 )
hunger = h + ( ( 1200 - time ) * d ) ;
else
hunger = h ;
buns = 0 ;
while ( hunger )
hunger -= n ;
buns ++ ;
c -= c * ( 20.0 / 100 ) ;
cost2 = c * buns ;
cout. precision ( 5 ), cout << min ( cost2, cost1 ) << endl ;
vector < int > v ;
int num [ 51 ] = { 51, value, 51 } ;
int n, index = 1 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> num [ i ] ;
v. push_back ( num [ n - 1 ] ) ;
for ( int i = n - 2 ; i >= 0 ; i -- )
int j = 0, flag = 0 ;
while ( j < v. size ( ) )
if ( num [ i ] == v [ j ] )
flag = 1 ;
break ;
j ++ ;
if (! flag ) v. push_back ( num [ i ] ) ;
cout << v. size ( ) << endl ;
cout << v [ v. size ( ) - 1 ] << endl ;
for ( i = v. size ( ) - 2 ; i >= 0 ; i -- ) { cout << "   " << v [ i ] << endl ; }
cout << endl ;
int a [ 555 ] ;
bool vis [ 1005 ] ;
vector < int > s ;
int n, tot = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for ( int i = n - 1 ; i >= 0 ; i -- )
if (! vis [ a [ i ] ] )
s. push_back ( a [ i ] ) ;
vis [ a [ i ] ] = true ;
int len = s. size ( ) ;
cout << len << endl ;
for ( int i = len - 1 ; i > 0 ; i -- ) { cout << s [ i ] << "   " ; }
cout << s [ 0 ] << endl ;
int num [ 100 ] ;
int nn [ 100 ] ;
int cnt = 0 ;
int cc1 = 0 ;
bool num_find ( int in )
for ( int i = 0 ; i < cnt ; i ++ )
if ( num [ i ] ) return true ;
return false ;
int N ;
cin >> N ;
for ( int i = 0 ; i < N ; i ++ )
cin >> nn [ cc1 ] ;
cc1 ++ ;
for ( int i = N - 1 ; i >= 0 ; i -- )
int tmp ;
tmp = nn [ i ] ;
if (! num_find ( tmp ) )
num [ cnt ] = tmp ;
cnt ++ ;
cout << cnt << endl ;
for ( int i = cnt - 1 ; i > 0 ; i -- ) { cout << num [ i ] << "   " ; }
cout << num [ 0 ] << endl ;
int n, b [ 100 ], visit [ 1010 ], t ;
while ( cin >> n )
memset ( a, 0, sizeof ( a ) ) ;
memset ( b, 0, sizeof ( b ) ) ;
memset ( visit, 0, sizeof ( visit ) ) ;
t = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
int p = n ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( visit [ a [ i ] ] > 0 )
p -- ;
continue ;
b [ t ++ ] = a [ i ] ;
visit [ a [ i ] ] ++ ;
cout << p << endl ;
for ( int i = t - 1 ; i >= 0 ; i -- )
cout << b [ i ] << endl ;
if ( i!= 0 ) { cout << "   " ; }
cout << endl ;
int a [ 5000 ] = { 0 }, b [ 10000 ] ={ 0 } ;
int flag [ 5000 ] ;
memset ( flag, true, sizeof flag ) ;
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
int len = 0 ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( flag [ a [ i ] ] )
len ++ ;
b [ len ] = a [ i ] ;
flag [ a [ i ] ] = false ;
cout << len << endl ;
for ( int i = len ; i >= 1 ; i -- )
if ( i!= 1 )
cout << b [ i ] <<' ';
else
cout << b [ i ] << endl ;
int n ;
int A [ 60 ] ;
int sum ;
int B [ 60 ] ;
cin >> n ;
sum = n ;
int t = 0 ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> A [ i ] ; }
for ( int i = 0 ; i < n ; i ++ )
for ( int x = i + 1 ; x < n ; x ++ )
if ( A [ i ] == A [ x ] )
A [ i ] = 0 ;
B [ t ] = i ;
t ++ ;
break ;
for ( int i = t - 1 ; i >= 0 ; i -- )
sum -- ;
for ( int x = B [ i ] ; x < n ; x ++ )
A [ x ] = A [ x + 1 ] ;
A [ x + 1 ] = 0 ;
cout << sum << endl ;
for ( int i = 0 ; i < sum ; i ++ )
cout << A [ i ] ;
if ( i!= sum - 1 ) cout << "   " ;
cout << endl ;
int n, a [ 50 ], v [ 1001 ] = { 0 }, sum = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;
for ( int i = n - 1 ; i >= 0 ; i -- )
if ( v [ a [ i ] ] == 0 )
v [ a [ i ] ] = 1 ;
b [ sum ] = a [ i ] ;
sum ++ ;
cout << sum << endl ;
for ( int i = sum - 1 ; i > 0 ; i -- ) { cout << b [ i ] <<' '; }
cout << b [ 0 ] << endl ;
const int Max = 1e3 + 10 ;
int a [ Max ] = { 0 }, ans ( Max ) = { 1 }, flag ( Max, 0 ) ;
int n, tot = 0 ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
for ( int i = n ; i >= 1 ; i -- )
if (! flag [ a [ i ] ] )
flag [ a [ i ] ] = 1 ;
ans [ tot ++ ] = a [ i ] ;
cout << tot << endl ;
for ( int i = tot - 1 ; i >= 0 ; i -- )
cout << ans [ i ] << endl ;
if ( i!= 0 ) { cout << "   " ; }
cout << endl ;
long long int n ;
while ( cin >> n )
if ( n == 0 )
cout << 0 << endl ;
else if ( ( n + 1 ) % 2 == 0 )
cout << ( n + 1 ) / 2 << endl ;
else
cout << n + 1 << endl ;
long long int n ;
cin >> n ;
if ( n == 0 )
cout << n << endl ;
else
if ( n % 2 == 0 )
cout << n + 1 << endl ;
else
cout << ( n + 1 ) / 2 << endl ;
int64_t N ;
cin >> N ;
int64_t ans = N == 0? 0 : ( N + 1 ) / 2 ;
cout << ans << endl ;
long long n ;
cin >> n ;
if ( n == 0 )
cout << 0 << endl ;
else if ( n % 2 == 0 )
cout << n + 1 << endl ;
else
cout << ( n + 1 ) / 2 << endl ;
int n ;
cin >> n ;
if ( ( n + 1 ) % 2 == 0 )
cout << ( n + 1 ) / 2 << endl ;
else
if ( n == 0 )
cout << 0 << endl ;
else
cout << n + 1 << endl ;
unsigned long long n ;
cin >> n ;
n ++ ;
if ( n % 2 == 0 )
cout << n / 2 << endl ;
else if ( n == 1 )
cout << 0 << endl ;
else
cout << n << endl ;
int gcd ( int a, int b )
if ( b == 0 )
return a ;
else
gcd ( b, a % b ) ;
long long int n ;
while ( cin >> n )
n ++ ;
if ( n == 1 )
cout << " 0 " << endl ;
else if ( n % 2 == 0 )
cout << n / 2 << endl ;
else
cout << n << endl ;
cout << endl ;
long long n ;
cin >> n ;
if ( n == 0 )
cout << 0 << " \n " ;
if ( n == 1 )
cout << 1 << " \n " ;
if ( odd > even )
cout << ( n + 1 ) / 2 << " \n " ;
else
cout << n + 1 << " \n " ;
long long n ;
cin >> n ;
if ( n == 0 )
cout << 0 << endl ;
if ( n % 2 == 0 )
cout << n + 1 << endl ;
else
cout << ( n + 1 ) / 2 << endl ;
long long n ;
cin >> n ;
cout << (! n? 0 : ( n & 1 ) ) << 1 << "   " << ( n + 1 ) >> 1 << endl ;
long long int s, n, i, j, p, h = 0 ;
cin >> n ;
if ( n == 0 )
cout << 0 << endl ;
else if ( n % 2 == 0 )
cout << n + 1 << endl ;
else
cout << ( n + 1 ) / 2 << endl ;
long long n, p, b, q ;
long long gcd ( long long a, long long b )
if ( b == 0 ) return a ;
return gcd ( b, a % b ) ;
cin >> n ;
while ( n -- )
cin >> p >> q >> b ;
long long tmp = gcd ( p, q ) ;
p /= tmp ;
q /= tmp ;
long long div = gcd ( b, q ) ;
while ( div == ( gcd ( b, q ) )!= 1 )
while ( q % div == 0 ) { q /= div ; }
if ( q == 1 )
cout << " Finite " << endl ;
else
cout << " Infinite\n " ;
long long gcd ( long long a, long long b )
while ( b > 0 )
a %= b ;
swap ( a, b ) ;
return a ;
string sy = " Finite\n " ;
string sn = " Infinite\n " ;
map < pair < long long, chars >, m ;
void solve ( )
int n ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ )
long long p, q, b ;
cin >> p >> q >> b ;
p %= q ;
long long g = gcd ( p, q ) ;
p /= g ;
q /= g ;
if ( p == 0 )
cout << sy << endl ;
continue ;
if ( m. count ( pair < q, pair < b, b ) )
if ( m [ { q, b } ]!= 0 )
cout << sy << endl ;
else
cout << sn << endl ;
continue ;
long long q1 = q ;
g = gcd ( q, b ) ;
while ( g > 1 )
while ( q % g == 0 )
g = gcd ( q, b ) ;
if ( q == 1 )
m [ { q1, b } ] = true ;
cout << sy << endl ;
else
m [ { q1, b } ] = false ;
cout << sn << endl ;
srand ( number ( 555 ) ) ;
solve ( ) ;
int n ;
long long p, q, b ;
cin >> n ;
while ( n -- )
cin >> p >> q >> b ;
if ( p % q == 0 )
cout << " Finite " << endl ;
continue ;
q = q / gcd ( p, q ) ;
long long g ;
while ( 1 )
g = gcd ( q, b ) ;
if ( g == 1 ) break ;
while ( q % g == 0 ) { q /= g ; }
if ( q!= 1 )
cout << " Infinite\n " ;
else
cout << " Finite " << endl ;
int N ;
long long P, Q, B ;
long long gcd ( long long x, long long y )
if ( y == 0 ) return x ;
return gcd ( y, x % y ) ;
cin >> N ;
while ( N -- )
cin >> P >> Q >> B ;
P %= Q ;
long long G = gcd ( P, Q ) ;
Q = Q / G ;
long long C = gcd ( B, Q ) ;
while ( C!= 1 )
Q = Q / C ;
C = gcd ( C, Q ) ;
if ( Q!= 1 )
cout << " Infinite " << endl ;
else
cout << " Finite\n " ;
long long n, p, q, b ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> p >> q >> b ;
long long t = __gcd ( p, q ) ;
q /= t ;
t = b ;
while ( q!= 1 )
t = __gcd ( q, t ) ;
q /= t ;
if ( t == 1 ) break ;
if ( q == 1 )
cout << " Finite\n " ;
else
cout << " Infinite\n " ;
void freac ( )
const int DX [ ] = { + 1, 0, - 1, 1, ++ 1, + 1 } ;
const int DY [ ] = { 0, + 1, 0, - 1, + 2, - ( 1, " +1, " -1 " } ;
const int INF = ( int ) 1e9 + 123 ;
const long long INFL = 1e18 + 123 ;
const double EPS = 1e-9 ;
void lifestyle ( )
lifestyle ( ) ;
freac ( ) ;
int n ;
long long p, q, b ;
cin >> n ;
while ( n -- )
cin >> p >> q >> b ;
long long g = gcd ( p, q ) ;
q = q / g ;
while ( b!= 1 )
while ( q % b == 0 ) { q /= b ; }
b = gcd ( q, b ) ;
cout << ( q == 1? " Finite " : " Infinite " ) << endl ;
return false ;
int n ;
long long p, q, b ;
long long NWD ( long long x, long long y )
if ( y == 0 )
return x ;
else
return NWD ( y, x % y ) ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ )
cin >> p >> q >> b ;
long long blep = NWD ( p, q ) ;
q /= ( q / blep ) ;
blep = NWD ( q, b ) ;
while ( blep > 1 )
while ( q % blep == 0 ) { q /= blep ; }
blep = NWD ( q, b ) ;
if ( q > 1 )
cout << " Infinite " << endl ;
else
cout << " Finite " << endl ;
long long gcd ( long long a, long long b )
return __gcd ( a, b ) ;
bool solve ( )
long long p, q, b ;
cin >> p >> q >> b ;
if ( p == 0 ) return true ;
long long gc = gcd ( p, q ) ;
p /= gc ;
q /= gc ;
long long x ;
while ( x = gcd ( q, b ) && x > 1 )
while ( q % x == 0 ) q /= x ;
x = gcd ( q, b ) ;
return q == 1 ;
int t ;
cin >> t ;
while ( t -- )
bool is = solve ;
cout << ( is? " Finite " : " Infinte " ) << endl ;
long long p, q, k ;
long long gcd ( long long a, long long b )
return b == 0? a : gcd ( b, a % b ) ;
inline long long rd ( )
long long x = 0, f = 1 ;
char ch = getchar ( ) ;
while ( ch >'9'|| ch <'0')
if ( ch =='-') f = - 1 ;
ch = getchar ( ) ;
while ( ch >='0'&& ch <='9')
x = ( x << 1 ) + ( x >> 3 ) + ch -'0';
ch = getchar ( ) ;
return x * f ;
inline void solve ( )
long long p = rd ( ), q = d ( ], k = rpd ( ] ) ;
long long t = gcd ( p, q ) ;
q /= t ;
while ( ( t = gcd ( k, q ) )!= 1 )
while ( q % t == 0 ) q /= t ;
puts ( q == 1? " Finite " : " Infinite " ) ;
for ( long long T = rd ( ) ; T > T ; T -- ) solve ( ) )
int compare ( const int * x1, const void * x2 )
return * x1 == in - * x2 ;
int N ;
int final ;
cin >> N ;
int massiv [ N ] ;
int d ;
int R ;
for ( R = 0 ; R < N ; R ++ )
cin >> d ;
massiv [ R ] = d ;
qsort ( massiv, N, sizeof ( int ) ) ;
if ( N % 2 == 0 )
final = massiv [ R / 2 - 1 ] ;
else
final = massiv [ R / 2 ] ;
cout << final << endl ;
long long n, arr [ 1001 ] ;
cin >> n ;
for ( long long i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
sort ( arr, arr + n ) ;
if ( n % 2 == 0 )
cout << arr [ ( n / 2 ) - 1 ] << endl ;
else
cout << arr [ n / 2 ] << endl ;
int a [ 1005 ] ;
int n ;
int sum = 0 ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort ( a, a + n ) ;
if ( n % 2 )
cout << a [ n / 2 ] << endl ;
else
cout << a [ n / 2 - 1 ] << endl ;
const int N = 100010 ;
int a [ N ] ;
int N ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort ( a + 1, a + n + 1 ) ;
cout << a [ ( n + 1 ) / 2 ] << " \n " ;
int n ;
cin >> n ;
vector < int > v ;
for ( int i = 0 ; i < n ; i ++ )
int x ;
cin >> x ;
v. push_back ( x ) ;
sort ( v. begin ( ), v. end ( ) + n ) ;
int turn = 0 ;
while ( v. size ( )!= 1 )
if ( turn % 2 == 0 )
v. erase ( v. begin ( ) ) ;
else
v. pop_back ( ) ;
turn = ( turn ++ ) % 2 ;
cout << v. first << endl ;
int n, a [ 1001 ] ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;
sort ( a + 1, a + n + 1 ) ;
if ( n % 2 == 0 )
cout << a [ n / 2 ] << endl ;
else
cout << a [ n / 2 + 1 ] << endl ;
long arr [ 1001 ] ;
int n, i, mid ;
cin >> n ;
for ( i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }
sort ( arr, arr + n ) ;
mid = ceil ( n / 2 ) ;
cout << arr [ mid - 1 ] << endl ;
const int maxn = 1e3 + 10 ;
int n ;
int a [ maxn ] ;
cin >> n ;
for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }
sort ( a + 1, a + n + 1 ) ;
cout << a [ ( n + 1 ) / 2 ] << endl ;
int n ;
cin >> n ;
vector < int > a ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort ( a. begin ( ), a. end ( ) ) ;
int idx = ( a. size ( ) - 1 ) / 2 ;
cout << a [ idx ] ;
int n ;
cin >> n ;
int a [ n ] ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
for ( int i = 0 ; i < n - 1 ; i ++ )
for ( int j = 0 ; j < n - i - 1 ; j ++ )
if ( a [ i ] > a [ j + 1 ] ) { swap ( b, b ) ; }
if ( n % 2 == 0 )
cout << a [ n / 2 - 1 ] << endl ;
else
cout << a [ n / 2 ] << endl ;
int n, a [ 1110 ] ;
cin >> n ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }
sort ( a, a + n ) ;
cout << a [ ( n - 1 ) / 2 ] << endl ;
int n ;
cin >> n ;
vector < int > v ( n ) ;
for ( int i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }
sort ( v. begin ( ), v. end ( ) ) ;
for ( int i = 0 ; i < n - 1 ; i ++ )
if ( i % 2!= 0 )
v. erase ( 0, 1 ) ;
else
v. pop_back ( ) ;
cout << v. first << endl ;